<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alis.Core.Physic</name>
    </assembly>
    <members>
        <member name="T:Alis.Core.Physic.Collision.Aabb">
            <summary>
                An axis aligned bounding box.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Aabb.LowerBound">
            <summary>
                The lower vertex.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Aabb.UpperBound">
            <summary>
                The upper vertex.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Aabb.IsValid">
            Verify that the bounds are sorted.
        </member>
        <member name="P:Alis.Core.Physic.Collision.Aabb.Center">
            Get the center of the AABB.
        </member>
        <member name="P:Alis.Core.Physic.Collision.Aabb.Extents">
            Get the extents of the AABB (half-widths).
        </member>
        <member name="M:Alis.Core.Physic.Collision.Aabb.Combine(Alis.Core.Physic.Collision.Aabb,Alis.Core.Physic.Collision.Aabb)">
            Combine two AABBs into this one.
        </member>
        <member name="M:Alis.Core.Physic.Collision.Aabb.Contains(Alis.Core.Physic.Collision.Aabb)">
            Does this aabb contain the provided AABB.
        </member>
        <member name="M:Alis.Core.Physic.Collision.Aabb.RayCast(Alis.Core.Physic.Collision.RayCastOutput@,Alis.Core.Physic.Collision.RayCastInput)">
            <summary>
                hello
            </summary>
            <param name="output"></param>
            <param name="input"></param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Bound">
            <summary>
                The bound class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Bound.ProxyId">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Bound.StabbingCount">
            <summary>
                The stabbing count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Bound.Value">
            <summary>
                The value
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Bound.IsLower">
            <summary>
                Gets the value of the is lower
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Bound.IsUpper">
            <summary>
                Gets the value of the is upper
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Bound.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The new bound</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.BoundValues">
            <summary>
                The bound values class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BoundValues.LowerValues">
            <summary>
                The lower values
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BoundValues.UpperValues">
            <summary>
                The upper values
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.BroadPhase">
            <summary>
                The broad phase class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.BroadphaseMax">
            <summary>
                The max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.Invalid">
            <summary>
                The broadphase max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.NullEdge">
            <summary>
                The broadphase max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.PairManager">
            <summary>
                The pair manager
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.ProxyPool">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.freeProxy">
            <summary>
                The free proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.Bounds">
            <summary>
                The bound
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.QueryResults">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.QuerySortKeys">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.QueryResultCount">
            <summary>
                The query result count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.WorldAabb">
            <summary>
                The world aabb
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.QuantizationFactor">
            <summary>
                The quantization factor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.ProxyCount">
            <summary>
                The proxy count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.TimeStamp">
            <summary>
                The time stamp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.IsValidate">
            <summary>
                The is validate
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.#ctor(Alis.Core.Physic.Collision.Aabb,Alis.Core.Physic.Collision.PairCallback)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.BroadPhase" /> class
            </summary>
            <param name="worldAabb">The world aabb</param>
            <param name="callback">The callback</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.InRange(Alis.Core.Physic.Collision.Aabb)">
            <summary>
                Describes whether this instance in range
            </summary>
            <param name="aabb">The aabb</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.CreateProxy(Alis.Core.Physic.Collision.Aabb,System.Object)">
            <summary>
                Creates the proxy using the specified aabb
            </summary>
            <param name="aabb">The aabb</param>
            <param name="userData">The user data</param>
            <returns>The proxy id</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DestroyProxy(System.Int32)">
            <summary>
                Destroys the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.MoveProxy(System.Int32,Alis.Core.Physic.Collision.Aabb)">
            <summary>
                Moves the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.Commit">
            <summary>
                Commits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.GetProxy(System.Int32)">
            <summary>
                Gets the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <returns>The proxy</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.Query(Alis.Core.Physic.Collision.Aabb,System.Object[],System.Int32)">
            <summary>
                Queries the aabb
            </summary>
            <param name="aabb">The aabb</param>
            <param name="userData">The user data</param>
            <param name="maxCount">The max count</param>
            <returns>The count</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.QuerySegment(Alis.Core.Physic.Collision.Segment,System.Object[],System.Int32,Alis.Core.Physic.Collision.SortKeyFunc)">
            <summary>
                Query a segment for overlapping proxies, returns the user data and
                the count, up to the supplied maximum count.
                If sortKey is provided, then it is a function mapping from proxy user Data to distances along the segment (between
                0 ans 1)
                Then the returned proxies are sorted on that, before being truncated to maxCount
                The sortKey of a proxy is assumed to be larger than the closest point inside the proxy along the segment, this
                allows for early exits
                Proxies with a negative sortKey are discarded
            </summary>
            <param name="segment"></param>
            <param name="userData"></param>
            <param name="maxCount"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.Validate">
            <summary>
                Validates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.ComputeBounds(System.UInt16[]@,System.UInt16[]@,Alis.Core.Physic.Collision.Aabb)">
            <summary>
                Computes the bounds using the specified lower values
            </summary>
            <param name="lowerValues">The lower values</param>
            <param name="upperValues">The upper values</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.TestOverlap(Alis.Core.Physic.Collision.Proxy,Alis.Core.Physic.Collision.Proxy)">
            <summary>
                Describes whether this instance test overlap
            </summary>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.TestOverlap(Alis.Core.Physic.Collision.BoundValues,Alis.Core.Physic.Collision.Proxy)">
            <summary>
                Describes whether this instance test overlap
            </summary>
            <param name="b">The </param>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.Query(System.Int32@,System.Int32@,System.UInt16,System.UInt16,Alis.Core.Physic.Collision.Bound[],System.Int32,System.Int32)">
            <summary>
                Queries the lower query out
            </summary>
            <param name="lowerQueryOut">The lower query out</param>
            <param name="upperQueryOut">The upper query out</param>
            <param name="lowerValue">The lower value</param>
            <param name="upperValue">The upper value</param>
            <param name="bounds">The bounds</param>
            <param name="boundCount">The bound count</param>
            <param name="axis">The axis</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IncrementOverlapCount(System.Int32)">
            <summary>
                Increments the overlap count using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IncrementTimeStamp">
            <summary>
                Increments the time stamp
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.AddProxyResult(System.UInt16,Alis.Core.Physic.Collision.Proxy,System.Int32,Alis.Core.Physic.Collision.SortKeyFunc)">
            <summary>
                Adds the proxy result using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <param name="proxy">The proxy</param>
            <param name="maxCount">The max count</param>
            <param name="sortKey">The sort key</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.BinarySearch(Alis.Core.Physic.Collision.Bound[],System.Int32,System.UInt16)">
            <summary>
                Binaries the search using the specified bounds
            </summary>
            <param name="bounds">The bounds</param>
            <param name="count">The count</param>
            <param name="value">The value</param>
            <returns>The low</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.BufferedPair">
            <summary>
                The buffered pair
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BufferedPair.ProxyId1">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BufferedPair.ProxyId2">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ClipVertex">
            <summary>
                Used for computing contact manifolds.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ClipVertex.V">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ClipVertex.Id">
            <summary>
                The id
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Collision">
            <summary>
                The collision class
            </summary>
            <summary>
                The collision class
            </summary>
            <summary>
                The collision class
            </summary>
            <summary>
                The collision class
            </summary>
            <summary>
                The collision class
            </summary>
            <summary>
                The collision class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.CollideCircles(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the circles using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="circle1">The circle</param>
            <param name="xf1">The xf</param>
            <param name="circle2">The circle</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.CollidePolygonAndCircle(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the polygon and circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="polygon">The polygon</param>
            <param name="xf1">The xf</param>
            <param name="circle">The circle</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.CollideEdgeAndCircle(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.EdgeShape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the edge and circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="edge">The edge</param>
            <param name="transformA">The transform</param>
            <param name="circle">The circle</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.CollidePolyAndEdge(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.EdgeShape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the poly and edge using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="polygon">The polygon</param>
            <param name="transformA">The transform</param>
            <param name="edge">The edge</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.EdgeSeparation(Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Aspect.Math.XForm,System.Int32,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Aspect.Math.XForm)">
            <summary>
                Find the separation between poly1 and poly2 for a give edge normal on poly1.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.FindMaxSeparation(System.Int32@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Aspect.Math.XForm)">
            <summary>
                Find the max separation between poly1 and poly2 using edge normals from poly1.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.FindIncidentEdge(Alis.Core.Physic.Collision.ClipVertex[]@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Aspect.Math.XForm,System.Int32,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Aspect.Math.XForm)">
            <summary>
                Finds the incident edge using the specified c
            </summary>
            <param name="c">The </param>
            <param name="poly1">The poly</param>
            <param name="xf1">The xf</param>
            <param name="edge1">The edge</param>
            <param name="poly2">The poly</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.CollidePolygons(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the polygons using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="polyA">The poly</param>
            <param name="xfA">The xf</param>
            <param name="polyB">The poly</param>
            <param name="xfB">The xf</param>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Collision.NullFeature">
            <summary>
                The uchar max
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.TestOverlap(Alis.Core.Physic.Collision.Aabb,Alis.Core.Physic.Collision.Aabb)">
            <summary>
                Describes whether test overlap
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.GetPointStates(Alis.Core.Physic.Collision.PointState[],Alis.Core.Physic.Collision.PointState[],Alis.Core.Physic.Collision.Manifold,Alis.Core.Physic.Collision.Manifold)">
            <summary>
                Compute the point states given two manifolds. The states pertain to the transition from manifold1
                to manifold2. So state1 is either persist or remove while state2 is either add or persist.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.ClipSegmentToLine(Alis.Core.Physic.Collision.ClipVertex[]@,Alis.Core.Physic.Collision.ClipVertex[],Alis.Aspect.Math.Vector2,System.Single)">
            <summary>
                Clips the segment to line using the specified v out
            </summary>
            <param name="vOut">The out</param>
            <param name="vIn">The in</param>
            <param name="normal">The normal</param>
            <param name="offset">The offset</param>
            <returns>The num out</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.Distance(Alis.Core.Physic.Collision.DistanceOutput@,Alis.Core.Physic.Collision.SimplexCache@,Alis.Core.Physic.Collision.DistanceInput@,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Core.Physic.Collision.Shapes.Shape)">
            <summary>
                Compute the closest points between two shapes. Supports any combination of:
                CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output.
                On the first call set SimplexCache.Count to zero.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Collision.MaxToiIters">
            <summary>
                The max toi iters
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Collision.MaxToiRootIters">
            <summary>
                The max toi root iters
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Collision.TimeOfImpact(Alis.Core.Physic.Collision.ToiInput,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Core.Physic.Collision.Shapes.Shape)">
            <summary>
                Compute the time when two shapes begin to touch or touch at a closer distance.
                TOI considers the shape radii. It attempts to have the radii overlap by the tolerance.
                Iterations terminate with the overlap is within 0.5 * tolerance. The tolerance should be
                smaller than sum of the shape radii.
                Warning the sweeps must have the same time interval.
            </summary>
            <returns>
                The fraction between [0,1] in which the shapes first touch.
                fraction=0 means the shapes begin touching/overlapped, and fraction=1 means the shapes don't touch.
            </returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactId">
            <summary>
                Contact ids to facilitate warm starting.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactId.Features">
            <summary>
                The features
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactId.Key">
            <summary>
                Used to quickly compare contact ids.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.DistanceInput">
            <summary>
                Input for Distance.
                You have to option to use the shape radii
                in the computation.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.DistanceInput.TransformA">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.DistanceInput.TransformB">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.DistanceInput.UseRadii">
            <summary>
                The use radii
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.DistanceOutput">
            <summary>
                Output for Distance.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.DistanceOutput.PointA">
            <summary>
                Closest point on shapeA.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.DistanceOutput.PointB">
            <summary>
                Closest point on shapeB.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.DistanceOutput.Distance">
            <summary>
                The distance
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.DistanceOutput.Iterations">
            <summary>
                Number of GJK iterations used.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Features">
            <summary>
                The features that intersect to form the contact point.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Features.ReferenceEdge">
            <summary>
                The edge that defines the outward contact normal.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Features.IncidentEdge">
            <summary>
                The edge most anti-parallel to the reference edge.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Features.IncidentVertex">
            <summary>
                The vertex (0 or 1) on the incident edge that was clipped.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Features.Flip">
            <summary>
                A value of 1 indicates that the reference edge is on shape2.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.IndexArray">
            <summary>
                The index array
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.IndexArray.i0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.IndexArray.i1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.IndexArray.i2">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.IndexArray.Item(System.Int32)">
            <summary>
                The value
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Manifold">
            <summary>
                A manifold for two touching convex shapes.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Manifold.LocalPlaneNormal">
            <summary>
                The local plane normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Manifold.LocalPoint">
            <summary>
                Usage depends on manifold type.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Manifold.PointCount">
            <summary>
                The number of manifold points.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Manifold.Points">
            <summary>
                The points of contact.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Manifold.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Manifold.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Manifold" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Manifold.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The new manifold</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ManifoldPoint">
            <summary>
                A manifold point is a contact point belonging to a contact
                manifold. It holds details related to the geometry and dynamics
                of the contact points.
                The local point usage depends on the manifold type:
                -Circles: the local center of circleB
                -FaceA: the local center of cirlceB or the clip point of polygonB
                -FaceB: the clip point of polygonA
                This structure is stored across time steps, so we keep it small.
                Note: the impulses are used for internal caching and may not
                provide reliable contact forces, especially for high speed collisions.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ManifoldPoint.Id">
            <summary>
                Uniquely identifies a contact point between two shapes.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ManifoldPoint.LocalPoint">
            <summary>
                Usage depends on manifold type.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ManifoldPoint.NormalImpulse">
            <summary>
                The non-penetration impulse.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ManifoldPoint.TangentImpulse">
            <summary>
                The friction impulse.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ManifoldPoint.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The new point</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ManifoldType">
            <summary>
                The manifold type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ManifoldType.Circles">
            <summary>
                The circles manifold type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ManifoldType.FaceA">
            <summary>
                The face manifold type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ManifoldType.FaceB">
            <summary>
                The face manifold type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Pair">
            <summary>
                The pair class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Pair.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Pair.ProxyId1">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Pair.ProxyId2">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Pair.Status">
            <summary>
                The status
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Pair.UserData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Pair.SetBuffered">
            <summary>
                Sets the buffered
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Pair.ClearBuffered">
            <summary>
                Clears the buffered
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Pair.IsBuffered">
            <summary>
                Describes whether this instance is buffered
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Pair.SetRemoved">
            <summary>
                Sets the removed
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Pair.ClearRemoved">
            <summary>
                Clears the removed
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Pair.IsRemoved">
            <summary>
                Describes whether this instance is removed
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Pair.SetFinal">
            <summary>
                Sets the final
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Pair.IsFinal">
            <summary>
                Describes whether this instance is final
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.PairCallback">
            <summary>
                The pair callback class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairCallback.PairAdded(System.Object,System.Object)">
            <summary>
                Pairs the added using the specified proxy user data 1
            </summary>
            <param name="proxyUserData1">The proxy user data</param>
            <param name="proxyUserData2">The proxy user data</param>
            <returns>The object</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairCallback.PairRemoved(System.Object,System.Object,System.Object)">
            <summary>
                Pairs the removed using the specified proxy user data 1
            </summary>
            <param name="proxyUserData1">The proxy user data</param>
            <param name="proxyUserData2">The proxy user data</param>
            <param name="pairUserData">The pair user data</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.PairManager">
            <summary>
                The pair manager class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.NullPair">
            <summary>
                The ushrt max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.NullProxy">
            <summary>
                The ushrt max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.TableCapacity">
            <summary>
                The max pairs
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.TableMask">
            <summary>
                The table capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.HashTable">
            <summary>
                The table capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.PairBuffer">
            <summary>
                The max pairs
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.Pairs">
            <summary>
                The max pairs
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.BroadPhase">
            <summary>
                The broad phase
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.Callback">
            <summary>
                The callback
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.FreePair">
            <summary>
                The free pair
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.PairBufferCount">
            <summary>
                The pair buffer count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairManager.PairCount">
            <summary>
                The pair count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.PairManager" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.Initialize(Alis.Core.Physic.Collision.BroadPhase,Alis.Core.Physic.Collision.PairCallback)">
            <summary>
                Initializes the broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="callback">The callback</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.AddBufferedPair(System.Int32,System.Int32)">
            <summary>
                Adds the buffered pair using the specified id 1
            </summary>
            <param name="id1">The id</param>
            <param name="id2">The id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.RemoveBufferedPair(System.Int32,System.Int32)">
            <summary>
                Removes the buffered pair using the specified id 1
            </summary>
            <param name="id1">The id</param>
            <param name="id2">The id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.Commit">
            <summary>
                Commits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.Find(System.Int32,System.Int32)">
            <summary>
                Finds the proxy id 1
            </summary>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <returns>The pair</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.Find(System.Int32,System.Int32,System.UInt32)">
            <summary>
                Finds the proxy id 1
            </summary>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <param name="hash">The hash</param>
            <returns>The pair</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.AddPair(System.Int32,System.Int32)">
            <summary>
                Adds the pair using the specified proxy id 1
            </summary>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <returns>The pair</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.RemovePair(System.Int32,System.Int32)">
            <summary>
                Removes the pair using the specified proxy id 1
            </summary>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <returns>The object</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.ValidateBuffer">
            <summary>
                Validates the buffer
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.ValidateTable">
            <summary>
                Validates the table
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.Hash(System.UInt32,System.UInt32)">
            <summary>
                Hashes the proxy id 1
            </summary>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <returns>The key</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.Equals(Alis.Core.Physic.Collision.Pair,System.Int32,System.Int32)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="pair">The pair</param>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.Equals(Alis.Core.Physic.Collision.BufferedPair@,Alis.Core.Physic.Collision.BufferedPair@)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="pair1">The pair</param>
            <param name="pair2">The pair</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.PairManager.BufferedPairSortPredicate(Alis.Core.Physic.Collision.BufferedPair,Alis.Core.Physic.Collision.BufferedPair)">
            <summary>
                Buffereds the pair sort predicate using the specified pair 1
            </summary>
            <param name="pair1">The pair</param>
            <param name="pair2">The pair</param>
            <returns>The int</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.PairStatus">
            <summary>
                The pair status enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairStatus.PairBuffered">
            <summary>
                The pair buffered pair status
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairStatus.PairRemoved">
            <summary>
                The pair removed pair status
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PairStatus.PairFinal">
            <summary>
                The pair final pair status
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.PointState">
            <summary>
                This is used for determining the state of contact points.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PointState.NullState">
            <summary>
                Point does not exist.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PointState.AddState">
            <summary>
                Point was added in the update.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PointState.PersistState">
            <summary>
                Point persisted across the update.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.PointState.RemoveState">
            <summary>
                Point was removed in the update.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Proxy">
            <summary>
                The proxy class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Proxy.LowerBounds">
            <summary>
                The upper bounds
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Proxy.UpperBounds">
            <summary>
                The upper bounds
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Proxy.OverlapCount">
            <summary>
                The overlap count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Proxy.TimeStamp">
            <summary>
                The time stamp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Proxy.UserData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Proxy.Next">
            <summary>
                Gets or sets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Proxy.IsValid">
            <summary>
                Gets the value of the is valid
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.RayCastInput">
            <summary>
                Ray-cast input data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCastInput.P1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCastInput.P2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCastInput.MaxFraction">
            <summary>
                The max fraction
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.RayCastOutput">
            <summary>
                Ray-cast output data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCastOutput.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCastOutput.Fraction">
            <summary>
                The fraction
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCastOutput.Hit">
            <summary>
                The hit
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Segment">
            <summary>
                A line segment.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Segment.TestSegment(System.Single@,Alis.Aspect.Math.Vector2@,Alis.Core.Physic.Collision.Segment,System.Single)">
            <summary>
                Ray cast against this segment with another segment.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Segment.P1">
            <summary>
                The starting point.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Segment.P2">
            <summary>
                The ending point.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.SeparationFunction">
            <summary>
                The separation function
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.SeparationFunction.Type">
            <summary>
                The type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SeparationFunction.Type.Points">
            <summary>
                The points type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SeparationFunction.Type.FaceA">
            <summary>
                The face type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SeparationFunction.Type.FaceB">
            <summary>
                The face type
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.SeparationFunction.Initialize(Alis.Core.Physic.Collision.SimplexCache*,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm)">
            <summary>
                Initializes the cache
            </summary>
            <param name="cache">The cache</param>
            <param name="shapeA">The shape</param>
            <param name="transformA">The transform</param>
            <param name="shapeB">The shape</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.SeparationFunction.Evaluate(Alis.Aspect.Math.XForm,Alis.Aspect.Math.XForm)">
            <summary>
                Evaluates the transform a
            </summary>
            <param name="transformA">The transform</param>
            <param name="transformB">The transform</param>
            <returns>The float</returns>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SeparationFunction.ShapeA">
            <summary>
                The shape
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SeparationFunction.ShapeB">
            <summary>
                The shape
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SeparationFunction.FaceType">
            <summary>
                The face type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SeparationFunction.LocalPoint">
            <summary>
                The local point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SeparationFunction.Axis">
            <summary>
                The axis
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.CircleShape">
            <summary>
                A circle shape.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.CircleShape.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.CircleShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.CircleShape.VertexCount">
            <summary>
                Get the vertex count.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.TestPoint(Alis.Aspect.Math.XForm,Alis.Aspect.Math.Vector2)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.TestSegment(Alis.Aspect.Math.XForm,System.Single@,Alis.Aspect.Math.Vector2@,Alis.Core.Physic.Collision.Segment,System.Single)">
            <summary>
                Tests the segment using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="lambda">The lambda</param>
            <param name="normal">The normal</param>
            <param name="segment">The segment</param>
            <param name="maxLambda">The max lambda</param>
            <returns>The segment collide</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeAabb(Alis.Core.Physic.Collision.Aabb@,Alis.Aspect.Math.XForm)">
            <summary>
                Computes the aabb using the specified aabb
            </summary>
            <param name="aabb">The aabb</param>
            <param name="transform">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeMass(Alis.Core.Physic.Collision.Shapes.MassData@,System.Single)">
            <summary>
                Computes the mass using the specified mass data
            </summary>
            <param name="massData">The mass data</param>
            <param name="density">The density</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeSubmergedArea(Alis.Aspect.Math.Vector2,System.Single,Alis.Aspect.Math.XForm,Alis.Aspect.Math.Vector2@)">
            <summary>
                Computes the submerged area using the specified normal
            </summary>
            <param name="normal">The normal</param>
            <param name="offset">The offset</param>
            <param name="xf">The xf</param>
            <param name="c">The </param>
            <returns>The area</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.GetSupport(Alis.Aspect.Math.Vector2)">
            <summary>
                Get the supporting vertex index in the given direction.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.GetSupportVertex(Alis.Aspect.Math.Vector2)">
            <summary>
                Get the supporting vertex in the given direction.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.GetVertex(System.Int32)">
            <summary>
                Get a vertex by index. Used by Distance.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeSweepRadius(Alis.Aspect.Math.Vector2)">
            <summary>
                Computes the sweep radius using the specified pivot
            </summary>
            <param name="pivot">The pivot</param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.EdgeShape">
            <summary>
                The edge shape class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Collision.Shapes.Shape" />
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.EdgeShape.NextEdge">
            <summary>
                The next edge
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.EdgeShape.PrevEdge">
            <summary>
                The prev edge
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.EdgeShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Length">
            <summary>
                Gets the value of the length
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Vertex1">
            <summary>
                Gets the value of the vertex 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Vertex2">
            <summary>
                Gets the value of the vertex 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.NormalVector">
            <summary>
                Gets the value of the normal vector
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.DirectionVector">
            <summary>
                Gets the value of the direction vector
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Corner1Vector">
            <summary>
                Gets the value of the corner 1 vector
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Corner2Vector">
            <summary>
                Gets the value of the corner 2 vector
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Corner1IsConvex">
            <summary>
                Gets the value of the corner 1 is convex
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Corner2IsConvex">
            <summary>
                Gets the value of the corner 2 is convex
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.Set(Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2)">
            <summary>
                Sets the v 1
            </summary>
            <param name="v1">The </param>
            <param name="v2">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.TestPoint(Alis.Aspect.Math.XForm,Alis.Aspect.Math.Vector2)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.TestSegment(Alis.Aspect.Math.XForm,System.Single@,Alis.Aspect.Math.Vector2@,Alis.Core.Physic.Collision.Segment,System.Single)">
            <summary>
                Tests the segment using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="lambda">The lambda</param>
            <param name="normal">The normal</param>
            <param name="segment">The segment</param>
            <param name="maxLambda">The max lambda</param>
            <returns>The segment collide</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.ComputeAabb(Alis.Core.Physic.Collision.Aabb@,Alis.Aspect.Math.XForm)">
            <summary>
                Computes the aabb using the specified aabb
            </summary>
            <param name="aabb">The aabb</param>
            <param name="transform">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.ComputeMass(Alis.Core.Physic.Collision.Shapes.MassData@,System.Single)">
            <summary>
                Computes the mass using the specified mass data
            </summary>
            <param name="massData">The mass data</param>
            <param name="density">The density</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.SetPrevEdge(Alis.Core.Physic.Collision.Shapes.EdgeShape,Alis.Aspect.Math.Vector2,System.Boolean)">
            <summary>
                Sets the prev edge using the specified edge
            </summary>
            <param name="edge">The edge</param>
            <param name="cornerDir">The corner dir</param>
            <param name="convex">The convex</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.SetNextEdge(Alis.Core.Physic.Collision.Shapes.EdgeShape,Alis.Aspect.Math.Vector2,System.Boolean)">
            <summary>
                Sets the next edge using the specified edge
            </summary>
            <param name="edge">The edge</param>
            <param name="cornerDir">The corner dir</param>
            <param name="convex">The convex</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.ComputeSubmergedArea(Alis.Aspect.Math.Vector2,System.Single,Alis.Aspect.Math.XForm,Alis.Aspect.Math.Vector2@)">
            <summary>
                Computes the submerged area using the specified normal
            </summary>
            <param name="normal">The normal</param>
            <param name="offset">The offset</param>
            <param name="xf">The xf</param>
            <param name="c">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.GetSupport(Alis.Aspect.Math.Vector2)">
            <summary>
                Gets the support using the specified d
            </summary>
            <param name="d">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.GetSupportVertex(Alis.Aspect.Math.Vector2)">
            <summary>
                Gets the support vertex using the specified d
            </summary>
            <param name="d">The </param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.GetVertex(System.Int32)">
            <summary>
                Gets the vertex using the specified index
            </summary>
            <param name="index">The index</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.ComputeSweepRadius(Alis.Aspect.Math.Vector2)">
            <summary>
                Computes the sweep radius using the specified pivot
            </summary>
            <param name="pivot">The pivot</param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.MassData">
            <summary>
                This holds the mass data computed for a shape.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.MassData.Mass">
            <summary>
                The mass of the shape, usually in kilograms.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.MassData.Center">
            <summary>
                The position of the shape's centroid relative to the shape's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.MassData.I">
            <summary>
                The rotational inertia of the shape.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.PolygonShape">
            <summary>
                A convex polygon. It is assumed that the interior of the polygon is to the left of each edge.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.PolygonShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.PolygonShape.Centroid">
            <summary>
                The centroid
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.PolygonShape.Normals">
            <summary>
                The max polygon vertices
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.PolygonShape.VertexCount">
            <summary>
                Gets the value of the vertex count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.PolygonShape.Vertices">
            <summary>
                Gets the value of the vertices
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.Set(Alis.Aspect.Math.Vector2[],System.Int32)">
            <summary>
                Copy vertices. This assumes the vertices define a convex polygon.
                It is assumed that the exterior is the the right of each edge.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.SetAsBox(System.Single,System.Single)">
            <summary>
                Build vertices to represent an axis-aligned box.
            </summary>
            <param name="hx">The half-width</param>
            <param name="hy">The half-height.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.SetAsBox(System.Single,System.Single,Alis.Aspect.Math.Vector2,System.Single)">
            <summary>
                Build vertices to represent an oriented box.
            </summary>
            <param name="hx">The half-width</param>
            <param name="hy">The half-height.</param>
            <param name="center">The center of the box in local coordinates.</param>
            <param name="angle">The rotation of the box in local coordinates.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.SetAsEdge(Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2)">
            <summary>
                Sets the as edge using the specified v 1
            </summary>
            <param name="v1">The </param>
            <param name="v2">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.TestPoint(Alis.Aspect.Math.XForm,Alis.Aspect.Math.Vector2)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="xf">The xf</param>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.TestSegment(Alis.Aspect.Math.XForm,System.Single@,Alis.Aspect.Math.Vector2@,Alis.Core.Physic.Collision.Segment,System.Single)">
            <summary>
                Tests the segment using the specified xf
            </summary>
            <param name="xf">The xf</param>
            <param name="lambda">The lambda</param>
            <param name="normal">The normal</param>
            <param name="segment">The segment</param>
            <param name="maxLambda">The max lambda</param>
            <returns>The segment collide</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeAabb(Alis.Core.Physic.Collision.Aabb@,Alis.Aspect.Math.XForm)">
            <summary>
                Computes the aabb using the specified aabb
            </summary>
            <param name="aabb">The aabb</param>
            <param name="xf">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeMass(Alis.Core.Physic.Collision.Shapes.MassData@,System.Single)">
            <summary>
                Computes the mass using the specified mass data
            </summary>
            <param name="massData">The mass data</param>
            <param name="denstity">The denstity</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeSubmergedArea(Alis.Aspect.Math.Vector2,System.Single,Alis.Aspect.Math.XForm,Alis.Aspect.Math.Vector2@)">
            <summary>
                Computes the submerged area using the specified normal
            </summary>
            <param name="normal">The normal</param>
            <param name="offset">The offset</param>
            <param name="xf">The xf</param>
            <param name="c">The </param>
            <returns>The area</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeSweepRadius(Alis.Aspect.Math.Vector2)">
            <summary>
                Computes the sweep radius using the specified pivot
            </summary>
            <param name="pivot">The pivot</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.GetSupport(Alis.Aspect.Math.Vector2)">
            <summary>
                Get the supporting vertex index in the given direction.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.GetSupportVertex(Alis.Aspect.Math.Vector2)">
            <summary>
                Gets the support vertex using the specified d
            </summary>
            <param name="d">The </param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.GetVertex(System.Int32)">
            <summary>
                Gets the vertex using the specified index
            </summary>
            <param name="index">The index</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeCentroid(Alis.Aspect.Math.Vector2[],System.Int32)">
            <summary>
                Computes the centroid using the specified vs
            </summary>
            <param name="vs">The vs</param>
            <param name="count">The count</param>
            <returns>The </returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.SegmentCollide">
            <summary>
                Returns code from TestSegment
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.SegmentCollide.StartInsideCollide">
            <summary>
                The start inside collide segment collide
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.SegmentCollide.MissCollide">
            <summary>
                The miss collide segment collide
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.SegmentCollide.HitCollide">
            <summary>
                The hit collide segment collide
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.Shape">
            <summary>
                A shape is used for collision detection. You can create a shape however you like.
                Shapes used for simulation in World are created automatically when a Fixture is created.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.Shape.Radius">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.Shape.Type">
            <summary>
                The unknown shape
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.Shape" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.TestPoint(Alis.Aspect.Math.XForm,Alis.Aspect.Math.Vector2)">
            <summary>
                Test a point for containment in this shape. This only works for convex shapes.
            </summary>
            <param name="xf">The shape world transform.</param>
            <param name="p">A point in world coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.TestSegment(Alis.Aspect.Math.XForm,System.Single@,Alis.Aspect.Math.Vector2@,Alis.Core.Physic.Collision.Segment,System.Single)">
            <summary>
                Perform a ray cast against this shape.
            </summary>
            <param name="xf">The shape world transform.</param>
            <param name="lambda">
                Returns the hit fraction. You can use this to compute the contact point
                p = (1 - lambda) * segment.P1 + lambda * segment.P2.
            </param>
            <param name="normal">
                Returns the normal at the contact point. If there is no intersection,
                the normal is not set.
            </param>
            <param name="segment">Defines the begin and end point of the ray cast.</param>
            <param name="maxLambda">A number typically in the range [0,1].</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.ComputeAabb(Alis.Core.Physic.Collision.Aabb@,Alis.Aspect.Math.XForm)">
            <summary>
                Given a transform, compute the associated axis aligned bounding box for this shape.
            </summary>
            <param name="aabb">Returns the axis aligned box.</param>
            <param name="xf">The world transform of the shape.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.ComputeMass(Alis.Core.Physic.Collision.Shapes.MassData@,System.Single)">
            <summary>
                Compute the mass properties of this shape using its dimensions and density.
                The inertia tensor is computed about the local origin, not the centroid.
            </summary>
            <param name="massData">Returns the mass data for this shape</param>
            <param name="density"></param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.ComputeSubmergedArea(Alis.Aspect.Math.Vector2,System.Single,Alis.Aspect.Math.XForm,Alis.Aspect.Math.Vector2@)">
            <summary>
                Compute the volume and centroid of this shape intersected with a half plane.
            </summary>
            <param name="normal">Normal the surface normal.</param>
            <param name="offset">Offset the surface offset along normal.</param>
            <param name="xf">The shape transform.</param>
            <param name="c">Returns the centroid.</param>
            <returns>The total volume less than offset along normal.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.ComputeSweepRadius(Alis.Aspect.Math.Vector2)">
            <summary>
                Compute the sweep radius. This is used for conservative advancement (continuous collision detection).
            </summary>
            <param name="pivot">Pivot is the pivot point for rotation.</param>
            <returns>The distance of the furthest point from the pivot.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.GetVertex(System.Int32)">
            <summary>
                Gets the vertex using the specified index
            </summary>
            <param name="index">The index</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.GetSupport(Alis.Aspect.Math.Vector2)">
            <summary>
                Gets the support using the specified d
            </summary>
            <param name="d">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.GetSupportVertex(Alis.Aspect.Math.Vector2)">
            <summary>
                Gets the support vertex using the specified d
            </summary>
            <param name="d">The </param>
            <returns>The vec</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.ShapeType">
            <summary>
                The various collision shape types supported by Box2D.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.UnknownShape">
            <summary>
                The unknown shape shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.CircleShape">
            <summary>
                The circle shape shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.PolygonShape">
            <summary>
                The polygon shape shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.EdgeShape">
            <summary>
                The edge shape shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.ShapeTypeCount">
            <summary>
                The shape type count shape type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Simplex">
            <summary>
                The simplex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Simplex.V1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Simplex.V2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Simplex.V3">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Simplex.Count">
            <summary>
                The count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Simplex.ReadCache(Alis.Core.Physic.Collision.SimplexCache*,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm)">
            <summary>
                Reads the cache using the specified cache
            </summary>
            <param name="cache">The cache</param>
            <param name="shapeA">The shape</param>
            <param name="transformA">The transform</param>
            <param name="shapeB">The shape</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Simplex.WriteCache(Alis.Core.Physic.Collision.SimplexCache*)">
            <summary>
                Writes the cache using the specified cache
            </summary>
            <param name="cache">The cache</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Simplex.GetClosestPoint">
            <summary>
                Gets the closest point
            </summary>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Simplex.GetWitnessPoints(Alis.Aspect.Math.Vector2*,Alis.Aspect.Math.Vector2*)">
            <summary>
                Gets the witness points using the specified p a
            </summary>
            <param name="pA">The </param>
            <param name="pB">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Simplex.GetMetric">
            <summary>
                Gets the metric
            </summary>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Simplex.Solve2">
            <summary>
                Solves the 2
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Simplex.Solve3">
            <summary>
                Solves the 3
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.SimplexCache">
            <summary>
                Used to warm start Distance.
                Set count to zero on first call.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SimplexCache.Metric">
            <summary>
                Length or area.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SimplexCache.Count">
            <summary>
                The count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SimplexCache.IndexA">
            <summary>
                Vertices on shape A.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SimplexCache.IndexB">
            <summary>
                Vertices on shape B.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.SimplexVertex">
            <summary>
                The simplex vertex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SimplexVertex.Wa">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SimplexVertex.Wb">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SimplexVertex.W">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SimplexVertex.A">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SimplexVertex.IndexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.SimplexVertex.IndexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.SortKeyFunc">
            <summary>
                The sort key func
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ToiInput">
            <summary>
                Inpute parameters for TimeOfImpact
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ToiInput.SweepA">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ToiInput.SweepB">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ToiInput.SweepRadiusA">
            <summary>
                The sweep radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ToiInput.SweepRadiusB">
            <summary>
                The sweep radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ToiInput.Tolerance">
            <summary>
                The tolerance
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.WorldManifold">
            <summary>
                This is used to compute the current state of a contact manifold.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.WorldManifold.Points">
            <summary>
                World contact point (point of intersection).
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.WorldManifold.Normal">
            <summary>
                World vector pointing from A to B.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.WorldManifold.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The new manifold</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.WorldManifold.Initialize(Alis.Core.Physic.Collision.Manifold,Alis.Aspect.Math.XForm,System.Single,Alis.Aspect.Math.XForm,System.Single)">
            Evaluate the manifold with supplied transforms. This assumes
            modest motion from the original state. This does not change the
            point count, impulses, etc. The radii must come from the shapes
            that generated the manifold.
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Body">
            <summary>
                A rigid body. These are created via World.CreateBody.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.world">
            <summary>
                The world
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.AngularDamping">
            <summary>
                The angular damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.AngularVelocity">
            <summary>
                The angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.ContactList">
            <summary>
                The contact list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.ControllerList">
            <summary>
                The controller list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.FixtureCount">
            <summary>
                The fixture count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.FixtureList">
            <summary>
                The fixture list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Flags">
            <summary>
                The flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Force">
            <summary>
                The force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.I">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.InvI">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.InvMass">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.IslandIndex">
            <summary>
                The island index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.JointList">
            <summary>
                The joint list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.LinearDamping">
            <summary>
                The linear damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.LinearVelocity">
            <summary>
                The linear velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.SleepTime">
            <summary>
                The sleep time
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Sweep">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Torque">
            <summary>
                The torque
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Xf">
            <summary>
                The xf
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.#ctor(Alis.Core.Physic.Dynamics.BodyDef,Alis.Core.Physic.Dynamics.World)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Body" /> class
            </summary>
            <param name="bd">The bd</param>
            <param name="world">The world</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SynchronizeFixtures">
            <summary>
                Describes whether this instance synchronize fixtures
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.IsConnected(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Describes whether this instance is connected
            </summary>
            <param name="other">The other</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.CreateFixture(Alis.Core.Physic.Dynamics.FixtureDef)">
            <summary>
                Creates a fixture and attach it to this body.
                @warning This function is locked during callbacks.
            </summary>
            <param name="def">The fixture definition.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.DestroyFixture(Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Destroy a fixture. This removes the fixture from the broad-phase and
                therefore destroys any contacts associated with this fixture. All fixtures
                attached to a body are implicitly destroyed when the body is destroyed.
                @warning This function is locked during callbacks.
            </summary>
            <param name="fixture">The fixture to be removed.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetMass(Alis.Core.Physic.Collision.Shapes.MassData)">
            <summary>
                Set the mass properties. Note that this changes the center of mass position.
                If you are not sure how to compute mass properties, use SetMassFromShapes.
                The inertia tensor is assumed to be relative to the center of mass.
            </summary>
            <param name="massData">The mass properties.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetMassFromShapes">
            <summary>
                Compute the mass properties from the attached shapes. You typically call this
                after adding all the shapes. If you add or remove shapes later, you may want
                to call this again. Note that this changes the center of mass position.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetXForm(Alis.Aspect.Math.Vector2,System.Single)">
            <summary>
                Set the position of the body's origin and rotation (radians).
                This breaks any contacts and wakes the other bodies.
            </summary>
            <param name="position">
                The new world position of the body's origin (not necessarily
                the center of mass).
            </param>
            <param name="angle">The new world rotation angle of the body in radians.</param>
            <returns>
                Return false if the movement put a shape outside the world. In this case the
                body is automatically frozen.
            </returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetXForm(Alis.Aspect.Math.XForm)">
            <summary>
                Set the position of the body's origin and rotation (radians).
                This breaks any contacts and wakes the other bodies.
                Note this is less efficient than the other overload - you should use that
                if the angle is available.
            </summary>
            <param name="xf">The transform of position and angle to set the body to.</param>
            <returns>
                False if the movement put a shape outside the world. In this case the
                body is automatically frozen.
            </returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetXForm">
            <summary>
                Get the body transform for the body's origin.
            </summary>
            <returns>Return the world transform of the body's origin.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetPosition(Alis.Aspect.Math.Vector2)">
            <summary>
                Set the world body origin position.
            </summary>
            <param name="position">The new position of the body.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetAngle(System.Single)">
            <summary>
                Set the world body angle.
            </summary>
            <param name="angle">The new angle of the body.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetPosition">
            <summary>
                Get the world body origin position.
            </summary>
            <returns>Return the world position of the body's origin.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetAngle">
            <summary>
                Get the angle in radians.
            </summary>
            <returns>Return the current world rotation angle in radians.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldCenter">
            <summary>
                Get the world position of the center of mass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalCenter">
            <summary>
                Get the local position of the center of mass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetLinearVelocity(Alis.Aspect.Math.Vector2)">
            <summary>
                Set the linear velocity of the center of mass.
            </summary>
            <param name="v">The new linear velocity of the center of mass.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocity">
            <summary>
                Get the linear velocity of the center of mass.
            </summary>
            <returns>Return the linear velocity of the center of mass.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetAngularVelocity(System.Single)">
            <summary>
                Sets the angular velocity.
            </summary>
            <param name="w">The w.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetAngularVelocity">
            <summary>
                Get the angular velocity.
            </summary>
            <returns>Return the angular velocity in radians/second.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyForce(Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2)">
            <summary>
                Apply a force at a world point. If the force is not
                applied at the center of mass, it will generate a torque and
                affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyTorque(System.Single)">
            <summary>
                Apply a torque. This affects the angular velocity
                without affecting the linear velocity of the center of mass.
                This wakes up the body.
            </summary>
            <param name="torque">Torque about the z-axis (out of the screen), usually in N-m.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyImpulse(Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2)">
            <summary>
                Apply an impulse at a point. This immediately modifies the velocity.
                It also modifies the angular velocity if the point of application
                is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetMass">
            <summary>
                Get the total mass of the body.
            </summary>
            <returns>Return the mass, usually in kilograms (kg).</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetInertia">
            <summary>
                Get the central rotational inertia of the body.
            </summary>
            <returns>Return the rotational inertia, usually in kg-m^2.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetMassData">
            <summary>
                Get the mass data of the body.
            </summary>
            <returns>A struct containing the mass, inertia and center of the body.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldPoint(Alis.Aspect.Math.Vector2)">
            <summary>
                Get the world coordinates of a point given the local coordinates.
            </summary>
            <param name="localPoint">A point on the body measured relative the the body's origin.</param>
            <returns>Return the same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldVector(Alis.Aspect.Math.Vector2)">
            <summary>
                Get the world coordinates of a vector given the local coordinates.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>Return the same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalPoint(Alis.Aspect.Math.Vector2)">
            <summary>
                Gets a local point relative to the body's origin given a world point.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>Return the corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalVector(Alis.Aspect.Math.Vector2)">
            <summary>
                Gets a local vector given a world vector.
            </summary>
            <param name="worldVector">A vector in world coordinates.</param>
            <returns>Return the corresponding local vector.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocityFromWorldPoint(Alis.Aspect.Math.Vector2)">
            <summary>
                Get the world linear velocity of a world point attached to this body.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocityFromLocalPoint(Alis.Aspect.Math.Vector2)">
            <summary>
                Get the world velocity of a local point.
            </summary>
            <param name="localPoint">A point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearDamping">
            <summary>
                Gets the linear damping
            </summary>
            <returns>The linear damping</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetLinearDamping(System.Single)">
            <summary>
                Sets the linear damping using the specified linear damping
            </summary>
            <param name="linearDamping">The linear damping</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetAngularDamping">
            <summary>
                Gets the angular damping
            </summary>
            <returns>The angular damping</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetAngularDamping(System.Single)">
            <summary>
                Sets the angular damping using the specified angular damping
            </summary>
            <param name="angularDamping">The angular damping</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.IsBullet">
            <summary>
                Is this body treated like a bullet for continuous collision detection?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetBullet(System.Boolean)">
            <summary>
                Should this body be treated like a bullet for continuous collision detection?
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.IsFixedRotation">
            <summary>
                Describes whether this instance is fixed rotation
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetFixedRotation(System.Boolean)">
            <summary>
                Sets the fixed rotation using the specified fixedr
            </summary>
            <param name="fixedr">The fixedr</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.IsStatic">
            <summary>
                Is this body static (immovable)?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetStatic">
            <summary>
                Sets the static
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.IsDynamic">
            <summary>
                Is this body dynamic (movable)?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.IsFrozen">
            <summary>
                Is this body frozen?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.IsSleeping">
            <summary>
                Is this body sleeping (not simulating).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.IsAllowSleeping">
            <summary>
                Describes whether this instance is allow sleeping
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.AllowSleeping(System.Boolean)">
            <summary>
                You can disable sleeping on this body.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.WakeUp">
            <summary>
                Wake up this body so it will begin simulating.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.PutToSleep">
            <summary>
                Put this body to sleep so it will stop simulating.
                This also sets the velocity to zero.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetFixtureList">
            <summary>
                Get the list of all fixtures attached to this body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetJointList">
            <summary>
                Get the list of all joints attached to this body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetControllerList">
            <summary>
                Gets the controller list
            </summary>
            <returns>The controller list</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetNext">
            <summary>
                Get the next body in the world's body list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetUserData">
            <summary>
                Get the user data pointer that was provided in the body definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetUserData(System.Object)">
            <summary>
                Set the user data. Use this to store your application specific data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorld">
            <summary>
                Get the parent world of this body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SynchronizeTransform">
            <summary>
                Synchronizes the transform
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.Advance(System.Single)">
            <summary>
                Advances the t
            </summary>
            <param name="t">The </param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BodyDef">
            <summary>
                A body definition holds all the data needed to construct a rigid body.
                You can safely re-use body definitions.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BodyDef.#ctor(System.Byte)">
            <summary>
                This constructor sets the body definition default values.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.MassData">
            <summary>
                You can use this to initialized the mass properties of the body.
                If you prefer, you can set the mass properties after the shapes
                have been added using Body.SetMassFromShapes.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.UserData">
            <summary>
                Use this to store application specific body data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.Position">
            <summary>
                The world position of the body. Avoid creating bodies at the origin
                since this can lead to many overlapping shapes.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.Angle">
            <summary>
                The world angle of the body in radians.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.LinearVelocity">
            The linear velocity of the body in world co-ordinates.
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.AngularVelocity">
            <summary>
                The angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.LinearDamping">
            <summary>
                Linear damping is use to reduce the linear velocity. The damping parameter
                can be larger than 1.0f but the damping effect becomes sensitive to the
                time step when the damping parameter is large.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.AngularDamping">
            <summary>
                Angular damping is use to reduce the angular velocity. The damping parameter
                can be larger than 1.0f but the damping effect becomes sensitive to the
                time step when the damping parameter is large.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.AllowSleep">
            <summary>
                Set this flag to false if this body should never fall asleep. Note that
                this increases CPU usage.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.IsSleeping">
            <summary>
                Is this body initially sleeping?
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.FixedRotation">
            <summary>
                Should this body be prevented from rotating? Useful for characters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyDef.IsBullet">
            <summary>
                Is this a fast moving body that should be prevented from tunneling through
                other moving bodies? Note that all bodies are prevented from tunneling through
                static bodies.
                @warning You should use this flag sparingly since it increases processing time.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BodyFlags">
            <summary>
                The body flags enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.Frozen">
            <summary>
                The frozen body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.Island">
            <summary>
                The island body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.Sleep">
            <summary>
                The sleep body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.AllowSleep">
            <summary>
                The allow sleep body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.Bullet">
            <summary>
                The bullet body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.FixedRotation">
            <summary>
                The fixed rotation body flags
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BodyType">
            <summary>
                Body type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyType.Static">
            <summary>
                The static body type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyType.Dynamic">
            <summary>
                The dynamic body type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyType.MaxTypes">
            <summary>
                The max types body type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BoundaryListener">
            <summary>
                This is called when a body's shape passes outside of the world boundary.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BoundaryListener.Violation(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                This is called for each body that leaves the world boundary.
                @warning you can't modify the world inside this callback.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.CircleDef">
            <summary>
                This structure is used to build a fixture with a circle shape.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.CircleDef.Radius">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.CircleDef.LocalPosition">
            <summary>
                The local position
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.CircleDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.CircleDef" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Color">
            <summary>
                Color for debug drawing. Each value has the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Color.r">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Color.g">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Color.b">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Color" /> class
            </summary>
            <param name="r">The </param>
            <param name="g">The </param>
            <param name="b">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Color.Set(System.Single,System.Single,System.Single)">
            <summary>
                Sets the r
            </summary>
            <param name="r">The </param>
            <param name="g">The </param>
            <param name="b">The </param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.ContactFilter">
            <summary>
                Implement this class to provide collision filtering. In other words, you can implement
                this class if you want finer control over contact creation.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactFilter.ShouldCollide(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Return true if contact calculations should be performed between these two shapes.
                If you implement your own collision filter you may want to build from this implementation.
                @warning for performance reasons this is only called when the AABBs begin to overlap.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactFilter.RayCollide(System.Object,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Return true if the given shape should be considered for ray intersection.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.ContactImpulse">
            Contact impulses for reporting. Impulses are used instead of forces because
            sub-step forces may approach infinity for rigid body collisions. These
            match up one-to-one with the contact points in b2Manifold.
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.ContactImpulse.NormalImpulses">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.ContactImpulse.TangentImpulses">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.IContactListener">
            Implement this class to get contact information. You can use these results for
            things like sounds and game logic. You can also get contact results by
            traversing the contact lists after the time step. However, you might miss
            some contacts because continuous physics leads to sub-stepping.
            Additionally you may receive multiple callbacks for the same contact in a
            single time step.
            You should strive to make your callbacks efficient because there may be
            many callbacks per time step.
            @warning You cannot create/destroy Box2DX entities inside these callbacks.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.IContactListener.BeginContact(Alis.Core.Physic.Dynamics.Contacts.Contact)">
            Called when two fixtures begin to touch.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.IContactListener.EndContact(Alis.Core.Physic.Dynamics.Contacts.Contact)">
            Called when two fixtures cease to touch.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.IContactListener.PreSolve(Alis.Core.Physic.Dynamics.Contacts.Contact,Alis.Core.Physic.Collision.Manifold)">
            This is called after a contact is updated. This allows you to inspect a
            contact before it goes to the solver. If you are careful, you can modify the
            contact manifold (e.g. disable contact).
            A copy of the old manifold is provided so that you can detect changes.
            Note: this is called only for awake bodies.
            Note: this is called even when the number of contact points is zero.
            Note: this is not called for sensors.
            Note: if you set the number of contact points to zero, you will not
            get an EndContact callback. However, you may get a BeginContact callback
            the next step.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.IContactListener.PostSolve(Alis.Core.Physic.Dynamics.Contacts.Contact,Alis.Core.Physic.Dynamics.ContactImpulse)">
            This lets you inspect a contact after the solver is finished. This is useful
            for inspecting impulses.
            Note: the contact manifold does not include time of impact impulses, which can be
            arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly
            in a separate data structure.
            Note: this is only called for contacts that are touching, solid, and awake.
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.ContactManager">
            <summary>
                The contact manager class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Collision.PairCallback" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.ContactManager.DestroyImmediate">
            <summary>
                The destroy immediate
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.ContactManager.NullContact">
            <summary>
                The null contact
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.ContactManager.World">
            <summary>
                The world
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.ContactManager" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactManager.PairAdded(System.Object,System.Object)">
            <summary>
                Pairs the added using the specified proxy user data a
            </summary>
            <param name="proxyUserDataA">The proxy user data</param>
            <param name="proxyUserDataB">The proxy user data</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactManager.PairRemoved(System.Object,System.Object,System.Object)">
            <summary>
                Pairs the removed using the specified proxy user data 1
            </summary>
            <param name="proxyUserData1">The proxy user data</param>
            <param name="proxyUserData2">The proxy user data</param>
            <param name="pairUserData">The pair user data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactManager.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact)">
            <summary>
                Destroys the c
            </summary>
            <param name="c">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactManager.Collide">
            <summary>
                Collides this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.CircleContact">
            <summary>
                The circle contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.CircleContact.#ctor(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.CircleContact" /> class
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.CircleContact.CollideCircles(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the circles using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.CircleContact.Create(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.CircleContact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.Contact">
            <summary>
                The class manages contact between two shapes. A contact exists for each overlapping
                AABB in the broad-phase (except if filtered). Therefore a contact object may exist
                that has no contact points.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.Contact.CollisionFlags">
            <summary>
                The collision flags enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.CollisionFlags.NonSolid">
            <summary>
                The non solid collision flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.CollisionFlags.Slow">
            <summary>
                The slow collision flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.CollisionFlags.Island">
            <summary>
                The island collision flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.CollisionFlags.Toi">
            <summary>
                The toi collision flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.CollisionFlags.Touch">
            <summary>
                The touch collision flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.SRegisters">
            <summary>
                The shape type count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.CollideShapeFunction">
            <summary>
                The collide shape function
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.manifold">
            <summary>
                The manifold
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.#ctor(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" /> class
            </summary>
            <param name="fA">The </param>
            <param name="fB">The </param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.SInitialized">
            <summary>
                The initialized
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.Flags">
            <summary>
                The flags
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.Prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.NodeA">
            <summary>
                The node
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.NodeB">
            <summary>
                The node
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.Toi">
            <summary>
                The toi
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.Manifold">
            <summary>
                Get the contact manifold.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.IsSolid">
            <summary>
                Is this contact solid?
            </summary>
            <returns>True if this contact should generate a response.</returns>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.AreTouching">
            <summary>
                Are fixtures touching?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.FixtureA">
            <summary>
                Get the first fixture in this contact.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.FixtureB">
            <summary>
                Get the second fixture in this contact.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.AddType(Alis.Core.Physic.Dynamics.Contacts.ContactCreateFcn,Alis.Core.Physic.Dynamics.Contacts.ContactDestroyFcn,Alis.Core.Physic.Collision.Shapes.ShapeType,Alis.Core.Physic.Collision.Shapes.ShapeType)">
            <summary>
                Adds the type using the specified create fcn
            </summary>
            <param name="createFcn">The create fcn</param>
            <param name="contactDestroyFcn">The destory fcn</param>
            <param name="type1">The type</param>
            <param name="type2">The type</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.InitializeRegisters">
            <summary>
                Initializes the registers
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.Create(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.Update(Alis.Core.Physic.Dynamics.IContactListener)">
            <summary>
                Updates the listener
            </summary>
            <param name="listener">The listener</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.Evaluate">
            <summary>
                Evaluates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.ComputeToi(Alis.Aspect.Math.Sweep,Alis.Aspect.Math.Sweep)">
            <summary>
                Computes the toi using the specified sweep a
            </summary>
            <param name="sweepA">The sweep</param>
            <param name="sweepB">The sweep</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.GetWorldManifold(Alis.Core.Physic.Collision.WorldManifold@)">
            <summary>
                Get the world manifold.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.GetNext">
            <summary>
                Get the next contact in the world's contact list.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.Contact.CollideShapeDelegate">
            <summary>
                The collide shape delegate
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint">
            <summary>
                The contact constraint class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Points">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.BodyA">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.BodyB">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Friction">
            <summary>
                The friction
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.K">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.LocalPlaneNormal">
            <summary>
                The local plane normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.LocalPoint">
            <summary>
                The local point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Manifold">
            <summary>
                The manifold
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.NormalMass">
            <summary>
                The normal mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.PointCount">
            <summary>
                The point count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Radius">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Restitution">
            <summary>
                The restitution
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint">
            <summary>
                The contact constraint point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.LocalPoint">
            <summary>
                The local point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.Ra">
            <summary>
                The ra
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.Rb">
            <summary>
                The rb
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.NormalImpulse">
            <summary>
                The normal impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.TangentImpulse">
            <summary>
                The tangent impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.NormalMass">
            <summary>
                The normal mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.TangentMass">
            <summary>
                The tangent mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.EqualizedMass">
            <summary>
                The equalized mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.VelocityBias">
            <summary>
                The velocity bias
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactCreateFcn">
            <summary>
                The contact create fcn
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactDestroyFcn">
            <summary>
                The contact destroy fcn
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactEdge">
            <summary>
                A contact edge is used to connect bodies and contacts together
                in a contact graph where each body is a node and each contact
                is an edge. A contact edge belongs to a doubly linked list
                maintained in each attached body. Each contact has two contact
                nodes, one for each attached body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactEdge.Contact">
            <summary>
                The contact.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactEdge.Next">
            <summary>
                The next contact edge in the body's contact list.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactEdge.Other">
            <summary>
                Provides quick access to the other body attached.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactEdge.Prev">
            <summary>
                The previous contact edge in the body's contact list.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactRegister">
            <summary>
                The contact register
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactRegister.CreateFcn">
            <summary>
                The create fcn
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactRegister.DestroyFcn">
            <summary>
                The destroy fcn
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactRegister.Primary">
            <summary>
                The primary
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactSolver">
            <summary>
                The contact solver class
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.SPositionSolverManifold">
            <summary>
                The position solver manifold
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.Constraints">
            <summary>
                The constraints
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.step">
            <summary>
                The step
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.#ctor(Alis.Core.Physic.Dynamics.TimeStep,Alis.Core.Physic.Dynamics.Contacts.Contact[],System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.ContactSolver" /> class
            </summary>
            <param name="step">The step</param>
            <param name="contacts">The contacts</param>
            <param name="contactCount">The contact count</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.ConstraintCount">
            <summary>
                The constraint count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.InitVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.SolveVelocityConstraints">
            <summary>
                Solves the velocity constraints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.FinalizeVelocityConstraints">
            <summary>
                Finalizes the velocity constraints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact">
            <summary>
                The edge and circle contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact.#ctor(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact" /> class
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact.CollideEdgeAndCircle(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the edge and circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact.Create(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.NullContact">
            <summary>
                The null contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.NullContact.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.NullContact" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.NullContact.Collide(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact">
            <summary>
                The poly and circle contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact.#ctor(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact" /> class
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact.CollidePolygonCircle(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the polygon circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact.Create(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact">
            <summary>
                The poly and edge contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact.#ctor(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact" /> class
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact.CollidePolyAndEdgeContact(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the poly and edge contact using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact.Create(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.PolygonContact">
            <summary>
                The polygon contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolygonContact.#ctor(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.PolygonContact" /> class
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolygonContact.CollidePolygons(Alis.Core.Physic.Collision.Manifold@,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Aspect.Math.XForm)">
            <summary>
                Collides the polygons using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolygonContact.Create(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolygonContact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.PositionSolverManifold">
            <summary>
                The position solver manifold class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.PositionSolverManifold.Points">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.PositionSolverManifold.Separations">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.PositionSolverManifold.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PositionSolverManifold.Initialize(Alis.Core.Physic.Dynamics.Contacts.ContactConstraint)">
            <summary>
                Initializes the cc
            </summary>
            <param name="cc">The cc</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController">
            <summary>
                Calculates buoyancy forces for fluids in the form of a half plane.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.angularDrag">
            Linear drag co-efficient
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Density">
            The fluid density
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.LinearDrag">
            Linear drag co-efficient
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Offset">
            The height of the fluid surface along the normal
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.UseDensity">
            If false, bodies are assumed to be uniformly dense, otherwise use the shapes densities
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.UseWorldGravity">
            If true, gravity is taken from the world instead of the gravity parameter.
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Gravity">
            Gravity vector, if the world's gravity is not used
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Normal">
            The outer surface normal
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Velocity">
            Fluid velocity, for drag calculations
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.#ctor(Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController" /> class
            </summary>
            <param name="buoyancyControllerDef">The buoyancy controller def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Step(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Steps the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Draw(Alis.Core.Physic.Dynamics.DebugDraw)">
            <summary>
                Draws the debug draw
            </summary>
            <param name="debugDraw">The debug draw</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef">
            <summary>
                This class is used to build buoyancy controllers
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.AngularDrag">
            Linear drag co-efficient
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.Density">
            The fluid density
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.LinearDrag">
            Linear drag co-efficient
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.Offset">
            The height of the fluid surface along the normal
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.UseDensity">
            If false, bodies are assumed to be uniformly dense, otherwise use the shapes densities
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.UseWorldGravity">
            If true, gravity is taken from the world instead of the gravity parameter.
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.Gravity">
            Gravity vector, if the world's gravity is not used
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.Normal">
            The outer surface normal
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.Velocity">
            Fluid velocity, for drag calculations
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController">
            <summary>
                The constant accel controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController.A">
            <summary>
                The force to apply
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController.#ctor(Alis.Core.Physic.Dynamics.Controllers.ConstantAccelControllerDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController.Step(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Steps the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelControllerDef">
            This class is used to build constant acceleration controllers
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelControllerDef.A">
            <summary>
                The force to apply
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController">
            <summary>
                The constant force controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController.f">
            <summary>
                The force to apply
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController.#ctor(Alis.Core.Physic.Dynamics.Controllers.ConstantForceControllerDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController.Step(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Steps the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.ConstantForceControllerDef">
            <summary>
                This class is used to build constant force controllers
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ConstantForceControllerDef.F">
            The force to apply
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.Controller">
            <summary>
                Base class for controllers. Controllers are a convience for encapsulating common
                per-step functionality.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.Controller.BodyCount">
            <summary>
                The body count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.Controller.BodyList">
            <summary>
                The body list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.Controller.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.Controller.Prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.Controller.World">
            <summary>
                The world
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.#ctor(Alis.Core.Physic.Dynamics.World)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" /> class
            </summary>
            <param name="world">The world</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.Step(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Controllers override this to implement per-step functionality.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.Draw(Alis.Core.Physic.Dynamics.DebugDraw)">
            <summary>
                Controllers override this to provide debug drawing.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.AddBody(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Adds a body to the controller list.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.RemoveBody(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Removes a body from the controller list.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.Clear">
            <summary>
                Removes all bodies from the controller list.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.GetNext">
            <summary>
                Get the next body in the world's body list.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.GetWorld">
            <summary>
                Get the parent world of this body.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.GetBodyList">
            <summary>
                Get the attached body list
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge">
            <summary>
                A controller edge is used to connect bodies and controllers together
                in a bipartite graph.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.Body">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.Controller">
            <summary>
                The controller
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.NextBody">
            <summary>
                The next body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.NextController">
            <summary>
                The next controller
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.PrevBody">
            <summary>
                The prev body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.PrevController">
            <summary>
                The prev controller
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.GravityController">
            <summary>
                The gravity controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.GravityController.G">
            <summary>
                Specifies the strength of the gravitiation force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.GravityController.InvSqr">
            If true, gravity is proportional to r^-2, otherwise r^-1
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.GravityController.#ctor(Alis.Core.Physic.Dynamics.Controllers.GravityControllerDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.GravityController" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.GravityController.Step(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Steps the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.GravityControllerDef">
            This class is used to build gravity controllers
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.GravityControllerDef.G">
            <summary>
                Specifies the strength of the gravitiation force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.GravityControllerDef.InvSqr">
            <summary>
                If true, gravity is proportional to r^-2, otherwise r^-1
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.TensorDampingController">
            <summary>
                The tensor damping controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.TensorDampingController.maxTimestep">
            <summary>
                Set this to a positive number to clamp the maximum amount of damping done.
                Typically one wants maxTimestep to be 1/(max eigenvalue of T), so that damping will never cause something to
                reverse direction
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.TensorDampingController.T">
            <summary>
                Tensor to use in damping model
                Some examples (matrixes in format (row1; row2) )
                (-a 0;0 -a)		Standard isotropic damping with strength a
                (0 a;-a 0)		Electron in fixed field - a force at right angles to velocity with proportional magnitude
                (-a 0;0 -b)		Differing x and y damping. Useful e.g. for top-down wheels.
                By the way, tensor in this case just means matrix, don't let the terminology get you down.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.TensorDampingController.SetAxisAligned(System.Single,System.Single)">
            Sets damping independantly along the x and y axes
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.TensorDampingController.Step(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Steps the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.DebugDraw">
            <summary>
                Implement and register this class with a b2World to provide debug drawing of physics
                entities in your game.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.DebugDraw.DrawFlags">
            <summary>
                The draw flags
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DebugDraw.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.DebugDraw" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.DebugDraw.Flags">
            <summary>
                Gets or sets the value of the flags
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DebugDraw.AppendFlags(Alis.Core.Physic.Dynamics.DrawFlags)">
            <summary>
                Append flags to the current flags.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DebugDraw.ClearFlags(Alis.Core.Physic.Dynamics.DrawFlags)">
            <summary>
                Clear flags from the current flags.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DebugDraw.DrawPolygon(Alis.Aspect.Math.Vector2[],System.Int32,Alis.Core.Physic.Dynamics.Color)">
            <summary>
                Draw a closed polygon provided in CCW order.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DebugDraw.DrawSolidPolygon(Alis.Aspect.Math.Vector2[],System.Int32,Alis.Core.Physic.Dynamics.Color)">
            <summary>
                Draw a solid closed polygon provided in CCW order.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DebugDraw.DrawCircle(Alis.Aspect.Math.Vector2,System.Single,Alis.Core.Physic.Dynamics.Color)">
            <summary>
                Draw a circle.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DebugDraw.DrawSolidCircle(Alis.Aspect.Math.Vector2,System.Single,Alis.Aspect.Math.Vector2,Alis.Core.Physic.Dynamics.Color)">
            <summary>
                Draw a solid circle.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DebugDraw.DrawSegment(Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2,Alis.Core.Physic.Dynamics.Color)">
            <summary>
                Draw a line segment.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DebugDraw.DrawXForm(Alis.Aspect.Math.XForm)">
            <summary>
                Draw a transform. Choose your own length scale.
            </summary>
            <param name="xf">A transform.</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.DestructionListener">
            <summary>
                Joints and shapes are destroyed when their associated
                body is destroyed. Implement this listener so that you
                may nullify references to these joints and shapes.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DestructionListener.SayGoodbye(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Called when any joint is about to be destroyed due
                to the destruction of one of its attached bodies.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.DestructionListener.SayGoodbye(Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Called when any shape is about to be destroyed due
                to the destruction of its parent body.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.DrawFlags">
            <summary>
                The draw flags enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.DrawFlags.Shape">
            <summary>
                The shape draw flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.DrawFlags.Joint">
            <summary>
                The joint draw flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.DrawFlags.CoreShape">
            <summary>
                The core shape draw flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.DrawFlags.Aabb">
            <summary>
                The aabb draw flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.DrawFlags.Obb">
            <summary>
                The obb draw flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.DrawFlags.Pair">
            <summary>
                The pair draw flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.DrawFlags.CenterOfMass">
            <summary>
                The center of mass draw flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.DrawFlags.Controller">
            <summary>
                The controller draw flags
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.EdgeDef">
            <summary>
                This structure is used to build a chain of edges.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.EdgeDef.Vertex1">
            <summary>
                The start vertex.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.EdgeDef.Vertex2">
            <summary>
                The end vertex.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.EdgeDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.EdgeDef" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.FilterData">
            <summary>
                This holds contact filtering data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FilterData.CategoryBits">
            <summary>
                The collision category bits. Normally you would just set one bit.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FilterData.MaskBits">
            <summary>
                The collision mask bits. This states the categories that this
                shape would accept for collision.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FilterData.GroupIndex">
            <summary>
                Collision groups allow a certain group of objects to never collide (negative)
                or always collide (positive). Zero means no collision group. Non-zero group
                filtering always wins against the mask bits.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Fixture">
            <summary>
                A fixture is used to attach a shape to a body for collision detection. A fixture
                inherits its transform from its parent. Fixtures hold additional non-geometric data
                such as friction, collision filters, etc.
                Fixtures are created via Body.CreateFixture.
                @warning you cannot reuse fixtures.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.Density">
            <summary>
                Density, usually in kg/m^2.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.Filter">
            <summary>
                Contact filtering data. You must call b2World::Refilter to correct
                existing contacts/non-contacts.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.Friction">
            <summary>
                Friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.Restitution">
            <summary>
                Restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.UserData">
            <summary>
                User data that was assigned in the fixture definition. Use this to
                store your application specific data.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Fixture" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.ProxyId">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.IsSensor">
            <summary>
                Is this fixture a sensor (non-solid)?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Shape">
            <summary>
                Get the child shape. You can modify the child shape, however you should not change the
                number of vertices because this will crash some collision caching mechanisms.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.ShapeType">
            <summary>
                Get the type of this shape. You can use this to down cast to the concrete shape.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Next">
            <summary>
                Get the next fixture in the parent body's fixture list.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Body">
            <summary>
                Get the parent body of this fixture. This is NULL if the fixture is not attached.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.Create(Alis.Core.Physic.Collision.BroadPhase,Alis.Core.Physic.Dynamics.Body,Alis.Aspect.Math.XForm,Alis.Core.Physic.Dynamics.FixtureDef)">
            <summary>
                Creates the broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="body">The body</param>
            <param name="xf">The xf</param>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.Destroy(Alis.Core.Physic.Collision.BroadPhase)">
            <summary>
                Destroys the broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.Synchronize(Alis.Core.Physic.Collision.BroadPhase,Alis.Aspect.Math.XForm,Alis.Aspect.Math.XForm)">
            <summary>
                Describes whether this instance synchronize
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="transform1">The transform</param>
            <param name="transform2">The transform</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.RefilterProxy(Alis.Core.Physic.Collision.BroadPhase,Alis.Aspect.Math.XForm)">
            <summary>
                Refilters the proxy using the specified broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="transform">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.ComputeMass(Alis.Core.Physic.Collision.Shapes.MassData@)">
            <summary>
                Compute the mass properties of this shape using its dimensions and density.
                The inertia tensor is computed about the local origin, not the centroid.
            </summary>
            <param name="massData">Returns the mass data for this shape.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.ComputeSubmergedArea(Alis.Aspect.Math.Vector2,System.Single,Alis.Aspect.Math.Vector2@)">
            <summary>
                Compute the volume and centroid of this fixture intersected with a half plane.
            </summary>
            <param name="normal">Normal the surface normal.</param>
            <param name="offset">Offset the surface offset along normal.</param>
            <param name="c">Returns the centroid.</param>
            <returns>The total volume less than offset along normal.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.TestPoint(Alis.Aspect.Math.Vector2)">
            <summary>
                Test a point for containment in this fixture. This only works for convex shapes.
            </summary>
            <param name="p">A point in world coordinates.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.TestSegment(System.Single@,Alis.Aspect.Math.Vector2@,Alis.Core.Physic.Collision.Segment,System.Single)">
            <summary>
                Perform a ray cast against this shape.
            </summary>
            <param name="lambda">
                Returns the hit fraction. You can use this to compute the contact point
                p = (1 - lambda) * segment.p1 + lambda * segment.p2.
            </param>
            <param name="normal">
                Returns the normal at the contact point. If there is no intersection, the normal
                is not set.
            </param>
            <param name="segment">Defines the begin and end point of the ray cast.</param>
            <param name="maxLambda">A number typically in the range [0,1].</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.ComputeSweepRadius(Alis.Aspect.Math.Vector2)">
            <summary>
                Get the maximum radius about the parent body's center of mass.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.FixtureDef">
            <summary>
                A fixture definition is used to create a fixture. This class defines an
                abstract fixture definition. You can reuse fixture definitions safely.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureDef.IsSensor">
            <summary>
                A sensor shape collects contact information but never generates a collision response.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureDef.Restitution">
            <summary>
                The restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureDef.UserData">
            <summary>
                Use this to store application specific fixture data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureDef.Density">
            <summary>
                The density, usually in kg/m^2.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureDef.Filter">
            <summary>
                Contact filtering data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureDef.Friction">
            <summary>
                The friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureDef.Type">
            <summary>
                Holds the shape type for down-casting.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.FixtureDef.#ctor">
            <summary>
                The constructor sets the default fixture definition values.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Island">
            <summary>
                The island class
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.bodyCapacity">
            <summary>
                The body capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.ContactCapacity">
            <summary>
                The contact capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.JointCapacity">
            <summary>
                The joint capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Listener">
            <summary>
                The listener
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Bodies">
            <summary>
                The bodies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.BodyCount">
            <summary>
                The body count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.ContactCount">
            <summary>
                The contact count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Contacts">
            <summary>
                The contacts
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.JointCount">
            <summary>
                The joint count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Joints">
            <summary>
                The joints
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.PositionIterationCount">
            <summary>
                The position iteration count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Positions">
            <summary>
                The positions
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Velocities">
            <summary>
                The velocities
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.#ctor(System.Int32,System.Int32,System.Int32,Alis.Core.Physic.Dynamics.IContactListener)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Island" /> class
            </summary>
            <param name="bodyCapacity">The body capacity</param>
            <param name="contactCapacity">The contact capacity</param>
            <param name="jointCapacity">The joint capacity</param>
            <param name="listener">The listener</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Solve(Alis.Core.Physic.Dynamics.TimeStep,Alis.Aspect.Math.Vector2,System.Boolean)">
            <summary>
                Solves the step
            </summary>
            <param name="step">The step</param>
            <param name="gravity">The gravity</param>
            <param name="allowSleep">The allow sleep</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.SolveToi(Alis.Core.Physic.Dynamics.TimeStep@)">
            <summary>
                Solves the toi using the specified sub step
            </summary>
            <param name="subStep">The sub step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Add(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Adds the body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Add(Alis.Core.Physic.Dynamics.Contacts.Contact)">
            <summary>
                Adds the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Add(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Adds the joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Report(Alis.Core.Physic.Dynamics.Contacts.ContactConstraint[])">
            <summary>
                Reports the constraints
            </summary>
            <param name="constraints">The constraints</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.DistanceJoint">
            <summary>
                A distance joint constrains two points on two bodies
                to remain at a fixed distance from each other. You can view
                this as a massless, rigid rod.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.DampingRatio">
            <summary>
                The damping ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.FrequencyHz">
            <summary>
                The frequency hz
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.length">
            <summary>
                The length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Bias">
            <summary>
                The bias
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.U">
            <summary>
                The vector
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.#ctor(Alis.Core.Physic.Dynamics.Joints.DistanceJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.DistanceJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.DistanceJointDef">
            <summary>
                Distance joint definition. This requires defining an
                anchor point on both bodies and the non-zero length of the
                distance joint. The definition uses local anchor points
                so that the initial configuration can violate the constraint
                slightly. This helps when saving and loading a game.
                @warning Do not use a zero or short length.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJointDef.DampingRatio">
            <summary>
                The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJointDef.FrequencyHz">
            <summary>
                The response speed.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJointDef.Length">
            <summary>
                The equilibrium length between the anchor points.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJointDef.LocalAnchor1">
            <summary>
                The local anchor point relative to body1's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJointDef.LocalAnchor2">
            <summary>
                The local anchor point relative to body2's origin.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.DistanceJointDef" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2)">
            <summary>
                Initialize the bodies, anchors, and length using the world anchors.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.GearJoint">
            <summary>
                A gear joint is used to connect two joints together. Either joint
                can be a revolute or prismatic joint. You specify a gear ratio
                to bind the motions together:
                coordinate1 + ratio * coordinate2 = constant
                The ratio can be negative or positive. If one joint is a revolute joint
                and the other joint is a prismatic joint, then the ratio will have units
                of length or units of 1/length.
                @warning The revolute and prismatic joints must be attached to
                fixed bodies (which must be body1 on those joints).
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jacobian">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.#ctor(Alis.Core.Physic.Dynamics.Joints.GearJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.GearJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Ground1">
            <summary>
                The ground
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Ground2">
            <summary>
                The ground
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Revolute1">
            <summary>
                The revolute
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Prismatic1">
            <summary>
                The prismatic
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Revolute2">
            <summary>
                The revolute
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Prismatic2">
            <summary>
                The prismatic
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.GroundAnchor1">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.GroundAnchor2">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Constant">
            <summary>
                The constant
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Ratio">
            <summary>
                Get the gear ratio.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.GearJointDef">
            <summary>
                Gear joint definition. This definition requires two existing
                revolute or prismatic joints (any combination will work).
                The provided joints must attach a dynamic body to a static body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJointDef.Joint1">
            <summary>
                The first revolute/prismatic joint attached to the gear joint.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJointDef.Joint2">
            <summary>
                The second revolute/prismatic joint attached to the gear joint.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJointDef.Ratio">
            <summary>
                The gear ratio.
                @see GearJoint for explanation.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.GearJointDef" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.Jacobian">
            <summary>
                The jacobian
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Jacobian.Linear1">
            <summary>
                The linear
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Jacobian.Angular1">
            <summary>
                The angular
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Jacobian.Linear2">
            <summary>
                The linear
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Jacobian.Angular2">
            <summary>
                The angular
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Jacobian.SetZero">
            <summary>
                Sets the zero
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Jacobian.Set(Alis.Aspect.Math.Vector2,System.Single,Alis.Aspect.Math.Vector2,System.Single)">
            <summary>
                Sets the x 1
            </summary>
            <param name="x1">The </param>
            <param name="a1">The </param>
            <param name="x2">The </param>
            <param name="a2">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Jacobian.Compute(Alis.Aspect.Math.Vector2,System.Single,Alis.Aspect.Math.Vector2,System.Single)">
            <summary>
                Computes the x 1
            </summary>
            <param name="x1">The </param>
            <param name="a1">The </param>
            <param name="x2">The </param>
            <param name="a2">The </param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.Joint">
            <summary>
                The base joint class. Joints are used to constraint two bodies together in
                various fashions. Some joints also feature limits and motors.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.#ctor(Alis.Core.Physic.Dynamics.Joints.JointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.Joint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Node1">
            <summary>
                The joint edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Node2">
            <summary>
                The joint edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Body1">
            <summary>
                The body
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Body2">
            <summary>
                The body
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.IslandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.CollideConnected">
            <summary>
                The collide connected
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.LocalCenter1">
            <summary>
                The local center
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.LocalCenter2">
            <summary>
                The local center
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.InvMass1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.InvI1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.InvMass2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.InvI2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Anchor1">
            <summary>
                Get the anchor point on body1 in world coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Anchor2">
            <summary>
                Get the anchor point on body2 in world coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.UserData">
            <summary>
                Get/Set the user data pointer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.GetType">
            <summary>
                Get the type of the concrete joint.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.GetBody1">
            <summary>
                Get the first body attached to this joint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.GetBody2">
            <summary>
                Get the second body attached to this joint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.GetReactionForce(System.Single)">
            <summary>
                Get the reaction force on body2 at the joint anchor.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.GetReactionTorque(System.Single)">
            <summary>
                Get the reaction torque on body2.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.GetNext">
            <summary>
                Get the next joint the world joint list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.Create(Alis.Core.Physic.Dynamics.Joints.JointDef)">
            <summary>
                Creates the def
            </summary>
            <param name="def">The def</param>
            <returns>The joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.Destroy(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Destroys the joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.ComputeXForm(Alis.Aspect.Math.XForm@,Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2,System.Single)">
            <summary>
                Computes the x form using the specified xf
            </summary>
            <param name="xf">The xf</param>
            <param name="center">The center</param>
            <param name="localCenter">The local center</param>
            <param name="angle">The angle</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.JointDef">
            <summary>
                Joint definitions are used to construct joints.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointDef.UserData">
            <summary>
                Use this to attach application specific data to your joints.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointDef.Body1">
            <summary>
                The first attached body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointDef.Body2">
            <summary>
                The second attached body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointDef.CollideConnected">
            <summary>
                Set this flag to true if the attached bodies should collide.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointDef.Type">
            <summary>
                The joint type is set automatically for concrete joint types.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.JointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.JointDef" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.JointEdge">
            <summary>
                A joint edge is used to connect bodies and joints together
                in a joint graph where each body is a node and each joint
                is an edge. A joint edge belongs to a doubly linked list
                maintained in each attached body. Each joint has two joint
                nodes, one for each attached body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointEdge.Joint">
            <summary>
                The joint.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointEdge.Next">
            <summary>
                The next joint edge in the body's joint list.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointEdge.Other">
            <summary>
                Provides quick access to the other body attached.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointEdge.Prev">
            <summary>
                The previous joint edge in the body's joint list.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.JointType">
            <summary>
                The joint type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.UnknownJoint">
            <summary>
                The unknown joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.RevoluteJoint">
            <summary>
                The revolute joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.PrismaticJoint">
            <summary>
                The prismatic joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.DistanceJoint">
            <summary>
                The distance joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.PulleyJoint">
            <summary>
                The pulley joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.MouseJoint">
            <summary>
                The mouse joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.GearJoint">
            <summary>
                The gear joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.LineJoint">
            <summary>
                The line joint joint type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.LimitState">
            <summary>
                The limit state enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LimitState.InactiveLimit">
            <summary>
                The inactive limit limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LimitState.AtLowerLimit">
            <summary>
                The at lower limit limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LimitState.AtUpperLimit">
            <summary>
                The at upper limit limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LimitState.EqualLimits">
            <summary>
                The equal limits limit state
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.LineJoint">
            <summary>
                A line joint. This joint provides one degree of freedom: translation
                along an axis fixed in body1. You can use a joint limit to restrict
                the range of motion and a joint motor to drive the motion or to
                model joint friction.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.A1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.A2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.Axis">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.EnableLimitx">
            <summary>
                The enable limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.EnableMotorx">
            <summary>
                The enable motor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.K">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.LimitState">
            <summary>
                The limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.LocalXAxis1">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.LocalYAxis1">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.LowerTranslation">
            <summary>
                The lower translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.MaxMotorForce">
            <summary>
                The max motor force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.MotorImpulse">
            <summary>
                The motor impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.MotorMass">
            <summary>
                The motor mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.MotorSpeed">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.Perp">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.S1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.s2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJoint.UpperTranslation">
            <summary>
                The upper translation
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.#ctor(Alis.Core.Physic.Dynamics.Joints.LineJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.LineJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.LineJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.LineJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt"></param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.GetJointTranslation">
            <summary>
                Get the current joint translation, usually in meters.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.GetJointSpeed">
            <summary>
                Get the current joint translation speed, usually in meters per second.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.IsLimitEnabled">
            <summary>
                Is the joint limit enabled?
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.EnableLimit(System.Boolean)">
            <summary>
                Enable/disable the joint limit.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.GetLowerLimit">
            <summary>
                Get the lower joint limit, usually in meters.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.GetUpperLimit">
            <summary>
                Get the upper joint limit, usually in meters.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.SetLimits(System.Single,System.Single)">
            <summary>
                Set the joint limits, usually in meters.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.IsMotorEnabled">
            <summary>
                Is the joint motor enabled?
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.EnableMotor(System.Boolean)">
            <summary>
                Enable/disable the joint motor.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.SetMotorSpeed(System.Single)">
            <summary>
                Set the motor speed, usually in meters per second.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.SetMaxMotorForce(System.Single)">
            <summary>
                Set the maximum motor force, usually in N.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.GetMotorForce">
            <summary>
                Get the current motor force, usually in N.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.GetMotorSpeed">
            <summary>
                Get the motor speed, usually in meters per second.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.LineJointDef">
            <summary>
                Line joint definition. This requires defining a line of
                motion using an axis and an anchor point. The definition uses local
                anchor points and a local axis so that the initial configuration
                can violate the constraint slightly. The joint translation is zero
                when the local anchor points coincide in world space. Using local
                anchors and a local axis helps when saving and loading a game.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJointDef.EnableLimit">
            <summary>
                Enable/disable the joint limit.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJointDef.EnableMotor">
            <summary>
                Enable/disable the joint motor.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJointDef.LowerTranslation">
            <summary>
                The lower translation limit, usually in meters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJointDef.MaxMotorForce">
            <summary>
                The maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJointDef.MotorSpeed">
            <summary>
                The desired motor speed in radians per second.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJointDef.UpperTranslation">
            <summary>
                The upper translation limit, usually in meters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJointDef.LocalAnchor1">
            <summary>
                The local anchor point relative to body1's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJointDef.LocalAnchor2">
            <summary>
                The local anchor point relative to body2's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LineJointDef.LocalAxis1">
            <summary>
                The local translation axis in body1.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.LineJointDef" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.LineJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2)">
            <summary>
                Initialize the bodies, anchors, axis, and reference angle using the world
                anchor and world axis.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.MouseJoint">
            <summary>
                A mouse joint is used to make a point on a body track a
                specified world point. This a soft constraint with a maximum
                force. This allows the constraint to stretch and without
                applying huge forces.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MouseJoint.Target">
            <summary>
                The target
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MouseJoint.#ctor(Alis.Core.Physic.Dynamics.Joints.MouseJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.MouseJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.LocalAnchor">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.Mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.C">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.MaxForce">
            <summary>
                The max force
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.FrequencyHz">
            <summary>
                The frequency hz
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.DampingRatio">
            <summary>
                The damping ratio
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.Beta">
            <summary>
                The beta
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.Gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MouseJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param>The inv dt</param>
            <param name="invDt"></param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MouseJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param>The inv dt</param>
            <param name="invDt"></param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MouseJoint.SetTarget(Alis.Aspect.Math.Vector2)">
            <summary>
                Use this to update the target point.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MouseJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MouseJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MouseJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.MouseJointDef">
            <summary>
                Mouse joint definition. This requires a world target point,
                tuning parameters, and the time step.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MouseJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.MouseJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJointDef.Target">
            <summary>
                The initial world target point. This is assumed
                to coincide with the body anchor initially.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJointDef.MaxForce">
            <summary>
                The maximum constraint force that can be exerted
                to move the candidate body. Usually you will express
                as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJointDef.FrequencyHz">
            <summary>
                The response speed.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MouseJointDef.DampingRatio">
            <summary>
                The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint">
            <summary>
                A prismatic joint. This joint provides one degree of freedom: translation
                along an axis fixed in body1. Relative rotation is prevented. You can
                use a joint limit to restrict the range of motion and a joint motor to
                drive the motion or to model joint friction.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.refAngle">
            <summary>
                The ref angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.a1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.A2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.Axis">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.K">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LimitState">
            <summary>
                The limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalXAxis1">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalYAxis1">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.MaxMotorForce">
            <summary>
                The max motor force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.MotorMass">
            <summary>
                The motor mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.motorSpeedx">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.Perp">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.s1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.s2">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.#ctor(Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.JointTranslation">
            <summary>
                Get the current joint translation, usually in meters.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.JointSpeed">
            <summary>
                Get the current joint translation speed, usually in meters per second.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.IsLimitEnabled">
            <summary>
                Is the joint limit enabled?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LowerLimit">
            <summary>
                Get the lower joint limit, usually in meters.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.UpperLimit">
            <summary>
                Get the upper joint limit, usually in meters.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.IsMotorEnabled">
            <summary>
                Is the joint motor enabled?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.MotorSpeedx">
            <summary>
                Get\Set the motor speed, usually in meters per second.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.MotorForce">
            <summary>
                Get the current motor force, usually in N.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.EnableLimit(System.Boolean)">
            <summary>
                Enable/disable the joint limit.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.SetLimits(System.Single,System.Single)">
            <summary>
                Set the joint limits, usually in meters.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.EnableMotor(System.Boolean)">
            <summary>
                Enable/disable the joint motor.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.SetMaxMotorForce(System.Single)">
            <summary>
                Set the maximum motor force, usually in N.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef">
            <summary>
                Prismatic joint definition. This requires defining a line of
                motion using an axis and an anchor point. The definition uses local
                anchor points and a local axis so that the initial configuration
                can violate the constraint slightly. The joint translation is zero
                when the local anchor points coincide in world space. Using local
                anchors and a local axis helps when saving and loading a game.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.EnableLimit">
            <summary>
                Enable/disable the joint limit.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.EnableMotor">
            <summary>
                Enable/disable the joint motor.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.LowerTranslation">
            <summary>
                The lower translation limit, usually in meters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.MaxMotorForce">
            <summary>
                The maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.MotorSpeed">
            <summary>
                The desired motor speed in radians per second.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.UpperTranslation">
            <summary>
                The upper translation limit, usually in meters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.LocalAnchor1">
            <summary>
                The local anchor point relative to body1's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.LocalAnchor2">
            <summary>
                The local anchor point relative to body2's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.LocalAxis1">
            <summary>
                The local translation axis in body1.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.ReferenceAngle">
            <summary>
                The constrained angle between the bodies: body2_angle - body1_angle.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2)">
            <summary>
                Initialize the bodies, anchors, axis, and reference angle using the world
                anchor and world axis.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.PulleyJoint">
            <summary>
                The pulley joint is connected to two bodies and two fixed ground points.
                The pulley supports a ratio such that:
                length1 + ratio * length2 constant
                Yes, the force transmitted is scaled by the ratio.
                The pulley also enforces a maximum length limit on both sides. This is
                useful to prevent one side of the pulley hitting the top.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.MinPulleyLength">
            <summary>
                The min pulley length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LimitState1">
            <summary>
                The limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LimitState2">
            <summary>
                The limit state
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.#ctor(Alis.Core.Physic.Dynamics.Joints.PulleyJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.PulleyJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.Ground">
            <summary>
                The ground
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.GroundAnchor1">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.GroundAnchor2">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.U1">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.U2">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.Constant">
            <summary>
                The constant
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.MaxLength1">
            <summary>
                The max length
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.MaxLength2">
            <summary>
                The max length
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.PulleyMass">
            <summary>
                The pulley mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LimitMass1">
            <summary>
                The limit mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LimitMass2">
            <summary>
                The limit mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LimitImpulse1">
            <summary>
                The limit impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LimitImpulse2">
            <summary>
                The limit impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.State">
            <summary>
                The state
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.GroundAnchorX1">
            <summary>
                Get the first ground anchor.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.GroundAnchorX2">
            <summary>
                Get the second ground anchor.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.Length1">
            <summary>
                Get the current length of the segment attached to body1.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.Length2">
            <summary>
                Get the current length of the segment attached to body2.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.Ratio">
            <summary>
                Get the pulley ratio.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef">
            <summary>
                Pulley joint definition. This requires two ground anchors,
                two dynamic body anchor points, max lengths for each side,
                and a pulley ratio.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.GroundAnchor1">
            <summary>
                The first ground anchor in world coordinates. This point never moves.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.GroundAnchor2">
            <summary>
                The second ground anchor in world coordinates. This point never moves.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.Length1">
            <summary>
                The a reference length for the segment attached to body1.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.LocalAnchor1">
            <summary>
                The local anchor point relative to body1's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.LocalAnchor2">
            <summary>
                The local anchor point relative to body2's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.MaxLength1">
            <summary>
                The maximum length of the segment attached to body1.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.Ratio">
            <summary>
                The pulley ratio, used to simulate a block-and-tackle.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.Length2">
            <summary>
                The a reference length for the segment attached to body2.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.MaxLength2">
            <summary>
                The maximum length of the segment attached to body2.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2,Alis.Aspect.Math.Vector2,System.Single)">
            Initialize the bodies, anchors, lengths, max lengths, and ratio using the world anchors.
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint">
            <summary>
                A revolute joint constrains to bodies to share a common point while they
                are free to rotate about the point. The relative rotation about the shared
                point is the joint angle. You can limit the relative rotation with
                a joint limit that specifies a lower and upper angle. You can use a motor
                to drive the relative rotation about the shared point. A maximum motor torque
                is provided so that infinite forces are not generated.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.motorSpeed">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.#ctor(Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.Mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.MotorMass">
            <summary>
                The motor mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.MaxMotorTorque">
            <summary>
                The max motor torque
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.ReferenceAngle">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.State">
            <summary>
                The limit state
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.JointAngleX">
            <summary>
                Get the current joint angle in radians.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.JointSpeedX">
            <summary>
                Get the current joint angle speed in radians per second.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.IsLimitEnabled">
            <summary>
                Is the joint limit enabled?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LowerLimit">
            <summary>
                Get the lower joint limit in radians.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.UpperLimit">
            <summary>
                Get the upper joint limit in radians.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.IsMotorEnabled">
            <summary>
                Is the joint motor enabled?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.MotorSpeed">
            <summary>
                Get\Set the motor speed in radians per second.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.MotorTorque">
            <summary>
                Get the current motor torque, usually in N-m.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param>The inv dt</param>
            <param name="invDt"></param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param>The inv dt</param>
            <param name="invDt"></param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.EnableLimit(System.Boolean)">
            <summary>
                Enable/disable the joint limit.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.SetLimits(System.Single,System.Single)">
            <summary>
                Set the joint limits in radians.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.EnableMotor(System.Boolean)">
            <summary>
                Enable/disable the joint motor.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.SetMaxMotorTorque(System.Single)">
            <summary>
                Set the maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef">
            <summary>
                Revolute joint definition. This requires defining an
                anchor point where the bodies are joined. The definition
                uses local anchor points so that the initial configuration
                can violate the constraint slightly. You also need to
                specify the initial relative angle for joint limits. This
                helps when saving and loading a game.
                The local anchor points are measured from the body's origin
                rather than the center of mass because:
                1. you might not know where the center of mass will be.
                2. if you add/remove shapes from a body and recompute the mass,
                the joints will be broken.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.EnableLimit">
            <summary>
                A flag to enable joint limits.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.EnableMotor">
            <summary>
                A flag to enable the joint motor.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.LowerAngle">
            <summary>
                The lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.MaxMotorTorque">
            <summary>
                The maximum motor torque used to achieve the desired motor speed.
                Usually in N-m.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.MotorSpeed">
            <summary>
                The desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.UpperAngle">
            <summary>
                The upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.LocalAnchor1">
            <summary>
                The local anchor point relative to body1's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.LocalAnchor2">
            <summary>
                The local anchor point relative to body2's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.ReferenceAngle">
            <summary>
                The body2 angle minus body1 angle in the reference state (radians).
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Aspect.Math.Vector2)">
            <summary>
                Initialize the bodies, anchors, and reference angle using the world
                anchor.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.PolygonDef">
            <summary>
                Convex polygon. The vertices must be ordered so that the outside of
                the polygon is on the right side of the edges (looking along the edge
                from start to end).
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.PolygonDef.Vertices">
            <summary>
                The polygon vertices in local coordinates.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.PolygonDef.VertexCount">
            <summary>
                The number of polygon vertices.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.PolygonDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.PolygonDef" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.PolygonDef.SetAsBox(System.Single,System.Single)">
            <summary>
                Build vertices to represent an axis-aligned box.
            </summary>
            <param name="hx">The half-width</param>
            <param name="hy">The half-height.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.PolygonDef.SetAsBox(System.Single,System.Single,Alis.Aspect.Math.Vector2,System.Single)">
            <summary>
                Build vertices to represent an oriented box.
            </summary>
            <param name="hx">The half-width</param>
            <param name="hy">The half-height.</param>
            <param name="center">The center of the box in local coordinates.</param>
            <param name="angle">The rotation of the box in local coordinates.</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Position.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Position.A">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.TimeStep">
            <summary>
                The time step
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.Dt">
            <summary>
                The dt
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.InvDt">
            <summary>
                The inv dt
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.DtRatio">
            <summary>
                The dt ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.VelocityIterations">
            <summary>
                The velocity iterations
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.PositionIterations">
            <summary>
                The position iterations
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.WarmStarting">
            <summary>
                The warm starting
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Velocity">
            <summary>
                The velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Velocity.V">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Velocity.W">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.World">
            <summary>
                The world class manages all physics entities, dynamic simulation,
                and asynchronous queries.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.allowSleep">
            <summary>
                The allow sleep
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.contactManager">
            <summary>
                The contact manager
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.groundBody">
            <summary>
                The ground body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.bodyCount">
            <summary>
                The body count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.bodyList">
            <summary>
                The body list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.boundaryListener">
            <summary>
                The boundary listener
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.BroadPhase">
            <summary>
                The broad phase
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.ContactCount">
            <summary>
                The contact count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.ContactFilter">
            <summary>
                The contact filter
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.ContactList">
            <summary>
                The contact list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.ContactListener">
            <summary>
                The contact listener
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.continuousPhysics">
            <summary>
                The continuous physics
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.controllerCount">
            <summary>
                The controller count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.controllerList">
            <summary>
                The controller list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.debugDraw">
            <summary>
                The debug draw
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.destructionListener">
            <summary>
                The destruction listener
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.gravity">
            <summary>
                The gravity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.invDt0">
            <summary>
                The inv dt0
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.jointCount">
            <summary>
                The joint count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.jointList">
            <summary>
                The joint list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.Lock">
            <summary>
                The lock
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.raycastNormal">
            <summary>
                The raycast normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.raycastSegment">
            <summary>
                The raycast segment
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.raycastSolidShape">
            <summary>
                The raycast solid shape
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.raycastUserData">
            <summary>
                The raycast user data
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.World.warmStarting">
            <summary>
                The warm starting
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.#ctor(Alis.Core.Physic.Collision.Aabb,Alis.Aspect.Math.Vector2,System.Boolean)">
            <summary>
                Construct a world object.
            </summary>
            <param name="worldAabb">A bounding box that completely encompasses all your shapes.</param>
            <param name="gravity">The world gravity vector.</param>
            <param name="doSleep">Improve performance by not simulating inactive bodies.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.World.Gravity">
            <summary>
                Get\Set global gravity vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.Dispose">
            <summary>
                Destruct the world. All physics entities are destroyed.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.SetDestructionListener(Alis.Core.Physic.Dynamics.DestructionListener)">
            <summary>
                Register a destruction listener.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.SetBoundaryListener(Alis.Core.Physic.Dynamics.BoundaryListener)">
            <summary>
                Register a broad-phase boundary listener.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.SetContactFilter(Alis.Core.Physic.Dynamics.ContactFilter)">
            <summary>
                Register a contact filter to provide specific control over collision.
                Otherwise the default filter is used (b2_defaultFilter).
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.SetContactListener(Alis.Core.Physic.Dynamics.IContactListener)">
            <summary>
                Register a contact event listener
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.SetDebugDraw(Alis.Core.Physic.Dynamics.DebugDraw)">
            <summary>
                Register a routine for debug drawing. The debug draw functions are called
                inside the World.Step method, so make sure your renderer is ready to
                consume draw commands when you call Step().
            </summary>
            <param name="debugDraw"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.CreateBody(Alis.Core.Physic.Dynamics.BodyDef)">
            <summary>
                Create a rigid body given a definition. No reference to the definition
                is retained.
                @warning This function is locked during callbacks.
            </summary>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.DestroyBody(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Destroy a rigid body given a definition. No reference to the definition
                is retained. This function is locked during callbacks.
                @warning This automatically deletes all associated shapes and joints.
                @warning This function is locked during callbacks.
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.CreateJoint(Alis.Core.Physic.Dynamics.Joints.JointDef)">
            <summary>
                Create a joint to constrain bodies together. No reference to the definition
                is retained. This may cause the connected bodies to cease colliding.
                @warning This function is locked during callbacks.
            </summary>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.DestroyJoint(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Destroy a joint. This may cause the connected bodies to begin colliding.
                @warning This function is locked during callbacks.
            </summary>
            <param name="j"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.AddController(Alis.Core.Physic.Dynamics.Controllers.Controller)">
            <summary>
                Adds the controller using the specified def
            </summary>
            <param name="def">The def</param>
            <returns>The def</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.RemoveController(Alis.Core.Physic.Dynamics.Controllers.Controller)">
            <summary>
                Removes the controller using the specified controller
            </summary>
            <param name="controller">The controller</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.GetGroundBody">
            <summary>
                The world provides a single static ground body with no collision shapes.
                You can use this to simplify the creation of joints and static shapes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.GetBodyList">
            <summary>
                Get the world body list. With the returned body, use Body.GetNext to get
                the next body in the world list. A null body indicates the end of the list.
            </summary>
            <returns>The head of the world body list.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.GetJointList">
            <summary>
                Get the world joint list. With the returned joint, use Joint.GetNext to get
                the next joint in the world list. A null joint indicates the end of the list.
            </summary>
            <returns>The head of the world joint list.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.GetControllerList">
            <summary>
                Gets the controller list
            </summary>
            <returns>The controller list</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.GetControllerCount">
            <summary>
                Gets the controller count
            </summary>
            <returns>The controller count</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.Refilter(Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Re-filter a fixture. This re-runs contact filtering on a fixture.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.SetWarmStarting(System.Boolean)">
            <summary>
                Enable/disable warm starting. For testing.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.SetContinuousPhysics(System.Boolean)">
            <summary>
                Enable/disable continuous physics. For testing.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.Validate">
            <summary>
                Perform validation of internal data structures.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.GetProxyCount">
            <summary>
                Get the number of broad-phase proxies.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.GetPairCount">
            <summary>
                Get the number of broad-phase pairs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.GetBodyCount">
            <summary>
                Get the number of bodies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.GetJointCount">
            <summary>
                Get the number joints.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.GetContactCount">
            <summary>
                Get the number of contacts (each may have 0 or more contact points).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.Step(System.Single,System.Int32,System.Int32)">
            <summary>
                Take a time step. This performs collision detection, integration,
                and constraint solution.
            </summary>
            <param name="dt">The amount of time to simulate, this should not vary.</param>
            <param name="velocityIterations">The velocity iterations.</param>
            <param name="positionIteration">The position iteration.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.Query(Alis.Core.Physic.Collision.Aabb,Alis.Core.Physic.Dynamics.Fixture[],System.Int32)">
            Query the world for all shapes that potentially overlap the
            provided AABB. You provide a shape pointer buffer of specified
            size. The number of shapes found is returned.
            @param aabb the query box.
            @param shapes a user allocated shape pointer array of size maxCount (or greater).
            @param maxCount the capacity of the shapes array.
            @return the number of shapes found in aabb.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.Raycast(Alis.Core.Physic.Collision.Segment,Alis.Core.Physic.Dynamics.Fixture[]@,System.Int32,System.Boolean,System.Object)">
            <summary>
                Query the world for all shapes that intersect a given segment. You provide a shap
                pointer buffer of specified size. The number of shapes found is returned, and the buffer
                is filled in order of intersection.
            </summary>
            <param name="segment">
                Defines the begin and end point of the ray cast, from p1 to p2.
                Use Segment.Extend to create (semi-)infinite rays.
            </param>
            <param name="fixtures">The fixtures.</param>
            <param name="maxCount">The capacity of the shapes array.</param>
            <param name="solidShapes">Determines if shapes that the ray starts in are counted as hits.</param>
            <param name="userData">
                Passed through the worlds contact filter, with method RayCollide. This can be used to filter
                valid shapes.
            </param>
            <returns>The number of shapes found</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.RaycastOne(Alis.Core.Physic.Collision.Segment,System.Single@,Alis.Aspect.Math.Vector2@,System.Boolean,System.Object)">
            <summary>
                Performs a raycast as with Raycast, finding the first intersecting shape.
            </summary>
            <param name="segment">
                Defines the begin and end point of the ray cast, from p1 to p2.
                Use Segment.Extend to create (semi-)infinite rays.
            </param>
            <param name="lambda">
                Returns the hit fraction. You can use this to compute the contact point
                p = (1 - lambda) * segment.p1 + lambda * segment.p2.
            </param>
            <param name="normal">Returns the normal at the contact point. If there is no intersection, the normal is not set.</param>
            <param name="solidShapes">Determines if shapes that the ray starts in are counted as hits.</param>
            <param name="userData"></param>
            <returns>Returns the colliding shape shape, or null if not found.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.Solve(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Solves the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.SolveToi(Alis.Core.Physic.Dynamics.TimeStep)">
            <summary>
                Solves the toi using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.DrawJoint(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Draws the joint using the specified joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.DrawFixture(Alis.Core.Physic.Dynamics.Fixture,Alis.Aspect.Math.XForm,Alis.Core.Physic.Dynamics.Color,System.Boolean)">
            <summary>
                Draws the fixture using the specified fixture
            </summary>
            <param name="fixture">The fixture</param>
            <param name="xf">The xf</param>
            <param name="color">The color</param>
            <param name="core">The core</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.DrawDebugData">
            <summary>
                Draws the debug data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.RaycastSortKey(System.Object)">
            <summary>
                Raycasts the sort key using the specified data
            </summary>
            <param name="data">The data</param>
            <returns>The lambda</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.World.InRange(Alis.Core.Physic.Collision.Aabb)">
            <summary>
                Describes whether this instance in range
            </summary>
            <param name="aabb">The aabb</param>
            <returns>The bool</returns>
        </member>
    </members>
</doc>
