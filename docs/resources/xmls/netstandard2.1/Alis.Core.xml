<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alis.Core</name>
    </assembly>
    <members>
        <member name="T:Alis.Core.Builder.Component.ComponentBaseBuilder">
            <summary>
                The component base builder class
            </summary>
        </member>
        <member name="F:Alis.Core.Builder.Component.ComponentBaseBuilder.componentBase">
            <summary>
                The component base
            </summary>
        </member>
        <member name="M:Alis.Core.Builder.Component.ComponentBaseBuilder.#ctor(Alis.Core.Component.ComponentBase)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Builder.Component.ComponentBaseBuilder" /> class
            </summary>
            <param name="componentBase">The component base</param>
        </member>
        <member name="M:Alis.Core.Builder.Component.ComponentBaseBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Builder.Component.ComponentBaseBuilder" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Builder.Component.ComponentBaseBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The component base</returns>
        </member>
        <member name="T:Alis.Core.Builder.Manager.ManagerBaseBuilder">
            <summary>
            The manager base builder class
            </summary>
        </member>
        <member name="T:Alis.Core.Builder.Setting.SettingBuilder">
            <summary>
                Setting builder
            </summary>
        </member>
        <member name="F:Alis.Core.Builder.Setting.SettingBuilder.settingBase">
            <summary>
                The setting base
            </summary>
        </member>
        <member name="M:Alis.Core.Builder.Setting.SettingBuilder.Build">
            <summary>
                Build setting
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Component.ComponentBase">
            <summary>Define a general component.</summary>
        </member>
        <member name="P:Alis.Core.Component.ComponentBase.GameObject">
            <summary>
                Game Object.
            </summary>
        </member>
        <member name="P:Alis.Core.Component.ComponentBase.IsActive">
            <summary>
                Gets or sets the value of the is active
            </summary>
        </member>
        <member name="P:Alis.Core.Component.ComponentBase.Tag">
            <summary>
                Gets or sets the value of the tag
            </summary>
        </member>
        <member name="P:Alis.Core.Component.ComponentBase.Transform">
            <summary>
                Gets or sets the value of the tag
            </summary>
        </member>
        <member name="P:Alis.Core.Component.ComponentBase.Destroyed">
            <summary>
                Gets or sets the value of the destroyed
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The component base builder</returns>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.AttachGameObject(Alis.Core.Entity.GameObjectBase)">
            <summary>
                Attaches the game object using the specified game object
            </summary>
            <param name="gameObject">The game object</param>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.OnDestroy">
            <summary>
                Ons the destroy
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Enable">
            <summary>Enables this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Disable">
            <summary>Disables this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Awake">
            <summary>Awakes this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Start">
            <summary>Starts this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.BeforeUpdate">
            <summary>Befores the update.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Update">
            <summary>Updates this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.AfterUpdate">
            <summary>Afters the update.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.FixedUpdate">
            <summary>Fixeds the update.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Stop">
            <summary>Stops this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Reset">
            <summary>Resets this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Destroy">
            <summary>
                Destroys this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.OnPressKey(System.String)">
            <summary>
                Ons the press key using the specified key
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.OnPressDownKey(System.String)">
            <summary>
                Ons the press down key using the specified key
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.OnReleaseKey(System.String)">
            <summary>
                Ons the release key using the specified key
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Exit">
            <summary>Exits this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.DestroyImmediate">
            <summary>
                Destroys the immediate
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.DontDestroyOnLoad">
            <summary>
                Donts the destroy on load
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.FindObjectOfType">
            <summary>
                Finds the object of type
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.FindObjectsOfType">
            <summary>
                Finds the objects of type
            </summary>
        </member>
        <member name="T:Alis.Core.Entity.GameObjectBase">
            <summary>
            The game object base class
            </summary>
        </member>
        <member name="F:Alis.Core.Entity.GameObjectBase.components">
            <summary>
                The components
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.GameObjectBase.Transform">
            <summary>
                The transform
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObjectBase.AddComponent``1(``0)">
            <summary>
                Adds the component
            </summary>
            <param name="component">The component</param>
        </member>
        <member name="M:Alis.Core.Entity.GameObjectBase.RemoveComponent``1(``0)">
            <summary>
                Removes the component
            </summary>
            <param name="component">The component</param>
        </member>
        <member name="M:Alis.Core.Entity.GameObjectBase.ContainComponent(Alis.Core.Component.ComponentBase)">
            <summary>
            Describes whether this instance contain component
            </summary>
            <param name="component">The component</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Entity.GameObjectBase.GetComponent``1">
            <summary>
            Gets the component
            </summary>
            <typeparam name="T">The </typeparam>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Entity.SceneBase">
            <summary>
            The scene base class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Base.AlisObject"/>
        </member>
        <member name="T:Alis.Core.Entity.TransformBase">
            <summary>
            The transform base class
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.TransformBase.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.TransformBase.Rotation">
            <summary>
                The rotation
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.TransformBase.Scale">
            <summary>
                The scale
            </summary>
        </member>
        <member name="T:Alis.Core.GameBase">
            <summary>
                Define a game.
            </summary>
        </member>
        <member name="F:Alis.Core.GameBase.IsRunning">
            <summary>
                Active game
            </summary>
        </member>
        <member name="F:Alis.Core.GameBase.Managers">
            <summary>
                The manager base
            </summary>
        </member>
        <member name="F:Alis.Core.GameBase.timeManagerBase">
            <summary>
            The time manager base
            </summary>
        </member>
        <member name="M:Alis.Core.GameBase.Run">
            <summary>
                Run program
            </summary>
        </member>
        <member name="M:Alis.Core.GameBase.FindManager``1">
            <summary>
                Gets the manager using the specified type
            </summary>
            <typeparam name="T">The </typeparam>
            <returns>The manager base</returns>
        </member>
        <member name="M:Alis.Core.GameBase.SetManager``1(``0)">
            <summary>
                Sets the manager using the specified manager
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="manager">The manager</param>
        </member>
        <member name="T:Alis.Core.Manager.Input.InputManagerBase">
            <summary>
            The input manager base class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase"/>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Init">
            <summary>
            Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Awake">
            <summary>
            Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Start">
            <summary>
            Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.BeforeUpdate">
            <summary>
            Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Update">
            <summary>
            Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.AfterUpdate">
            <summary>
            Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.FixedUpdate">
            <summary>
            Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.DispatchEvents">
            <summary>
            Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Reset">
            <summary>
            Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Stop">
            <summary>
            Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Exit">
            <summary>
            Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.ManagerBase">
            <summary>
                Manager base
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Awake">
            <summary>Awakes this instance.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Start">
            <summary>Starts this instance.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.BeforeUpdate">
            <summary>Befores the update.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Update">
            <summary>Updates this instance.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.AfterUpdate">
            <summary>Afters the update.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.FixedUpdate">
            <summary>Fixeds the update.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.DispatchEvents">
            <summary>Dispatches the events.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Reset">
            <summary>Resets this instance.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Stop">
            <summary>Stops this instance.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Exit">
            <summary>Exits this instance.</summary>
        </member>
        <member name="T:Alis.Core.Manager.Scene.SceneManagerBase">
            <summary>
            The scene manager base class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase"/>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Init">
            <summary>
            Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Awake">
            <summary>
            Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Start">
            <summary>
            Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.BeforeUpdate">
            <summary>
            Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Update">
            <summary>
            Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.AfterUpdate">
            <summary>
            Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.FixedUpdate">
            <summary>
            Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.DispatchEvents">
            <summary>
            Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Reset">
            <summary>
            Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Stop">
            <summary>
            Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Exit">
            <summary>
            Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Time.TimeManagerBase">
            <summary>
            The time manager base class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase"/>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alis.Core.Manager.Time.TimeManagerBase"/> class
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.Timer">
            <summary>
                Gets the value of the timer
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.FixedTime">
            <summary>
                Gets or sets the value of the fixed time
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.TimeScale">
            <summary>
                Gets or sets the value of the time scale
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.FrameCount">
            <summary>
                Gets or sets the value of the frame count
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.CurrentFrame">
            <summary>
                Gets or sets the value of the current frame
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.FixedDeltaTime">
            <summary>
                Gets or sets the value of the fixed delta time
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.MaximumFramesPerSecond">
            <summary>
                Gets or sets the value of the maximum frames per second
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.TimeStep">
            <summary>
                Gets or sets the value of the time step
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.MaximunAllowedTimeStep">
            <summary>
                Gets or sets the value of the maximun allowed time step
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.SyncFixedDeltaTime">
            <summary>
                Syncs the fixed delta time
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.IsNewFrame">
            <summary>
                Describes whether this instance is new frame
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.UpdateTimeStep">
            <summary>
                Updates the time step
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.CounterFrames">
            <summary>
                Counters the frames
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.UpdateFixedTime">
            <summary>
                Updates the fixed time
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Setting.SettingBase">
            <summary>
                The setting base class
            </summary>
        </member>
        <member name="M:Alis.Core.Setting.SettingBase.Builder">
            <summary>
                Setting build
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Audio.AudioBackendType">
            <summary>
                The audio type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.AudioBackendType.OS">
            <summary>
                The os audio type
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.AudioBackendType.SFML">
            <summary>
                The sfml audio type
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.AudioClipBase">
            <summary>
                The audio clip base class
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.AudioClipBase.music">
            <summary>
                The music
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.AudioClipBase.player">
            <summary>
                The player
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Audio.AudioClipBase" /> class
            </summary>
            <param name="fullPathAudio">The full path audio</param>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.#ctor(System.String,Alis.Core.Audio.AudioBackendType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Audio.AudioClipBase" /> class
            </summary>
            <param name="fullPathAudio">The full path audio</param>
            <param name="audioBackendType">The audio backend type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.SampleRate">
            <summary>
                Gets or sets the value of the sample rate
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.ChannelCount">
            <summary>
                Gets or sets the value of the channel count
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.Duration">
            <summary>
                Gets or sets the value of the duration
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.Pitch">
            <summary>
                Gets or sets the value of the pitch
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.IsMute">
            <summary>
                Gets or sets the value of the is mute
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.IsPlaying">
            <summary>
                Gets or sets the value of the is playing
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.FullPathAudioFile">
            <summary>
                Gets or sets the value of the full path audio file
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.AudioBackendType">
            <summary>
                Gets the value of the audio backend type
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.IsLooping">
            <summary>
                Gets or sets the value of the is loopping
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.Volume">
            <summary>
                Gets or sets the value of the volume
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.Play">
            <summary>
                Plays this instance
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.Stop">
            <summary>
                Stops this instance
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.Resume">
            <summary>
                Resumes this instance
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Alis.Core.Audio.IAudioRecorder">
            <summary>
                The audio recorder interface
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.IAudioSource`1">
            <summary>
                The audio source interface
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.AudioClip">
            <summary>
                Gets or sets the value of the audio clip base
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.IsPlaying">
            <summary>
                Gets the value of the is playing
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.PlayOnAwake">
            <summary>
                Gets or sets the value of the play on awake
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.Mute">
            <summary>
                Gets or sets the value of the mute
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.Loop">
            <summary>
                Gets or sets the value of the loop
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.Volume">
            <summary>
                Gets or sets the value of the volume
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.IAudioSource`1.Play">
            <summary>
                Plays this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.IAudioSource`1.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.IAudioSource`1.Resume">
            <summary>
                Resumes this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.OS.Interfaces.IPlayer">
            <summary>
                The player interface
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Interfaces.IPlayer.Playing">
            <summary>
                Gets the value of the playing
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Interfaces.IPlayer.Paused">
            <summary>
                Gets the value of the paused
            </summary>
        </member>
        <member name="E:Alis.Core.Audio.OS.Interfaces.IPlayer.PlaybackFinished">
            <summary>
                playback
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Interfaces.IPlayer.Play(System.String)">
            <summary>
                Plays the file name
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Interfaces.IPlayer.Pause">
            <summary>
                Pauses this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Interfaces.IPlayer.Resume">
            <summary>
                Resumes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Interfaces.IPlayer.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Interfaces.IPlayer.SetVolume(System.Byte)">
            <summary>
                Sets the volume using the specified percent
            </summary>
            <param name="percent">The percent</param>
        </member>
        <member name="T:Alis.Core.Audio.OS.Player">
            <summary>
                The player class
            </summary>
            <seealso cref="T:Alis.Core.Audio.OS.Interfaces.IPlayer" />
        </member>
        <member name="F:Alis.Core.Audio.OS.Player._internalPlayer">
            <summary>
                The internal player
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Audio.OS.Player" /> class
            </summary>
            <exception cref="T:System.Exception">No implementation exist for the current OS</exception>
        </member>
        <member name="E:Alis.Core.Audio.OS.Player.PlaybackFinished">
            <summary>
                Internally, sets Playing flag to false. Additional handlers can be attached to it to handle any custom logic.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Player.Playing">
            <summary>
                Indicates that the audio is currently playing.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Player.Paused">
            <summary>
                Indicates that the audio playback is currently paused.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.Play(System.String)">
            <summary>
                Will stop any current playback and will start playing the specified audio file. The fileName parameter can be an
                absolute path or a path relative to the directory where the library is located. Sets Playing flag to true. Sets
                Paused flag to false.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.Pause">
            <summary>
                Pauses any ongong playback. Sets Paused flag to true. Doesn't modify Playing flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.Resume">
            <summary>
                Resumes any paused playback. Sets Paused flag to false. Doesn't modify Playing flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.Stop">
            <summary>
                Stops any current playback and clears the buffer. Sets Playing and Paused flags to false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.SetVolume(System.Byte)">
            <summary>
                Sets the playing volume as percent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.OnPlaybackFinished(System.Object,System.EventArgs)">
            <summary>
                Ons the playback finished using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="T:Alis.Core.Audio.OS.Players.LinuxPlayer">
            <summary>
                The linux player class
            </summary>
            <seealso cref="T:Alis.Core.Audio.OS.Players.UnixPlayerBase" />
            <seealso cref="T:Alis.Core.Audio.OS.Interfaces.IPlayer" />
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.LinuxPlayer.SetVolume(System.Byte)">
            <summary>
                Sets the volume using the specified percent
            </summary>
            <param name="percent">The percent</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Percent can't exceed 100</exception>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.LinuxPlayer.GetBashCommand(System.String)">
            <summary>
                Gets the bash command using the specified file name
            </summary>
            <param name="fileName">The file name</param>
            <returns>The string</returns>
        </member>
        <member name="T:Alis.Core.Audio.OS.Players.MacPlayer">
            <summary>
                The mac player class
            </summary>
            <seealso cref="T:Alis.Core.Audio.OS.Players.UnixPlayerBase" />
            <seealso cref="T:Alis.Core.Audio.OS.Interfaces.IPlayer" />
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.MacPlayer.SetVolume(System.Byte)">
            <summary>
                Sets the volume using the specified percent
            </summary>
            <param name="percent">The percent</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Percent can't exceed 100</exception>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.MacPlayer.GetBashCommand(System.String)">
            <summary>
                Gets the bash command using the specified file name
            </summary>
            <param name="fileName">The file name</param>
            <returns>The string</returns>
        </member>
        <member name="T:Alis.Core.Audio.OS.Players.UnixPlayerBase">
            <summary>
                The unix player base class
            </summary>
            <seealso cref="T:Alis.Core.Audio.OS.Interfaces.IPlayer" />
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.UnixPlayerBase.PauseProcessCommand">
            <summary>
                The pause process command
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.UnixPlayerBase.ResumeProcessCommand">
            <summary>
                The resume process command
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.UnixPlayerBase._process">
            <summary>
                The process
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Players.UnixPlayerBase.Playing">
            <summary>
                Gets or sets the value of the playing
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Players.UnixPlayerBase.Paused">
            <summary>
                Gets or sets the value of the paused
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.Play(System.String)">
            <summary>
                Plays the file name
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.Pause">
            <summary>
                Pauses this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.Resume">
            <summary>
                Resumes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.SetVolume(System.Byte)">
            <summary>
                Sets the volume using the specified percent
            </summary>
            <param name="percent">The percent</param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.GetBashCommand(System.String)">
            <summary>
                Gets the bash command using the specified file name
            </summary>
            <param name="fileName">The file name</param>
            <returns>The string</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.StartBashProcess(System.String)">
            <summary>
                Starts the bash process using the specified command
            </summary>
            <param name="command">The command</param>
            <returns>The process</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.HandlePlaybackFinished(System.Object,System.EventArgs)">
            <summary>
                Handles the playback finished using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="T:Alis.Core.Audio.OS.Players.WindowsPlayer">
            <summary>
                The windows player class
            </summary>
            <seealso cref="T:Alis.Core.Audio.OS.Interfaces.IPlayer" />
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.WindowsPlayer._fileName">
            <summary>
                The file name
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.WindowsPlayer._playbackTimer">
            <summary>
                The playback timer
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.WindowsPlayer._playStopwatch">
            <summary>
                The play stopwatch
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Players.WindowsPlayer.Playing">
            <summary>
                Gets or sets the value of the playing
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Players.WindowsPlayer.Paused">
            <summary>
                Gets or sets the value of the paused
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.Play(System.String)">
            <summary>
                Plays the file name
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.Pause">
            <summary>
                Pauses this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.Resume">
            <summary>
                Resumes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.SetVolume(System.Byte)">
            <summary>
                Sets the volume using the specified percent
            </summary>
            <param name="percent">The percent</param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.mciSendString(System.String,System.Text.StringBuilder,System.Int32,System.IntPtr)">
            <summary>
                Mcis the send string using the specified command
            </summary>
            <param name="command">The command</param>
            <param name="stringReturn">The string return</param>
            <param name="returnLength">The return length</param>
            <param name="hwndCallback">The hwnd callback</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.mciGetErrorString(System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>
                Mcis the get error string using the specified error code
            </summary>
            <param name="errorCode">The error code</param>
            <param name="errorText">The error text</param>
            <param name="errorTextSize">The error text size</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.waveOutSetVolume(System.IntPtr,System.UInt32)">
            <summary>
                Waves the out set volume using the specified hwo
            </summary>
            <param name="hwo">The hwo</param>
            <param name="dwVolume">The dw volume</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.HandlePlaybackFinished(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
                Handles the playback finished using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.ExecuteMsiCommand(System.String)">
            <summary>
                Executes the msi command using the specified command string
            </summary>
            <param name="commandString">The command string</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Alis.Core.Audio.OS.Utils.FileUtil">
            <summary>
                The file util class
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.OS.Utils.FileUtil.TempDirName">
            <summary>
                The temp dir name
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Utils.FileUtil.CheckFileToPlay(System.String)">
            <summary>
                Checks the file to play using the specified original file name
            </summary>
            <param name="originalFileName">The original file name</param>
            <returns>The file name to return</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Utils.FileUtil.ClearTempFiles">
            <summary>
                Clears the temp files
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.Listener">
            <summary>
                The audio listener is the point in the scene
                from where all the sounds are heard
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Listener.GlobalVolume">
            <summary>
                The volume is a number between 0 and 100; it is combined with
                the individual volume of each sound / music.
                The default value for the volume is 100 (maximum).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Listener.Position">
            <summary>
                3D position of the listener (default is (0, 0, 0))
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Listener.Direction">
            <summary>
                The direction (also called "at vector") is the vector
                pointing forward from the listener's perspective. Together
                with the up vector, it defines the 3D orientation of the
                listener in the scene. The direction vector doesn't
                have to be normalized.
                The default listener's direction is (0, 0, -1).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Listener.UpVector">
            <summary>
                The up vector is the vector that points upward from the
                listener's perspective. Together with the direction, it
                defines the 3D orientation of the listener in the scene.
                The up vector doesn't have to be normalized.
                The default listener's up vector is (0, 1, 0). It is usually
                not necessary to change it, especially in 2D scenarios.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_setGlobalVolume(System.Single)">
            <summary>
                Sfs the listener set global volume using the specified volume
            </summary>
            <param name="volume">The volume</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_getGlobalVolume">
            <summary>
                Sfs the listener get global volume
            </summary>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_setPosition(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the listener set position using the specified position
            </summary>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_getPosition">
            <summary>
                Sfs the listener get position
            </summary>
            <returns>The vector 3f</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_setDirection(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the listener set direction using the specified direction
            </summary>
            <param name="direction">The direction</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_getDirection">
            <summary>
                Sfs the listener get direction
            </summary>
            <returns>The vector 3f</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_setUpVector(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the listener set up vector using the specified up vector
            </summary>
            <param name="upVector">The up vector</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_getUpVector">
            <summary>
                Sfs the listener get up vector
            </summary>
            <returns>The vector 3f</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.Music">
            <summary>
                Streamed music played from an audio file
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.Music.myStream">
            <summary>
                The my stream
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.#ctor(System.String)">
            <summary>
                Constructs a music from an audio file
            </summary>
            <param name="filename">Path of the music file to open</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.#ctor(System.IO.Stream)">
            <summary>
                Constructs a music from a custom stream
            </summary>
            <param name="stream">Source stream to read from</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.#ctor(System.Byte[])">
            <summary>
                Constructs a music from an audio file in memory
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.SampleRate">
            <summary>
                Sample rate of the music.
                The sample rate is the number of audio samples played per
                second. The higher, the better the quality.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.ChannelCount">
            <summary>
                Number of channels (1 = mono, 2 = stereo)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Status">
            <summary>
                Current status of the music (see SoundStatus enum)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Duration">
            <summary>
                Total duration of the music
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Loop">
            <summary>
                Flag if the music should loop after reaching the end.
                If set, the music will restart from beginning after
                reaching the end and so on, until it is stopped or
                Loop = false is set.
                The default looping state for music is false.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Pitch">
            <summary>
                Pitch of the music.
                The pitch represents the perceived fundamental frequency
                of a sound; thus you can make a sound more acute or grave
                by changing its pitch. A side effect of changing the pitch
                is to modify the playing speed of the sound as well.
                The default value for the pitch is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Volume">
            <summary>
                Volume of the music.
                The volume is a value between 0 (mute) and 100 (full volume).
                The default value for the volume is 100.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Position">
            <summary>
                3D position of the music in the audio scene.
                Only sounds with one channel (mono sounds) can be
                spatialized.
                The default position of a sound is (0, 0, 0).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.RelativeToListener">
            <summary>
                Make the music's position relative to the listener or absolute.
                Making a sound relative to the listener will ensure that it will always
                be played the same way regardless the position of the listener.
                This can be useful for non-spatialized sounds, sounds that are
                produced by the listener, or sounds attached to it.
                The default value is false (position is absolute).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.MinDistance">
            <summary>
                Minimum distance of the music.
                The "minimum distance" of a sound is the maximum
                distance at which it is heard at its maximum volume. Further
                than the minimum distance, it will start to fade out according
                to its attenuation factor. A value of 0 ("inside the head
                of the listener") is an invalid value and is forbidden.
                The default value of the minimum distance is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Attenuation">
            <summary>
                Attenuation factor of the music.
                The attenuation is a multiplicative factor which makes
                the music more or less loud according to its distance
                from the listener. An attenuation of 0 will produce a
                non-attenuated sound, i.e. its volume will always be the same
                whether it is heard from near or from far. On the other hand,
                an attenuation value such as 100 will make the sound fade out
                very quickly as it gets further from the listener.
                The default value of the attenuation is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.PlayingOffset">
            <summary>
                Current playing position of the music.
                The playing position can be changed when the music is
                either paused or playing.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.LoopPoints">
            <summary>
                Current loop points of the music.
                Since setting performs some adjustments on the
                provided values and rounds them to internal samples, getting this
                value later is not guaranteed to return the same times passed
                into it. However, it is guaranteed to return times that will map
                to the valid internal samples of this Music if they are later
                set again.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.Play">
            <summary>
                Start or resume playing the audio stream.
                This function starts the stream if it was stopped, resumes
                it if it was paused, and restarts it from beginning if it
                was it already playing.
                This function uses its own thread so that it doesn't block
                the rest of the program while the stream is played.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.Pause">
            <summary>
                Pause the audio stream.
                This function pauses the stream if it was playing,
                otherwise (stream already paused or stopped) it has no effect.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.Stop">
            <summary>
                Stop playing the audio stream.
                This function stops the stream if it was playing or paused,
                and does nothing if it was already stopped.
                It also resets the playing position (unlike Pause()).
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_createFromFile(System.String)">
            <summary>
                Sfs the music create from file using the specified filename
            </summary>
            <param name="filename">The filename</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_createFromStream(System.IntPtr)">
            <summary>
                Sfs the music create from stream using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_createFromMemory(System.IntPtr,System.UInt64)">
            <summary>
                Sfs the music create from memory using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="size">The size</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_destroy(System.IntPtr)">
            <summary>
                Sfs the music destroy using the specified music stream
            </summary>
            <param name="musicStream">The music stream</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_play(System.IntPtr)">
            <summary>
                Sfs the music play using the specified music
            </summary>
            <param name="music">The music</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_pause(System.IntPtr)">
            <summary>
                Sfs the music pause using the specified music
            </summary>
            <param name="music">The music</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_stop(System.IntPtr)">
            <summary>
                Sfs the music stop using the specified music
            </summary>
            <param name="music">The music</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getStatus(System.IntPtr)">
            <summary>
                Sfs the music get status using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The sound status</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getDuration(System.IntPtr)">
            <summary>
                Sfs the music get duration using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The systems time</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getLoopPoints(System.IntPtr)">
            <summary>
                Sfs the music get loop points using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The time span</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setLoopPoints(System.IntPtr,Alis.Core.Audio.SFML.Music.TimeSpan)">
            <summary>
                Sfs the music set loop points using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="timePoints">The time points</param>
            <returns>The time span</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getChannelCount(System.IntPtr)">
            <summary>
                Sfs the music get channel count using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getSampleRate(System.IntPtr)">
            <summary>
                Sfs the music get sample rate using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setPitch(System.IntPtr,System.Single)">
            <summary>
                Sfs the music set pitch using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="pitch">The pitch</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setLoop(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the music set loop using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="loop">The loop</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setVolume(System.IntPtr,System.Single)">
            <summary>
                Sfs the music set volume using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="volume">The volume</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setPosition(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the music set position using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setRelativeToListener(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the music set relative to listener using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="relative">The relative</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setMinDistance(System.IntPtr,System.Single)">
            <summary>
                Sfs the music set min distance using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="minDistance">The min distance</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setAttenuation(System.IntPtr,System.Single)">
            <summary>
                Sfs the music set attenuation using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="attenuation">The attenuation</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setPlayingOffset(System.IntPtr,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Sfs the music set playing offset using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="timeOffset">The time offset</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getLoop(System.IntPtr)">
            <summary>
                Describes whether sf music get loop
            </summary>
            <param name="music">The music</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getPitch(System.IntPtr)">
            <summary>
                Sfs the music get pitch using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getVolume(System.IntPtr)">
            <summary>
                Sfs the music get volume using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getPosition(System.IntPtr)">
            <summary>
                Sfs the music get position using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The vector 3f</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_isRelativeToListener(System.IntPtr)">
            <summary>
                Describes whether sf music is relative to listener
            </summary>
            <param name="music">The music</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getMinDistance(System.IntPtr)">
            <summary>
                Sfs the music get min distance using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getAttenuation(System.IntPtr)">
            <summary>
                Sfs the music get attenuation using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getPlayingOffset(System.IntPtr)">
            <summary>
                Sfs the music get playing offset using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The systems time</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.Music.TimeSpan">
            <summary>
                The time span
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.Music.TimeSpan.offset">
            <summary>
                The offset
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.Music.TimeSpan.length">
            <summary>
                The length
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.Sound">
            <summary>
                Regular sound that can be played in the audio environment
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.Sound.myBuffer">
            <summary>
                The my buffer
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.#ctor">
            <summary>
                Default constructor (invalid sound)
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.#ctor(Alis.Core.Audio.SFML.SoundBuffer)">
            <summary>
                Construct the sound with a buffer
            </summary>
            <param name="buffer">Sound buffer containing the audio data to play with the sound</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.#ctor(Alis.Core.Audio.SFML.Sound)">
            <summary>
                Construct the sound from another source
            </summary>
            <param name="copy">Sound to copy</param>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.SoundBuffer">
            <summary>
                Buffer containing the sound data to play through the sound.
                It is important to note that the sound buffer is not copied,
                thus the SoundBuffer instance must remain alive as long
                as it is attached to the sound.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Status">
            <summary>
                Current status of the sound (see SoundStatus enum)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Loop">
            <summary>
                Flag if the sound should loop after reaching the end.
                If set, the sound will restart from beginning after
                reaching the end and so on, until it is stopped or
                Loop = false is set.
                The default looping state for sounds is false.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Pitch">
            <summary>
                Pitch of the sound.
                The pitch represents the perceived fundamental frequency
                of a sound; thus you can make a sound more acute or grave
                by changing its pitch. A side effect of changing the pitch
                is to modify the playing speed of the sound as well.
                The default value for the pitch is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Volume">
            <summary>
                Volume of the sound.
                The volume is a value between 0 (mute) and 100 (full volume).
                The default value for the volume is 100.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.PlayingOffset">
            <summary>
                Current playing position of the sound.
                The playing position can be changed when the sound is
                either paused or playing.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Position">
            <summary>
                3D position of the sound in the audio scene.
                Only sounds with one channel (mono sounds) can be
                spatialized.
                The default position of a sound is (0, 0, 0).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.RelativeToListener">
            <summary>
                Make the music's position relative to the listener or absolute.
                Making a sound relative to the listener will ensure that it will always
                be played the same way regardless the position of the listener.
                This can be useful for non-spatialized sounds, sounds that are
                produced by the listener, or sounds attached to it.
                The default value is false (position is absolute).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.MinDistance">
            <summary>
                Minimum distance of the sound.
                The "minimum distance" of a sound is the maximum
                distance at which it is heard at its maximum volume. Further
                than the minimum distance, it will start to fade out according
                to its attenuation factor. A value of 0 ("inside the head
                of the listener") is an invalid value and is forbidden.
                The default value of the minimum distance is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Attenuation">
            <summary>
                Attenuation factor of the music.
                The attenuation is a multiplicative factor which makes
                the music more or less loud according to its distance
                from the listener. An attenuation of 0 will produce a
                non-attenuated sound, i.e. its volume will always be the same
                whether it is heard from near or from far. On the other hand,
                an attenuation value such as 100 will make the sound fade out
                very quickly as it gets further from the listener.
                The default value of the attenuation is 1.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.Play">
            <summary>
                Start or resume playing the sound.
                This function starts the stream if it was stopped, resumes
                it if it was paused, and restarts it from beginning if it
                was it already playing.
                This function uses its own thread so that it doesn't block
                the rest of the program while the sound is played.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.Pause">
            <summary>
                Pause the sound.
                This function pauses the sound if it was playing,
                otherwise (sound already paused or stopped) it has no effect.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.Stop">
            <summary>
                Stop playing the sound.
                This function stops the sound if it was playing or paused,
                and does nothing if it was already stopped.
                It also resets the playing position (unlike pause()).
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_create">
            <summary>
                Sfs the sound create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_copy(System.IntPtr)">
            <summary>
                Sfs the sound copy using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_destroy(System.IntPtr)">
            <summary>
                Sfs the sound destroy using the specified sound
            </summary>
            <param name="sound">The sound</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_play(System.IntPtr)">
            <summary>
                Sfs the sound play using the specified sound
            </summary>
            <param name="sound">The sound</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_pause(System.IntPtr)">
            <summary>
                Sfs the sound pause using the specified sound
            </summary>
            <param name="sound">The sound</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_stop(System.IntPtr)">
            <summary>
                Sfs the sound stop using the specified sound
            </summary>
            <param name="sound">The sound</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setBuffer(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the sound set buffer using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="buffer">The buffer</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getBuffer(System.IntPtr)">
            <summary>
                Sfs the sound get buffer using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setLoop(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the sound set loop using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="loop">The loop</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getLoop(System.IntPtr)">
            <summary>
                Describes whether sf sound get loop
            </summary>
            <param name="sound">The sound</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getStatus(System.IntPtr)">
            <summary>
                Sfs the sound get status using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The sound status</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setPitch(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound set pitch using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="pitch">The pitch</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setVolume(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound set volume using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="volume">The volume</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setPosition(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the sound set position using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setRelativeToListener(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the sound set relative to listener using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="relative">The relative</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setMinDistance(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound set min distance using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="minDistance">The min distance</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setAttenuation(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound set attenuation using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="attenuation">The attenuation</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setPlayingOffset(System.IntPtr,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Sfs the sound set playing offset using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="timeOffset">The time offset</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getPitch(System.IntPtr)">
            <summary>
                Sfs the sound get pitch using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getVolume(System.IntPtr)">
            <summary>
                Sfs the sound get volume using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getPosition(System.IntPtr)">
            <summary>
                Sfs the sound get position using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The vector 3f</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_isRelativeToListener(System.IntPtr)">
            <summary>
                Describes whether sf sound is relative to listener
            </summary>
            <param name="sound">The sound</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getMinDistance(System.IntPtr)">
            <summary>
                Sfs the sound get min distance using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getAttenuation(System.IntPtr)">
            <summary>
                Sfs the sound get attenuation using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getPlayingOffset(System.IntPtr)">
            <summary>
                Sfs the sound get playing offset using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The systems time</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundBuffer">
            <summary>
                Storage for audio samples defining a sound
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.#ctor(System.String)">
            <summary>
                Construct a sound buffer from a file
                Here is a complete list of all the supported audio formats:
                ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
                w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </summary>
            <param name="filename">Path of the sound file to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.#ctor(System.IO.Stream)">
            <summary>
                Construct a sound buffer from a custom stream.
                Here is a complete list of all the supported audio formats:
                ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
                w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </summary>
            <param name="stream">Source stream to read from</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.#ctor(System.Byte[])">
            <summary>
                Construct a sound buffer from a file in memory.
                Here is a complete list of all the supported audio formats:
                ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
                w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.#ctor(System.Int16[],System.UInt32,System.UInt32)">
            <summary>
                Construct a sound buffer from an array of samples
            </summary>
            <param name="samples">Array of samples</param>
            <param name="channelCount">Channel count</param>
            <param name="sampleRate">Sample rate</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.#ctor(Alis.Core.Audio.SFML.SoundBuffer)">
            <summary>
                Construct a sound buffer from another sound buffer
            </summary>
            <param name="copy">Sound buffer to copy</param>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundBuffer.SampleRate">
            <summary>
                Sample rate of the sound buffer.
                The sample rate is the number of audio samples played per
                second. The higher, the better the quality.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundBuffer.ChannelCount">
            <summary>
                Number of channels (1 = mono, 2 = stereo)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundBuffer.Duration">
            <summary>
                Total duration of the buffer
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundBuffer.Samples">
            <summary>
                Array of audio samples stored in the buffer.
                The format of the returned samples is 16 bits signed integer
                (sf::Int16).
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.SaveToFile(System.String)">
            <summary>
                Save the sound buffer to an audio file.
                Here is a complete list of all the supported audio formats:
                ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
                w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </summary>
            <param name="filename">Path of the sound file to write</param>
            <returns>True if saving has been successful</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_createFromFile(System.String)">
            <summary>
                Sfs the sound buffer create from file using the specified filename
            </summary>
            <param name="filename">The filename</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_createFromStream(System.IntPtr)">
            <summary>
                Sfs the sound buffer create from stream using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_createFromMemory(System.IntPtr,System.UInt64)">
            <summary>
                Sfs the sound buffer create from memory using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="size">The size</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_createFromSamples(System.Int16*,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Sfs the sound buffer create from samples using the specified samples
            </summary>
            <param name="samples">The samples</param>
            <param name="sampleCount">The sample count</param>
            <param name="channelsCount">The channels count</param>
            <param name="sampleRate">The sample rate</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_copy(System.IntPtr)">
            <summary>
                Sfs the sound buffer copy using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_destroy(System.IntPtr)">
            <summary>
                Sfs the sound buffer destroy using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_saveToFile(System.IntPtr,System.String)">
            <summary>
                Describes whether sf sound buffer save to file
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <param name="filename">The filename</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_getSamples(System.IntPtr)">
            <summary>
                Sfs the sound buffer get samples using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_getSampleCount(System.IntPtr)">
            <summary>
                Sfs the sound buffer get sample count using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_getSampleRate(System.IntPtr)">
            <summary>
                Sfs the sound buffer get sample rate using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_getChannelCount(System.IntPtr)">
            <summary>
                Sfs the sound buffer get channel count using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_getDuration(System.IntPtr)">
            <summary>
                Sfs the sound buffer get duration using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The systems time</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundBufferRecorder">
            <summary>
                Specialized SoundRecorder which saves the captured
                audio data into a sound buffer
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundBufferRecorder.mySamplesArray">
            <summary>
                The list
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundBufferRecorder.mySoundBuffer">
            <summary>
                The my sound buffer
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundBufferRecorder.SoundBuffer">
            <summary>
                Sound buffer containing the captured audio data
                The sound buffer is valid only after the capture has ended.
                This function provides a reference to the internal
                sound buffer, but you should make a copy of it if you want
                to make any modifications to it.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBufferRecorder.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBufferRecorder.OnStart">
            <summary>
                Called when a new capture starts
            </summary>
            <returns>False to abort recording audio data, true to continue</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBufferRecorder.OnProcessSamples(System.Int16[])">
            <summary>
                Process a new chunk of recorded samples
            </summary>
            <param name="samples">Array of samples to process</param>
            <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBufferRecorder.OnStop">
            <summary>
                Called when the current capture stops
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundRecorder">
            <summary>
                Base class intended for capturing sound data
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundRecorder.myProcessCallback">
            <summary>
                The my process callback
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundRecorder.myStartCallback">
            <summary>
                The my start callback
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundRecorder.myStopCallback">
            <summary>
                The my stop callback
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundRecorder.SampleRate">
            <summary>
                Sample rate of the sound recorder.
            </summary>
            <remarks>
                The sample rate defines the number of audio samples
                captured per second. The higher, the better the quality
                (for example, 44100 samples/sec is CD quality).
            </remarks>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundRecorder.ChannelCount">
            <summary>
                Get/Set the channel count of the audio capture device
            </summary>
            <remarks>
                This method allows you to specify the number of channels
                used for recording. Currently only 16-bit mono (1) and
                16-bit stereo (2) are supported.
            </remarks>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundRecorder.IsAvailable">
            <summary>
                Check if the system supports audio capture.
            </summary>
            <remarks>
                This function should always be called before using
                the audio capture features. If it returns false, then
                any attempt to use the SoundRecorder or one of its derived
                classes will fail.
            </remarks>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundRecorder.AvailableDevices">
            <summary>
                Get the list of the names of all available audio capture devices
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundRecorder.DefaultDevice">
            <summary>
                Get the name of the default audio capture device
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.Start">
            <summary>
                Start the capture using the default sample rate (44100 Hz).
                Please note that only one capture can happen at the same time.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.Start(System.UInt32)">
            <summary>
                Start the capture.
                The sampleRate parameter defines the number of audio samples
                captured per second. The higher, the better the quality
                (for example, 44100 samples/sec is CD quality).
                This function uses its own thread so that it doesn't block
                the rest of the program while the capture runs.
                Please note that only one capture can happen at the same time.
            </summary>
            <param name="sampleRate"> Sound frequency; the more samples, the higher the quality (44100 by default = CD quality)</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.Stop">
            <summary>
                Stop the capture
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.OnStart">
            <summary>
                Start capturing audio data.
                This virtual function may be overridden by a derived class
                if something has to be done every time a new capture
                starts. If not, this function can be ignored; the default
                implementation does nothing.
            </summary>
            <returns>False to abort recording audio data, true to continue</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.OnProcessSamples(System.Int16[])">
            <summary>
                Process a new chunk of recorded samples.
                This virtual function is called every time a new chunk of
                recorded data is available. The derived class can then do
                whatever it wants with it (storing it, playing it, sending
                it over the network, etc.).
            </summary>
            <param name="samples">Array of samples to process</param>
            <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.OnStop">
            <summary>
                Stop capturing audio data.
                This virtual function may be overridden by a derived class
                if something has to be done every time the capture
                ends. If not, this function can be ignored; the default
                implementation does nothing.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.SetProcessingInterval(Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                The processing interval controls the period
                between calls to the onProcessSamples function. You may
                want to use a small interval if you want to process the
                recorded data in real time, for example.
                Note: this is only a hint, the actual period may vary.
                So don't rely on this parameter to implement precise timing.
                The default processing interval is 100 ms.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.SetDevice(System.String)">
            <summary>
                Set the audio capture device
            </summary>
            <param name="name">The name of the audio capture device</param>
            <returns>True, if it was able to set the requested device</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.GetDevice">
            <summary>
                Get the name of the current audio capture device
            </summary>
            <returns>The name of the current audio capture device</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.ProcessSamples(System.IntPtr,System.UInt32,System.IntPtr)">
            <summary>
                Function called directly by the C library ; convert
                arguments and forward them to the internal virtual function
            </summary>
            <param name="samples">Pointer to the array of samples</param>
            <param name="nbSamples">Number of samples in the array</param>
            <param name="userData">User data -- unused</param>
            <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_create(Alis.Core.Audio.SFML.SoundRecorder.StartCallback,Alis.Core.Audio.SFML.SoundRecorder.ProcessCallback,Alis.Core.Audio.SFML.SoundRecorder.StopCallback,System.IntPtr)">
            <summary>
                Sfs the sound recorder create using the specified on start
            </summary>
            <param name="onStart">The on start</param>
            <param name="onProcess">The on process</param>
            <param name="onStop">The on stop</param>
            <param name="userData">The user data</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_destroy(System.IntPtr)">
            <summary>
                Sfs the sound recorder destroy using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_start(System.IntPtr,System.UInt32)">
            <summary>
                Describes whether sf sound recorder start
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <param name="sampleRate">The sample rate</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_stop(System.IntPtr)">
            <summary>
                Sfs the sound recorder stop using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_getSampleRate(System.IntPtr)">
            <summary>
                Sfs the sound recorder get sample rate using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_isAvailable">
            <summary>
                Describes whether sf sound recorder is available
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_setProcessingInterval(System.IntPtr,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Sfs the sound recorder set processing interval using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <param name="interval">The interval</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_getAvailableDevices(System.UInt32@)">
            <summary>
                Sfs the sound recorder get available devices using the specified count
            </summary>
            <param name="count">The count</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_getDefaultDevice">
            <summary>
                Sfs the sound recorder get default device
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_setDevice(System.IntPtr,System.String)">
            <summary>
                Describes whether sf sound recorder set device
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <param name="name">The name</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_getDevice(System.IntPtr)">
            <summary>
                Sfs the sound recorder get device using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_setChannelCount(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the sound recorder set channel count using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <param name="channelCount">The channel count</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_getChannelCount(System.IntPtr)">
            <summary>
                Sfs the sound recorder get channel count using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <returns>The uint</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundRecorder.StartCallback">
            <summary>
                The start callback
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundRecorder.ProcessCallback">
            <summary>
                The process callback
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundRecorder.StopCallback">
            <summary>
                The stop callback
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundStatus">
            <summary>
                Enumeration of all possible sound states
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStatus.Stopped">
            <summary>Sound is not playing</summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStatus.Paused">
            <summary>Sound is paused</summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStatus.Playing">
            <summary>Sound is playing</summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundStream">
            <summary>
                Abstract base class for streamed audio sources
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStream.myGetDataCallback">
            <summary>
                The my get data callback
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStream.mySeekCallback">
            <summary>
                The my seek callback
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStream.myTempBuffer">
            <summary>
                The my temp buffer
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.SampleRate">
            <summary>
                Sample rate of the stream
                The sample rate is the number of audio samples played per
                second. The higher, the better the quality.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.ChannelCount">
            <summary>
                Number of channels (1 = mono, 2 = stereo)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Status">
            <summary>
                Current status of the sound stream (see SoundStatus enum)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Loop">
            <summary>
                Flag if the music should loop after reaching the end.
                If set, the music will restart from beginning after
                reaching the end and so on, until it is stopped or
                Loop = false is set.
                The default looping state for music is false.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Pitch">
            <summary>
                Pitch of the stream.
                The pitch represents the perceived fundamental frequency
                of a sound; thus you can make a sound more acute or grave
                by changing its pitch. A side effect of changing the pitch
                is to modify the playing speed of the sound as well.
                The default value for the pitch is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Volume">
            <summary>
                Volume of the stream.
                The volume is a value between 0 (mute) and 100 (full volume).
                The default value for the volume is 100.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Position">
            <summary>
                3D position of the stream in the audio scene.
                Only sounds with one channel (mono sounds) can be
                spatialized.
                The default position of a sound is (0, 0, 0).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.RelativeToListener">
            <summary>
                Make the stream's position relative to the listener or absolute.
                Making a sound relative to the listener will ensure that it will always
                be played the same way regardless the position of the listener.
                This can be useful for non-spatialized sounds, sounds that are
                produced by the listener, or sounds attached to it.
                The default value is false (position is absolute).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.MinDistance">
            <summary>
                Minimum distance of the music.
                The "minimum distance" of a sound is the maximum
                distance at which it is heard at its maximum volume. Further
                than the minimum distance, it will start to fade out according
                to its attenuation factor. A value of 0 ("inside the head
                of the listener") is an invalid value and is forbidden.
                The default value of the minimum distance is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Attenuation">
            <summary>
                Attenuation factor of the stream.
                The attenuation is a multiplicative factor which makes
                the music more or less loud according to its distance
                from the listener. An attenuation of 0 will produce a
                non-attenuated sound, i.e. its volume will always be the same
                whether it is heard from near or from far. On the other hand,
                an attenuation value such as 100 will make the sound fade out
                very quickly as it gets further from the listener.
                The default value of the attenuation is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.PlayingOffset">
            <summary>
                Current playing position of the stream.
                The playing position can be changed when the music is
                either paused or playing.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Play">
            <summary>
                Start or resume playing the audio stream.
                This function starts the stream if it was stopped, resumes
                it if it was paused, and restarts it from beginning if it
                was it already playing.
                This function uses its own thread so that it doesn't block
                the rest of the program while the stream is played.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Pause">
            <summary>
                Pause the audio stream.
                This function pauses the stream if it was playing,
                otherwise (stream already paused or stopped) it has no effect.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Stop">
            <summary>
                Stop playing the audio stream.
                This function stops the stream if it was playing or paused,
                and does nothing if it was already stopped.
                It also resets the playing position (unlike pause()).
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Initialize(System.UInt32,System.UInt32)">
            <summary>
                Set the audio stream parameters, you must call it before Play()
            </summary>
            <param name="channelCount">Number of channels</param>
            <param name="sampleRate">Sample rate, in samples per second</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.OnGetData(System.Int16[]@)">
            <summary>
                Virtual function called each time new audio data is needed to feed the stream
            </summary>
            <param name="samples">Array of samples to fill for the stream</param>
            <returns>True to continue playback, false to stop</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.OnSeek(Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Virtual function called to seek into the stream
            </summary>
            <param name="timeOffset">New position</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.GetData(Alis.Core.Audio.SFML.SoundStream.Chunk@,System.IntPtr)">
            <summary>
                Called each time new audio data is needed to feed the stream
            </summary>
            <param name="dataChunk">Data chunk to fill with new audio samples</param>
            <param name="userData">User data -- unused</param>
            <returns>True to continue playback, false to stop</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Seek(Alis.Core.Aspect.Base.Settings.Time,System.IntPtr)">
            <summary>
                Called to seek in the stream
            </summary>
            <param name="timeOffset">New position</param>
            <param name="userData">User data -- unused</param>
            <returns>If false is returned, the playback is aborted</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_create(Alis.Core.Audio.SFML.SoundStream.GetDataCallbackType,Alis.Core.Audio.SFML.SoundStream.SeekCallbackType,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
                Sfs the sound stream create using the specified on get data
            </summary>
            <param name="onGetData">The on get data</param>
            <param name="onSeek">The on seek</param>
            <param name="channelCount">The channel count</param>
            <param name="sampleRate">The sample rate</param>
            <param name="userData">The user data</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_destroy(System.IntPtr)">
            <summary>
                Sfs the sound stream destroy using the specified sound stream stream
            </summary>
            <param name="soundStreamStream">The sound stream stream</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_play(System.IntPtr)">
            <summary>
                Sfs the sound stream play using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_pause(System.IntPtr)">
            <summary>
                Sfs the sound stream pause using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_stop(System.IntPtr)">
            <summary>
                Sfs the sound stream stop using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getStatus(System.IntPtr)">
            <summary>
                Sfs the sound stream get status using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The sound status</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getChannelCount(System.IntPtr)">
            <summary>
                Sfs the sound stream get channel count using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getSampleRate(System.IntPtr)">
            <summary>
                Sfs the sound stream get sample rate using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setLoop(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the sound stream set loop using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="loop">The loop</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setPitch(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound stream set pitch using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="pitch">The pitch</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setVolume(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound stream set volume using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="volume">The volume</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setPosition(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the sound stream set position using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setRelativeToListener(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the sound stream set relative to listener using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="relative">The relative</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setMinDistance(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound stream set min distance using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="minDistance">The min distance</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setAttenuation(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound stream set attenuation using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="attenuation">The attenuation</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setPlayingOffset(System.IntPtr,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Sfs the sound stream set playing offset using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="timeOffset">The time offset</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getLoop(System.IntPtr)">
            <summary>
                Describes whether sf sound stream get loop
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getPitch(System.IntPtr)">
            <summary>
                Sfs the sound stream get pitch using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getVolume(System.IntPtr)">
            <summary>
                Sfs the sound stream get volume using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getPosition(System.IntPtr)">
            <summary>
                Sfs the sound stream get position using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The vector 3f</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_isRelativeToListener(System.IntPtr)">
            <summary>
                Describes whether sf sound stream is relative to listener
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getMinDistance(System.IntPtr)">
            <summary>
                Sfs the sound stream get min distance using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getAttenuation(System.IntPtr)">
            <summary>
                Sfs the sound stream get attenuation using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getPlayingOffset(System.IntPtr)">
            <summary>
                Sfs the sound stream get playing offset using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The systems time</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundStream.Chunk">
            <summary>
                Structure mapping the C library arguments passed to the data callback
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStream.Chunk.samples">
            <summary>
                The samples
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStream.Chunk.sampleCount">
            <summary>
                The sample count
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundStream.GetDataCallbackType">
            <summary>
                The get data callback type
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundStream.SeekCallbackType">
            <summary>
                The seek callback type
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode">
            <summary>
                Blending modes for drawing
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor">
            <summary>
                Enumeration of the blending factors
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.Zero">
            <summary>(0, 0, 0, 0)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.One">
            <summary>(1, 1, 1, 1)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.SrcColor">
            <summary>(src.r, src.g, src.b, src.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.OneMinusSrcColor">
            <summary>(1, 1, 1, 1) - (src.r, src.g, src.b, src.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.DstColor">
            <summary>(dst.r, dst.g, dst.b, dst.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.OneMinusDstColor">
            <summary>(1, 1, 1, 1) - (dst.r, dst.g, dst.b, dst.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.SrcAlpha">
            <summary>(src.a, src.a, src.a, src.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.OneMinusSrcAlpha">
            <summary>(1, 1, 1, 1) - (src.a, src.a, src.a, src.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.DstAlpha">
            <summary>(dst.a, dst.a, dst.a, dst.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.OneMinusDstAlpha">
            <summary>(1, 1, 1, 1) - (dst.a, dst.a, dst.a, dst.a)</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation">
            <summary>
                Enumeration of the blending equations
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation.Add">
            <summary>Pixel = Src * SrcFactor + Dst * DstFactor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation.Subtract">
            <summary>Pixel = Src * SrcFactor - Dst * DstFactor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation.ReverseSubtract">
            <summary>Pixel = Dst * DstFactor - Src * SrcFactor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Alpha">
            <summary>Blend source and dest according to dest alpha</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Add">
            <summary>Add source to dest</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Multiply">
            <summary>Multiply source and dest</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.None">
            <summary>Overwrite dest with source</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor)">
            <summary>
                Construct the blend mode given the factors and equation
            </summary>
            <param name="sourceFactor">Specifies how to compute the source factor for the color and alpha channels.</param>
            <param name="destinationFactor">Specifies how to compute the destination factor for the color and alpha channels.</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation)">
            <summary>
                Construct the blend mode given the factors and equation
            </summary>
            <param name="sourceFactor">Specifies how to compute the source factor for the color and alpha channels.</param>
            <param name="destinationFactor">Specifies how to compute the destination factor for the color and alpha channels.</param>
            <param name="blendEquation">Specifies how to combine the source and destination colors and alpha.</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation)">
            <summary>
                Construct the blend mode given the factors and equation
            </summary>
            <param name="colorSourceFactor">Specifies how to compute the source factor for the color channels.</param>
            <param name="colorDestinationFactor">Specifies how to compute the destination factor for the color channels.</param>
            <param name="colorBlendEquation">Specifies how to combine the source and destination colors.</param>
            <param name="alphaSourceFactor">Specifies how to compute the source factor.</param>
            <param name="alphaDestinationFactor">Specifies how to compute the destination factor.</param>
            <param name="alphaBlendEquation">Specifies how to combine the source and destination alphas.</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.op_Equality(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode)">
            <summary>
                Compare two blend modes and checks if they are equal
            </summary>
            <returns>Blend Modes are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.op_Inequality(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode)">
            <summary>
                Compare two blend modes and checks if they are not equal
            </summary>
            <returns>Blend Modes are not equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equals(System.Object)">
            <summary>
                Compare blend mode and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and blend mode are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equals(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode)">
            <summary>
                Compare two blend modes and checks if they are equal
            </summary>
            <param name="other">Blend Mode to check</param>
            <returns>blend modes are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.ColorSrcFactor">
            <summary>Source blending factor for the color channels</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.ColorDstFactor">
            <summary>Destination blending factor for the color channels</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.ColorEquation">
            <summary>Blending equation for the color channels</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.AlphaSrcFactor">
            <summary>Source blending factor for the alpha channel</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.AlphaDstFactor">
            <summary>Destination blending factor for the alpha channel</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.AlphaEquation">
            <summary>Blending equation for the alpha channel</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape">
            <summary>
                Specialized shape representing a circle
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.myPointCount">
            <summary>
                The my point count
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.myRadius">
            <summary>
                The my radius
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.#ctor(System.Single)">
            <summary>
                Construct the shape with an initial radius
            </summary>
            <param name="radius">Radius of the shape</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.#ctor(System.Single,System.UInt32)">
            <summary>
                Construct the shape with an initial radius and point count
            </summary>
            <param name="radius">Radius of the shape</param>
            <param name="pointCount">Number of points of the shape</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.CircleShape)">
            <summary>
                Construct the shape from another shape
            </summary>
            <param name="copy">Shape to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.Radius">
            <summary>
                The radius of the shape
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.GetPointCount">
            <summary>
                Get the total number of points of the circle
            </summary>
            <returns>The total point count</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.SetPointCount(System.UInt32)">
            <summary>
                Set the number of points of the circle.
                The count must be greater than 2 to define a valid shape.
            </summary>
            <param name="count">New number of points of the circle</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.GetPoint(System.UInt32)">
            <summary>
                Get the position of a point
                The returned point is in local coordinates, that is,
                the shape's transforms (position, rotation, scale) are
                not taken into account.
                The result is undefined if index is out of the valid range.
            </summary>
            <param name="index">Index of the point to get, in range [0 .. PointCount - 1]</param>
            <returns>index-th point of the shape</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Clock">
            <summary>
                Utility class that measures the elapsed time
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.#ctor">
            <summary>
                Default Constructor
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Clock.ElapsedTime">
            <summary>
                Gets the time elapsed since the last call to Restart
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.Restart">
            <summary>
                This function puts the time counter back to zero.
            </summary>
            <returns>Time elapsed since the clock was started.</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.sfClock_create">
            <summary>
                Sfs the clock create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.sfClock_destroy(System.IntPtr)">
            <summary>
                Sfs the clock destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.sfClock_getElapsedTime(System.IntPtr)">
            <summary>
                Sfs the clock get elapsed time using the specified clock
            </summary>
            <param name="clock">The clock</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.sfClock_restart(System.IntPtr)">
            <summary>
                Sfs the clock restart using the specified clock
            </summary>
            <param name="clock">The clock</param>
            <returns>The time</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Color">
            <summary>
                Utility class for manipulating 32-bits RGBA colors
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
                Construct the color from its red, green and blue components
            </summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
                Construct the color from its red, green, blue and alpha components
            </summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
            <param name="alpha">Alpha (transparency) component</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.#ctor(System.UInt32)">
            <summary>
                Construct the color from 32-bit unsigned integer
            </summary>
            <param name="color">Number containing the RGBA components (in that order)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Construct the color from another
            </summary>
            <param name="color">Color to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.ToInteger">
            <summary>
                Convert a color to a 32-bit unsigned integer
            </summary>
            <returns>Color represented as a 32-bit unsigned integer</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.Equals(System.Object)">
            <summary>
                Compare color and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and color are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.Equals(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Compare two colors and checks if they are equal
            </summary>
            <param name="other">Color to check</param>
            <returns>Colors are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.op_Equality(Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Compare two colors and checks if they are equal
            </summary>
            <returns>Colors are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.op_Inequality(Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Compare two colors and checks if they are not equal
            </summary>
            <returns>Colors are not equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.op_Addition(Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                This operator returns the component-wise sum of two colors.
                Components that exceed 255 are clamped to 255.
            </summary>
            <returns>Result of left + right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.op_Subtraction(Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                This operator returns the component-wise subtraction of two colors.
                Components below 0 are clamped to 0.
            </summary>
            <returns>Result of left - right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.op_Multiply(Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                This operator returns the component-wise multiplication of two colors.
                Components above 255 are clamped to 255.
            </summary>
            <returns>Result of left * right</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.R">
            <summary>Red component of the color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.G">
            <summary>Green component of the color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.B">
            <summary>Blue component of the color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.A">
            <summary>Alpha (transparent) component of the color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Black">
            <summary>Predefined black color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.White">
            <summary>Predefined white color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Red">
            <summary>Predefined red color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Green">
            <summary>Predefined green color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Blue">
            <summary>Predefined blue color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Yellow">
            <summary>Predefined yellow color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Magenta">
            <summary>Predefined magenta color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Cyan">
            <summary>Predefined cyan color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Transparent">
            <summary>Predefined (black) transparent color</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape">
            <summary>
                Specialized shape representing a convex polygon
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.myPoints">
            <summary>
                The my points
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.#ctor(System.UInt32)">
            <summary>
                Construct the shape with an initial point count
            </summary>
            <param name="pointCount">Number of points of the shape</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape)">
            <summary>
                Construct the shape from another shape
            </summary>
            <param name="copy">Shape to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.GetPointCount">
            <summary>
                Get the total number of points of the polygon
            </summary>
            <returns>The total point count</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.SetPointCount(System.UInt32)">
            <summary>
                Set the number of points of the polygon.
                The count must be greater than 2 to define a valid shape.
            </summary>
            <param name="count">New number of points of the polygon</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.GetPoint(System.UInt32)">
            <summary>
                Get the position of a point
                The returned point is in local coordinates, that is,
                the shape's transforms (position, rotation, scale) are
                not taken into account.
                The result is undefined if index is out of the valid range.
            </summary>
            <param name="index">Index of the point to get, in range [0 .. PointCount - 1]</param>
            <returns>index-th point of the shape</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.SetPoint(System.UInt32,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Set the position of a point.
                Don't forget that the polygon must remain convex, and
                the points need to stay ordered!
                PointCount must be set first in order to set the total
                number of points. The result is undefined if index is out
                of the valid range.
            </summary>
            <param name="index">Index of the point to change, in range [0 .. PointCount - 1]</param>
            <param name="point">New position of the point</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.IDrawable">
            <summary>
                Interface for every object that can be drawn to a render window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IDrawable.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the object to a render target
                This is a function that has to be implemented by the
                derived class to define how the drawable should be drawn.
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Font">
            <summary>
                Font is the low-level class for loading and
                manipulating character fonts. This class is meant to
                be used by String2D
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Font.myStream">
            <summary>
                The my stream
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Font.myTextures">
            <summary>
                The texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.#ctor(System.String)">
            <summary>
                Construct the font from a file
            </summary>
            <param name="filename">Font file to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.#ctor(System.IO.Stream)">
            <summary>
                Construct the font from a custom stream
            </summary>
            <param name="stream">Source stream to read from</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.#ctor(System.Byte[])">
            <summary>
                Construct the font from a file in memory
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Font)">
            <summary>
                Construct the font from another font
            </summary>
            <param name="copy">Font to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.#ctor(System.IntPtr)">
            <summary>
                Internal constructor
            </summary>
            <param name="cPointer">Pointer to the object in C library</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetGlyph(System.UInt32,System.UInt32,System.Boolean,System.Single)">
            <summary>
                Get a glyph in the font
            </summary>
            <param name="codePoint">Unicode code point of the character to get</param>
            <param name="characterSize">Character size</param>
            <param name="bold">Retrieve the bold version or the regular one?</param>
            <param name="outlineThickness">Thickness of outline (when != 0 the glyph will not be filled)</param>
            <returns>The glyph corresponding to the character</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetKerning(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Get the kerning offset between two glyphs
            </summary>
            <param name="first">Unicode code point of the first character</param>
            <param name="second">Unicode code point of the second character</param>
            <param name="characterSize">Character size</param>
            <returns>Kerning offset, in pixels</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetLineSpacing(System.UInt32)">
            <summary>
                Get spacing between two consecutive lines
            </summary>
            <param name="characterSize">Character size</param>
            <returns>Line spacing, in pixels</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetUnderlinePosition(System.UInt32)">
            <summary>
                Get the position of the underline
            </summary>
            <param name="characterSize">Character size</param>
            <returns>Underline position, in pixels</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetUnderlineThickness(System.UInt32)">
            <summary>
                Get the thickness of the underline
            </summary>
            <param name="characterSize">Character size</param>
            <returns>Underline thickness, in pixels</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetTexture(System.UInt32)">
            <summary>
                Get the texture containing the glyphs of a given size
            </summary>
            <param name="characterSize">Character size</param>
            <returns>Texture storing the glyphs for the given size</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetInfo">
            <summary>
                Get the font information
            </summary>
            <returns>A structure that holds the font information</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_createFromFile(System.String)">
            <summary>
                Sfs the font create from file using the specified filename
            </summary>
            <param name="filename">The filename</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_createFromStream(System.IntPtr)">
            <summary>
                Sfs the font create from stream using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_createFromMemory(System.IntPtr,System.UInt64)">
            <summary>
                Sfs the font create from memory using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="size">The size</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_copy(System.IntPtr)">
            <summary>
                Sfs the font copy using the specified font
            </summary>
            <param name="font">The font</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_destroy(System.IntPtr)">
            <summary>
                Sfs the font destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getGlyph(System.IntPtr,System.UInt32,System.UInt32,System.Boolean,System.Single)">
            <summary>
                Sfs the font get glyph using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="codePoint">The code point</param>
            <param name="characterSize">The character size</param>
            <param name="bold">The bold</param>
            <param name="outlineThickness">The outline thickness</param>
            <returns>The glyph</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getKerning(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Sfs the font get kerning using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="first">The first</param>
            <param name="second">The second</param>
            <param name="characterSize">The character size</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getLineSpacing(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the font get line spacing using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="characterSize">The character size</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getUnderlinePosition(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the font get underline position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="characterSize">The character size</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getUnderlineThickness(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the font get underline thickness using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="characterSize">The character size</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getTexture(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the font get texture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="characterSize">The character size</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getInfo(System.IntPtr)">
            <summary>
                Sfs the font get info using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The info marshal data</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Font.Info">
            <summary>
                Info holds various information about a font
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Font.Info.Family">
            <summary>The font family</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Font.InfoMarshalData">
            <summary>
                Internal struct used for marshaling the font info
                struct from unmanaged code.
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Font.InfoMarshalData.Family">
            <summary>
                The family
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Glyph">
            <summary>
                Structure describing a glyph (a visual character)
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Glyph.Advance">
            <summary>Offset to move horizontally to the next character</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Glyph.Bounds">
            <summary>Bounding rectangle of the glyph, in coordinates relative to the baseline</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Glyph.TextureRect">
            <summary>Texture coordinates of the glyph inside the font's texture</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Image">
            <summary>
                Image is the low-level class for loading and
                manipulating images
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the image with black color
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Construct the image from a single color
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="color">Color to fill the image with</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.String)">
            <summary>
                Construct the image from a file
            </summary>
            <param name="filename">Path of the image file to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.IO.Stream)">
            <summary>
                Construct the image from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.Byte[])">
            <summary>
                Construct the image from a file in memory
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Color[0:,0:])">
            <summary>
                Construct the image directly from an array of pixels
            </summary>
            <param name="pixels">2 dimensions array containing the pixels</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
                Construct the image directly from an array of pixels
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="pixels">array containing the pixels</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Image)">
            <summary>
                Construct the image from another image
            </summary>
            <param name="copy">Image to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.IntPtr)">
            <summary>
                Internal constructor
            </summary>
            <param name="cPointer">Pointer to the object in C library</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Image.Pixels">
            <summary>
                Get a copy of the array of pixels (RGBA 8 bits integers components)
                Array size is Width x Height x 4
            </summary>
            <returns>Array of pixels</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Image.Size">
            <summary>
                Size of the image, in pixels
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.SaveToFile(System.String)">
            <summary>
                Save the contents of the image to a file
            </summary>
            <param name="filename">Path of the file to save (overwritten if already exist)</param>
            <returns>True if saving was successful</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.CreateMaskFromColor(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Create a transparency mask from a specified colorkey
            </summary>
            <param name="color">Color to become transparent</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.CreateMaskFromColor(Alis.Core.Graphic.D2.SFML.Graphics.Color,System.Byte)">
            <summary>
                Create a transparency mask from a specified colorkey
            </summary>
            <param name="color">Color to become transparent</param>
            <param name="alpha">Alpha value to use for transparent pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.Copy(Alis.Core.Graphic.D2.SFML.Graphics.Image,System.UInt32,System.UInt32)">
            <summary>
                Copy pixels from another image onto this one.
                This function does a slow pixel copy and should only
                be used at initialization time
            </summary>
            <param name="source">Source image to copy</param>
            <param name="destX">X coordinate of the destination position</param>
            <param name="destY">Y coordinate of the destination position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.Copy(Alis.Core.Graphic.D2.SFML.Graphics.Image,System.UInt32,System.UInt32,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Copy pixels from another image onto this one.
                This function does a slow pixel copy and should only
                be used at initialization time
            </summary>
            <param name="source">Source image to copy</param>
            <param name="destX">X coordinate of the destination position</param>
            <param name="destY">Y coordinate of the destination position</param>
            <param name="sourceRect">Sub-rectangle of the source image to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.Copy(Alis.Core.Graphic.D2.SFML.Graphics.Image,System.UInt32,System.UInt32,Alis.Core.Aspect.Math.SFML.IntRect,System.Boolean)">
            <summary>
                Copy pixels from another image onto this one.
                This function does a slow pixel copy and should only
                be used at initialization time
            </summary>
            <param name="source">Source image to copy</param>
            <param name="destX">X coordinate of the destination position</param>
            <param name="destY">Y coordinate of the destination position</param>
            <param name="sourceRect">Sub-rectangle of the source image to copy</param>
            <param name="applyAlpha">Should the copy take in account the source transparency?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.GetPixel(System.UInt32,System.UInt32)">
            <summary>
                Get a pixel from the image
            </summary>
            <param name="x">X coordinate of pixel in the image</param>
            <param name="y">Y coordinate of pixel in the image</param>
            <returns>Color of pixel (x, y)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.SetPixel(System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Change the color of a pixel
            </summary>
            <param name="x">X coordinate of pixel in the image</param>
            <param name="y">Y coordinate of pixel in the image</param>
            <param name="color">New color for pixel (x, y)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.FlipHorizontally">
            <summary>
                Flip the image horizontally
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.FlipVertically">
            <summary>
                Flip the image vertically
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createFromColor(System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the image create from color using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="col">The col</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createFromPixels(System.UInt32,System.UInt32,System.Byte*)">
            <summary>
                Sfs the image create from pixels using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="pixels">The pixels</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createFromFile(System.String)">
            <summary>
                Sfs the image create from file using the specified filename
            </summary>
            <param name="filename">The filename</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createFromStream(System.IntPtr)">
            <summary>
                Sfs the image create from stream using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createFromMemory(System.IntPtr,System.UInt64)">
            <summary>
                Sfs the image create from memory using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="size">The size</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_copy(System.IntPtr)">
            <summary>
                Sfs the image copy using the specified image
            </summary>
            <param name="image">The image</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_destroy(System.IntPtr)">
            <summary>
                Sfs the image destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_saveToFile(System.IntPtr,System.String)">
            <summary>
                Describes whether sf image save to file
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="filename">The filename</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createMaskFromColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color,System.Byte)">
            <summary>
                Sfs the image create mask from color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="col">The col</param>
            <param name="alpha">The alpha</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_copyImage(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,Alis.Core.Aspect.Math.SFML.IntRect,System.Boolean)">
            <summary>
                Sfs the image copy image using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="source">The source</param>
            <param name="destX">The dest</param>
            <param name="destY">The dest</param>
            <param name="sourceRect">The source rect</param>
            <param name="applyAlpha">The apply alpha</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_setPixel(System.IntPtr,System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the image set pixel using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="x">The </param>
            <param name="y">The </param>
            <param name="col">The col</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_getPixel(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
                Sfs the image get pixel using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_getPixelsPtr(System.IntPtr)">
            <summary>
                Sfs the image get pixels ptr using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_getSize(System.IntPtr)">
            <summary>
                Sfs the image get size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2u</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_flipHorizontally(System.IntPtr)">
            <summary>
                Sfs the image flip horizontally using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_flipVertically(System.IntPtr)">
            <summary>
                Sfs the image flip vertically using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType">
            <summary>
                Types of primitives that a VertexArray can render.
                Points and lines have no area, therefore their thickness
                will always be 1 pixel, regardless the current transform
                and view.
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.Points">
            List of individual points
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.Lines">
            List of individual lines
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.LineStrip">
            List of connected lines, a point uses the previous point to form a line
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.Triangles">
            List of individual triangles
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.TriangleStrip">
            List of connected triangles, a point uses the two previous points to form a triangle
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.TriangleFan">
            List of connected triangles, a point uses the common center and the previous point to form a triangle
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.Quads">
            List of individual quads
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.LinesStrip">
            List of connected lines, a point uses the previous point to form a line
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.TrianglesStrip">
            List of connected triangles, a point uses the two previous points to form a triangle
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.TrianglesFan">
            List of connected triangles, a point uses the common center and the previous point to form a triangle
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape">
            <summary>
                Specialized shape representing a rectangle
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.mySize">
            <summary>
                The my size
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the shape with an initial size
            </summary>
            <param name="size">Size of the shape</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape)">
            <summary>
                Construct the shape from another shape
            </summary>
            <param name="copy">Shape to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.Size">
            <summary>
                The size of the rectangle
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.GetPointCount">
            <summary>
                Get the total number of points of the rectangle.
            </summary>
            <returns>
                The total point count. For rectangle shapes,
                this number is always 4.
            </returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.GetPoint(System.UInt32)">
            <summary>
                Get the position of a point
                The returned point is in local coordinates, that is,
                the shape's transforms (position, rotation, scale) are
                not taken into account.
                The result is undefined if index is out of the valid range.
            </summary>
            <param name="index">Index of the point to get, in range [0 .. 3]</param>
            <returns>index-th point of the shape</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates">
            <summary>
                Define the states used for drawing to a RenderTarget
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode)">
            <summary>
                Construct a default set of render states with a custom blend mode
            </summary>
            <param name="blendMode">Blend mode to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Construct a default set of render states with a custom transform
            </summary>
            <param name="transform">Transform to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Construct a default set of render states with a custom texture
            </summary>
            <param name="texture">Texture to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Shader)">
            <summary>
                Construct a default set of render states with a custom shader
            </summary>
            <param name="shader">Shader to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode,Alis.Core.Graphic.D2.SFML.Graphics.Transform,Alis.Core.Graphic.D2.SFML.Graphics.Texture,Alis.Core.Graphic.D2.SFML.Graphics.Shader)">
            <summary>
                Construct a set of render states with all its attributes
            </summary>
            <param name="blendMode">Blend mode to use</param>
            <param name="transform">Transform to use</param>
            <param name="texture">Texture to use</param>
            <param name="shader">Shader to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Copy constructor
            </summary>
            <param name="copy">States to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.Default">
            <summary>Special instance holding the default render states</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.BlendMode">
            <summary>Blending mode</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.Transform">
            <summary>Transform</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.Texture">
            <summary>Texture</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.Shader">
            <summary>Shader</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.Marshal">
            <summary>
                Marshals this instance
            </summary>
            <returns>The data</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData">
            <summary>
                The marshal data
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData.blendMode">
            <summary>
                The blend mode
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData.transform">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData.texture">
            <summary>
                The texture
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData.shader">
            <summary>
                The shader
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget">
            <summary>
                Abstract base class for render targets (renderwindow, renderimage)
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Size">
            <summary>
                Size of the rendering region of the target
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.DefaultView">
            <summary>
                Default view of the target
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.GetView">
            <summary>
                Return the current active view
            </summary>
            <returns>The current view</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.SetView(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Change the current active view
            </summary>
            <param name="view">New view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.GetViewport(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Get the viewport of a view applied to this target
            </summary>
            <param name="view">Target view</param>
            <returns>Viewport rectangle, expressed in pixels in the current target</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Convert a point from target coordinates to world
                coordinates, using the current view
                This function is an overload of the MapPixelToCoords
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapPixelToCoords(point, target.GetView());
            </summary>
            <param name="point">Pixel to convert</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from target coordinates to world coordinates
                This function finds the 2D position that matches the
                given pixel of the render-target. In other words, it does
                the inverse of what the graphics card does, to find the
                initial position of a rendered pixel.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (10, 50) in your render-target may map to the point
                (150, 75) in your 2D world -- if the view is translated by (140, 25).
                For render-windows, this function is typically used to find
                which point (or object) is located below the mouse cursor.
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Pixel to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Convert a point from world coordinates to target
                coordinates, using the current view
                This function is an overload of the mapCoordsToPixel
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapCoordsToPixel(point, target.GetView());
            </summary>
            <param name="point">Point to convert</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from world coordinates to target coordinates
                This function finds the pixel of the render-target that matches
                the given 2D point. In other words, it goes through the same process
                as the graphics card, to compute the final position of a rendered point.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (150, 75) in your 2D world may map to the pixel
                (10, 50) of your render-target -- if the view is translated by (140, 25).
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Point to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Clear">
            <summary>
                Clear the entire target with black color
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Clear(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Clear the entire target with a single color
            </summary>
            <param name="color">Color to use to clear the window</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable)">
            <summary>
                Draw a drawable object to the render-target, with default render states
            </summary>
            <param name="drawable">Object to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw a drawable object to the render-target
            </summary>
            <param name="drawable">Object to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by an array of vertices, with default render states
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by an array of vertices
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by a sub-array of vertices, with default render states
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="start">Index of the first vertex to draw in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by a sub-array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="start">Index of the first vertex to use in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.PushGlStates">
            <summary>
                Save the current OpenGL render states and matrices.
                This function can be used when you mix SFML drawing
                and direct OpenGL rendering. Combined with PopGLStates,
                it ensures that:
                \li SFML's internal states are not messed up by your OpenGL code
                \li your OpenGL states are not modified by a call to a SFML function
                More specifically, it must be used around code that
                calls Draw functions. Example:
                // OpenGL code here...
                window.PushGLStates();
                window.Draw(...);
                window.Draw(...);
                window.PopGLStates();
                // OpenGL code here...
                Note that this function is quite expensive: it saves all the
                possible OpenGL states and matrices, even the ones you
                don't care about. Therefore it should be used wisely.
                It is provided for convenience, but the best results will
                be achieved if you handle OpenGL states yourself (because
                you know which states have really changed, and need to be
                saved and restored). Take a look at the ResetGLStates
                function if you do so.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.PopGlStates">
            <summary>
                Restore the previously saved OpenGL render states and matrices.
                See the description of PushGLStates to get a detailed
                description of these functions.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.ResetGlStates">
            <summary>
                Reset the internal OpenGL states so that the target is ready for drawing.
                This function can be used when you mix SFML drawing
                and direct OpenGL rendering, if you choose not to use
                PushGLStates/PopGLStates. It makes sure that all OpenGL
                states needed by SFML are set, so that subsequent Draw()
                calls will work as expected.
                Example:
                // OpenGL code here...
                glPushAttrib(...);
                window.ResetGLStates();
                window.Draw(...);
                window.Draw(...);
                glPopAttrib(...);
                // OpenGL code here...
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture">
            <summary>
                Target for off-screen 2D rendering into an texture
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.myDefaultView">
            <summary>
                The my default view
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.myTexture">
            <summary>
                The my texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Create the render-texture with the given dimensions
            </summary>
            <param name="width">Width of the render-texture</param>
            <param name="height">Height of the render-texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.#ctor(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
                Create the render-texture with the given dimensions and
                an optional depth-buffer attached
            </summary>
            <param name="width">Width of the render-texture</param>
            <param name="height">Height of the render-texture</param>
            <param name="depthBuffer">Do you want a depth-buffer attached?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.#ctor(System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Create the render-texture with the given dimensions and
                a ContextSettings.
            </summary>
            <param name="width">Width of the render-texture</param>
            <param name="height">Height of the render-texture</param>
            <param name="contextSettings"></param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Repeated">
            <summary>
                Enable or disable texture repeating
            </summary>
            <remarks>
                This property is similar to <see />.
                This parameter is disabled by default.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Texture">
            <summary>
                Target texture of the render texture
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.MaximumAntialiasingLevel">
            <summary>
                The maximum anti-aliasing level supported by the system
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Smooth">
            <summary>
                Control the smooth filter
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Size">
            <summary>
                Size of the rendering region of the render texture
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.DefaultView">
            <summary>
                Default view of the render texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.GetView">
            <summary>
                Return the current active view
            </summary>
            <returns>The current view</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.SetView(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Change the current active view
            </summary>
            <param name="view">New view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.GetViewport(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Get the viewport of a view applied to this target
            </summary>
            <param name="view">Target view</param>
            <returns>Viewport rectangle, expressed in pixels in the current target</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Convert a point from target coordinates to world
                coordinates, using the current view
                This function is an overload of the MapPixelToCoords
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapPixelToCoords(point, target.GetView());
            </summary>
            <param name="point">Pixel to convert</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from target coordinates to world coordinates
                This function finds the 2D position that matches the
                given pixel of the render-target. In other words, it does
                the inverse of what the graphics card does, to find the
                initial position of a rendered pixel.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (10, 50) in your render-target may map to the point
                (150, 75) in your 2D world -- if the view is translated by (140, 25).
                For render-windows, this function is typically used to find
                which point (or object) is located below the mouse cursor.
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Pixel to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Convert a point from world coordinates to target
                coordinates, using the current view
                This function is an overload of the mapCoordsToPixel
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapCoordsToPixel(point, target.GetView());
            </summary>
            <param name="point">Point to convert</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from world coordinates to target coordinates
                This function finds the pixel of the render-target that matches
                the given 2D point. In other words, it goes through the same process
                as the graphics card, to compute the final position of a rendered point.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (150, 75) in your 2D world may map to the pixel
                (10, 50) of your render-target -- if the view is translated by (140, 25).
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Point to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Clear">
            <summary>
                Clear the entire render texture with black color
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Clear(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Clear the entire render texture with a single color
            </summary>
            <param name="color">Color to use to clear the texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable)">
            <summary>
                Draw a drawable object to the render-target, with default render states
            </summary>
            <param name="drawable">Object to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw a drawable object to the render-target
            </summary>
            <param name="drawable">Object to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by an array of vertices, with default render states
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by an array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by a sub-array of vertices, with default render states
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="start">Index of the first vertex to draw in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by a sub-array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="start">Index of the first vertex to use in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.PushGlStates">
            <summary>
                Save the current OpenGL render states and matrices.
                This function can be used when you mix SFML drawing
                and direct OpenGL rendering. Combined with PopGLStates,
                it ensures that:
                \li SFML's internal states are not messed up by your OpenGL code
                \li your OpenGL states are not modified by a call to a SFML function
                More specifically, it must be used around code that
                calls Draw functions. Example:
                // OpenGL code here...
                window.PushGLStates();
                window.Draw(...);
                window.Draw(...);
                window.PopGLStates();
                // OpenGL code here...
                Note that this function is quite expensive: it saves all the
                possible OpenGL states and matrices, even the ones you
                don't care about. Therefore it should be used wisely.
                It is provided for convenience, but the best results will
                be achieved if you handle OpenGL states yourself (because
                you know which states have really changed, and need to be
                saved and restored). Take a look at the ResetGLStates
                function if you do so.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.PopGlStates">
            <summary>
                Restore the previously saved OpenGL render states and matrices.
                See the description of PushGLStates to get a detailed
                description of these functions.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.ResetGlStates">
            <summary>
                Reset the internal OpenGL states so that the target is ready for drawing.
                This function can be used when you mix SFML drawing
                and direct OpenGL rendering, if you choose not to use
                PushGLStates/PopGLStates. It makes sure that all OpenGL
                states needed by SFML are set, so that subsequent Draw()
                calls will work as expected.
                Example:
                // OpenGL code here...
                glPushAttrib(...);
                window.ResetGLStates();
                window.Draw(...);
                window.Draw(...);
                glPopAttrib(...);
                // OpenGL code here...
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.SetActive(System.Boolean)">
            <summary>
                Activate of deactivate the render texture as the current target
                for rendering
            </summary>
            <param name="active">True to activate, false to deactivate (true by default)</param>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.GenerateMipmap">
            <summary>
                Generate a mipmap using the current texture data
            </summary>
            <remarks>
                This function is similar to <see /> and operates
                on the texture used as the target for drawing.
                Be aware that any draw operation may modify the base level image data.
                For this reason, calling this function only makes sense after all
                drawing is completed and display has been called. Not calling display
                after subsequent drawing will lead to undefined behavior if a mipmap
                had been previously generated.
            </remarks>
            <returns>True if mipmap generation was successful, false if unsuccessful</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Display">
            <summary>
                Update the contents of the target texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_create(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
                Sfs the render texture create using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="depthBuffer">The depth buffer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_createWithSettings(System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Sfs the render texture create with settings using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="settings">The settings</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_destroy(System.IntPtr)">
            <summary>
                Sfs the render texture destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_clear(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the render texture clear using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="clearColor">The clear color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getSize(System.IntPtr)">
            <summary>
                Sfs the render texture get size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2u</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_setActive(System.IntPtr,System.Boolean)">
            <summary>
                Describes whether sf render texture set active
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="active">The active</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_saveGLStates(System.IntPtr)">
            <summary>
                Describes whether sf render texture save gl states
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_restoreGLStates(System.IntPtr)">
            <summary>
                Describes whether sf render texture restore gl states
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_display(System.IntPtr)">
            <summary>
                Describes whether sf render texture display
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_setView(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render texture set view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="view">The view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getView(System.IntPtr)">
            <summary>
                Sfs the render texture get view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getDefaultView(System.IntPtr)">
            <summary>
                Sfs the render texture get default view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getViewport(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render texture get viewport using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="targetView">The target view</param>
            <returns>The int rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_mapCoordsToPixel(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2F,System.IntPtr)">
            <summary>
                Sfs the render texture map coords to pixel using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="point">The point</param>
            <param name="view">The view</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_mapPixelToCoords(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2I,System.IntPtr)">
            <summary>
                Sfs the render texture map pixel to coords using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="point">The point</param>
            <param name="view">The view</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getTexture(System.IntPtr)">
            <summary>
                Sfs the render texture get texture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getMaximumAntialiasingLevel">
            <summary>
                Sfs the render texture get maximum antialiasing level
            </summary>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_setSmooth(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render texture set smooth using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="smooth">The smooth</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_isSmooth(System.IntPtr)">
            <summary>
                Describes whether sf render texture is smooth
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_setRepeated(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render texture set repeated using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="repeated">The repeated</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_isRepeated(System.IntPtr)">
            <summary>
                Describes whether sf render texture is repeated
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_generateMipmap(System.IntPtr)">
            <summary>
                Describes whether sf render texture generate mipmap
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_drawPrimitives(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Vertex*,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw primitives using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexPtr">The vertex ptr</param>
            <param name="vertexCount">The vertex count</param>
            <param name="type">The type</param>
            <param name="renderStates">The render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_pushGLStates(System.IntPtr)">
            <summary>
                Sfs the render texture push gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_popGLStates(System.IntPtr)">
            <summary>
                Sfs the render texture pop gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_resetGLStates(System.IntPtr)">
            <summary>
                Sfs the render texture reset gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow">
            <summary>
                Simple wrapper for Window that allows easy
                2D rendering
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.myDefaultView">
            <summary>
                The my default view
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String)">
            <summary>
                Create the window with default style and creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles)">
            <summary>
                Create the window with default creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Create the window
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.#ctor(System.IntPtr)">
            <summary>
                Create the window from an existing control with default creation settings
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.#ctor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Create the window from an existing control
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.IsOpen">
            <summary>
                Tell whether or not the window is opened (ie. has been created).
                Note that a hidden window (Show(false))
                will still return true
            </summary>
            <returns>True if the window is opened</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Settings">
            <summary>
                Creation settings of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Position">
            <summary>
                Position of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SystemHandle">
            <summary>
                OS-specific handle of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Size">
            <summary>
                Size of the rendering region of the window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Clear">
            <summary>
                Clear the entire window with black color
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Clear(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Clear the entire window with a single color
            </summary>
            <param name="color">Color to use to clear the window</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetView(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Change the current active view
            </summary>
            <param name="view">New view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.GetView">
            <summary>
                Return the current active view
            </summary>
            <returns>The current view</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.DefaultView">
            <summary>
                Default view of the window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.GetViewport(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Get the viewport of a view applied to this target
            </summary>
            <param name="view">Target view</param>
            <returns>Viewport rectangle, expressed in pixels in the current target</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Convert a point from target coordinates to world
                coordinates, using the current view
                This function is an overload of the MapPixelToCoords
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapPixelToCoords(point, target.GetView());
            </summary>
            <param name="point">Pixel to convert</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from target coordinates to world coordinates
                This function finds the 2D position that matches the
                given pixel of the render-target. In other words, it does
                the inverse of what the graphics card does, to find the
                initial position of a rendered pixel.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (10, 50) in your render-target may map to the point
                (150, 75) in your 2D world -- if the view is translated by (140, 25).
                For render-windows, this function is typically used to find
                which point (or object) is located below the mouse cursor.
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Pixel to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Convert a point from world coordinates to target
                coordinates, using the current view
                This function is an overload of the mapCoordsToPixel
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapCoordsToPixel(point, target.GetView());
            </summary>
            <param name="point">Point to convert</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from world coordinates to target coordinates
                This function finds the pixel of the render-target that matches
                the given 2D point. In other words, it goes through the same process
                as the graphics card, to compute the final position of a rendered point.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (150, 75) in your 2D world may map to the pixel
                (10, 50) of your render-target -- if the view is translated by (140, 25).
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Point to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable)">
            <summary>
                Draw a drawable object to the render-target, with default render states
            </summary>
            <param name="drawable">Object to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw a drawable object to the render-target
            </summary>
            <param name="drawable">Object to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by an array of vertices, with default render states
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by an array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by a sub-array of vertices, with default render states
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="start">Index of the first vertex to draw in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by a sub-array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="start">Index of the first vertex to use in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.PushGlStates">
            <summary>
                Save the current OpenGL render states and matrices.
            </summary>
            <example>
                // OpenGL code here...
                window.PushGLStates();
                window.Draw(...);
                window.Draw(...);
                window.PopGLStates();
                // OpenGL code here...
            </example>
            <remarks>
                <para>
                    This function can be used when you mix SFML drawing
                    and direct OpenGL rendering. Combined with PopGLStates,
                    it ensures that:
                </para>
                <para>SFML's internal states are not messed up by your OpenGL code</para>
                <para>Your OpenGL states are not modified by a call to a SFML function</para>
                <para>
                    More specifically, it must be used around code that
                    calls Draw functions.
                </para>
                <para>
                    Note that this function is quite expensive: it saves all the
                    possible OpenGL states and matrices, even the ones you
                    don't care about. Therefore it should be used wisely.
                    It is provided for convenience, but the best results will
                    be achieved if you handle OpenGL states yourself (because
                    you know which states have really changed, and need to be
                    saved and restored). Take a look at the <seealso cref="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.ResetGlStates" />
                    function if you do so.
                </para>
            </remarks>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.PopGlStates">
            <summary>
                Restore the previously saved OpenGL render states and matrices.
                See the description of <seealso cref="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.PushGlStates" /> to get a detailed
                description of these functions.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.ResetGlStates">
            <summary>
                Reset the internal OpenGL states so that the target is ready for drawing.
            </summary>
            <remarks>
                This function can be used when you mix SFML drawing
                and direct OpenGL rendering, if you choose not to use
                PushGLStates/PopGLStates. It makes sure that all OpenGL
                states needed by SFML are set, so that subsequent Draw()
                calls will work as expected.
            </remarks>
            <example>
                // OpenGL code here...
                glPushAttrib(...);
                window.ResetGLStates();
                window.Draw(...);
                window.Draw(...);
                glPopAttrib(...);
                // OpenGL code here...
            </example>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Close">
            <summary>
                Close (destroy) the window.
                The Window instance remains valid and you can call
                Create to recreate the window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetTitle(System.String)">
            <summary>
                Change the title of the window
            </summary>
            <param name="title">New title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetIcon(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
                Change the window's icon
            </summary>
            <param name="width">Icon's width, in pixels</param>
            <param name="height">Icon's height, in pixels</param>
            <param name="pixels">Array of pixels, format must be RGBA 32 bits</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetVisible(System.Boolean)">
            <summary>
                Show or hide the window
            </summary>
            <param name="visible">True to show the window, false to hide it</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetVerticalSyncEnabled(System.Boolean)">
            <summary>
                Enable / disable vertical synchronization
            </summary>
            <param name="enable">True to enable v-sync, false to deactivate</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetMouseCursorVisible(System.Boolean)">
            <summary>
                Show or hide the mouse cursor
            </summary>
            <param name="visible">True to show, false to hide</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetMouseCursorGrabbed(System.Boolean)">
            <summary>
                Grab or release the mouse cursor
            </summary>
            <param name="grabbed">True to grab, false to release</param>
            <remarks>
                If set, grabs the mouse cursor inside this window's client
                area so it may no longer be moved outside its bounds.
                Note that grabbing is only active while the window has
                focus and calling this function for fullscreen windows
                won't have any effect (fullscreen windows always grab the
                cursor).
            </remarks>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetMouseCursor(Alis.Core.Graphic.D2.SFML.Windows.Cursor)">
            <summary>
                Set the displayed cursor to a native system cursor
            </summary>
            <param name="cursor">Native system cursor type to display</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetKeyRepeatEnabled(System.Boolean)">
            <summary>
                Enable or disable automatic key-repeat.
                Automatic key-repeat is enabled by default
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetFramerateLimit(System.UInt32)">
            <summary>
                Limit the framerate to a maximum fixed frequency
            </summary>
            <param name="limit">Framerate limit, in frames per seconds (use 0 to disable limit)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetJoystickThreshold(System.Single)">
            <summary>
                Change the joystick threshold, ie. the value below which
                no move event will be generated
            </summary>
            <param name="threshold">New threshold, in range [0, 100]</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetActive(System.Boolean)">
            <summary>
                Activate of deactivate the window as the current target
                for rendering
            </summary>
            <param name="active">True to activate, false to deactivate (true by default)</param>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.RequestFocus">
            <summary>
                Request the current window to be made the active
                foreground window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.HasFocus">
            <summary>
                Check whether the window has the input focus
            </summary>
            <returns>True if the window has focus, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Display">
            <summary>
                Display the window on screen
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Capture">
            <summary>
                Capture the current contents of the window into an image.
            </summary>
            <remarks>
                Deprecated. Use <see cref="T:Alis.Core.Graphic.D2.SFML.Graphics.Texture" /> and <see cref="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow)" />
                instead:
                <code>
               Texture texture = new Texture(window.Size);
               texture.update(window);
               Image img = texture.CopyToImage();
               </code>
            </remarks>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.PollEvent(Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Internal function to get the next event
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>True if there was an event, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.WaitEvent(Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Internal function to get the next event (blocking)
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>False if any error occured</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.InternalGetMousePosition">
            <summary>
                Internal function to get the mouse position relative to the window.
                This function is protected because it is called by another class,
                it is not meant to be called by users.
            </summary>
            <returns>Relative mouse position</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.InternalSetMousePosition(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Internal function to set the mouse position relative to the window.
                This function is protected because it is called by another class,
                it is not meant to be called by users.
            </summary>
            <param name="position">Relative mouse position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.InternalGetTouchPosition(System.UInt32)">
            <summary>
                Internal function to get the touch position relative to the window.
                This function is protected because it is called by another class of
                another module, it is not meant to be called by users.
            </summary>
            <param name="finger">Finger index</param>
            <returns>Relative touch position</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Initialize">
            <summary>
                Do common initializations
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_create(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the render window create using the specified mode
            </summary>
            <param name="mode">The mode</param>
            <param name="title">The title</param>
            <param name="style">The style</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_createUnicode(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the render window create unicode using the specified mode
            </summary>
            <param name="mode">The mode</param>
            <param name="title">The title</param>
            <param name="style">The style</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_createFromHandle(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the render window create from handle using the specified handle
            </summary>
            <param name="handle">The handle</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_destroy(System.IntPtr)">
            <summary>
                Sfs the render window destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_close(System.IntPtr)">
            <summary>
                Sfs the render window close using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_isOpen(System.IntPtr)">
            <summary>
                Describes whether sf render window is open
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getSettings(System.IntPtr)">
            <summary>
                Sfs the render window get settings using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The context settings</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_pollEvent(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Describes whether sf render window poll event
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="evt">The evt</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_waitEvent(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Describes whether sf render window wait event
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="evt">The evt</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getPosition(System.IntPtr)">
            <summary>
                Sfs the render window get position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setPosition(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Sfs the render window set position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getSize(System.IntPtr)">
            <summary>
                Sfs the render window get size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2u</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setSize(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Sfs the render window set size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="size">The size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setTitle(System.IntPtr,System.String)">
            <summary>
                Sfs the render window set title using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="title">The title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setUnicodeTitle(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render window set unicode title using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="title">The title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setIcon(System.IntPtr,System.UInt32,System.UInt32,System.Byte*)">
            <summary>
                Sfs the render window set icon using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="pixels">The pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setVisible(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render window set visible using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="visible">The visible</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setVerticalSyncEnabled(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render window set vertical sync enabled using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="enable">The enable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setMouseCursorVisible(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render window set mouse cursor visible using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="visible">The visible</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setMouseCursorGrabbed(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render window set mouse cursor grabbed using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="grabbed">The grabbed</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setMouseCursor(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render window set mouse cursor using the specified window
            </summary>
            <param name="window">The window</param>
            <param name="cursor">The cursor</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setKeyRepeatEnabled(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render window set key repeat enabled using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="enable">The enable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setFramerateLimit(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the render window set framerate limit using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="limit">The limit</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setJoystickThreshold(System.IntPtr,System.Single)">
            <summary>
                Sfs the render window set joystick threshold using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="threshold">The threshold</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setActive(System.IntPtr,System.Boolean)">
            <summary>
                Describes whether sf render window set active
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="active">The active</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_requestFocus(System.IntPtr)">
            <summary>
                Sfs the render window request focus using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_hasFocus(System.IntPtr)">
            <summary>
                Describes whether sf render window has focus
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_display(System.IntPtr)">
            <summary>
                Sfs the render window display using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getSystemHandle(System.IntPtr)">
            <summary>
                Sfs the render window get system handle using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_clear(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the render window clear using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="clearColor">The clear color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setView(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render window set view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="view">The view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getView(System.IntPtr)">
            <summary>
                Sfs the render window get view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getDefaultView(System.IntPtr)">
            <summary>
                Sfs the render window get default view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getViewport(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render window get viewport using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="targetView">The target view</param>
            <returns>The int rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_mapPixelToCoords(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2I,System.IntPtr)">
            <summary>
                Sfs the render window map pixel to coords using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="point">The point</param>
            <param name="view">The view</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_mapCoordsToPixel(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2F,System.IntPtr)">
            <summary>
                Sfs the render window map coords to pixel using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="point">The point</param>
            <param name="view">The view</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_drawPrimitives(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Vertex*,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw primitives using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexPtr">The vertex ptr</param>
            <param name="vertexCount">The vertex count</param>
            <param name="type">The type</param>
            <param name="renderStates">The render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_pushGLStates(System.IntPtr)">
            <summary>
                Sfs the render window push gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_popGLStates(System.IntPtr)">
            <summary>
                Sfs the render window pop gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_resetGLStates(System.IntPtr)">
            <summary>
                Sfs the render window reset gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_capture(System.IntPtr)">
            <summary>
                Sfs the render window capture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfMouse_getPositionRenderWindow(System.IntPtr)">
            <summary>
                Sfs the mouse get position render window using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfMouse_setPositionRenderWindow(Alis.Core.Aspect.Math.SFML.Vector2I,System.IntPtr)">
            <summary>
                Sfs the mouse set position render window using the specified position
            </summary>
            <param name="position">The position</param>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfTouch_getPositionRenderWindow(System.UInt32,System.IntPtr)">
            <summary>
                Sfs the touch get position render window using the specified finger
            </summary>
            <param name="finger">The finger</param>
            <param name="relativeTo">The relative to</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_saveGLStates(System.IntPtr)">
            <summary>
                Describes whether sf render window save gl states
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_restoreGLStates(System.IntPtr)">
            <summary>
                Describes whether sf render window restore gl states
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getFrameTime(System.IntPtr)">
            <summary>
                Sfs the render window get frame time using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Shader">
            <summary>
                Wrapper for pixel shaders
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Shader.CurrentTexture">
            <summary>
                Special value that can be passed to SetParameter,
                and that represents the texture of the object being drawn
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Shader.myTextures">
            <summary>
                The texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.#ctor(System.String,System.String,System.String)">
            <summary>
                Load the vertex, geometry and fragment shaders from files
            </summary>
            <remarks>
                This function loads the vertex, geometry and fragment
                shaders. Pass NULL if you don't want to load
                a specific shader.
                The sources must be text files containing valid shaders
                in GLSL language. GLSL is a C-like language dedicated to
                OpenGL shaders; you'll probably need to read a good documentation
                for it before writing your own shaders.
            </remarks>
            <param name="vertexShaderFilename">Path of the vertex shader file to load, or null to skip this shader</param>
            <param name="geometryShaderFilename">Path of the geometry shader file to load, or null to skip this shader</param>
            <param name="fragmentShaderFilename">Path of the fragment shader file to load, or null to skip this shader</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.#ctor(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
            <summary>
                Load the vertex, geometry and fragment shaders from custom streams
            </summary>
            <remarks>
                This function loads the vertex, geometry and fragment
                shaders. Pass NULL if you don't want to load
                a specific shader.
                The sources must be valid shaders in GLSL language. GLSL is
                a C-like language dedicated to OpenGL shaders; you'll
                probably need to read a good documentation for it before
                writing your own shaders.
            </remarks>
            <param name="vertexShaderStream">Source stream to read the vertex shader from, or null to skip this shader</param>
            <param name="geometryShaderStream">Source stream to read the geometry shader from, or null to skip this shader</param>
            <param name="fragmentShaderStream">Source stream to read the fragment shader from, or null to skip this shader</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.#ctor(System.IntPtr)">
            <summary>
                Construct the shader from a pointer
            </summary>
            <param name="ptr">Pointer to the shader instance</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shader.NativeHandle">
            <summary>
                Get the underlying OpenGL handle of the shader.
            </summary>
            <remarks>
                You shouldn't need to use this handle, unless you have
                very specific stuff to implement that SFML doesn't support,
                or implement a temporary workaround until a bug is fixed.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shader.IsAvailable">
            <summary>
                Tell whether or not the system supports shaders.
            </summary>
            <remarks>
                This property should always be checked before using
                the shader features. If it returns false, then
                any attempt to use Shader will fail.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shader.IsGeometryAvailable">
            <summary>
                Tell whether or not the system supports geometry shaders.
            </summary>
            <remarks>
                <para>
                    This property should always be checked before using
                    the geometry shader features. If it returns false, then
                    any attempt to use geometry shader features will fail.
                </para>
                <para>
                    Note: The first call to this function, whether by your
                    code or SFML will result in a context switch.
                </para>
            </remarks>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.FromString(System.String,System.String,System.String)">
            <summary>
                Load the vertex, geometry and fragment shaders from source code in memory
            </summary>
            <remarks>
                This function loads the vertex, geometry and fragment
                shaders. Pass NULL if you don't want to load
                a specific shader.
                The sources must be valid shaders in GLSL language. GLSL is
                a C-like language dedicated to OpenGL shaders; you'll
                probably need to read a good documentation for it before
                writing your own shaders.
            </remarks>
            <param name="vertexShader">String containing the source code of the vertex shader</param>
            <param name="geometryShader">String containing the source code of the geometry shader</param>
            <param name="fragmentShader">String containing the source code of the fragment shader</param>
            <returns>New shader instance</returns>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,System.Single)">
            <summary>
                Specify value for <c>float</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="x">Value of the float scalar</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Vec2)">
            <summary>
                Specify value for <c>vec2</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the vec2 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Vec3)">
            <summary>
                Specify value for <c>vec3</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the vec3 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Vec4)">
            <summary>
                Specify value for <c>vec4</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the vec4 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,System.Int32)">
            <summary>
                Specify value for <c>int</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="x">Value of the int scalar</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Ivec2)">
            <summary>
                Specify value for <c>ivec2</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the ivec2 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Ivec3)">
            <summary>
                Specify value for <c>ivec3</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the ivec3 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Ivec4)">
            <summary>
                Specify value for <c>ivec4</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the ivec4 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,System.Boolean)">
            <summary>
                Specify value for <c>bool</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="x">Value of the bool scalar</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Bvec2)">
            <summary>
                Specify value for <c>bvec2</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the bvec2 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Bvec3)">
            <summary>
                Specify value for <c>bvec3</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the bvec3 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Bvec4)">
            <summary>
                Specify value for <c>bvec4</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the bvec4 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Mat3)">
            <summary>
                Specify value for <c>mat3</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="matrix">Value of the mat3 matrix</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Mat4)">
            <summary>
                Specify value for <c>mat4</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="matrix">Value of the mat4 matrix</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Specify a texture as <c>sampler2D</c> uniform
            </summary>
            <remarks>
                <para>
                    name is the name of the variable to change in the shader.
                    The corresponding parameter in the shader must be a 2D texture
                    (<c>sampler2D</c> GLSL type).
                </para>
                <para>
                    Example:
                    <code>
            uniform sampler2D the_texture; // this is the variable in the shader
            </code>
                    <code>
            sf::Texture texture;
            ...
            shader.setUniform("the_texture", texture);
            </code>
                    It is important to note that <paramref name="texture" /> must remain alive as long
                    as the shader uses it, no copy is made internally.
                </para>
                <para>
                    To use the texture of the object being drawn, which cannot be
                    known in advance, you can pass the special value
                    Shader.CurrentTexture:
                    <code>
            shader.setUniform("the_texture", Shader.CurrentTexture);
            </code>
                </para>
            </remarks>
            <param name="name">Name of the texture in the shader</param>
            <param name="texture">Texture to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Shader.CurrentTextureType)">
            <summary>
                Specify current texture as \p sampler2D uniform
            </summary>
            <remarks>
                <para>
                    This overload maps a shader texture variable to the
                    texture of the object being drawn, which cannot be
                    known in advance. The second argument must be
                    <see cref="F:Alis.Core.Graphic.D2.SFML.Graphics.Shader.CurrentTexture" />.
                    The corresponding parameter in the shader must be a 2D texture
                    (<c>sampler2D</c> GLSL type).
                </para>
                <para>
                    Example:
                    <code>
            uniform sampler2D current; // this is the variable in the shader
            </code>
                    <code>
            shader.setUniform("current", Shader.CurrentTexture);
            </code>
                </para>
            </remarks>
            <param name="name">Name of the texture in the shader</param>
            <param name="current" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,System.Single[])">
            <summary>
                Specify values for <c>float[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>float</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,Alis.Core.Aspect.Math.SFML.Vec2[])">
            <summary>
                Specify values for <c>vec2[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>vec2</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,Alis.Core.Aspect.Math.SFML.Vec3[])">
            <summary>
                Specify values for <c>vec3[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>vec3</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,Alis.Core.Aspect.Math.SFML.Vec4[])">
            <summary>
                Specify values for <c>vec4[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>vec4</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,Alis.Core.Aspect.Math.SFML.Mat3[])">
            <summary>
                Specify values for <c>mat3[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>mat3</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,Alis.Core.Aspect.Math.SFML.Mat4[])">
            <summary>
                Specify values for <c>mat4[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>mat4</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,System.Single)">
            <summary>
                Change a float parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a float
                (float GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">Value to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,System.Single,System.Single)">
            <summary>
                Change a 2-components vector parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 2x1 vector
                (vec2 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">First component of the value to assign</param>
            <param name="y">Second component of the value to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,System.Single,System.Single,System.Single)">
            <summary>
                Change a 3-components vector parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 3x1 vector
                (vec3 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">First component of the value to assign</param>
            <param name="y">Second component of the value to assign</param>
            <param name="z">Third component of the value to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Change a 4-components vector parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 4x1 vector
                (vec4 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">First component of the value to assign</param>
            <param name="y">Second component of the value to assign</param>
            <param name="z">Third component of the value to assign</param>
            <param name="w">Fourth component of the value to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Change a 2-components vector parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 2x1 vector
                (vec2 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="vector">Vector to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Change a color parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 4x1 vector
                (vec4 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="color">Color to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Change a matrix parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 4x4 matrix
                (mat4 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="transform">Transform to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Change a texture parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 2D texture
                (sampler2D GLSL type).
                It is important to note that \a texture must remain alive as long
                as the shader uses it, no copy is made internally.
                To use the texture of the object being draw, which cannot be
                known in advance, you can pass the special value
                Shader.CurrentTexture.
            </summary>
            <param name="name">Name of the texture in the shader</param>
            <param name="texture">Texture to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Shader.CurrentTextureType)">
            <summary>
                Change a texture parameter of the shader
                This overload maps a shader texture variable to the
                texture of the object being drawn, which cannot be
                known in advance. The second argument must be
                sf::Shader::CurrentTexture.
                The corresponding parameter in the shader must be a 2D texture
                (sampler2D GLSL type).
            </summary>
            <param name="name">Name of the texture in the shader</param>
            <param name="current">Always pass the spacial value Shader.CurrentTexture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.Bind(Alis.Core.Graphic.D2.SFML.Graphics.Shader)">
            <summary>
                Bind a shader for rendering
            </summary>
            <param name="shader">Shader to bind (can be null to use no shader)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_createFromFile(System.String,System.String,System.String)">
            <summary>
                Sfs the shader create from file using the specified vertex shader filename
            </summary>
            <param name="vertexShaderFilename">The vertex shader filename</param>
            <param name="geometryShaderFilename">The geometry shader filename</param>
            <param name="fragmentShaderFilename">The fragment shader filename</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_createFromMemory(System.String,System.String,System.String)">
            <summary>
                Sfs the shader create from memory using the specified vertex shader
            </summary>
            <param name="vertexShader">The vertex shader</param>
            <param name="geometryShader">The geometry shader</param>
            <param name="fragmentShader">The fragment shader</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_createFromStream(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the shader create from stream using the specified vertex shader stream
            </summary>
            <param name="vertexShaderStream">The vertex shader stream</param>
            <param name="geometryShaderStream">The geometry shader stream</param>
            <param name="fragmentShaderStream">The fragment shader stream</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_destroy(System.IntPtr)">
            <summary>
                Sfs the shader destroy using the specified shader
            </summary>
            <param name="shader">The shader</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloatUniform(System.IntPtr,System.String,System.Single)">
            <summary>
                Sfs the shader set float uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec2Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec2)">
            <summary>
                Sfs the shader set vec 2 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec3Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec3)">
            <summary>
                Sfs the shader set vec 3 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec4Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec4)">
            <summary>
                Sfs the shader set vec 4 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setIntUniform(System.IntPtr,System.String,System.Int32)">
            <summary>
                Sfs the shader set int uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setIvec2Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Ivec2)">
            <summary>
                Sfs the shader set ivec 2 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setIvec3Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Ivec3)">
            <summary>
                Sfs the shader set ivec 3 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setIvec4Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Ivec4)">
            <summary>
                Sfs the shader set ivec 4 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setBoolUniform(System.IntPtr,System.String,System.Boolean)">
            <summary>
                Sfs the shader set bool uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setBvec2Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Bvec2)">
            <summary>
                Sfs the shader set bvec 2 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setBvec3Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Bvec3)">
            <summary>
                Sfs the shader set bvec 3 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setBvec4Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Bvec4)">
            <summary>
                Sfs the shader set bvec 4 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setMat3Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Mat3)">
            <summary>
                Sfs the shader set mat 3 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="matrix">The matrix</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setMat4Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Mat4)">
            <summary>
                Sfs the shader set mat 4 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="matrix">The matrix</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setTextureUniform(System.IntPtr,System.String,System.IntPtr)">
            <summary>
                Sfs the shader set texture uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="texture">The texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setCurrentTextureUniform(System.IntPtr,System.String)">
            <summary>
                Sfs the shader set current texture uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloatUniformArray(System.IntPtr,System.String,System.Single*,System.UInt32)">
            <summary>
                Sfs the shader set float uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec2UniformArray(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec2*,System.UInt32)">
            <summary>
                Sfs the shader set vec 2 uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec3UniformArray(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec3*,System.UInt32)">
            <summary>
                Sfs the shader set vec 3 uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec4UniformArray(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec4*,System.UInt32)">
            <summary>
                Sfs the shader set vec 4 uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setMat3UniformArray(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Mat3*,System.UInt32)">
            <summary>
                Sfs the shader set mat 3 uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setMat4UniformArray(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Mat4*,System.UInt32)">
            <summary>
                Sfs the shader set mat 4 uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloatParameter(System.IntPtr,System.String,System.Single)">
            <summary>
                Sfs the shader set float parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloat2Parameter(System.IntPtr,System.String,System.Single,System.Single)">
            <summary>
                Sfs the shader set float 2 parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloat3Parameter(System.IntPtr,System.String,System.Single,System.Single,System.Single)">
            <summary>
                Sfs the shader set float 3 parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
            <param name="y">The </param>
            <param name="z">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloat4Parameter(System.IntPtr,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sfs the shader set float 4 parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
            <param name="y">The </param>
            <param name="z">The </param>
            <param name="w">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setColorParameter(System.IntPtr,System.String,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the shader set color parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setTransformParameter(System.IntPtr,System.String,Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Sfs the shader set transform parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="transform">The transform</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setTextureParameter(System.IntPtr,System.String,System.IntPtr)">
            <summary>
                Sfs the shader set texture parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="texture">The texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setCurrentTextureParameter(System.IntPtr,System.String)">
            <summary>
                Sfs the shader set current texture parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_getNativeHandle(System.IntPtr)">
            <summary>
                Sfs the shader get native handle using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_bind(System.IntPtr)">
            <summary>
                Sfs the shader bind using the specified shader
            </summary>
            <param name="shader">The shader</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_isAvailable">
            <summary>
                Describes whether sf shader is available
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_isGeometryAvailable">
            <summary>
                Describes whether sf shader is geometry available
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Shader.CurrentTextureType">
            <summary>
                Special type that can be passed to SetParameter,
                and that represents the texture of the object being drawn
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Shape">
            <summary>
                Base class for textured shapes with outline
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Shape.myGetPointCallback">
            <summary>
                The my get point callback
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Shape.myGetPointCountCallback">
            <summary>
                The my get point count callback
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Shape.myTexture">
            <summary>
                The my texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Shape)">
            <summary>
                Construct the shape from another shape
            </summary>
            <param name="copy">Shape to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shape.Texture">
            <summary>
                Source texture of the shape
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shape.TextureRect">
            <summary>
                Sub-rectangle of the texture that the shape will display
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shape.FillColor">
            <summary>
                Fill color of the shape
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shape.OutlineColor">
            <summary>
                Outline color of the shape
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shape.OutlineThickness">
            <summary>
                Thickness of the shape's outline
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the shape to a render target
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPointCount">
            <summary>
                Get the total number of points of the shape
            </summary>
            <returns>The total point count</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPoint(System.UInt32)">
            <summary>
                Get the position of a point
                The returned point is in local coordinates, that is,
                the shape's transforms (position, rotation, scale) are
                not taken into account.
                The result is undefined if index is out of the valid range.
            </summary>
            <param name="index">Index of the point to get, in range [0 .. PointCount - 1]</param>
            <returns>index-th point of the shape</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetLocalBounds">
            <summary>
                Get the local bounding rectangle of the entity.
                The returned rectangle is in local coordinates, which means
                that it ignores the transformations (translation, rotation,
                scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                entity in the entity's coordinate system.
            </summary>
            <returns>Local bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetGlobalBounds">
            <summary>
                Get the global bounding rectangle of the entity.
                The returned rectangle is in global coordinates, which means
                that it takes in account the transformations (translation,
                rotation, scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                sprite in the global 2D world's coordinate system.
            </summary>
            <returns>Global bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.Update">
            <summary>
                Recompute the internal geometry of the shape.
                This function must be called by the derived class everytime
                the shape's points change (ie. the result of either
                PointCount or GetPoint is different).
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.InternalGetPointCount(System.IntPtr)">
            <summary>
                Callback passed to the C API
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.InternalGetPoint(System.UInt32,System.IntPtr)">
            <summary>
                Callback passed to the C API
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_create(Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPointCountCallbackType,Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPointCallbackType,System.IntPtr)">
            <summary>
                Sfs the shape create using the specified get point count
            </summary>
            <param name="getPointCount">The get point count</param>
            <param name="getPoint">The get point</param>
            <param name="userData">The user data</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_copy(System.IntPtr)">
            <summary>
                Sfs the shape copy using the specified shape
            </summary>
            <param name="shape">The shape</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_destroy(System.IntPtr)">
            <summary>
                Sfs the shape destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_setTexture(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
                Sfs the shape set texture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="texture">The texture</param>
            <param name="adjustToNewSize">The adjust to new size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_setTextureRect(System.IntPtr,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Sfs the shape set texture rect using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="rect">The rect</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_getTextureRect(System.IntPtr)">
            <summary>
                Sfs the shape get texture rect using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_setFillColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the shape set fill color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_getFillColor(System.IntPtr)">
            <summary>
                Sfs the shape get fill color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_setOutlineColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the shape set outline color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_getOutlineColor(System.IntPtr)">
            <summary>
                Sfs the shape get outline color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_setOutlineThickness(System.IntPtr,System.Single)">
            <summary>
                Sfs the shape set outline thickness using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="thickness">The thickness</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_getOutlineThickness(System.IntPtr)">
            <summary>
                Sfs the shape get outline thickness using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_getLocalBounds(System.IntPtr)">
            <summary>
                Sfs the shape get local bounds using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_update(System.IntPtr)">
            <summary>
                Sfs the shape update using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfRenderWindow_drawShape(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw shape using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="shape">The shape</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfRenderTexture_drawShape(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw shape using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="shape">The shape</param>
            <param name="states">The states</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPointCountCallbackType">
            <summary>
                The get point count callback type
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPointCallbackType">
            <summary>
                The get point callback type
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Sprite">
            <summary>
                This class defines a sprite : texture, transformations,
                color, and draw on screen
            </summary>
            <remarks>
                See also the note on coordinates and undistorted rendering in SFML.Graphics.Transformable.
            </remarks>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.myTexture">
            <summary>
                The my texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Construct the sprite from a source texture
            </summary>
            <param name="texture">Source texture to assign to the sprite</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Texture,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Construct the sprite from a source texture
            </summary>
            <param name="texture">Source texture to assign to the sprite</param>
            <param name="rectangle">Sub-rectangle of the texture to assign to the sprite</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Sprite)">
            <summary>
                Construct the sprite from another sprite
            </summary>
            <param name="copy">Sprite to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.Color">
            <summary>
                Global color of the object
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.Texture">
            <summary>
                Source texture displayed by the sprite
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.TextureRect">
            <summary>
                Sub-rectangle of the source image displayed by the sprite
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the sprite to a render target
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.GetLocalBounds">
            <summary>
                Get the local bounding rectangle of the entity.
                The returned rectangle is in local coordinates, which means
                that it ignores the transformations (translation, rotation,
                scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                entity in the entity's coordinate system.
            </summary>
            <returns>Local bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.GetGlobalBounds">
            <summary>
                Get the global bounding rectangle of the entity.
                The returned rectangle is in global coordinates, which means
                that it takes in account the transformations (translation,
                rotation, scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                sprite in the global 2D world's coordinate system.
            </summary>
            <returns>Global bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_create">
            <summary>
                Sfs the sprite create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_copy(System.IntPtr)">
            <summary>
                Sfs the sprite copy using the specified sprite
            </summary>
            <param name="sprite">The sprite</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_destroy(System.IntPtr)">
            <summary>
                Sfs the sprite destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_setColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the sprite set color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_getColor(System.IntPtr)">
            <summary>
                Sfs the sprite get color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfRenderWindow_drawSprite(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw sprite using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="sprite">The sprite</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfRenderTexture_drawSprite(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw sprite using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="sprite">The sprite</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_setTexture(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
                Sfs the sprite set texture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="texture">The texture</param>
            <param name="adjustToNewSize">The adjust to new size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_setTextureRect(System.IntPtr,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Sfs the sprite set texture rect using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="rect">The rect</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_getTextureRect(System.IntPtr)">
            <summary>
                Sfs the sprite get texture rect using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_getLocalBounds(System.IntPtr)">
            <summary>
                Sfs the sprite get local bounds using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float rect</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Text">
            <summary>
                This class defines a graphical 2D text, that can be drawn on screen
            </summary>
            <remarks>
                See also the note on coordinates and undistorted rendering in SFML.Graphics.Transformable.
            </remarks>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles">
            <summary>
                Enumerate the string drawing styles
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles.Regular">
            <summary>Regular characters, no style</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles.Bold">
            <summary>Bold characters</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles.Italic">
            <summary>Italic characters</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles.Underlined">
            <summary>Underlined characters</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles.StrikeThrough">
            <summary>Strike through characters</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.myFont">
            <summary>
                The my font
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.#ctor(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Font)">
            <summary>
                Construct the text from a string and a font
            </summary>
            <param name="str">String to display</param>
            <param name="font">Font to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.#ctor(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Font,System.UInt32)">
            <summary>
                Construct the text from a string, font and size
            </summary>
            <param name="str">String to display</param>
            <param name="font">Font to use</param>
            <param name="characterSize">Base characters size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Text)">
            <summary>
                Construct the text from another text
            </summary>
            <param name="copy">Text to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.Color">
            <summary>
                Fill color of the object
            </summary>
            <remarks>
                Deprecated. Use <see cref="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.FillColor" /> instead.
                By default, the text's fill color is opaque white.
                Setting the fill color to a transparent color with an outline
                will cause the outline to be displayed in the fill area of the text.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.FillColor">
            <summary>
                Fill color of the object
            </summary>
            <remarks>
                By default, the text's fill color is opaque white.
                Setting the fill color to a transparent color with an outline
                will cause the outline to be displayed in the fill area of the text.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.OutlineColor">
            <summary>
                Outline color of the object
            </summary>
            <remarks>
                By default, the text's outline color is opaque black.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.OutlineThickness">
            <summary>
                Thickness of the object's outline
            </summary>
            <remarks>
                <para>By default, the outline thickness is 0.</para>
                <para>
                    Be aware that using a negative value for the outline
                    thickness will cause distorted rendering.
                </para>
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.DisplayedString">
            <summary>
                String which is displayed
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.Font">
            <summary>
                Font used to display the text
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.CharacterSize">
            <summary>
                Base size of characters
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.LetterSpacing">
            <summary>
                Size of the letter spacing factor
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.LineSpacing">
            <summary>
                Size of the line spacing factor
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.Style">
            <summary>
                Style of the text (see Styles enum)
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the text to a render target
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.FindCharacterPos(System.UInt32)">
            <summary>
                Return the visual position of the Index-th character of the text,
                in coordinates relative to the text
                (note : translation, origin, rotation and scale are not applied)
            </summary>
            <param name="index">Index of the character</param>
            <returns>Position of the Index-th character (end of text if Index is out of range)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.GetLocalBounds">
            <summary>
                Get the local bounding rectangle of the entity.
                The returned rectangle is in local coordinates, which means
                that it ignores the transformations (translation, rotation,
                scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                entity in the entity's coordinate system.
            </summary>
            <returns>Local bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.GetGlobalBounds">
            <summary>
                Get the global bounding rectangle of the entity.
                The returned rectangle is in global coordinates, which means
                that it takes in account the transformations (translation,
                rotation, scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                sprite in the global 2D world's coordinate system.
            </summary>
            <returns>Global bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_create">
            <summary>
                Sfs the text create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_copy(System.IntPtr)">
            <summary>
                Sfs the text copy using the specified text
            </summary>
            <param name="text">The text</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_destroy(System.IntPtr)">
            <summary>
                Sfs the text destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the text set color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setFillColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the text set fill color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setOutlineColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the text set outline color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setOutlineThickness(System.IntPtr,System.Single)">
            <summary>
                Sfs the text set outline thickness using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="thickness">The thickness</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getColor(System.IntPtr)">
            <summary>
                Sfs the text get color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getFillColor(System.IntPtr)">
            <summary>
                Sfs the text get fill color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getOutlineColor(System.IntPtr)">
            <summary>
                Sfs the text get outline color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getOutlineThickness(System.IntPtr)">
            <summary>
                Sfs the text get outline thickness using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfRenderWindow_drawText(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw text using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="text">The text</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfRenderTexture_drawText(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw text using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="text">The text</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setUnicodeString(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the text set unicode string using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="text">The text</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setFont(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the text set font using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="font">The font</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setCharacterSize(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the text set character size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="size">The size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setLineSpacing(System.IntPtr,System.Single)">
            <summary>
                Sfs the text set line spacing using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="spacingFactor">The spacing factor</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setLetterSpacing(System.IntPtr,System.Single)">
            <summary>
                Sfs the text set letter spacing using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="spacingFactor">The spacing factor</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setStyle(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles)">
            <summary>
                Sfs the text set style using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="style">The style</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getString(System.IntPtr)">
            <summary>
                Sfs the text get string using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getUnicodeString(System.IntPtr)">
            <summary>
                Sfs the text get unicode string using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getCharacterSize(System.IntPtr)">
            <summary>
                Sfs the text get character size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getLetterSpacing(System.IntPtr)">
            <summary>
                Sfs the text get letter spacing using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getLineSpacing(System.IntPtr)">
            <summary>
                Sfs the text get line spacing using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getStyle(System.IntPtr)">
            <summary>
                Sfs the text get style using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The styles</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getRect(System.IntPtr)">
            <summary>
                Sfs the text get rect using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_findCharacterPos(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the text find character pos using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="index">The index</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getLocalBounds(System.IntPtr)">
            <summary>
                Sfs the text get local bounds using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float rect</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Texture">
            <summary>
                Image living on the graphics card that can be used for drawing
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Texture.myExternal">
            <summary>
                The my external
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the texture
            </summary>
            <param name="width">Texture width</param>
            <param name="height">Texture height</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.String)">
            <summary>
                Construct the texture from a file
            </summary>
            <param name="filename">Path of the image file to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.String,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Construct the texture from a file
            </summary>
            <param name="filename">Path of the image file to load</param>
            <param name="area">Area of the image to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.IO.Stream)">
            <summary>
                Construct the texture from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.IO.Stream,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Construct the texture from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <param name="area">Area of the image to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Image)">
            <summary>
                Construct the texture from an image
            </summary>
            <param name="image">Image to load to the texture</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Image,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Construct the texture from an image
            </summary>
            <param name="image">Image to load to the texture</param>
            <param name="area">Area of the image to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.Byte[])">
            <summary>
                Construct the texture from a file in memory
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Construct the texture from another texture
            </summary>
            <param name="copy">Texture to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.IntPtr)">
            <summary>
                Internal constructor
            </summary>
            <param name="cPointer">Pointer to the object in C library</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.NativeHandle">
            <summary>
                Get the underlying OpenGL handle of the texture.
            </summary>
            <remarks>
                You shouldn't need to use this handle, unless you have
                very specific stuff to implement that SFML doesn't support,
                or implement a temporary workaround until a bug is fixed.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Smooth">
            <summary>
                Control the smooth filter
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Srgb">
            <summary>
                Enable or disable conversion from sRGB
            </summary>
            <remarks>
                <para>
                    When providing texture data from an image file or memory, it can
                    either be stored in a linear color space or an sRGB color space.
                    Most digital images account for gamma correction already, so they
                    would need to be "uncorrected" back to linear color space before
                    being processed by the hardware. The hardware can automatically
                    convert it from the sRGB color space to a linear color space when
                    it gets sampled. When the rendered image gets output to the final
                    framebuffer, it gets converted back to sRGB.
                </para>
                <para>
                    After enabling or disabling sRGB conversion, make sure to reload
                    the texture data in order for the setting to take effect.
                </para>
                <para>
                    This option is only useful in conjunction with an sRGB capable
                    framebuffer. This can be requested during window creation.
                </para>
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Repeated">
            <summary>
                Control the repeat mode
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Size">
            <summary>
                Size of the texture, in pixels
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.MaximumSize">
            <summary>
                Maximum texture size allowed
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.CopyToImage">
            <summary>
                Copy a texture's pixels to an image
            </summary>
            <returns>Image containing the texture's pixels</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(System.Byte[])">
            <summary>
                Update a texture from an array of pixels
            </summary>
            <param name="pixels">Array of pixels to copy to the texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Update a texture from an array of pixels
            </summary>
            <param name="pixels">Array of pixels to copy to the texture</param>
            <param name="width">Width of the pixel region contained in pixels</param>
            <param name="height">Height of the pixel region contained in pixels</param>
            <param name="x">X offset in the texture where to copy the source pixels</param>
            <param name="y">Y offset in the texture where to copy the source pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.Texture,System.UInt32,System.UInt32)">
            <summary>
                Update a part of this texture from another texture
            </summary>
            <param name="texture">Source texture to copy to destination texture</param>
            <param name="x">X offset in this texture where to copy the source texture</param>
            <param name="y">Y offset in this texture where to copy the source texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.Image)">
            <summary>
                Update a texture from an image
            </summary>
            <param name="image">Image to copy to the texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.Image,System.UInt32,System.UInt32)">
            <summary>
                Update a texture from an image
            </summary>
            <param name="image">Image to copy to the texture</param>
            <param name="x">X offset in the texture where to copy the source pixels</param>
            <param name="y">Y offset in the texture where to copy the source pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Windows.Window)">
            <summary>
                Update a texture from the contents of a window
            </summary>
            <param name="window">Window to copy to the texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Windows.Window,System.UInt32,System.UInt32)">
            <summary>
                Update a texture from the contents of a window
            </summary>
            <param name="window">Window to copy to the texture</param>
            <param name="x">X offset in the texture where to copy the source pixels</param>
            <param name="y">Y offset in the texture where to copy the source pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow)">
            <summary>
                Update a texture from the contents of a render-window
            </summary>
            <param name="window">Render-window to copy to the texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow,System.UInt32,System.UInt32)">
            <summary>
                Update a texture from the contents of a render-window
            </summary>
            <param name="window">Render-window to copy to the texture</param>
            <param name="x">X offset in the texture where to copy the source pixels</param>
            <param name="y">Y offset in the texture where to copy the source pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.GenerateMipmap">
            <summary>
                Generate a mipmap using the current texture data
            </summary>
            <remarks>
                <para>
                    Mipmaps are pre-computed chains of optimized textures. Each
                    level of texture in a mipmap is generated by halving each of
                    the previous level's dimensions. This is done until the final
                    level has the size of 1x1. The textures generated in this process may
                    make use of more advanced filters which might improve the visual quality
                    of textures when they are applied to objects much smaller than they are.
                    This is known as minification. Because fewer texels (texture elements)
                    have to be sampled from when heavily minified, usage of mipmaps
                    can also improve rendering performance in certain scenarios.
                </para>
                <para>
                    Mipmap generation relies on the necessary OpenGL extension being
                    available. If it is unavailable or generation fails due to another
                    reason, this function will return false. Mipmap data is only valid from
                    the time it is generated until the next time the base level image is
                    modified, at which point this function will have to be called again to
                    regenerate it.
                </para>
            </remarks>
            <returns>True if mipmap generation was successful, false if unsuccessful</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Swap(Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Swap the contents of this texture with those of another
            </summary>
            <param name="right">Instance to swap with</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Bind(Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Bind a texture for rendering
            </summary>
            <param name="texture">Shader to bind (can be null to use no texture)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_create(System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture create using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_createFromFile(System.String,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Sfs the texture create from file using the specified filename
            </summary>
            <param name="filename">The filename</param>
            <param name="area">The area</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_createFromStream(System.IntPtr,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Sfs the texture create from stream using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <param name="area">The area</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_createFromImage(System.IntPtr,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Sfs the texture create from image using the specified image
            </summary>
            <param name="image">The image</param>
            <param name="area">The area</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_createFromMemory(System.IntPtr,System.UInt64,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Sfs the texture create from memory using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="size">The size</param>
            <param name="area">The area</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_copy(System.IntPtr)">
            <summary>
                Sfs the texture copy using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_destroy(System.IntPtr)">
            <summary>
                Sfs the texture destroy using the specified texture
            </summary>
            <param name="texture">The texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_getSize(System.IntPtr)">
            <summary>
                Sfs the texture get size using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <returns>The vector 2u</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_copyToImage(System.IntPtr)">
            <summary>
                Sfs the texture copy to image using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_updateFromPixels(System.IntPtr,System.Byte*,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture update from pixels using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="pixels">The pixels</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_updateFromTexture(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture update from texture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="texture">The texture</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_updateFromImage(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture update from image using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="image">The image</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_updateFromWindow(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture update from window using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="window">The window</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_updateFromRenderWindow(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture update from render window using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="renderWindow">The render window</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_bind(System.IntPtr)">
            <summary>
                Sfs the texture bind using the specified texture
            </summary>
            <param name="texture">The texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_setSmooth(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the texture set smooth using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="smooth">The smooth</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_isSmooth(System.IntPtr)">
            <summary>
                Describes whether sf texture is smooth
            </summary>
            <param name="texture">The texture</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_setSrgb(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the texture set srgb using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="sRgb">The rgb</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_isSrgb(System.IntPtr)">
            <summary>
                Describes whether sf texture is srgb
            </summary>
            <param name="texture">The texture</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_setRepeated(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the texture set repeated using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="repeated">The repeated</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_isRepeated(System.IntPtr)">
            <summary>
                Describes whether sf texture is repeated
            </summary>
            <param name="texture">The texture</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_generateMipmap(System.IntPtr)">
            <summary>
                Describes whether sf texture generate mipmap
            </summary>
            <param name="texture">The texture</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_swap(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the texture swap using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="right">The right</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_getNativeHandle(System.IntPtr)">
            <summary>
                Sfs the texture get native handle using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_getTexCoords(System.IntPtr,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Sfs the texture get tex coords using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="rectangle">The rectangle</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_getMaximumSize">
            <summary>
                Sfs the texture get maximum size
            </summary>
            <returns>The uint</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Transform">
            <summary>
                Define a 3x3 transform matrix
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct a transform from a 3x3 matrix
            </summary>
            <param name="a00">Element (0, 0) of the matrix</param>
            <param name="a01">Element (0, 1) of the matrix</param>
            <param name="a02">Element (0, 2) of the matrix</param>
            <param name="a10">Element (1, 0) of the matrix</param>
            <param name="a11">Element (1, 1) of the matrix</param>
            <param name="a12">Element (1, 2) of the matrix</param>
            <param name="a20">Element (2, 0) of the matrix</param>
            <param name="a21">Element (2, 1) of the matrix</param>
            <param name="a22">Element (2, 2) of the matrix</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.GetInverse">
            <summary>
                Return the inverse of the transform.
                If the inverse cannot be computed, an identity transform
                is returned.
            </summary>
            <returns>A new transform which is the inverse of self</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.TransformPoint(System.Single,System.Single)">
            <summary>
                Transform a 2D point.
            </summary>
            <param name="x">X coordinate of the point to transform</param>
            <param name="y">Y coordinate of the point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.TransformPoint(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Transform a 2D point.
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.TransformRect(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Transform a rectangle.
                Since SFML doesn't provide support for oriented rectangles,
                the result of this function is always an axis-aligned
                rectangle. Which means that if the transform contains a
                rotation, the bounding rectangle of the transformed rectangle
                is returned.
            </summary>
            <param name="rectangle">Rectangle to transform</param>
            <returns>Transformed rectangle</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Combine(Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Combine the current transform with another one.
                The result is a transform that is equivalent to applying
                this followed by transform. Mathematically, it is
                equivalent to a matrix multiplication.
            </summary>
            <param name="transform">Transform to combine to this transform</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Translate(System.Single,System.Single)">
            <summary>
                Combine the current transform with a translation.
            </summary>
            <param name="x">Offset to apply on X axis</param>
            <param name="y">Offset to apply on Y axis</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Translate(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Combine the current transform with a translation.
            </summary>
            <param name="offset">Translation offset to apply</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Rotate(System.Single)">
            <summary>
                Combine the current transform with a rotation.
            </summary>
            <param name="angle">Rotation angle, in degrees</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Rotate(System.Single,System.Single,System.Single)">
            <summary>
                Combine the current transform with a rotation.
                The center of rotation is provided for convenience as a second
                argument, so that you can build rotations around arbitrary points
                more easily (and efficiently) than the usual
                Translate(-center); Rotate(angle); Translate(center).
            </summary>
            <param name="angle">Rotation angle, in degrees</param>
            <param name="centerX">X coordinate of the center of rotation</param>
            <param name="centerY">Y coordinate of the center of rotation</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Rotate(System.Single,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Combine the current transform with a rotation.
                The center of rotation is provided for convenience as a second
                argument, so that you can build rotations around arbitrary points
                more easily (and efficiently) than the usual
                Translate(-center); Rotate(angle); Translate(center).
            </summary>
            <param name="angle">Rotation angle, in degrees</param>
            <param name="center">Center of rotation</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Scale(System.Single,System.Single)">
            <summary>
                Combine the current transform with a scaling.
            </summary>
            <param name="scaleX">Scaling factor on the X axis</param>
            <param name="scaleY">Scaling factor on the Y axis</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Scale(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Combine the current transform with a scaling.
                The center of scaling is provided for convenience as a second
                argument, so that you can build scaling around arbitrary points
                more easily (and efficiently) than the usual
                Translate(-center); Scale(factors); Translate(center).
            </summary>
            <param name="scaleX">Scaling factor on X axis</param>
            <param name="scaleY">Scaling factor on Y axis</param>
            <param name="centerX">X coordinate of the center of scaling</param>
            <param name="centerY">Y coordinate of the center of scaling</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Scale(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Combine the current transform with a scaling.
            </summary>
            <param name="factors">Scaling factors</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Scale(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Combine the current transform with a scaling.
                The center of scaling is provided for convenience as a second
                argument, so that you can build scaling around arbitrary points
                more easily (and efficiently) than the usual
                Translate(-center); Scale(factors); Translate(center).
            </summary>
            <param name="factors">Scaling factors</param>
            <param name="center">Center of scaling</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Equals(System.Object)">
            <summary>
                Compare Transform and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and transform are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.GetHashCode">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Equals(Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Compare two transforms for equality
                Performs an element-wise comparison of the elements of this
                transform with the elements of the right transform.
            </summary>
            <param name="transform">Transform to check</param>
            <returns>Transforms are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.op_Multiply(Alis.Core.Graphic.D2.SFML.Graphics.Transform,Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Overload of binary operator * to combine two transforms.
                This call is equivalent to calling new Transform(left).Combine(right).
            </summary>
            <param name="left">Left operand (the first transform)</param>
            <param name="right">Right operand (the second transform)</param>
            <returns>New combined transform</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.op_Multiply(Alis.Core.Graphic.D2.SFML.Graphics.Transform,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Overload of binary operator * to transform a point.
                This call is equivalent to calling left.TransformPoint(right).
            </summary>
            <param name="left">Left operand (the transform)</param>
            <param name="right">Right operand (the point to transform)</param>
            <returns>New transformed point</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Identity">
            <summary>The identity transform (does nothing)</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m00">
            <summary>
                The 02
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m01">
            <summary>
                The 02
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m02">
            <summary>
                The 02
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m10">
            <summary>
                The 12
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m11">
            <summary>
                The 12
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m12">
            <summary>
                The 12
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m20">
            <summary>
                The 22
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m21">
            <summary>
                The 22
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m22">
            <summary>
                The 22
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_getInverse(Alis.Core.Graphic.D2.SFML.Graphics.Transform@)">
            <summary>
                Sfs the transform get inverse using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <returns>The transform</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_transformPoint(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Sfs the transform transform point using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="point">The point</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_transformRect(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Sfs the transform transform rect using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="rectangle">The rectangle</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_combine(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,Alis.Core.Graphic.D2.SFML.Graphics.Transform@)">
            <summary>
                Sfs the transform combine using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="other">The other</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_translate(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,System.Single,System.Single)">
            <summary>
                Sfs the transform translate using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_rotate(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,System.Single)">
            <summary>
                Sfs the transform rotate using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="angle">The angle</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_rotateWithCenter(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,System.Single,System.Single,System.Single)">
            <summary>
                Sfs the transform rotate with center using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="angle">The angle</param>
            <param name="centerX">The center</param>
            <param name="centerY">The center</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_scale(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,System.Single,System.Single)">
            <summary>
                Sfs the transform scale using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="scaleX">The scale</param>
            <param name="scaleY">The scale</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_scaleWithCenter(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sfs the transform scale with center using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="scaleX">The scale</param>
            <param name="scaleY">The scale</param>
            <param name="centerX">The center</param>
            <param name="centerY">The center</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_equal(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,Alis.Core.Graphic.D2.SFML.Graphics.Transform@)">
            <summary>
                Describes whether sf transform equal
            </summary>
            <param name="left">The left</param>
            <param name="right">The right</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Transformable">
            <summary>
                Decomposed transform defined by a position, a rotation and a scale
            </summary>
            <remarks>
                A note on coordinates and undistorted rendering:
                By default, SFML (or more exactly, OpenGL) may interpolate drawable objects
                such as sprites or texts when rendering. While this allows transitions
                like slow movements or rotations to appear smoothly, it can lead to
                unwanted results in some cases, for example blurred or distorted objects.
                In order to render a SFML.Graphics.Drawable object pixel-perfectly, make sure
                the involved coordinates allow a 1:1 mapping of pixels in the window
                to texels (pixels in the texture). More specifically, this means:
                * The object's position, origin and scale have no fractional part
                * The object's and the view's rotation are a multiple of 90 degrees
                * The view's center and size have no fractional part
            </remarks>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myInverseNeedUpdate">
            <summary>
                The my inverse need update
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myInverseTransform">
            <summary>
                The my inverse transform
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myOrigin">
            <summary>
                The vector 2f
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myPosition">
            <summary>
                The vector 2f
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myRotation">
            <summary>
                The my rotation
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myScale">
            <summary>
                The vector 2f
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myTransform">
            <summary>
                The my transform
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myTransformNeedUpdate">
            <summary>
                The my transform need update
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Transformable)">
            <summary>
                Construct the transformable from another transformable
            </summary>
            <param name="transformable">Transformable to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.#ctor(System.IntPtr)">
            <summary>
                Construct the object from its internal C pointer
            </summary>
            <param name="cPointer">Pointer to the object in the C library</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Position">
            <summary>
                Position of the object
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Rotation">
            <summary>
                Rotation of the object
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Scale">
            <summary>
                Scale of the object
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Origin">
            <summary>
                The origin of an object defines the center point for
                all transformations (position, scale, rotation).
                The coordinates of this point must be relative to the
                top-left corner of the object, and ignore all
                transformations (position, scale, rotation).
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Transform">
            <summary>
                The combined transform of the object
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.InverseTransform">
            <summary>
                The combined transform of the object
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Vertex">
            <summary>
                Define a point with color and texture coordinates
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the vertex from its position
                The vertex color is white and texture coordinates are (0, 0).
            </summary>
            <param name="position">Vertex position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Construct the vertex from its position and color
                The texture coordinates are (0, 0).
            </summary>
            <param name="position">Vertex position</param>
            <param name="color">Vertex color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the vertex from its position and texture coordinates
                The vertex color is white.
            </summary>
            <param name="position">Vertex position</param>
            <param name="texCoords">Vertex texture coordinates</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the vertex from its position, color and texture coordinates
            </summary>
            <param name="position">Vertex position</param>
            <param name="color">Vertex color</param>
            <param name="texCoords">Vertex texture coordinates</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.Position">
            <summary>2D position of the vertex</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.Color">
            <summary>Color of the vertex</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.TexCoords">
            <summary>Coordinates of the texture's pixel to map to the vertex</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray">
            <summary>
                Define a set of one or more 2D primitives
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Construct the vertex array with a type
            </summary>
            <param name="type">Type of primitives</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,System.UInt32)">
            <summary>
                Construct the vertex array with a type and an initial number of vertices
            </summary>
            <param name="type">Type of primitives</param>
            <param name="vertexCount">Initial number of vertices in the array</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.VertexArray)">
            <summary>
                Construct the vertex array from another vertex array
            </summary>
            <param name="copy">Transformable to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.VertexCount">
            <summary>
                Total vertex count
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Item(System.UInt32)">
            <summary>
                Read-write access to vertices by their index.
                This function doesn't check index, it must be in range
                [0, VertexCount - 1]. The behaviour is undefined
                otherwise.
            </summary>
            <param name="index">Index of the vertex to get</param>
            <returns>Reference to the index-th vertex</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.PrimitiveType">
            <summary>
                Type of primitives to draw
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Bounds">
            <summary>
                Compute the bounding rectangle of the vertex array.
                This function returns the axis-aligned rectangle that
                contains all the vertices of the array.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the vertex array to a render target
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Clear">
            <summary>
                Clear the vertex array
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Resize(System.UInt32)">
            <summary>
                Resize the vertex array
                If \a vertexCount is greater than the current size, the previous
                vertices are kept and new (default-constructed) vertices are
                added.
                If \a vertexCount is less than the current size, existing vertices
                are removed from the array.
            </summary>
            <param name="vertexCount">New size of the array (number of vertices)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Append(Alis.Core.Graphic.D2.SFML.Graphics.Vertex)">
            <summary>
                Add a vertex to the array
            </summary>
            <param name="vertex">Vertex to add</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_create">
            <summary>
                Sfs the vertex array create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_copy(System.IntPtr)">
            <summary>
                Sfs the vertex array copy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_destroy(System.IntPtr)">
            <summary>
                Sfs the vertex array destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_getVertexCount(System.IntPtr)">
            <summary>
                Sfs the vertex array get vertex count using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_getVertex(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the vertex array get vertex using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="index">The index</param>
            <returns>The vertex</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_clear(System.IntPtr)">
            <summary>
                Sfs the vertex array clear using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_resize(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the vertex array resize using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexCount">The vertex count</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_append(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Vertex)">
            <summary>
                Sfs the vertex array append using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertex">The vertex</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_setPrimitiveType(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Sfs the vertex array set primitive type using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="type">The type</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_getPrimitiveType(System.IntPtr)">
            <summary>
                Sfs the vertex array get primitive type using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The primitive type</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_getBounds(System.IntPtr)">
            <summary>
                Sfs the vertex array get bounds using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfRenderWindow_drawVertexArray(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw vertex array using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexArray">The vertex array</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfRenderTexture_drawVertexArray(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw vertex array using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexArray">The vertex array</param>
            <param name="states">The states</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer">
            <summary>
                The vertex buffer class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Base.ObjectBase" />
            <seealso cref="T:Alis.Core.Graphic.D2.SFML.Graphics.IDrawable" />
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier">
            <summary>
                Usage specifiers
                If data is going to be updated once or more every frame,
                set the usage to Stream. If data is going
                to be set once and used for a long time without being
                modified, set the usage to Static.
                For everything else Dynamic should
                be a good compromise.
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier.Stream">
            <summary>
                The stream usage specifier
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier.Dynamic">
            <summary>
                The dynamic usage specifier
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier.Static">
            <summary>
                The static usage specifier
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.#ctor(System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier)">
            <summary>
                Create a new vertex buffer with a specific
                PrimitiveType and usage specifier.
                Creates the vertex buffer, allocating enough graphcis
                memory to hold \p vertexCount vertices, and sets its
                primitive type to \p type and usage to \p usage.
            </summary>
            <param name="vertexCount">Amount of vertices</param>
            <param name="primitiveType">Type of primitives</param>
            <param name="usageType">Usage specifier</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer)">
            <summary>
                Construct the vertex buffer from another vertex array
            </summary>
            <param name="copy">VertexBuffer to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Available">
            <summary>
                Whether or not the system supports vertex buffers
                This function should always be called before using
                the vertex buffer features. If it returns false, then
                any attempt to use sf::VertexBuffer will fail.
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.VertexCount">
            <summary>
                Total vertex count
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.NativeHandle">
            <summary>
                OpenGL handle of the vertex buffer or 0 if not yet created
                You shouldn't need to use this property, unless you have
                very specific stuff to implement that SFML doesn't support,
                or implement a temporary workaround until a bug is fixed.
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.PrimitiveType">
            <summary>
                The type of primitives drawn by the vertex buffer
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Usage">
            <summary>
                The usage specifier for the vertex buffer
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the vertex buffer to a render target
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Update(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32)">
            <summary>
                Update a part of the buffer from an array of vertices
                offset is specified as the number of vertices to skip
                from the beginning of the buffer.
                If offset is 0 and vertexCount is equal to the size of
                the currently created buffer, its whole contents are replaced.
                If offset is 0 and vertexCount is greater than the
                size of the currently created buffer, a new buffer is created
                containing the vertex data.
                If offset is 0 and vertexCount is less than the size of
                the currently created buffer, only the corresponding region
                is updated.
                If offset is not 0 and offset + vertexCount is greater
                than the size of the currently created buffer, the update fails.
                No additional check is performed on the size of the vertex
                array, passing invalid arguments will lead to undefined
                behavior.
            </summary>
            <param name="vertices">Array of vertices to copy to the buffer</param>
            <param name="vertexCount">Number of vertices to copy</param>
            <param name="offset">Offset in the buffer to copy to</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Update(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[])">
            <summary>
                Update a part of the buffer from an array of vertices
                assuming an offset of 0 and a vertex count the length of the passed array.
                If offset is 0 and vertexCount is equal to the size of
                the currently created buffer, its whole contents are replaced.
                If offset is 0 and vertexCount is greater than the
                size of the currently created buffer, a new buffer is created
                containing the vertex data.
                If offset is 0 and vertexCount is less than the size of
                the currently created buffer, only the corresponding region
                is updated.
                If offset is not 0 and offset + vertexCount is greater
                than the size of the currently created buffer, the update fails.
                No additional check is performed on the size of the vertex
                array, passing invalid arguments will lead to undefined
                behavior.
            </summary>
            <param name="vertices">Array of vertices to copy to the buffer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Update(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32)">
            <summary>
                Update a part of the buffer from an array of vertices
                assuming a vertex count the length of the passed array.
                If offset is 0 and vertexCount is equal to the size of
                the currently created buffer, its whole contents are replaced.
                If offset is 0 and vertexCount is greater than the
                size of the currently created buffer, a new buffer is created
                containing the vertex data.
                If offset is 0 and vertexCount is less than the size of
                the currently created buffer, only the corresponding region
                is updated.
                If offset is not 0 and offset + vertexCount is greater
                than the size of the currently created buffer, the update fails.
                No additional check is performed on the size of the vertex
                array, passing invalid arguments will lead to undefined
                behavior.
            </summary>
            <param name="vertices">Array of vertices to copy to the buffer</param>
            <param name="offset">Offset in the buffer to copy to</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Update(Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer)">
            <summary>
                Copy the contents of another buffer into this buffer
            </summary>
            <param name="other">Vertex buffer whose contents to copy into first vertex buffer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Swap(Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer)">
            <summary>
                Swap the contents of another buffer into this buffer
            </summary>
            <param name="other">Vertex buffer whose contents to swap with</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_create(System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier)">
            <summary>
                Sfs the vertex buffer create using the specified vertex count
            </summary>
            <param name="vertexCount">The vertex count</param>
            <param name="type">The type</param>
            <param name="usage">The usage</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_copy(System.IntPtr)">
            <summary>
                Sfs the vertex buffer copy using the specified copy
            </summary>
            <param name="copy">The copy</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_destroy(System.IntPtr)">
            <summary>
                Sfs the vertex buffer destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_getVertexCount(System.IntPtr)">
            <summary>
                Sfs the vertex buffer get vertex count using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_update(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Vertex*,System.UInt32,System.UInt32)">
            <summary>
                Describes whether sf vertex buffer update
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertices">The vertices</param>
            <param name="vertexCount">The vertex count</param>
            <param name="offset">The offset</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_updateFromVertexBuffer(System.IntPtr,System.IntPtr)">
            <summary>
                Describes whether sf vertex buffer update from vertex buffer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="other">The other</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_swap(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the vertex buffer swap using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="other">The other</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_getNativeHandle(System.IntPtr)">
            <summary>
                Sfs the vertex buffer get native handle using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_setPrimitiveType(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Sfs the vertex buffer set primitive type using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="primitiveType">The primitive type</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_getPrimitiveType(System.IntPtr)">
            <summary>
                Sfs the vertex buffer get primitive type using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The primitive type</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_setUsage(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier)">
            <summary>
                Sfs the vertex buffer set usage using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="usageType">The usage type</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_getUsage(System.IntPtr)">
            <summary>
                Sfs the vertex buffer get usage using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The usage specifier</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_isAvailable">
            <summary>
                Describes whether sf vertex buffer is available
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfRenderWindow_drawVertexBuffer(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw vertex buffer using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexArray">The vertex array</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfRenderTexture_drawVertexBuffer(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw vertex buffer using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexBuffer">The vertex buffer</param>
            <param name="states">The states</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.View">
            <summary>
                This class defines a view (position, size, etc.) ;
                you can consider it as a 2D camera
            </summary>
            <remarks>
                See also the note on coordinates and undistorted rendering in SFML.Graphics.Transformable.
            </remarks>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.View.myExternal">
            <summary>
                The my external
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.#ctor">
            <summary>
                Create a default view (1000x1000)
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.#ctor(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Construct the view from a rectangle
            </summary>
            <param name="viewRect">Rectangle defining the position and size of the view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the view from its center and size
            </summary>
            <param name="center">Center of the view</param>
            <param name="size">Size of the view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Construct the view from another view
            </summary>
            <param name="copy">View to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.#ctor(System.IntPtr)">
            <summary>
                Internal constructor for other classes which need to manipulate raw views
            </summary>
            <param name="cPointer">Direct pointer to the view object in the C library</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.View.Center">
            <summary>
                Center of the view
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.View.Size">
            <summary>
                Half-size of the view
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.View.Rotation">
            <summary>
                Rotation of the view, in degrees
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.View.Viewport">
            <summary>
                Target viewport of the view, defined as a factor of the
                size of the target to which the view is applied
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.Reset(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Rebuild the view from a rectangle
            </summary>
            <param name="rectangle">Rectangle defining the position and size of the view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.Move(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Move the view
            </summary>
            <param name="offset">Offset to move the view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.Rotate(System.Single)">
            <summary>
                Rotate the view
            </summary>
            <param name="angle">Angle of rotation, in degrees</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.Zoom(System.Single)">
            <summary>
                Resize the view rectangle to simulate a zoom / unzoom effect
            </summary>
            <param name="factor">Zoom factor to apply, relative to the current zoom</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_create">
            <summary>
                Sfs the view create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_createFromRect(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Sfs the view create from rect using the specified rect
            </summary>
            <param name="rect">The rect</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_copy(System.IntPtr)">
            <summary>
                Sfs the view copy using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_destroy(System.IntPtr)">
            <summary>
                Sfs the view destroy using the specified view
            </summary>
            <param name="view">The view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_setCenter(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Sfs the view set center using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="center">The center</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_setSize(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Sfs the view set size using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="size">The size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_setRotation(System.IntPtr,System.Single)">
            <summary>
                Sfs the view set rotation using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="angle">The angle</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_setViewport(System.IntPtr,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Sfs the view set viewport using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="viewport">The viewport</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_reset(System.IntPtr,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Sfs the view reset using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="rectangle">The rectangle</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_getCenter(System.IntPtr)">
            <summary>
                Sfs the view get center using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_getSize(System.IntPtr)">
            <summary>
                Sfs the view get size using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_getRotation(System.IntPtr)">
            <summary>
                Sfs the view get rotation using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_getViewport(System.IntPtr)">
            <summary>
                Sfs the view get viewport using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_move(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Sfs the view move using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="offset">The offset</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_rotate(System.IntPtr,System.Single)">
            <summary>
                Sfs the view rotate using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="angle">The angle</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_zoom(System.IntPtr,System.Single)">
            <summary>
                Sfs the view zoom using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="factor">The factor</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Axis">
            <summary>
                Axes supported by SFML joysticks
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.X">
            <summary>The X axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.Y">
            <summary>The Y axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.Z">
            <summary>The Z axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.R">
            <summary>The R axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.U">
            <summary>The U axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.V">
            <summary>The V axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.PovX">
            <summary>The X axis of the point-of-view hat</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.PovY">
            <summary>TheY axis of the point-of-view hat</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Clipboard">
            <summary>
                The clipboard class
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Clipboard.Contents">
            <summary>
                The contents of the Clipboard as a UTF-32 string
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Clipboard.sfClipboard_getUnicodeString">
            <summary>
                Sfs the clipboard get unicode string
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Clipboard.sfClipboard_setUnicodeString(System.IntPtr)">
            <summary>
                Sfs the clipboard set unicode string using the specified ptr
            </summary>
            <param name="ptr">The ptr</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Context">
            <summary>
                This class defines a .NET interface to an SFML OpenGL Context
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Context._ourGlobalContext">
            <summary>
                The our global context
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Context.myThis">
            <summary>
                The zero
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Context.Settings">
            <summary>
                Get the settings of the context.
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Context.Global">
            <summary>
                Global helper context
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.Finalize">
            <summary>
                Finalizer
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.SetActive(System.Boolean)">
            <summary>
                Activate or deactivate the context
            </summary>
            <param name="active">True to activate, false to deactivate</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.sfContext_create">
            <summary>
                Sfs the context create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.sfContext_destroy(System.IntPtr)">
            <summary>
                Sfs the context destroy using the specified view
            </summary>
            <param name="view">The view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.sfContext_setActive(System.IntPtr,System.Boolean)">
            <summary>
                Describes whether sf context set active
            </summary>
            <param name="view">The view</param>
            <param name="active">The active</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.sfContext_getSettings(System.IntPtr)">
            <summary>
                Sfs the context get settings using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The context settings</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings">
            <summary>
                Structure defining the creation settings of OpenGL contexts
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.Attribute">
            <summary>
                Enumeration of the context attribute flags
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.Attribute.Default">
            <summary>Non-debug, compatibility context (this and the core attribute are mutually exclusive)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.Attribute.Core">
            <summary>Core attribute</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.Attribute.Debug">
            <summary>Debug attribute</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the settings from depth / stencil bits
            </summary>
            <param name="depthBits">Depth buffer bits</param>
            <param name="stencilBits">Stencil buffer bits</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Construct the settings from depth / stencil bits and antialiasing level
            </summary>
            <param name="depthBits">Depth buffer bits</param>
            <param name="stencilBits">Stencil buffer bits</param>
            <param name="antialiasingLevel">Antialiasing level</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.Attribute,System.Boolean)">
            <summary>
                Construct the settings from depth / stencil bits and antialiasing level
            </summary>
            <param name="depthBits">Depth buffer bits</param>
            <param name="stencilBits">Stencil buffer bits</param>
            <param name="antialiasingLevel">Antialiasing level</param>
            <param name="majorVersion">Major number of the context version</param>
            <param name="minorVersion">Minor number of the context version</param>
            <param name="attributes">Attribute flags of the context</param>
            <param name="sRgbCapable">sRGB capability of the context</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.DepthBits">
            <summary>Depth buffer bits (0 is disabled)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.StencilBits">
            <summary>Stencil buffer bits (0 is disabled)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.AntialiasingLevel">
            <summary>Antialiasing level (0 is disabled)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.MajorVersion">
            <summary>Major number of the context version</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.MinorVersion">
            <summary>Minor number of the context version</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.AttributeFlags">
            <summary>The attribute flags to create the context with</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.SRgbCapable">
            <summary>Whether the context framebuffer is sRGB capable</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Cursor">
            <summary>
                The cursor class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Base.ObjectBase" />
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType">
            <summary>
                Enumeration of possibly available native system cursor types
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Arrow">
            <summary>
                Arrow cursor (default)
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.ArrowWait">
            <summary>
                Busy arrow cursor
                Windows: Yes
                Mac OS:  No
                Linux:   No
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Wait">
            <summary>
                Busy cursor
                Windows: Yes
                Mac OS:  No
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Text">
            <summary>
                I-beam, cursor when hovering over a field allowing text entry
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Hand">
            <summary>
                Pointing hand cursor
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.SizeHorinzontal">
            <summary>
                Horizontal double arrow cursor
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.SizeVertical">
            <summary>
                Vertical double arrow cursor
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.SizeTopLeftBottomRight">
            <summary>
                Double arrow cursor going from top-left to bottom-right
                Windows: Yes
                Mac OS:  No
                Linux:   No
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.SizeBottomLeftTopRight">
            <summary>
                Double arrow cursor going from bottom-left to top-right
                Windows: Yes
                Mac OS:  No
                Linux:   No
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.SizeAll">
            <summary>
                Combination of SizeHorizontal and SizeVertical
                Windows: Yes
                Mac OS:  No
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Cross">
            <summary>
                Crosshair cursor
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Help">
            <summary>
                Help cursor
                Windows: Yes
                Mac OS:  No
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.NotAllowed">
            <summary>
                Action not allowed cursor
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.#ctor(Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType)">
            <summary>
                Create a native system cursor
                Refer to the list of cursor available on each system
                (see CursorType) to know whether a given cursor is
                expected to load successfully or is not supported by
                the operating system.
            </summary>
            <param name="type">System cursor type</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.#ctor(System.Byte[],Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Create a cursor with the provided image
                Pixels must be an array of width by height pixels
                in 32-bit RGBA format. If not, this will cause undefined behavior.
                If pixels is null or either width or height are 0,
                the current cursor is left unchanged and the function will
                return false.
                In addition to specifying the pixel data, you can also
                specify the location of the hotspot of the cursor. The
                hotspot is the pixel coordinate within the cursor image
                which will be located exactly where the mouse pointer
                position is. Any mouse actions that are performed will
                return the window/screen location of the hotspot.
                Warning: On Unix, the pixels are mapped into a monochrome
                bitmap: pixels with an alpha channel to 0 are
                transparent, black if the RGB channel are close
                to zero, and white otherwise.
            </summary>
            <param name="pixels">Array of pixels of the image</param>
            <param name="size">Width and height of the image</param>
            <param name="hotspot">(x,y) location of the hotspot</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.Destroy(System.Boolean)">
            <summary>
                Destroys the disposing
            </summary>
            <param name="disposing">The disposing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.sfCursor_createFromSystem(Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType)">
            <summary>
                Sfs the cursor create from system using the specified type
            </summary>
            <param name="type">The type</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.sfCursor_createFromPixels(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Sfs the cursor create from pixels using the specified pixels
            </summary>
            <param name="pixels">The pixels</param>
            <param name="size">The size</param>
            <param name="hotspot">The hotspot</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.sfCursor_destroy(System.IntPtr)">
            <summary>
                Sfs the cursor destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Event">
            <summary>
                Event defines a system event and its parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Type">
            <summary>Type of event (see EventType enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Size">
            <summary>Arguments for size events (Resized)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Key">
            <summary>Arguments for key events (KeyPressed, KeyReleased)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Text">
            <summary>Arguments for text events (TextEntered)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.MouseMove">
            <summary>Arguments for mouse move events (MouseMoved)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.MouseButton">
            <summary>Arguments for mouse button events (MouseButtonPressed, MouseButtonReleased)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.MouseWheel">
            <summary>Arguments for mouse wheel events (MouseWheelMoved)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.MouseWheelScroll">
            <summary>Arguments for mouse wheel scroll events (MouseWheelScrolled)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.JoystickMove">
            <summary>Arguments for joystick axis events (JoystickMoved)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.JoystickButton">
            <summary>Arguments for joystick button events (JoystickButtonPressed, JoystickButtonReleased)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.JoystickConnect">
            <summary>Arguments for joystick connect events (JoystickConnected, JoystickDisconnected)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Touch">
            <summary>Arguments for touch events (TouchBegan, TouchMoved, TouchEnded)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Sensor">
            <summary>Arguments for sensor events (SensorChanged)</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.EventType">
            <summary>
                Enumeration of the different types of events
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.Closed">
            <summary>Event triggered when a window is manually closed</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.Resized">
            <summary>Event triggered when a window is resized</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.LostFocus">
            <summary>Event triggered when a window loses the focus</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.GainedFocus">
            <summary>Event triggered when a window gains the focus</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.TextEntered">
            <summary>Event triggered when a valid character is entered</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.KeyPressed">
            <summary>Event triggered when a keyboard key is pressed</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.KeyReleased">
            <summary>Event triggered when a keyboard key is released</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseWheelMoved">
            <summary>Event triggered when the mouse wheel is scrolled (deprecated)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseWheelScrolled">
            <summary>Event triggered when a mouse wheel is scrolled</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseButtonPressed">
            <summary>Event triggered when a mouse button is pressed</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseButtonReleased">
            <summary>Event triggered when a mouse button is released</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseMoved">
            <summary>Event triggered when the mouse moves within the area of a window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseEntered">
            <summary>Event triggered when the mouse enters the area of a window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseLeft">
            <summary>Event triggered when the mouse leaves the area of a window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.JoystickButtonPressed">
            <summary>Event triggered when a joystick button is pressed</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.JoystickButtonReleased">
            <summary>Event triggered when a joystick button is released</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.JoystickMoved">
            <summary>Event triggered when a joystick axis moves</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.JoystickConnected">
            <summary>Event triggered when a joystick is connected</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.JoystickDisconnected">
            <summary>Event triggered when a joystick is disconnected</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.TouchBegan">
            <summary>Event triggered when a touch begins</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.TouchMoved">
            <summary>Event triggered when a touch is moved</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.TouchEnded">
            <summary>Event triggered when a touch is ended</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.SensorChanged">
            <summary>Event triggered when a sensor is changed</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Joystick">
            <summary>
                Give access to the real-time state of the joysticks
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Count">
            <summary>Maximum number of supported joysticks</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.ButtonCount">
            <summary>Maximum number of supported buttons</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.AxisCount">
            <summary>Maximum number of supported axes</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IsConnected(System.UInt32)">
            <summary>
                Check if a joystick is connected
            </summary>
            <param name="joystick">Index of the joystick to check</param>
            <returns>True if the joystick is connected, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.GetButtonCount(System.UInt32)">
            <summary>
                Return the number of buttons supported by a joystick
            </summary>
            If the joystick is not connected, this function returns 0.
            <param name="joystick">Index of the joystick</param>
            <returns>Number of buttons supported by the joystick</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.HasAxis(System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.Axis)">
            <summary>
                Check if a joystick supports a given axis
            </summary>
            If the joystick is not connected, this function returns false.
            <param name="joystick">Index of the joystick</param>
            <param name="axis">Axis to check</param>
            <returns>True if the joystick supports the axis, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IsButtonPressed(System.UInt32,System.UInt32)">
            <summary>
                Check if a joystick button is pressed
            </summary>
            If the joystick is not connected, this function returns false.
            <param name="joystick">Index of the joystick</param>
            <param name="button">Button to check</param>
            <returns>True if the button is pressed, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.GetAxisPosition(System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.Axis)">
            <summary>
                Get the current position of a joystick axis
            </summary>
            If the joystick is not connected, this function returns 0.
            <param name="joystick">Index of the joystick</param>
            <param name="axis">Axis to check</param>
            <returns>Current position of the axis, in range [-100 .. 100]</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Update">
            <summary>
                Update the states of all joysticks
            </summary>
            This function is used internally by SFML, so you normally
            don't have to call it explicitly. However, you may need to
            call it if you have no window yet (or no window at all):
            in this case the joysticks states are not updated automatically.
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.GetIdentification(System.UInt32)">
            <summary>
                Get the joystick information
            </summary>
            <param name="joystick">Index of the joystick</param>
            <returns>Structure containing joystick information</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_isConnected(System.UInt32)">
            <summary>
                Describes whether sf joystick is connected
            </summary>
            <param name="joystick">The joystick</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_getButtonCount(System.UInt32)">
            <summary>
                Sfs the joystick get button count using the specified joystick
            </summary>
            <param name="joystick">The joystick</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_hasAxis(System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.Axis)">
            <summary>
                Describes whether sf joystick has axis
            </summary>
            <param name="joystick">The joystick</param>
            <param name="axis">The axis</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_isButtonPressed(System.UInt32,System.UInt32)">
            <summary>
                Describes whether sf joystick is button pressed
            </summary>
            <param name="joystick">The joystick</param>
            <param name="button">The button</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_getAxisPosition(System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.Axis)">
            <summary>
                Sfs the joystick get axis position using the specified joystick
            </summary>
            <param name="joystick">The joystick</param>
            <param name="axis">The axis</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_update">
            <summary>
                Sfs the joystick update
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_getIdentification(System.UInt32)">
            <summary>
                Sfs the joystick get identification using the specified joystick
            </summary>
            <param name="joystick">The joystick</param>
            <returns>The identification marshal data</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Identification">
            <summary>
                Identification holds a joystick's identification
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Identification.Name">
            <summary>Name of the joystick</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Identification.VendorId">
            <summary>Manufacturer identifier</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Identification.ProductId">
            <summary>Product identifier</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IdentificationMarshalData">
            <summary>
                Internal struct used for marshaling the joystick
                identification struct from unmanaged code.
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IdentificationMarshalData.Name">
            <summary>
                The name
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IdentificationMarshalData.VendorId">
            <summary>
                The vendor id
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IdentificationMarshalData.ProductId">
            <summary>
                The product id
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEvent">
            <summary>
                Joystick buttons event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEvent.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEvent.Button">
            <summary>Index of the button</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEventArgs">
            <summary>
                Joystick buttons event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEventArgs.Button">
            <summary>Index of the button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEventArgs.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEvent)">
            <summary>
                Construct the joystick button arguments from a joystick button event
            </summary>
            <param name="e">Joystick button event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEvent">
            <summary>
                Joystick connect event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEvent.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEventArgs">
            <summary>
                Joystick connection/disconnection event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEventArgs.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEvent)">
            <summary>
                Construct the joystick connect arguments from a joystick connect event
            </summary>
            <param name="e">Joystick button event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEvent">
            <summary>
                Joystick axis move event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEvent.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEvent.Axis">
            <summary>Joystick axis (see JoyAxis enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEvent.Position">
            <summary>Current position of the axis</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs">
            <summary>
                Joystick axis move event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs.Axis">
            <summary>Joystick axis (see JoyAxis enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs.Position">
            <summary>Current position of the axis</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEvent)">
            <summary>
                Construct the joystick move arguments from a joystick move event
            </summary>
            <param name="e">Joystick move event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Key">
            <summary>
                Key codes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Unknown">
            <summary>Unhandled key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.A">
            <summary>The A key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.B">
            <summary>The B key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.C">
            <summary>The C key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.D">
            <summary>The D key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.E">
            <summary>The E key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F">
            <summary>The F key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.G">
            <summary>The G key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.H">
            <summary>The H key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.I">
            <summary>The I key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.J">
            <summary>The J key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.K">
            <summary>The K key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.L">
            <summary>The L key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.M">
            <summary>The M key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.N">
            <summary>The N key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.O">
            <summary>The O key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.P">
            <summary>The P key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Q">
            <summary>The Q key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.R">
            <summary>The R key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.S">
            <summary>The S key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.T">
            <summary>The T key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.U">
            <summary>The U key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.V">
            <summary>The V key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.W">
            <summary>The W key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.X">
            <summary>The X key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Y">
            <summary>The Y key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Z">
            <summary>The Z key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num0">
            <summary>The 0 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num1">
            <summary>The 1 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num2">
            <summary>The 2 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num3">
            <summary>The 3 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num4">
            <summary>The 4 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num5">
            <summary>The 5 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num6">
            <summary>The 6 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num7">
            <summary>The 7 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num8">
            <summary>The 8 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num9">
            <summary>The 9 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Escape">
            <summary>The Escape key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.LControl">
            <summary>The left Control key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.LShift">
            <summary>The left Shift key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.LAlt">
            <summary>The left Alt key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.LSystem">
            <summary>The left OS specific key: window (Windows and Linux), apple (MacOS X), ...</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.RControl">
            <summary>The right Control key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.RShift">
            <summary>The right Shift key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.RAlt">
            <summary>The right Alt key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.RSystem">
            <summary>The right OS specific key: window (Windows and Linux), apple (MacOS X), ...</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Menu">
            <summary>The Menu key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.LBracket">
            <summary>The [ key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.RBracket">
            <summary>The ] key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Semicolon">
            <summary>The ; key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Comma">
            <summary>The , key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Period">
            <summary>The . key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Quote">
            <summary>The ' key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Slash">
            <summary>The / key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Backslash">
            <summary>The \ key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Tilde">
            <summary>The ~ key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Equal">
            <summary>The = key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Hyphen">
            <summary>The - key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Space">
            <summary>The Space key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Enter">
            <summary>The Return key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Backspace">
            <summary>The Backspace key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Tab">
            <summary>The Tabulation key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.PageUp">
            <summary>The Page up key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.PageDown">
            <summary>The Page down key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.End">
            <summary>The End key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Home">
            <summary>The Home key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Insert">
            <summary>The Insert key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Delete">
            <summary>The Delete key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Add">
            <summary>The + key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Subtract">
            <summary>The - key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Multiply">
            <summary>The * key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Divide">
            <summary>The / key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Left">
            <summary>Left arrow</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Right">
            <summary>Right arrow</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Up">
            <summary>Up arrow</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Down">
            <summary>Down arrow</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad0">
            <summary>The numpad 0 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad1">
            <summary>The numpad 1 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad2">
            <summary>The numpad 2 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad3">
            <summary>The numpad 3 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad4">
            <summary>The numpad 4 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad5">
            <summary>The numpad 5 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad6">
            <summary>The numpad 6 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad7">
            <summary>The numpad 7 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad8">
            <summary>The numpad 8 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad9">
            <summary>The numpad 9 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F1">
            <summary>The F1 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F2">
            <summary>The F2 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F3">
            <summary>The F3 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F4">
            <summary>The F4 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F5">
            <summary>The F5 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F6">
            <summary>The F6 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F7">
            <summary>The F7 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F8">
            <summary>The F8 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F9">
            <summary>The F9 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F10">
            <summary>The F10 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F11">
            <summary>The F11 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F12">
            <summary>The F12 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F13">
            <summary>The F13 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F14">
            <summary>The F14 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F15">
            <summary>The F15 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Pause">
            <summary>The Pause key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.KeyCount">
            <summary>The total number of keyboard keys</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Dash">
            <summary>
                The dash key
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.BackSpace">
            <summary>
                The back space key
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Return">
            <summary>
                The return key
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.BackSlash">
            <summary>
                The back slash key
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.SemiColon">
            <summary>
                The semi colon key
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Keyboard">
            <summary>
                Give access to the real-time state of the keyboard
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Keyboard.IsKeyPressed(Alis.Core.Graphic.D2.SFML.Windows.Key)">
            <summary>
                Check if a key is pressed
            </summary>
            <param name="key">Key to check</param>
            <returns>True if the key is pressed, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Keyboard.SetVirtualKeyboardVisible(System.Boolean)">
            <summary>
                Enable/Disable visibility of the virtual keyboard
            </summary>
            <remarks>Applicable only on Android and iOS</remarks>
            <param name="visible">Whether to make the virtual keyboard visible (true) or not (false)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Keyboard.sfKeyboard_isKeyPressed(Alis.Core.Graphic.D2.SFML.Windows.Key)">
            <summary>
                Describes whether sf keyboard is key pressed
            </summary>
            <param name="key">The key</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Keyboard.sfKeyboard_setVirtualKeyboardVisible(System.Boolean)">
            <summary>
                Sfs the keyboard set virtual keyboard visible using the specified visible
            </summary>
            <param name="visible">The visible</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent">
            <summary>
                Keyboard event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent.Code">
            <summary>Code of the key (see KeyCode enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent.Alt">
            <summary>Is the Alt modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent.Control">
            <summary>Is the Control modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent.Shift">
            <summary>Is the Shift modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent.System">
            <summary>Is the System modifier pressed?</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs">
            <summary>
                Keyboard event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.Alt">
            <summary>Is the Alt modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.Code">
            <summary>Code of the key (see KeyCode enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.Control">
            <summary>Is the Control modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.Shift">
            <summary>Is the Shift modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.System">
            <summary>Is the System modifier pressed?</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.KeyEvent)">
            <summary>
                Construct the key arguments from a key event
            </summary>
            <param name="e">Key event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Mouse">
            <summary>
                Give access to the real-time state of the mouse
            </summary>
            <summary>
                The mouse class
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button">
            <summary>
                Mouse buttons
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.Left">
            <summary>The left mouse button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.Right">
            <summary>The right mouse button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.Middle">
            <summary>The middle (wheel) mouse button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.XButton1">
            <summary>The first extra mouse button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.XButton2">
            <summary>The second extra mouse button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.ButtonCount">
            <summary>Keep last -- the total number of mouse buttons</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.IsButtonPressed(Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button)">
            <summary>
                Check if a mouse button is pressed
            </summary>
            <param name="button">Button to check</param>
            <returns>True if the button is pressed, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.GetPosition">
            <summary>
                Get the current position of the mouse
            </summary>
            This function returns the current position of the mouse
            cursor in desktop coordinates.
            <returns>Current position of the mouse</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.GetPosition(Alis.Core.Graphic.D2.SFML.Windows.Window)">
            <summary>
                Get the current position of the mouse
            </summary>
            This function returns the current position of the mouse
            cursor relative to a window.
            <param name="relativeTo">Reference window</param>
            <returns>Current position of the mouse</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.SetPosition(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Set the current position of the mouse
            </summary>
            This function sets the current position of the mouse
            cursor in desktop coordinates.
            <param name="position">New position of the mouse</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.SetPosition(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Graphic.D2.SFML.Windows.Window)">
            <summary>
                Set the current position of the mouse
            </summary>
            This function sets the current position of the mouse
            cursor relative to a window.
            <param name="position">New position of the mouse</param>
            <param name="relativeTo">Reference window</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.sfMouse_isButtonPressed(Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button)">
            <summary>
                Describes whether sf mouse is button pressed
            </summary>
            <param name="button">The button</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.sfMouse_getPosition(System.IntPtr)">
            <summary>
                Sfs the mouse get position using the specified relative to
            </summary>
            <param name="relativeTo">The relative to</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.sfMouse_setPosition(Alis.Core.Aspect.Math.SFML.Vector2I,System.IntPtr)">
            <summary>
                Sfs the mouse set position using the specified position
            </summary>
            <param name="position">The position</param>
            <param name="relativeTo">The relative to</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Wheel">
            <summary>
                Mouse wheels
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Wheel.VerticalWheel">
            <summary>The vertical mouse wheel</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Wheel.HorizontalWheel">
            <summary>The horizontal mouse wheel</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEvent">
            <summary>
                Mouse buttons event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEvent.Button">
            <summary>Code of the button (see MouseButton enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEvent.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEvent.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs">
            <summary>
                Mouse buttons event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs.Button">
            <summary>Code of the button (see MouseButton enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEvent)">
            <summary>
                Construct the mouse button arguments from a mouse button event
            </summary>
            <param name="e">Mouse button event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEvent">
            <summary>
                Mouse move event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEvent.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEvent.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEventArgs">
            <summary>
                Mouse move event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEventArgs.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEventArgs.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEvent)">
            <summary>
                Construct the mouse move arguments from a mouse move event
            </summary>
            <param name="e">Mouse move event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEvent">
            <summary>
                Mouse wheel move event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEvent.Delta">
            <summary>Scroll amount</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEvent.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEvent.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs">
            <summary>
                Mouse wheel event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs.Delta">
            <summary>Scroll amount</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEvent)">
            <summary>
                Construct the mouse wheel arguments from a mouse wheel event
            </summary>
            <param name="e">Mouse wheel event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent">
            <summary>
                Mouse wheel scroll event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent.Wheel">
            <summary>Mouse Wheel which triggered the event</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent.Delta">
            <summary>Scroll amount</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs">
            <summary>
                Mouse wheel scroll event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.Delta">
            <summary>Scroll amount</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.Wheel">
            <summary>Mouse Wheel which triggered the event</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent)">
            <summary>
                Construct the mouse wheel scroll arguments from a mouse wheel scroll event
            </summary>
            <param name="e">Mouse wheel scroll event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Sensor">
            <summary>
                Give access to the real-time state of sensors
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type">
            <summary>
                Sensor types
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.Accelerometer">
            <summary>Measures the raw acceleration (m/s^2)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.Gyroscope">
            <summary>Measures the raw rotation rates (degrees/s)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.Magnetometer">
            <summary>Measures the ambient magnetic field (micro-teslas)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.Gravity">
            <summary>Measures the direction and intensity of gravity, independent of device acceleration (m/s^2)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.UserAcceleration">
            <summary>Measures the direction and intensity of device acceleration, independent of the gravity (m/s^2)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.Orientation">
            <summary>Measures the absolute 3D orientation (degrees)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.TypeCount">
            <summary>Keep last -- the total number of sensor types</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.IsAvailable(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type)">
            <summary>
                Check if a sensor is available on the underlying platform
            </summary>
            <param name="sensor">Sensor to check</param>
            <returns>True if the sensor is available, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.SetEnabled(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type,System.Boolean)">
            <summary>
                Enable or disable a sensor
            </summary>
            <param name="sensor">Sensor to check</param>
            <param name="enabled">True to enable, false to disable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.GetValue(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type)">
            <summary>
                Get the current sensor value
            </summary>
            <param name="sensor">Sensor to check</param>
            <returns>The current sensor value</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.sfSensor_isAvailable(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type)">
            <summary>
                Describes whether sf sensor is available
            </summary>
            <param name="sensor">The sensor</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.sfSensor_setEnabled(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type,System.Boolean)">
            <summary>
                Sfs the sensor set enabled using the specified sensor
            </summary>
            <param name="sensor">The sensor</param>
            <param name="enabled">The enabled</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.sfSensor_getValue(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type)">
            <summary>
                Sfs the sensor get value using the specified sensor
            </summary>
            <param name="sensor">The sensor</param>
            <returns>The vector 3f</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.SensorEvent">
            <summary>
                Sensor event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEvent.Type">
            <summary>Type of the sensor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEvent.X">
            <summary>Current value of the sensor on X axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEvent.Y">
            <summary>Current value of the sensor on Y axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEvent.Z">
            <summary>Current value of the sensor on Z axis</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs">
            <summary>
                Sensor event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.Type">
            <summary>Type of the sensor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.X">
            <summary>Current value of the sensor on X axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.Y">
            <summary>Current value of the sensor on Y axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.Z">
            <summary>Current value of the sensor on Z axis</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.SensorEvent)">
            <summary>
                Construct the sensor arguments from a sensor event
            </summary>
            <param name="e">Sensor event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.SizeEvent">
            <summary>
                Size event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SizeEvent.Width">
            <summary>New width of the window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SizeEvent.Height">
            <summary>New height of the window</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs">
            <summary>
                Size event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs.Height">
            <summary>New height of the window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs.Width">
            <summary>New width of the window</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.SizeEvent)">
            <summary>
                Construct the size arguments from a size event
            </summary>
            <param name="e">Size event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Styles">
            <summary>
                Enumeration of window creation styles
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.None">
            <summary>No border / title bar (this flag and all others are mutually exclusive)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.Titlebar">
            <summary>Title bar + fixed border</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.Resize">
            <summary>Titlebar + resizable border + maximize button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.Close">
            <summary>Titlebar + close button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.Fullscreen">
            <summary>Fullscreen mode (this flag and all others are mutually exclusive))</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.Default">
            <summary>Default window style (titlebar + resize + close)</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.TextEvent">
            <summary>
                Text event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TextEvent.Unicode">
            <summary>UTF-32 value of the character</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.TextEventArgs">
            <summary>
                Text event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TextEventArgs.Unicode">
            <summary>UTF-16 value of the character</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.TextEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.TextEvent)">
            <summary>
                Construct the text arguments from a text event
            </summary>
            <param name="e">Text event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.TextEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Touch">
            <summary>
                Give access to the real-time state of the touches
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Touch.IsDown(System.UInt32)">
            <summary>
                Check if a touch event is currently down
            </summary>
            <param name="finger">Finger index</param>
            <returns>True if the finger is currently touching the screen, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Touch.GetPosition(System.UInt32)">
            <summary>
                This function returns the current touch position
            </summary>
            <param name="finger">Finger index</param>
            <returns>Current position of the finger</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Touch.GetPosition(System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.Window)">
            <summary>
                This function returns the current touch position
                relative to the given window
            </summary>
            <param name="finger">Finger index</param>
            <param name="relativeTo">Reference window</param>
            <returns>Current position of the finger</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Touch.sfTouch_isDown(System.UInt32)">
            <summary>
                Describes whether sf touch is down
            </summary>
            <param name="finger">The finger</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Touch.sfTouch_getPosition(System.UInt32,System.IntPtr)">
            <summary>
                Sfs the touch get position using the specified finger
            </summary>
            <param name="finger">The finger</param>
            <param name="relativeTo">The relative to</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.TouchEvent">
            <summary>
                Touch event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEvent.Finger">
            <summary>Index of the finger in case of multi-touch events</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEvent.X">
            <summary>X position of the touch, relative to the left of the owner window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEvent.Y">
            <summary>Y position of the touch, relative to the top of the owner window</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs">
            <summary>
                Touch event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs.Finger">
            <summary>Index of the finger in case of multi-touch events</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs.X">
            <summary>X position of the touch, relative to the left of the owner window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs.Y">
            <summary>Y position of the touch, relative to the top of the owner window</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.TouchEvent)">
            <summary>
                Construct the touch arguments from a touch event
            </summary>
            <param name="e">Touch event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.VideoMode">
            <summary>
                VideoMode defines a video mode (width, height, bpp, frequency)
                and provides static functions for getting modes supported
                by the display device
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the video mode with its width and height
            </summary>
            <param name="width">Video mode width</param>
            <param name="height">Video mode height</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Construct the video mode with its width, height and depth
            </summary>
            <param name="width">Video mode width</param>
            <param name="height">Video mode height</param>
            <param name="bpp">Video mode depth (bits per pixel)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.IsValid">
            <summary>
                Tell whether or not the video mode is supported
            </summary>
            <returns>True if the video mode is valid, false otherwise</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.FullscreenModes">
            <summary>
                Get the list of all the supported fullscreen video modes
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.DesktopMode">
            <summary>
                Get the current desktop video mode
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.Width">
            <summary>Video mode width, in pixels</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.Height">
            <summary>Video mode height, in pixels</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.BitsPerPixel">
            <summary>Video mode depth, in bits per pixel</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.sfVideoMode_getDesktopMode">
            <summary>
                Sfs the video mode get desktop mode
            </summary>
            <returns>The video mode</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.sfVideoMode_getFullscreenModes(System.UInt32@)">
            <summary>
                Sfs the video mode get fullscreen modes using the specified count
            </summary>
            <param name="count">The count</param>
            <returns>The video mode</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.sfVideoMode_isValid(Alis.Core.Graphic.D2.SFML.Windows.VideoMode)">
            <summary>
                Describes whether sf video mode is valid
            </summary>
            <param name="mode">The mode</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Window">
            <summary>
                Window is a rendering window ; it can create a new window
                or connect to an existing one
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String)">
            <summary>
                Create the window with default style and creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles)">
            <summary>
                Create the window with default creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Create the window
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(System.IntPtr)">
            <summary>
                Create the window from an existing control with default creation settings
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Create the window from an existing control
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(System.IntPtr,System.Int32)">
            <summary>
                Constructor for derived classes
            </summary>
            <param name="cPointer">Pointer to the internal object in the C API</param>
            <param name="dummy">Internal hack :)</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Window.IsOpen">
            <summary>
                Tell whether or not the window is opened (ie. has been created).
                Note that a hidden window (Show(false))
                will still return true
            </summary>
            <returns>True if the window is opened</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Window.Settings">
            <summary>
                Creation settings of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Window.Position">
            <summary>
                Position of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Window.Size">
            <summary>
                Size of the rendering region of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Window.SystemHandle">
            <summary>
                OS-specific handle of the window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.Close">
            <summary>
                Close (destroy) the window.
                The Window instance remains valid and you can call
                Create to recreate the window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.Display">
            <summary>
                Display the window on screen
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetTitle(System.String)">
            <summary>
                Change the title of the window
            </summary>
            <param name="title">New title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetIcon(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
                Change the window's icon
            </summary>
            <param name="width">Icon's width, in pixels</param>
            <param name="height">Icon's height, in pixels</param>
            <param name="pixels">Array of pixels, format must be RGBA 32 bits</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetVisible(System.Boolean)">
            <summary>
                Show or hide the window
            </summary>
            <param name="visible">True to show the window, false to hide it</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetMouseCursorVisible(System.Boolean)">
            <summary>
                Show or hide the mouse cursor
            </summary>
            <param name="show">True to show, false to hide</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetMouseCursorGrabbed(System.Boolean)">
            <summary>
                Grab or release the mouse cursor
            </summary>
            <param name="grabbed">True to grab, false to release</param>
            <remarks>
                If set, grabs the mouse cursor inside this window's client
                area so it may no longer be moved outside its bounds.
                Note that grabbing is only active while the window has
                focus and calling this function for fullscreen windows
                won't have any effect (fullscreen windows always grab the
                cursor).
            </remarks>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetMouseCursor(Alis.Core.Graphic.D2.SFML.Windows.Cursor)">
            <summary>
                Set the displayed cursor to a native system cursor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetVerticalSyncEnabled(System.Boolean)">
            <summary>
                Enable / disable vertical synchronization
            </summary>
            <param name="enable">True to enable v-sync, false to deactivate</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetKeyRepeatEnabled(System.Boolean)">
            <summary>
                Enable or disable automatic key-repeat.
                Automatic key-repeat is enabled by default
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetActive">
            <summary>
                Activate the window as the current target
                for rendering
            </summary>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetActive(System.Boolean)">
            <summary>
                Activate of deactivate the window as the current target
                for rendering
            </summary>
            <param name="active">True to activate, false to deactivate (true by default)</param>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetFramerateLimit(System.UInt32)">
            <summary>
                Limit the framerate to a maximum fixed frequency
            </summary>
            <param name="limit">Framerate limit, in frames per seconds (use 0 to disable limit)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetJoystickThreshold(System.Single)">
            <summary>
                Change the joystick threshold, ie. the value below which
                no move event will be generated
            </summary>
            <param name="threshold">New threshold, in range [0, 100]</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.WaitAndDispatchEvents">
            <summary>
                Wait for a new event and dispatch it to the corresponding
                event handler
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.DispatchEvents">
            <summary>
                Call the event handlers for each pending event
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.RequestFocus">
            <summary>
                Request the current window to be made the active
                foreground window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.HasFocus">
            <summary>
                Check whether the window has the input focus
            </summary>
            <returns>True if the window has focus, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.PollEvent(Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Internal function to get the next event (non-blocking)
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>True if there was an event, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.WaitEvent(Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Internal function to get the next event (blocking)
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>False if any error occured</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.InternalGetMousePosition">
            <summary>
                Internal function to get the mouse position relative to the window.
                This function is protected because it is called by another class of
                another module, it is not meant to be called by users.
            </summary>
            <returns>Relative mouse position</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.InternalSetMousePosition(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Internal function to set the mouse position relative to the window.
                This function is protected because it is called by another class of
                another module, it is not meant to be called by users.
            </summary>
            <param name="position">Relative mouse position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.InternalGetTouchPosition(System.UInt32)">
            <summary>
                Internal function to get the touch position relative to the window.
                This function is protected because it is called by another class of
                another module, it is not meant to be called by users.
            </summary>
            <param name="finger">Finger index</param>
            <returns>Relative touch position</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.CallEventHandler(Alis.Core.Graphic.D2.SFML.Windows.Event)">
            <summary>
                Call the event handler for the given event
            </summary>
            <param name="e">Event to dispatch</param>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.Closed">
            <summary>Event handler for the Closed event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.Resized">
            <summary>Event handler for the Resized event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.LostFocus">
            <summary>Event handler for the LostFocus event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.GainedFocus">
            <summary>Event handler for the GainedFocus event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.TextEntered">
            <summary>Event handler for the TextEntered event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.KeyPressed">
            <summary>Event handler for the KeyPressed event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.KeyReleased">
            <summary>Event handler for the KeyReleased event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseWheelMoved">
            <summary>Event handler for the MouseWheelMoved event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseWheelScrolled">
            <summary>Event handler for the MouseWheelScrolled event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseButtonPressed">
            <summary>Event handler for the MouseButtonPressed event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseButtonReleased">
            <summary>Event handler for the MouseButtonReleased event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseMoved">
            <summary>Event handler for the MouseMoved event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseEntered">
            <summary>Event handler for the MouseEntered event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseLeft">
            <summary>Event handler for the MouseLeft event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.JoystickButtonPressed">
            <summary>Event handler for the JoystickButtonPressed event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.JoystickButtonReleased">
            <summary>Event handler for the JoystickButtonReleased event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.JoystickMoved">
            <summary>Event handler for the JoystickMoved event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.JoystickConnected">
            <summary>Event handler for the JoystickConnected event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.JoystickDisconnected">
            <summary>Event handler for the JoystickDisconnected event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.TouchBegan">
            <summary>Event handler for the TouchBegan event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.TouchMoved">
            <summary>Event handler for the TouchMoved event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.TouchEnded">
            <summary>Event handler for the TouchEnded event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.SensorChanged">
            <summary>Event handler for the SensorChanged event</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_create(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the window create using the specified mode
            </summary>
            <param name="mode">The mode</param>
            <param name="title">The title</param>
            <param name="style">The style</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_createUnicode(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the window create unicode using the specified mode
            </summary>
            <param name="mode">The mode</param>
            <param name="title">The title</param>
            <param name="style">The style</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_createFromHandle(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the window create from handle using the specified handle
            </summary>
            <param name="handle">The handle</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_destroy(System.IntPtr)">
            <summary>
                Sfs the window destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_isOpen(System.IntPtr)">
            <summary>
                Describes whether sf window is open
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_close(System.IntPtr)">
            <summary>
                Sfs the window close using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_pollEvent(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Describes whether sf window poll event
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="evt">The evt</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_waitEvent(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Describes whether sf window wait event
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="evt">The evt</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_display(System.IntPtr)">
            <summary>
                Sfs the window display using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_getSettings(System.IntPtr)">
            <summary>
                Sfs the window get settings using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The context settings</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_getPosition(System.IntPtr)">
            <summary>
                Sfs the window get position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setPosition(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Sfs the window set position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_getSize(System.IntPtr)">
            <summary>
                Sfs the window get size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2u</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setSize(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Sfs the window set size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="size">The size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setTitle(System.IntPtr,System.String)">
            <summary>
                Sfs the window set title using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="title">The title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setUnicodeTitle(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the window set unicode title using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="title">The title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setIcon(System.IntPtr,System.UInt32,System.UInt32,System.Byte*)">
            <summary>
                Sfs the window set icon using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="pixels">The pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setVisible(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the window set visible using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="visible">The visible</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setMouseCursorVisible(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the window set mouse cursor visible using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="show">The show</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setMouseCursorGrabbed(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the window set mouse cursor grabbed using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="grabbed">The grabbed</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setMouseCursor(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the window set mouse cursor using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="cursor">The cursor</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setVerticalSyncEnabled(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the window set vertical sync enabled using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="enable">The enable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setKeyRepeatEnabled(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the window set key repeat enabled using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="enable">The enable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setActive(System.IntPtr,System.Boolean)">
            <summary>
                Describes whether sf window set active
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="active">The active</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setFramerateLimit(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the window set framerate limit using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="limit">The limit</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_getFrameTime(System.IntPtr)">
            <summary>
                Sfs the window get frame time using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setJoystickThreshold(System.IntPtr,System.Single)">
            <summary>
                Sfs the window set joystick threshold using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="threshold">The threshold</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_getSystemHandle(System.IntPtr)">
            <summary>
                Sfs the window get system handle using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_requestFocus(System.IntPtr)">
            <summary>
                Sfs the window request focus using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_hasFocus(System.IntPtr)">
            <summary>
                Describes whether sf window has focus
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfMouse_getPosition(System.IntPtr)">
            <summary>
                Sfs the mouse get position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfMouse_setPosition(Alis.Core.Aspect.Math.SFML.Vector2I,System.IntPtr)">
            <summary>
                Sfs the mouse set position using the specified position
            </summary>
            <param name="position">The position</param>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfTouch_getPosition(System.UInt32,System.IntPtr)">
            <summary>
                Sfs the touch get position using the specified finger
            </summary>
            <param name="finger">The finger</param>
            <param name="relativeTo">The relative to</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="T:Alis.Core.Network.BufferPool">
            <summary>
                This buffer pool is instance thread safe
                Use GetBuffer to get a MemoryStream (with a publically accessible buffer)
                Calling Close on this MemoryStream will clear its internal buffer and return the buffer to the pool for reuse
                MemoryStreams can grow larger than the DEFAULT_BUFFER_SIZE (or whatever you passed in)
                and the underlying buffers will be returned to the pool at their larger sizes
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool.DefaultBufferSize">
            <summary>
                The default buffer size
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool._bufferPoolStack">
            <summary>
                The buffer pool stack
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool._bufferSize">
            <summary>
                The buffer size
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.BufferPool" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.BufferPool" /> class
            </summary>
            <param name="bufferSize">The buffer size</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.GetBuffer">
            <summary>
                Gets a MemoryStream built from a buffer plucked from a thread safe pool
                The pool grows automatically.
                Closing the memory stream clears the buffer and returns it to the pool
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.ReturnBuffer(System.Byte[])">
            <summary>
                Returns the buffer using the specified buffer
            </summary>
            <param name="buffer">The buffer</param>
        </member>
        <member name="T:Alis.Core.Network.BufferPool.PublicBufferMemoryStream">
            <summary>
                This memory stream is not instance thread safe (not to be confused with the BufferPool which is instance thread
                safe)
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool.PublicBufferMemoryStream._bufferPoolInternal">
            <summary>
                The buffer pool internal
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool.PublicBufferMemoryStream._buffer">
            <summary>
                The buffer
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool.PublicBufferMemoryStream._ms">
            <summary>
                The ms
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.#ctor(System.Byte[],Alis.Core.Network.BufferPool)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.BufferPool.PublicBufferMemoryStream" /> class
            </summary>
            <param name="buffer">The buffer</param>
            <param name="bufferPool">The buffer pool</param>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Length">
            <summary>
                Gets the value of the length
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.CanRead">
            <summary>
                Gets the value of the can read
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.CanSeek">
            <summary>
                Gets the value of the can seek
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.CanTimeout">
            <summary>
                Gets the value of the can timeout
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.CanWrite">
            <summary>
                Gets the value of the can write
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Capacity">
            <summary>
                Gets or sets the value of the capacity
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Position">
            <summary>
                Gets or sets the value of the position
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.ReadTimeout">
            <summary>
                Gets or sets the value of the read timeout
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.WriteTimeout">
            <summary>
                Gets or sets the value of the write timeout
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
                Begins the read using the specified buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
            <param name="callback">The callback</param>
            <param name="state">The state</param>
            <returns>The async result</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
                Begins the write using the specified buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
            <param name="callback">The callback</param>
            <param name="state">The state</param>
            <returns>The async result</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Close">
            <summary>
                Closes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Copies the to using the specified destination
            </summary>
            <param name="destination">The destination</param>
            <param name="bufferSize">The buffer size</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.EndRead(System.IAsyncResult)">
            <summary>
                Ends the read using the specified async result
            </summary>
            <param name="asyncResult">The async result</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.EndWrite(System.IAsyncResult)">
            <summary>
                Ends the write using the specified async result
            </summary>
            <param name="asyncResult">The async result</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Flush">
            <summary>
                Flushes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>
                Flushes the cancellation token
            </summary>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.GetBuffer">
            <summary>
                Gets the buffer
            </summary>
            <returns>The byte array</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads the buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.EnlargeBufferIfRequired(System.Int32)">
            <summary>
                Enlarges the buffer if required using the specified count
            </summary>
            <param name="count">The count</param>
            <exception cref="T:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException">
                Tried to create a buffer ({requiredSize:#,##0} bytes) that was
                larger than the max allowed size ({int.MaxValue:#,##0})
            </exception>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.WriteByte(System.Byte)">
            <summary>
                Writes the byte using the specified value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes the buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Writes the buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.InitializeLifetimeService">
            <summary>
                Initializes the lifetime service
            </summary>
            <returns>The object</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Reads the buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task containing the int</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.ReadByte">
            <summary>
                Reads the byte
            </summary>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
                Seeks the offset
            </summary>
            <param name="offset">The offset</param>
            <param name="loc">The loc</param>
            <returns>The long</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.SetLength(System.Int64)">
            <summary>
                Note: This will not make the MemoryStream any smaller, only larger
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.ToArray">
            <summary>
                Returns the array
            </summary>
            <returns>The byte array</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
            <summary>
                Describes whether this instance try get buffer
            </summary>
            <param name="buffer">The buffer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
                Writes the to using the specified stream
            </summary>
            <param name="stream">The stream</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.EntityTooLargeException">
            <summary>
                The entity too large exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.EntityTooLargeException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.EntityTooLargeException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.EntityTooLargeException.#ctor(System.String)">
            <summary>
                Http header too large to fit in buffer
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.EntityTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.EntityTooLargeException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException">
            <summary>
                The invalid http response code exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException" /> class
            </summary>
            <param name="responseCode">The response code</param>
            <param name="responseDetails">The response details</param>
            <param name="responseHeader">The response header</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="P:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.ResponseCode">
            <summary>
                Gets or sets the value of the response code
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.ResponseHeader">
            <summary>
                Gets or sets the value of the response header
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.ResponseDetails">
            <summary>
                Gets or sets the value of the response details
            </summary>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException">
            <summary>
                The sec web socket key missing exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.ServerListenerSocketException">
            <summary>
                The server listener socket exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.ServerListenerSocketException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.ServerListenerSocketException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.ServerListenerSocketException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.ServerListenerSocketException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.ServerListenerSocketException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.ServerListenerSocketException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException">
            <summary>
                The web socket buffer overflow exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException">
            <summary>
                The web socket handshake failed exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException">
            <summary>
                The web socket version not supported exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.HttpHelper">
            <summary>
                The http helper class
            </summary>
        </member>
        <member name="F:Alis.Core.Network.HttpHelper.HttpGetHeaderRegex">
            <summary>
                The http get header regex
            </summary>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.CalculateWebSocketKey">
            <summary>
                Calculates a random WebSocket key that can be used to initiate a WebSocket handshake
            </summary>
            <returns>A random websocket key</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.ComputeSocketAcceptString(System.String)">
            <summary>
                Computes a WebSocket accept string from a given key
            </summary>
            <param name="secWebSocketKey">The web socket key to base the accept string on</param>
            <returns>A web socket accept string</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.ReadHttpHeaderAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Reads an http header as per the HTTP spec
            </summary>
            <param name="stream">The stream to read UTF8 text from</param>
            <param name="token">The cancellation token</param>
            <returns>The HTTP header</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.IsWebSocketUpgradeRequest(System.String)">
            <summary>
                Decodes the header to detect is this is a web socket upgrade response
            </summary>
            <param name="header">The HTTP header</param>
            <returns>True if this is an http WebSocket upgrade response</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.GetPathFromHeader(System.String)">
            <summary>
                Gets the path from the HTTP header
            </summary>
            <param name="httpHeader">The HTTP header to read</param>
            <returns>The path</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.GetSubProtocols(System.String)">
            <summary>
                Gets the sub protocols using the specified http header
            </summary>
            <param name="httpHeader">The http header</param>
            <exception cref="T:Alis.Core.Network.Exceptions.EntityTooLargeException">Sec-WebSocket-Protocol exceeded the maximum of length of {MAX_LEN}</exception>
            <returns>A list of string</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.ReadHttpResponseCode(System.String)">
            <summary>
                Reads the HTTP response code from the http response string
            </summary>
            <param name="response">The response string</param>
            <returns>the response code</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.WriteHttpHeaderAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Writes an HTTP response string to the stream
            </summary>
            <param name="response">The response (without the new line characters)</param>
            <param name="stream">The stream to write to</param>
            <param name="token">The cancellation token</param>
        </member>
        <member name="T:Alis.Core.Network.IBufferPool">
            <summary>
                The buffer pool interface
            </summary>
        </member>
        <member name="M:Alis.Core.Network.IBufferPool.GetBuffer">
            <summary>
                Gets a MemoryStream built from a buffer plucked from a thread safe pool
                The pool grows automatically.
                Closing the memory stream clears the buffer and returns it to the pool
            </summary>
        </member>
        <member name="T:Alis.Core.Network.Internal.BinaryReaderWriter">
            <summary>
                The binary reader writer class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.ReadExactly(System.Int32,System.IO.Stream,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Reads the exactly using the specified length
            </summary>
            <param name="length">The length</param>
            <param name="stream">The stream</param>
            <param name="buffer">The buffer</param>
            <param name="cancellationToken">The cancellation token</param>
            <exception cref="T:System.IO.EndOfStreamException"></exception>
            <exception cref="T:System.IO.InternalBufferOverflowException">
                Unable to read {length} bytes into buffer (offset: {buffer.Offset}
                size: {buffer.Count}). Use a larger read buffer
            </exception>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.ReadUShortExactly(System.IO.Stream,System.Boolean,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Reads the u short exactly using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
            <param name="buffer">The buffer</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task containing the ushort</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.ReadULongExactly(System.IO.Stream,System.Boolean,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Reads the u long exactly using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
            <param name="buffer">The buffer</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task containing the ulong</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.ReadLongExactly(System.IO.Stream,System.Boolean,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Reads the long exactly using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
            <param name="buffer">The buffer</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task containing the long</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.WriteInt(System.Int32,System.IO.Stream,System.Boolean)">
            <summary>
                Writes the int using the specified value
            </summary>
            <param name="value">The value</param>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.WriteULong(System.UInt64,System.IO.Stream,System.Boolean)">
            <summary>
                Writes the u long using the specified value
            </summary>
            <param name="value">The value</param>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.WriteLong(System.Int64,System.IO.Stream,System.Boolean)">
            <summary>
                Writes the long using the specified value
            </summary>
            <param name="value">The value</param>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.WriteUShort(System.UInt16,System.IO.Stream,System.Boolean)">
            <summary>
                Writes the u short using the specified value
            </summary>
            <param name="value">The value</param>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
        </member>
        <member name="T:Alis.Core.Network.Internal.Events">
            <summary>
                Use the Guid to locate this EventSource in PerfView using the Additional Providers box (without wildcard
                characters)
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.Events.Log">
            <summary>
                The events
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ClientConnectingToIpAddress(System.Guid,System.String,System.Int32)">
            <summary>
                Clients the connecting to ip address using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="ipAddress">The ip address</param>
            <param name="port">The port</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ClientConnectingToHost(System.Guid,System.String,System.Int32)">
            <summary>
                Clients the connecting to host using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="host">The host</param>
            <param name="port">The port</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.AttemtingToSecureSslConnection(System.Guid)">
            <summary>
                Attemtings the to secure ssl connection using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ConnectionSecured(System.Guid)">
            <summary>
                Connections the secured using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ConnectionNotSecure(System.Guid)">
            <summary>
                Connections the not secure using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.SslCertificateError(System.Net.Security.SslPolicyErrors)">
            <summary>
                Ssls the certificate error using the specified ssl policy errors
            </summary>
            <param name="sslPolicyErrors">The ssl policy errors</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.HandshakeSent(System.Guid,System.String)">
            <summary>
                Handshakes the sent using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="httpHeader">The http header</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ReadingHttpResponse(System.Guid)">
            <summary>
                Readings the http response using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ReadHttpResponseError(System.Guid,System.String)">
            <summary>
                Reads the http response error using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.InvalidHttpResponseCode(System.Guid,System.String)">
            <summary>
                Invalids the http response code using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="response">The response</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.HandshakeFailure(System.Guid,System.String)">
            <summary>
                Handshakes the failure using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ClientHandshakeSuccess(System.Guid)">
            <summary>
                Clients the handshake success using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ServerHandshakeSuccess(System.Guid)">
            <summary>
                Servers the handshake success using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.AcceptWebSocketStarted(System.Guid)">
            <summary>
                Accepts the web socket started using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.SendingHandshakeResponse(System.Guid,System.String)">
            <summary>
                Sendings the handshake response using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="response">The response</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.WebSocketVersionNotSupported(System.Guid,System.String)">
            <summary>
                Webs the socket version not supported using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.BadRequest(System.Guid,System.String)">
            <summary>
                Bads the request using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.UsePerMessageDeflate(System.Guid)">
            <summary>
                Uses the per message deflate using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.NoMessageCompression(System.Guid)">
            <summary>
                Noes the message compression using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.KeepAliveIntervalZero(System.Guid)">
            <summary>
                Keeps the alive interval zero using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.PingPongManagerStarted(System.Guid,System.Int32)">
            <summary>
                Pings the pong manager started using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="keepAliveIntervalSeconds">The keep alive interval seconds</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.PingPongManagerEnded(System.Guid)">
            <summary>
                Pings the pong manager ended using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.KeepAliveIntervalExpired(System.Guid,System.Int32)">
            <summary>
                Keeps the alive interval expired using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="keepAliveIntervalSeconds">The keep alive interval seconds</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseOutputAutoTimeout(System.Guid,System.Net.WebSockets.WebSocketCloseStatus,System.String,System.String)">
            <summary>
                Closes the output auto timeout using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseOutputAutoTimeoutCancelled(System.Guid,System.Int32,System.Net.WebSockets.WebSocketCloseStatus,System.String,System.String)">
            <summary>
                Closes the output auto timeout cancelled using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="timeoutSeconds">The timeout seconds</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseOutputAutoTimeoutError(System.Guid,System.String,System.Net.WebSockets.WebSocketCloseStatus,System.String,System.String)">
            <summary>
                Closes the output auto timeout error using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="closeException">The close exception</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.TryGetBufferNotSupported(System.Guid,System.String)">
            <summary>
                Tries the get buffer not supported using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="streamType">The stream type</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.SendingFrame(System.Guid,Alis.Core.Network.Internal.WebSocketOpCode,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Sendings the frame using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketOpCode">The web socket op code</param>
            <param name="isFinBitSet">The is fin bit set</param>
            <param name="numBytes">The num bytes</param>
            <param name="isPayloadCompressed">The is payload compressed</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ReceivedFrame(System.Guid,Alis.Core.Network.Internal.WebSocketOpCode,System.Boolean,System.Int32)">
            <summary>
                Receiveds the frame using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketOpCode">The web socket op code</param>
            <param name="isFinBitSet">The is fin bit set</param>
            <param name="numBytes">The num bytes</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseOutputNoHandshake(System.Guid,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <summary>
                Closes the output no handshake using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseHandshakeStarted(System.Guid,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <summary>
                Closes the handshake started using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseHandshakeRespond(System.Guid,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <summary>
                Closes the handshake respond using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseHandshakeComplete(System.Guid)">
            <summary>
                Closes the handshake complete using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseFrameReceivedInUnexpectedState(System.Guid,System.Net.WebSockets.WebSocketState,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <summary>
                Closes the frame received in unexpected state using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.WebSocketDispose(System.Guid,System.Net.WebSockets.WebSocketState)">
            <summary>
                Webs the socket dispose using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.WebSocketDisposeCloseTimeout(System.Guid,System.Net.WebSockets.WebSocketState)">
            <summary>
                Webs the socket dispose close timeout using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.WebSocketDisposeError(System.Guid,System.Net.WebSockets.WebSocketState,System.String)">
            <summary>
                Webs the socket dispose error using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.InvalidStateBeforeClose(System.Guid,System.Net.WebSockets.WebSocketState)">
            <summary>
                Invalids the state before close using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.InvalidStateBeforeCloseOutput(System.Guid,System.Net.WebSockets.WebSocketState)">
            <summary>
                Invalids the state before close output using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketFrame">
            <summary>
                The web socket frame class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrame.#ctor(System.Boolean,Alis.Core.Network.Internal.WebSocketOpCode,System.Int32,System.ArraySegment{System.Byte})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Internal.WebSocketFrame" /> class
            </summary>
            <param name="isFinBitSet">The is fin bit set</param>
            <param name="webSocketOpCode">The web socket op code</param>
            <param name="count">The count</param>
            <param name="maskKey">The mask key</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrame.#ctor(System.Boolean,Alis.Core.Network.Internal.WebSocketOpCode,System.Int32,System.Net.WebSockets.WebSocketCloseStatus,System.String,System.ArraySegment{System.Byte})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Internal.WebSocketFrame" /> class
            </summary>
            <param name="isFinBitSet">The is fin bit set</param>
            <param name="webSocketOpCode">The web socket op code</param>
            <param name="count">The count</param>
            <param name="closeStatus">The close status</param>
            <param name="closeStatusDescription">The close status description</param>
            <param name="maskKey">The mask key</param>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.IsFinBitSet">
            <summary>
                Gets the value of the is fin bit set
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.OpCode">
            <summary>
                Gets the value of the op code
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.Count">
            <summary>
                Gets the value of the count
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.CloseStatus">
            <summary>
                Gets the value of the close status
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.CloseStatusDescription">
            <summary>
                Gets the value of the close status description
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.MaskKey">
            <summary>
                Gets the value of the mask key
            </summary>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketFrameCommon">
            <summary>
                The web socket frame common class
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketFrameCommon.MaskKeyLength">
            <summary>
                The mask key length
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameCommon.ToggleMask(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
                Mutate payload with the mask key
                This is a reversible process
                If you apply this to masked data it will be unmasked and visa versa
            </summary>
            <param name="maskKey">The 4 byte mask key</param>
            <param name="payload">The payload to mutate</param>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketFrameReader">
            <summary>
                Reads a WebSocket frame
                see http://tools.ietf.org/html/rfc6455 for specification
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameReader.CalculateNumBytesToRead(System.Int32,System.Int32)">
            <summary>
                Calculates the num bytes to read using the specified num bytes letf to read
            </summary>
            <param name="numBytesLetfToRead">The num bytes letf to read</param>
            <param name="bufferSize">The buffer size</param>
            <returns>The num bytes letf to read</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameReader.ReadFromCursorAsync(System.IO.Stream,System.ArraySegment{System.Byte},Alis.Core.Network.Internal.WebSocketReadCursor,System.Threading.CancellationToken)">
            <summary>
                The last read could not be completed because the read buffer was too small.
                We need to continue reading bytes off the stream.
                Not to be confused with a continuation frame
            </summary>
            <param name="fromStream">The stream to read from</param>
            <param name="intoBuffer">The buffer to read into</param>
            <param name="readCursor">The previous partial websocket frame read plus cursor information</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>A websocket frame</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameReader.ReadAsync(System.IO.Stream,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Read a WebSocket frame from the stream
            </summary>
            <param name="fromStream">The stream to read from</param>
            <param name="intoBuffer">The buffer to read into</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>A websocket frame</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameReader.DecodeCloseFrame(System.Boolean,Alis.Core.Network.Internal.WebSocketOpCode,System.Int32,System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
                Extracts close status and close description information from the web socket frame
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameReader.ReadLength(System.Byte,System.ArraySegment{System.Byte},System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Reads the length of the payload according to the contents of byte2
            </summary>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketFrameWriter">
            <summary>
                The web socket frame writer class
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketFrameWriter.Random">
            <summary>
                This is used for data masking so that web proxies don't cache the data
                Therefore, there are no cryptographic concerns
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameWriter.#cctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Internal.WebSocketFrameWriter" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameWriter.Write(Alis.Core.Network.Internal.WebSocketOpCode,System.ArraySegment{System.Byte},System.IO.MemoryStream,System.Boolean,System.Boolean)">
            <summary>
                No async await stuff here because we are dealing with a memory stream
            </summary>
            <param name="opCode">The web socket opcode</param>
            <param name="fromPayload">Array segment to get payload data from</param>
            <param name="toStream">Stream to write to</param>
            <param name="isLastFrame">True is this is the last frame in this message (usually true)</param>
            <param name="isClient"></param>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketImplementation">
            <summary>
                Main implementation of the WebSocket abstract class
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation.MaxPingPongPayloadLen">
            <summary>
                The max ping pong payload len
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._guid">
            <summary>
                The guid
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._includeExceptionInCloseResponse">
            <summary>
                The include exception in close response
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._internalReadCts">
            <summary>
                The internal read cts
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._isClient">
            <summary>
                The is client
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._pingPongManager">
            <summary>
                The ping pong manager
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._recycledStreamFactory">
            <summary>
                The recycled stream factory
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._semaphore">
            <summary>
                The semaphore slim
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._stream">
            <summary>
                The stream
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._usePerMessageDeflate">
            <summary>
                The use per message deflate
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._closeStatus">
            <summary>
                The close status
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._closeStatusDescription">
            <summary>
                The close status description
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._continuationFrameMessageType">
            <summary>
                The binary
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._isContinuationFrame">
            <summary>
                The is continuation frame
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._readCursor">
            <summary>
                The read cursor
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._state">
            <summary>
                The state
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._tryGetBufferFailureLogged">
            <summary>
                The try get buffer failure logged
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.#ctor(System.Guid,System.Func{System.IO.MemoryStream},System.IO.Stream,System.TimeSpan,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Internal.WebSocketImplementation" /> class
            </summary>
            <param name="guid">The guid</param>
            <param name="recycledStreamFactory">The recycled stream factory</param>
            <param name="stream">The stream</param>
            <param name="keepAliveInterval">The keep alive interval</param>
            <param name="secWebSocketExtensions">The sec web socket extensions</param>
            <param name="includeExceptionInCloseResponse">The include exception in close response</param>
            <param name="isClient">The is client</param>
            <param name="subProtocol">The sub protocol</param>
            <exception cref="T:System.InvalidOperationException">KeepAliveInterval must be Zero or positive</exception>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketImplementation.CloseStatus">
            <summary>
                Gets the value of the close status
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketImplementation.CloseStatusDescription">
            <summary>
                Gets the value of the close status description
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketImplementation.State">
            <summary>
                Gets the value of the state
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketImplementation.SubProtocol">
            <summary>
                Gets the value of the sub protocol
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketImplementation.KeepAliveInterval">
            <summary>
                Gets the value of the keep alive interval
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Receive web socket result
            </summary>
            <param name="buffer">The buffer to copy data into</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The web socket result details</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Send data to the web socket
            </summary>
            <param name="buffer">the buffer containing data to send</param>
            <param name="messageType">The message type. Can be Text or Binary</param>
            <param name="endOfMessage">
                True if this message is a standalone message (this is the norm)
                If it is a multi-part message then false (and true for the last message)
            </param>
            <param name="cancellationToken">the cancellation token</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.SendPingAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Call this automatically from server side each keepAliveInterval period
                NOTE: ping payload must be 125 bytes or less
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.Abort">
            <summary>
                Aborts the WebSocket without sending a Close frame
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
                Polite close (use the close handshake)
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
                Fire and forget close
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.Dispose">
            <summary>
                Dispose will send a close frame if the connection is still open
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.OnPong(Alis.Core.Network.PongEventArgs)">
            <summary>
                Called when a Pong frame is received
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.BuildClosePayload(System.Net.WebSockets.WebSocketCloseStatus,System.String)">
            <summary>
                As per the spec, write the close status followed by the close reason
            </summary>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">Optional extra close details</param>
            <returns>The payload to sent in the close frame</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.SendPongAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            NOTE: pong payload must be 125 bytes or less
            Pong should contain the same payload as the ping
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.RespondToCloseFrame(Alis.Core.Network.Internal.WebSocketFrame,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Called when a Close frame is received
                Send a response close frame if applicable
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.GetBuffer(System.IO.MemoryStream)">
            <summary>
                Note that the way in which the stream buffer is accessed can lead to significant performance problems
                You want to avoid a call to stream.ToArray to avoid extra memory allocation
                MemoryStream can be configured to have its internal buffer accessible.
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.WriteStreamToNetwork(System.IO.MemoryStream,System.Threading.CancellationToken)">
            <summary>
                Puts data on the wire
            </summary>
            <param name="stream">The stream to read data from</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.GetOppCode(System.Net.WebSockets.WebSocketMessageType)">
            <summary>
                Turns a spec websocket frame opcode into a WebSocketMessageType
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.CloseOutputAutoTimeoutAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Exception)">
            <summary>
                Automatic WebSocket close in response to some invalid data from the remote websocket host
            </summary>
            <param name="closeStatus">The close status to use</param>
            <param name="statusDescription">A description of why we are closing</param>
            <param name="ex">The exception (for logging)</param>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketOpCode">
            <summary>
                The web socket op code enum
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.ContinuationFrame">
            <summary>
                The continuation frame web socket op code
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.TextFrame">
            <summary>
                The text frame web socket op code
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.BinaryFrame">
            <summary>
                The binary frame web socket op code
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.ConnectionClose">
            <summary>
                The connection close web socket op code
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.Ping">
            <summary>
                The ping web socket op code
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.Pong">
            <summary>
                The pong web socket op code
            </summary>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketReadCursor">
            <summary>
                The web socket read cursor class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketReadCursor.#ctor(Alis.Core.Network.Internal.WebSocketFrame,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Internal.WebSocketReadCursor" /> class
            </summary>
            <param name="frame">The frame</param>
            <param name="numBytesRead">The num bytes read</param>
            <param name="numBytesLeftToRead">The num bytes left to read</param>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketReadCursor.WebSocketFrame">
            <summary>
                Gets the value of the web socket frame
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketReadCursor.NumBytesRead">
            <summary>
                Gets the value of the num bytes read
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketReadCursor.NumBytesLeftToRead">
            <summary>
                Gets the value of the num bytes left to read
            </summary>
        </member>
        <member name="T:Alis.Core.Network.IPingPongManager">
            <summary>
                Ping Pong Manager used to facilitate ping pong WebSocket messages
            </summary>
        </member>
        <member name="E:Alis.Core.Network.IPingPongManager.Pong">
            <summary>
                Raised when a Pong frame is received
            </summary>
        </member>
        <member name="M:Alis.Core.Network.IPingPongManager.SendPing(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Sends a ping frame
            </summary>
            <param name="payload">The payload (must be 125 bytes of less)</param>
            <param name="cancellation">The cancellation token</param>
        </member>
        <member name="T:Alis.Core.Network.IWebSocketClientFactory">
            <summary>
                Web socket client factory used to open web socket client connections
            </summary>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketClientFactory.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
                Connect with default options
            </summary>
            <param name="uri">The WebSocket uri to connect to (e.g. ws://example.com or wss://example.com for SSL)</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket instance</returns>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketClientFactory.ConnectAsync(System.Uri,Alis.Core.Network.WebSocketClientOptions,System.Threading.CancellationToken)">
            <summary>
                Connect with options specified
            </summary>
            <param name="uri">The WebSocket uri to connect to (e.g. ws://example.com or wss://example.com for SSL)</param>
            <param name="options">The WebSocket client options</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket instance</returns>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketClientFactory.ConnectAsync(System.IO.Stream,System.String,Alis.Core.Network.WebSocketClientOptions,System.Threading.CancellationToken)">
            <summary>
                Connect with a stream that has already been opened and HTTP websocket upgrade request sent
                This function will check the handshake response from the server and proceed if successful
                Use this function if you have specific requirements to open a conenction like using special http headers and
                cookies
                You will have to build your own HTTP websocket upgrade request
                You may not even choose to use TCP/IP and this function will allow you to do that
            </summary>
            <param name="responseStream">The full duplex response stream from the server</param>
            <param name="secWebSocketKey">The secWebSocketKey you used in the handshake request</param>
            <param name="options">The WebSocket client options</param>
            <param name="token">The optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Network.IWebSocketServerFactory">
            <summary>
                Web socket server factory used to open web socket server connections
            </summary>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketServerFactory.ReadHttpHeaderFromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Reads a http header information from a stream and decodes the parts relating to the WebSocket protocot upgrade
            </summary>
            <param name="stream">The network stream</param>
            <param name="token">The optional cancellation token</param>
            <returns>Http data read from the stream</returns>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketServerFactory.AcceptWebSocketAsync(Alis.Core.Network.WebSocketHttpContext,System.Threading.CancellationToken)">
            <summary>
                Accept web socket with default options
                Call ReadHttpHeaderFromStreamAsync first to get WebSocketHttpContext
            </summary>
            <param name="context">The http context used to initiate this web socket request</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket</returns>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketServerFactory.AcceptWebSocketAsync(Alis.Core.Network.WebSocketHttpContext,Alis.Core.Network.WebSocketServerOptions,System.Threading.CancellationToken)">
            <summary>
                Accept web socket with options specified
                Call ReadHttpHeaderFromStreamAsync first to get WebSocketHttpContext
            </summary>
            <param name="context">The http context used to initiate this web socket request</param>
            <param name="options">The web socket options</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket</returns>
        </member>
        <member name="T:Alis.Core.Network.PingPongManager">
            <summary>
                Ping Pong Manager used to facilitate ping pong WebSocket messages
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._cancellationToken">
            <summary>
                The cancellation token
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._guid">
            <summary>
                The guid
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._keepAliveInterval">
            <summary>
                The keep alive interval
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._pingTask">
            <summary>
                The ping task
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._stopwatch">
            <summary>
                The stopwatch
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._webSocket">
            <summary>
                The web socket
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._pingSentTicks">
            <summary>
                The ping sent ticks
            </summary>
        </member>
        <member name="M:Alis.Core.Network.PingPongManager.#ctor(System.Guid,System.Net.WebSockets.WebSocket,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Initialises a new instance of the PingPongManager to facilitate ping pong WebSocket messages.
                If you are manually creating an instance of this class then it is advisable to set keepAliveInterval to
                TimeSpan.Zero when you create the WebSocket instance (using a factory) otherwise you may be automatically
                be sending duplicate Ping messages (see keepAliveInterval below)
            </summary>
            <param name="guid"></param>
            <param name="webSocket">The web socket used to listen to ping messages and send pong messages</param>
            <param name="keepAliveInterval">
                The time between automatically sending ping messages.
                Set this to TimeSpan.Zero if you with to manually control sending ping messages.
            </param>
            <param name="cancellationToken">
                The token used to cancel a pending ping send AND the automatic sending of ping messages
                if keepAliveInterval is positive
            </param>
        </member>
        <member name="E:Alis.Core.Network.PingPongManager.Pong">
            <summary>
                Raised when a Pong frame is received
            </summary>
        </member>
        <member name="M:Alis.Core.Network.PingPongManager.SendPing(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Sends a ping frame
            </summary>
            <param name="payload">The payload (must be 125 bytes of less)</param>
            <param name="cancellation">The cancellation token</param>
        </member>
        <member name="M:Alis.Core.Network.PingPongManager.OnPong(Alis.Core.Network.PongEventArgs)">
            <summary>
                Ons the pong using the specified e
            </summary>
            <param name="e">The </param>
        </member>
        <member name="M:Alis.Core.Network.PingPongManager.PingForever">
            <summary>
                Pings the forever
            </summary>
        </member>
        <member name="M:Alis.Core.Network.PingPongManager.WebSocketImpl_Pong(System.Object,Alis.Core.Network.PongEventArgs)">
            <summary>
                Webs the socket impl pong using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="T:Alis.Core.Network.PongEventArgs">
            <summary>
                Pong EventArgs
            </summary>
        </member>
        <member name="M:Alis.Core.Network.PongEventArgs.#ctor(System.ArraySegment{System.Byte})">
            <summary>
                Initialises a new instance of the PongEventArgs class
            </summary>
            <param name="payload">The pong payload must be 125 bytes or less (can be zero bytes)</param>
        </member>
        <member name="P:Alis.Core.Network.PongEventArgs.Payload">
            <summary>
                The data extracted from a Pong WebSocket frame
            </summary>
        </member>
        <member name="T:Alis.Core.Network.WebSocketClientFactory">
            <summary>
                Web socket client factory used to open web socket client connections
            </summary>
        </member>
        <member name="F:Alis.Core.Network.WebSocketClientFactory._bufferFactory">
            <summary>
                The buffer factory
            </summary>
        </member>
        <member name="F:Alis.Core.Network.WebSocketClientFactory._bufferPool">
            <summary>
                The buffer pool
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.#ctor">
            <summary>
                Initialises a new instance of the WebSocketClientFactory class without caring about internal buffers
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.#ctor(System.Func{System.IO.MemoryStream})">
            <summary>
                Initialises a new instance of the WebSocketClientFactory class with control over internal buffer creation
            </summary>
            <param name="bufferFactory">
                Used to get a memory stream. Feel free to implement your own buffer pool. MemoryStreams
                will be disposed when no longer needed and can be returned to the pool.
            </param>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
                Connect with default options
            </summary>
            <param name="uri">The WebSocket uri to connect to (e.g. ws://example.com or wss://example.com for SSL)</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket instance</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ConnectAsync(System.Uri,Alis.Core.Network.WebSocketClientOptions,System.Threading.CancellationToken)">
            <summary>
                Connect with options specified
            </summary>
            <param name="uri">The WebSocket uri to connect to (e.g. ws://example.com or wss://example.com for SSL)</param>
            <param name="options">The WebSocket client options</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket instance</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ConnectAsync(System.IO.Stream,System.String,Alis.Core.Network.WebSocketClientOptions,System.Threading.CancellationToken)">
            <summary>
                Connect with a stream that has already been opened and HTTP websocket upgrade request sent
                This function will check the handshake response from the server and proceed if successful
                Use this function if you have specific requirements to open a conenction like using special http headers and
                cookies
                You will have to build your own HTTP websocket upgrade request
                You may not even choose to use TCP/IP and this function will allow you to do that
            </summary>
            <param name="responseStream">The full duplex response stream from the server</param>
            <param name="secWebSocketKey">The secWebSocketKey you used in the handshake request</param>
            <param name="options">The WebSocket client options</param>
            <param name="token">The optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ConnectAsync(System.Guid,System.IO.Stream,System.String,System.TimeSpan,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Connects the guid
            </summary>
            <param name="guid">The guid</param>
            <param name="responseStream">The response stream</param>
            <param name="secWebSocketKey">The sec web socket key</param>
            <param name="keepAliveInterval">The keep alive interval</param>
            <param name="secWebSocketExtensions">The sec web socket extensions</param>
            <param name="includeExceptionInCloseResponse">The include exception in close response</param>
            <param name="token">The token</param>
            <exception cref="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException">Handshake unexpected failure </exception>
            <returns>A task containing the web socket</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.GetSubProtocolFromHeader(System.String)">
            <summary>
                Gets the sub protocol from header using the specified response
            </summary>
            <param name="response">The response</param>
            <returns>The string</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ThrowIfInvalidAcceptString(System.Guid,System.String,System.String)">
            <summary>
                Throws the if invalid accept string using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="response">The response</param>
            <param name="secWebSocketKey">The sec web socket key</param>
            <exception cref="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException"></exception>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ThrowIfInvalidResponseCode(System.String)">
            <summary>
                Throws the if invalid response code using the specified response header
            </summary>
            <param name="responseHeader">The response header</param>
            <exception cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException"></exception>
            <exception cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException">null null </exception>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.TlsAuthenticateAsClient(System.Net.Security.SslStream,System.String)">
            <summary>
                Override this if you need more fine grained control over the TLS handshake like setting the SslProtocol or adding a
                client certificate
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.GetStream(System.Guid,System.Boolean,System.Boolean,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Override this if you need more control over how the stream used for the websocket is created. It does not event
                need to be a TCP stream
            </summary>
            <param name="loggingGuid">For logging purposes only</param>
            <param name="isSecure">Make a secure connection</param>
            <param name="noDelay">
                Set to true to send a message immediately with the least amount of latency (typical usage for
                chat)
            </param>
            <param name="host">The destination host (can be an IP address)</param>
            <param name="port">The destination port</param>
            <param name="cancellationToken">Used to cancel the request</param>
            <returns>A connected and open stream</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
                Invoked by the RemoteCertificateValidationDelegate
                If you want to ignore certificate errors (for debugging) then return true
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.GetAdditionalHeaders(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Gets the additional headers using the specified additional headers
            </summary>
            <param name="additionalHeaders">The additional headers</param>
            <returns>The string</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.PerformHandshake(System.Guid,System.Uri,System.IO.Stream,Alis.Core.Network.WebSocketClientOptions,System.Threading.CancellationToken)">
            <summary>
                Performs the handshake using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="uri">The uri</param>
            <param name="stream">The stream</param>
            <param name="options">The options</param>
            <param name="token">The token</param>
            <returns>A task containing the web socket</returns>
        </member>
        <member name="T:Alis.Core.Network.WebSocketClientOptions">
            <summary>
                Client WebSocket init options
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientOptions.#ctor">
            <summary>
                Initialises a new instance of the WebSocketClientOptions class
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.KeepAliveInterval">
            <summary>
                How often to send ping requests to the Server
                This is done to prevent proxy servers from closing your connection
                The default is TimeSpan.Zero meaning that it is disabled.
                WebSocket servers usually send ping messages so it is not normally necessary for the client to send them (hence the
                TimeSpan.Zero default)
                You can manually control ping pong messages using the PingPongManager class.
                If you do that it is advisible to set this KeepAliveInterval to zero for the WebSocketClientFactory
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.NoDelay">
            <summary>
                Set to true to send a message immediately with the least amount of latency (typical usage for chat)
                This will disable Nagle's algorithm which can cause high tcp latency for small packets sent infrequently
                However, if you are streaming large packets or sending large numbers of small packets frequently it is advisable to
                set NoDelay to false
                This way data will be bundled into larger packets for better throughput
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.AdditionalHttpHeaders">
            <summary>
                Add any additional http headers to this dictionary
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.IncludeExceptionInCloseResponse">
            <summary>
                Include the full exception (with stack trace) in the close response
                when an exception is encountered and the WebSocket connection is closed
                The default is false
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.SecWebSocketExtensions">
            <summary>
                WebSocket Extensions as an HTTP header value
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.SecWebSocketProtocol">
            <summary>
                A comma separated list of sub protocols in preference order (first one being the most preferred)
                The server will return the first supported sub protocol (or none if none are supported)
                Can be null
            </summary>
        </member>
        <member name="T:Alis.Core.Network.WebSocketHttpContext">
            <summary>
                The WebSocket HTTP Context used to initiate a WebSocket handshake
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketHttpContext.#ctor(System.Boolean,System.Collections.Generic.IList{System.String},System.String,System.String,System.IO.Stream)">
            <summary>
                Initialises a new instance of the WebSocketHttpContext class
            </summary>
            <param name="isWebSocketRequest">True if this is a valid WebSocket request</param>
            <param name="webSocketRequestedProtocols"></param>
            <param name="httpHeader">The raw http header extracted from the stream</param>
            <param name="path">The Path extracted from the http header</param>
            <param name="stream">The stream AFTER the header has already been read</param>
        </member>
        <member name="P:Alis.Core.Network.WebSocketHttpContext.IsWebSocketRequest">
            <summary>
                True if this is a valid WebSocket request
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketHttpContext.WebSocketRequestedProtocols">
            <summary>
                Gets the value of the web socket requested protocols
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketHttpContext.HttpHeader">
            <summary>
                The raw http header extracted from the stream
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketHttpContext.Path">
            <summary>
                The Path extracted from the http header
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketHttpContext.Stream">
            <summary>
                The stream AFTER the header has already been read
            </summary>
        </member>
        <member name="T:Alis.Core.Network.WebSocketServerFactory">
            <summary>
                Web socket server factory used to open web socket server connections
            </summary>
        </member>
        <member name="F:Alis.Core.Network.WebSocketServerFactory._bufferFactory">
            <summary>
                The buffer factory
            </summary>
        </member>
        <member name="F:Alis.Core.Network.WebSocketServerFactory._bufferPool">
            <summary>
                The buffer pool
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.#ctor">
            <summary>
                Initialises a new instance of the WebSocketServerFactory class without caring about internal buffers
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.#ctor(System.Func{System.IO.MemoryStream})">
            <summary>
                Initialises a new instance of the WebSocketClientFactory class with control over internal buffer creation
            </summary>
            <param name="bufferFactory"></param>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.ReadHttpHeaderFromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Reads a http header information from a stream and decodes the parts relating to the WebSocket protocot upgrade
            </summary>
            <param name="stream">The network stream</param>
            <param name="token">The optional cancellation token</param>
            <returns>Http data read from the stream</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.AcceptWebSocketAsync(Alis.Core.Network.WebSocketHttpContext,System.Threading.CancellationToken)">
            <summary>
                Accept web socket with default options
                Call ReadHttpHeaderFromStreamAsync first to get WebSocketHttpContext
            </summary>
            <param name="context">The http context used to initiate this web socket request</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.AcceptWebSocketAsync(Alis.Core.Network.WebSocketHttpContext,Alis.Core.Network.WebSocketServerOptions,System.Threading.CancellationToken)">
            <summary>
                Accept web socket with options specified
                Call ReadHttpHeaderFromStreamAsync first to get WebSocketHttpContext
            </summary>
            <param name="context">The http context used to initiate this web socket request</param>
            <param name="options">The web socket options</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.CheckWebSocketVersion(System.String)">
            <summary>
                Checks the web socket version using the specified http header
            </summary>
            <param name="httpHeader">The http header</param>
            <exception cref="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException"></exception>
            <exception cref="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException">Cannot find "Sec-WebSocket-Version" in http header</exception>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.PerformHandshakeAsync(System.Guid,System.String,System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Performs the handshake using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="httpHeader">The http header</param>
            <param name="subProtocol">The sub protocol</param>
            <param name="stream">The stream</param>
            <param name="token">The token</param>
            <exception cref="T:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException">Unable to read "Sec-WebSocket-Key" from http header</exception>
        </member>
        <member name="T:Alis.Core.Network.WebSocketServerOptions">
            <summary>
                Server WebSocket init options
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerOptions.#ctor">
            <summary>
                Initialises a new instance of the WebSocketServerOptions class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerOptions.#ctor(System.Double,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.WebSocketServerOptions" /> class
            </summary>
            <param name="keepAliveInterval">The keep alive interval</param>
            <param name="includeExceptionInCloseResponse">The include exception in close response</param>
            <param name="subProtocol">The sub protocol</param>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerOptions.#ctor(System.TimeSpan,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.WebSocketServerOptions" /> class
            </summary>
            <param name="keepAliveInterval">The keep alive interval</param>
            <param name="subProtocol">The sub protocol</param>
        </member>
        <member name="P:Alis.Core.Network.WebSocketServerOptions.KeepAliveInterval">
            <summary>
                How often to send ping requests to the Client
                The default is 60 seconds
                This is done to prevent proxy servers from closing your connection
                A timespan of zero will disable the automatic ping pong mechanism
                You can manually control ping pong messages using the PingPongManager class.
                If you do that it is advisable to set this KeepAliveInterval to zero in the WebSocketServerFactory
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketServerOptions.IncludeExceptionInCloseResponse">
            <summary>
                Include the full exception (with stack trace) in the close response
                when an exception is encountered and the WebSocket connection is closed
                The default is false
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketServerOptions.SubProtocol">
            <summary>
                Specifies the sub protocol to send back to the client in the opening handshake
                Can be null (the most common use case)
                The client can specify multiple preferred protocols in the opening handshake header
                The server should use the first supported one or set this to null if none of the requested sub protocols are
                supported
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Aabb">
            <summary>
                An axis aligned bounding box.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Aabb.LowerBound">
            <summary>
                The lower vertex.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Aabb.UpperBound">
            <summary>
                The upper vertex.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Aabb.IsValid">
            Verify that the bounds are sorted.
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Aabb.Center">
            Get the center of the AABB.
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Aabb.Extents">
            Get the extents of the AABB (half-widths).
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Aabb.Combine(Alis.Core.Physic.Collisions.Aabb,Alis.Core.Physic.Collisions.Aabb)">
            Combine two AABBs into this one.
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Aabb.Contains(Alis.Core.Physic.Collisions.Aabb)">
            Does this aabb contain the provided AABB.
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Aabb.RayCast(Alis.Core.Physic.Collisions.RayCastOutput@,Alis.Core.Physic.Collisions.RayCastInput)">
            <summary>
                hello
            </summary>
            <param name="output"></param>
            <param name="input"></param>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Bound">
            <summary>
                The bound class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Bound.ProxyId">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Bound.StabbingCount">
            <summary>
                The stabbing count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Bound.Value">
            <summary>
                The value
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Bound.IsLower">
            <summary>
                Gets the value of the is lower
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Bound.IsUpper">
            <summary>
                Gets the value of the is upper
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Bound.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The new bound</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.BoundValues">
            <summary>
                The bound values class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BoundValues.LowerValues">
            <summary>
                The lower values
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BoundValues.UpperValues">
            <summary>
                The upper values
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.BroadPhase">
            <summary>
                The broad phase class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.BroadphaseMax">
            <summary>
                The max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.Invalid">
            <summary>
                The broadphase max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.NullEdge">
            <summary>
                The broadphase max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.PairManager">
            <summary>
                The pair manager
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.ProxyPool">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.freeProxy">
            <summary>
                The free proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.Bounds">
            <summary>
                The bound
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.QueryResults">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.QuerySortKeys">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.QueryResultCount">
            <summary>
                The query result count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.WorldAabb">
            <summary>
                The world aabb
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.QuantizationFactor">
            <summary>
                The quantization factor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.ProxyCount">
            <summary>
                The proxy count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.TimeStamp">
            <summary>
                The time stamp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BroadPhase.IsValidate">
            <summary>
                The is validate
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.#ctor(Alis.Core.Physic.Collisions.Aabb,Alis.Core.Physic.Collisions.PairCallback)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collisions.BroadPhase" /> class
            </summary>
            <param name="worldAabb">The world aabb</param>
            <param name="callback">The callback</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.InRange(Alis.Core.Physic.Collisions.Aabb)">
            <summary>
                Describes whether this instance in range
            </summary>
            <param name="aabb">The aabb</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.CreateProxy(Alis.Core.Physic.Collisions.Aabb,System.Object)">
            <summary>
                Creates the proxy using the specified aabb
            </summary>
            <param name="aabb">The aabb</param>
            <param name="userData">The user data</param>
            <returns>The proxy id</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.DestroyProxy(System.Int32)">
            <summary>
                Destroys the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.MoveProxy(System.Int32,Alis.Core.Physic.Collisions.Aabb)">
            <summary>
                Moves the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.Commit">
            <summary>
                Commits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.GetProxy(System.Int32)">
            <summary>
                Gets the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <returns>The proxy</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.Query(Alis.Core.Physic.Collisions.Aabb,System.Object[],System.Int32)">
            <summary>
                Queries the aabb
            </summary>
            <param name="aabb">The aabb</param>
            <param name="userData">The user data</param>
            <param name="maxCount">The max count</param>
            <returns>The count</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.QuerySegment(Alis.Core.Physic.Collisions.Segment,System.Object[],System.Int32,Alis.Core.Physic.Collisions.SortKeyFunc)">
            <summary>
                Query a segment for overlapping proxies, returns the user data and
                the count, up to the supplied maximum count.
                If sortKey is provided, then it is a function mapping from proxy user Data to distances along the segment (between
                0 ans 1)
                Then the returned proxies are sorted on that, before being truncated to maxCount
                The sortKey of a proxy is assumed to be larger than the closest point inside the proxy along the segment, this
                allows for early exits
                Proxies with a negative sortKey are discarded
            </summary>
            <param name="segment"></param>
            <param name="userData"></param>
            <param name="maxCount"></param>
            <param name="sortKey"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.Validate">
            <summary>
                Validates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.ComputeBounds(System.UInt16[]@,System.UInt16[]@,Alis.Core.Physic.Collisions.Aabb)">
            <summary>
                Computes the bounds using the specified lower values
            </summary>
            <param name="lowerValues">The lower values</param>
            <param name="upperValues">The upper values</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.TestOverlap(Alis.Core.Physic.Collisions.Proxy,Alis.Core.Physic.Collisions.Proxy)">
            <summary>
                Describes whether this instance test overlap
            </summary>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.TestOverlap(Alis.Core.Physic.Collisions.BoundValues,Alis.Core.Physic.Collisions.Proxy)">
            <summary>
                Describes whether this instance test overlap
            </summary>
            <param name="b">The </param>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.Query(System.Int32@,System.Int32@,System.UInt16,System.UInt16,Alis.Core.Physic.Collisions.Bound[],System.Int32,System.Int32)">
            <summary>
                Queries the lower query out
            </summary>
            <param name="lowerQueryOut">The lower query out</param>
            <param name="upperQueryOut">The upper query out</param>
            <param name="lowerValue">The lower value</param>
            <param name="upperValue">The upper value</param>
            <param name="bounds">The bounds</param>
            <param name="boundCount">The bound count</param>
            <param name="axis">The axis</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.IncrementOverlapCount(System.Int32)">
            <summary>
                Increments the overlap count using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.IncrementTimeStamp">
            <summary>
                Increments the time stamp
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.AddProxyResult(System.UInt16,Alis.Core.Physic.Collisions.Proxy,System.Int32,Alis.Core.Physic.Collisions.SortKeyFunc)">
            <summary>
                Adds the proxy result using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <param name="proxy">The proxy</param>
            <param name="maxCount">The max count</param>
            <param name="sortKey">The sort key</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.BroadPhase.BinarySearch(Alis.Core.Physic.Collisions.Bound[],System.Int32,System.UInt16)">
            <summary>
                Binaries the search using the specified bounds
            </summary>
            <param name="bounds">The bounds</param>
            <param name="count">The count</param>
            <param name="value">The value</param>
            <returns>The low</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.BufferedPair">
            <summary>
                The buffered pair
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BufferedPair.ProxyId1">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.BufferedPair.ProxyId2">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.ClipVertex">
            <summary>
                Used for computing contact manifolds.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ClipVertex.V">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ClipVertex.Id">
            <summary>
                The id
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Collision">
            <summary>
                Structures and functions used for computing contact points, distance
                queries, and TOI queries.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Collision.NullFeature">
            <summary>
                The uchar max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Collision.MaxToiIters">
            <summary>
                The max toi iters
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Collision.MaxToiRootIters">
            <summary>
                The max toi root iters
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.TestOverlap(Alis.Core.Physic.Collisions.Aabb,Alis.Core.Physic.Collisions.Aabb)">
            <summary>
                Describes whether test overlap
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.GetPointStates(Alis.Core.Physic.Collisions.PointState[],Alis.Core.Physic.Collisions.PointState[],Alis.Core.Physic.Collisions.Manifold,Alis.Core.Physic.Collisions.Manifold)">
            <summary>
                Compute the point states given two manifolds. The states pertain to the transition from manifold1
                to manifold2. So state1 is either persist or remove while state2 is either add or persist.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.ClipSegmentToLine(Alis.Core.Physic.Collisions.ClipVertex[]@,Alis.Core.Physic.Collisions.ClipVertex[],Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                Clips the segment to line using the specified v out
            </summary>
            <param name="vOut">The out</param>
            <param name="vIn">The in</param>
            <param name="normal">The normal</param>
            <param name="offset">The offset</param>
            <returns>The num out</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.CollideCircles(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.CircleShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.CircleShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the circles using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="circle1">The circle</param>
            <param name="xf1">The xf</param>
            <param name="circle2">The circle</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.CollidePolygonAndCircle(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.PolygonShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.CircleShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the polygon and circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="polygon">The polygon</param>
            <param name="xf1">The xf</param>
            <param name="circle">The circle</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.CollideEdgeAndCircle(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.EdgeShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.CircleShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the edge and circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="edge">The edge</param>
            <param name="transformA">The transform</param>
            <param name="circle">The circle</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.CollidePolyAndEdge(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.PolygonShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.EdgeShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the poly and edge using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="polygon">The polygon</param>
            <param name="transformA">The transform</param>
            <param name="edge">The edge</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.EdgeSeparation(Alis.Core.Physic.Collisions.Shape.PolygonShape,Alis.Core.Aspect.Math.XForm,System.Int32,Alis.Core.Physic.Collisions.Shape.PolygonShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Find the separation between poly1 and poly2 for a give edge normal on poly1.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.FindMaxSeparation(System.Int32@,Alis.Core.Physic.Collisions.Shape.PolygonShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.PolygonShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Find the max separation between poly1 and poly2 using edge normals from poly1.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.FindIncidentEdge(Alis.Core.Physic.Collisions.ClipVertex[]@,Alis.Core.Physic.Collisions.Shape.PolygonShape,Alis.Core.Aspect.Math.XForm,System.Int32,Alis.Core.Physic.Collisions.Shape.PolygonShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Finds the incident edge using the specified c
            </summary>
            <param name="c">The </param>
            <param name="poly1">The poly</param>
            <param name="xf1">The xf</param>
            <param name="edge1">The edge</param>
            <param name="poly2">The poly</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.CollidePolygons(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.PolygonShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.PolygonShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the polygons using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="polyA">The poly</param>
            <param name="xfA">The xf</param>
            <param name="polyB">The poly</param>
            <param name="xfB">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.Distance(Alis.Core.Physic.Collisions.DistanceOutput@,Alis.Core.Physic.Collisions.SimplexCache@,Alis.Core.Physic.Collisions.DistanceInput@,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Physic.Collisions.Shape.IShape)">
            <summary>
                Compute the closest points between two shapes. Supports any combination of:
                CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output.
                On the first call set SimplexCache.Count to zero.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Collision.TimeOfImpact(Alis.Core.Physic.Collisions.ToiInput,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Physic.Collisions.Shape.IShape)">
            <summary>
                Compute the time when two shapes begin to touch or touch at a closer distance.
                TOI considers the shape radii. It attempts to have the radii overlap by the tolerance.
                Iterations terminate with the overlap is within 0.5 * tolerance. The tolerance should be
                smaller than sum of the shape radii.
                Warning the sweeps must have the same time interval.
            </summary>
            <returns>
                The fraction between [0,1] in which the shapes first touch.
                fraction=0 means the shapes begin touching/overlapped, and fraction=1 means the shapes don't touch.
            </returns>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.ContactId">
            <summary>
                Contact ids to facilitate warm starting.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ContactId.Features">
            <summary>
                The features
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ContactId.Key">
            <summary>
                Used to quickly compare contact ids.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.DistanceInput">
            <summary>
                Input for Distance.
                You have to option to use the shape radii
                in the computation.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.DistanceInput.TransformA">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.DistanceInput.TransformB">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.DistanceInput.UseRadii">
            <summary>
                The use radii
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.DistanceOutput">
            <summary>
                Output for Distance.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.DistanceOutput.PointA">
            <summary>
                Closest point on shapeA.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.DistanceOutput.PointB">
            <summary>
                Closest point on shapeB.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.DistanceOutput.Distance">
            <summary>
                The distance
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.DistanceOutput.Iterations">
            <summary>
                Number of GJK iterations used.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Features">
            <summary>
                The features that intersect to form the contact point.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Features.ReferenceEdge">
            <summary>
                The edge that defines the outward contact normal.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Features.IncidentEdge">
            <summary>
                The edge most anti-parallel to the reference edge.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Features.IncidentVertex">
            <summary>
                The vertex (0 or 1) on the incident edge that was clipped.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Features.Flip">
            <summary>
                A value of 1 indicates that the reference edge is on shape2.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.IndexArray">
            <summary>
                The index array
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.IndexArray.i0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.IndexArray.i1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.IndexArray.i2">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.IndexArray.Item(System.Int32)">
            <summary>
                The value
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Manifold">
            <summary>
                A manifold for two touching convex shapes.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Manifold.LocalPlaneNormal">
            <summary>
                The local plane normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Manifold.LocalPoint">
            <summary>
                Usage depends on manifold type.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Manifold.PointCount">
            <summary>
                The number of manifold points.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Manifold.Points">
            <summary>
                The points of contact.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Manifold.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Manifold.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collisions.Manifold" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Manifold.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The new manifold</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.ManifoldPoint">
            <summary>
                A manifold point is a contact point belonging to a contact
                manifold. It holds details related to the geometry and dynamics
                of the contact points.
                The local point usage depends on the manifold type:
                -Circles: the local center of circleB
                -FaceA: the local center of cirlceB or the clip point of polygonB
                -FaceB: the clip point of polygonA
                This structure is stored across time steps, so we keep it small.
                Note: the impulses are used for internal caching and may not
                provide reliable contact forces, especially for high speed collisions.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ManifoldPoint.Id">
            <summary>
                Uniquely identifies a contact point between two shapes.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ManifoldPoint.LocalPoint">
            <summary>
                Usage depends on manifold type.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ManifoldPoint.NormalImpulse">
            <summary>
                The non-penetration impulse.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ManifoldPoint.TangentImpulse">
            <summary>
                The friction impulse.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.ManifoldPoint.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The new point</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.ManifoldType">
            <summary>
                The manifold type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ManifoldType.Circles">
            <summary>
                The circles manifold type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ManifoldType.FaceA">
            <summary>
                The face manifold type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ManifoldType.FaceB">
            <summary>
                The face manifold type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.MassData">
            <summary>
                This holds the mass data computed for a shape.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.MassData.Mass">
            <summary>
                The mass of the shape, usually in kilograms.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.MassData.Center">
            <summary>
                The position of the shape's centroid relative to the shape's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.MassData.I">
            <summary>
                The rotational inertia of the shape.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Pair">
            <summary>
                The pair class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Pair.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Pair.ProxyId1">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Pair.ProxyId2">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Pair.Status">
            <summary>
                The status
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Pair.UserData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Pair.SetBuffered">
            <summary>
                Sets the buffered
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Pair.ClearBuffered">
            <summary>
                Clears the buffered
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Pair.IsBuffered">
            <summary>
                Describes whether this instance is buffered
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Pair.SetRemoved">
            <summary>
                Sets the removed
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Pair.ClearRemoved">
            <summary>
                Clears the removed
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Pair.IsRemoved">
            <summary>
                Describes whether this instance is removed
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Pair.SetFinal">
            <summary>
                Sets the final
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Pair.IsFinal">
            <summary>
                Describes whether this instance is final
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.PairCallback">
            <summary>
                The pair callback class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairCallback.PairAdded(System.Object,System.Object)">
            <summary>
                Pairs the added using the specified proxy user data 1
            </summary>
            <param name="proxyUserData1">The proxy user data</param>
            <param name="proxyUserData2">The proxy user data</param>
            <returns>The object</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairCallback.PairRemoved(System.Object,System.Object,System.Object)">
            <summary>
                Pairs the removed using the specified proxy user data 1
            </summary>
            <param name="proxyUserData1">The proxy user data</param>
            <param name="proxyUserData2">The proxy user data</param>
            <param name="pairUserData">The pair user data</param>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.PairManager">
            <summary>
                The pair manager class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.NullPair">
            <summary>
                The ushrt max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.NullProxy">
            <summary>
                The ushrt max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.TableCapacity">
            <summary>
                The max pairs
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.TableMask">
            <summary>
                The table capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.HashTable">
            <summary>
                The table capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.PairBuffer">
            <summary>
                The max pairs
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.Pairs">
            <summary>
                The max pairs
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.BroadPhase">
            <summary>
                The broad phase
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.Callback">
            <summary>
                The callback
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.FreePair">
            <summary>
                The free pair
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.PairBufferCount">
            <summary>
                The pair buffer count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairManager.PairCount">
            <summary>
                The pair count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collisions.PairManager" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.Initialize(Alis.Core.Physic.Collisions.BroadPhase,Alis.Core.Physic.Collisions.PairCallback)">
            <summary>
                Initializes the broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="callback">The callback</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.AddBufferedPair(System.Int32,System.Int32)">
            <summary>
                Adds the buffered pair using the specified id 1
            </summary>
            <param name="id1">The id</param>
            <param name="id2">The id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.RemoveBufferedPair(System.Int32,System.Int32)">
            <summary>
                Removes the buffered pair using the specified id 1
            </summary>
            <param name="id1">The id</param>
            <param name="id2">The id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.Commit">
            <summary>
                Commits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.Find(System.Int32,System.Int32)">
            <summary>
                Finds the proxy id 1
            </summary>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <returns>The pair</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.Find(System.Int32,System.Int32,System.UInt32)">
            <summary>
                Finds the proxy id 1
            </summary>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <param name="hash">The hash</param>
            <returns>The pair</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.AddPair(System.Int32,System.Int32)">
            <summary>
                Adds the pair using the specified proxy id 1
            </summary>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <returns>The pair</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.RemovePair(System.Int32,System.Int32)">
            <summary>
                Removes the pair using the specified proxy id 1
            </summary>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <returns>The object</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.ValidateBuffer">
            <summary>
                Validates the buffer
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.ValidateTable">
            <summary>
                Validates the table
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.Hash(System.UInt32,System.UInt32)">
            <summary>
                Hashes the proxy id 1
            </summary>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <returns>The key</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.Equals(Alis.Core.Physic.Collisions.Pair,System.Int32,System.Int32)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="pair">The pair</param>
            <param name="proxyId1">The proxy id</param>
            <param name="proxyId2">The proxy id</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.Equals(Alis.Core.Physic.Collisions.BufferedPair@,Alis.Core.Physic.Collisions.BufferedPair@)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="pair1">The pair</param>
            <param name="pair2">The pair</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.PairManager.BufferedPairSortPredicate(Alis.Core.Physic.Collisions.BufferedPair,Alis.Core.Physic.Collisions.BufferedPair)">
            <summary>
                Buffereds the pair sort predicate using the specified pair 1
            </summary>
            <param name="pair1">The pair</param>
            <param name="pair2">The pair</param>
            <returns>The int</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.PairStatus">
            <summary>
                The pair status enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairStatus.PairBuffered">
            <summary>
                The pair buffered pair status
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairStatus.PairRemoved">
            <summary>
                The pair removed pair status
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PairStatus.PairFinal">
            <summary>
                The pair final pair status
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.PointState">
            <summary>
                This is used for determining the state of contact points.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PointState.NullState">
            <summary>
                Point does not exist.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PointState.AddState">
            <summary>
                Point was added in the update.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PointState.PersistState">
            <summary>
                Point persisted across the update.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.PointState.RemoveState">
            <summary>
                Point was removed in the update.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Proxy">
            <summary>
                The proxy class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Proxy.LowerBounds">
            <summary>
                The upper bounds
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Proxy.UpperBounds">
            <summary>
                The upper bounds
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Proxy.OverlapCount">
            <summary>
                The overlap count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Proxy.TimeStamp">
            <summary>
                The time stamp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Proxy.UserData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Proxy.Next">
            <summary>
                Gets or sets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Proxy.IsValid">
            <summary>
                Gets the value of the is valid
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.RayCastInput">
            <summary>
                Ray-cast input data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.RayCastInput.P1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.RayCastInput.P2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.RayCastInput.MaxFraction">
            <summary>
                The max fraction
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.RayCastOutput">
            <summary>
                Ray-cast output data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.RayCastOutput.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.RayCastOutput.Fraction">
            <summary>
                The fraction
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.RayCastOutput.Hit">
            <summary>
                The hit
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Segment">
            <summary>
                A line segment.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Segment.TestSegment(System.Single@,Alis.Core.Aspect.Math.Vector2@,Alis.Core.Physic.Collisions.Segment,System.Single)">
            <summary>
                Ray cast against this segment with another segment.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Segment.P1">
            <summary>
                The starting point.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Segment.P2">
            <summary>
                The ending point.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.SegmentCollide">
            <summary>
                Returns code from TestSegment
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SegmentCollide.StartInsideCollide">
            <summary>
                The start inside collide segment collide
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SegmentCollide.MissCollide">
            <summary>
                The miss collide segment collide
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SegmentCollide.HitCollide">
            <summary>
                The hit collide segment collide
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.SeparationFunction">
            <summary>
                The separation function
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.SeparationFunction.Type">
            <summary>
                The type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SeparationFunction.Type.Points">
            <summary>
                The points type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SeparationFunction.Type.FaceA">
            <summary>
                The face type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SeparationFunction.Type.FaceB">
            <summary>
                The face type
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.SeparationFunction.Initialize(Alis.Core.Physic.Collisions.SimplexCache*,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Initializes the cache
            </summary>
            <param name="cache">The cache</param>
            <param name="shapeA">The shape</param>
            <param name="transformA">The transform</param>
            <param name="shapeB">The shape</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.SeparationFunction.Evaluate(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Evaluates the transform a
            </summary>
            <param name="transformA">The transform</param>
            <param name="transformB">The transform</param>
            <returns>The float</returns>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SeparationFunction.ShapeA">
            <summary>
                The shape
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SeparationFunction.ShapeB">
            <summary>
                The shape
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SeparationFunction.FaceType">
            <summary>
                The face type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SeparationFunction.LocalPoint">
            <summary>
                The local point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SeparationFunction.Axis">
            <summary>
                The axis
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Shape.CircleShape">
            <summary>
                A circle shape.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Shape.CircleShape.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collisions.Shape.CircleShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.CircleShape.Radius">
            <summary>
                The radius
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.CircleShape.ShapeType">
            <summary>
                The unknown shape
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.CircleShape.VertexCount">
            <summary>
                Get the vertex count.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.TestPoint(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.TestSegment(Alis.Core.Aspect.Math.XForm,System.Single@,Alis.Core.Aspect.Math.Vector2@,Alis.Core.Physic.Collisions.Segment,System.Single)">
            <summary>
                Tests the segment using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="lambda">The lambda</param>
            <param name="normal">The normal</param>
            <param name="segment">The segment</param>
            <param name="maxLambda">The max lambda</param>
            <returns>The segment collide</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.ComputeAabb(Alis.Core.Physic.Collisions.Aabb@,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Computes the aabb using the specified aabb
            </summary>
            <param name="aabb">The aabb</param>
            <param name="transform">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.ComputeMass(Alis.Core.Physic.Collisions.MassData@,System.Single)">
            <summary>
                Computes the mass using the specified mass data
            </summary>
            <param name="massData">The mass data</param>
            <param name="density">The density</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.ComputeSubmergedArea(Alis.Core.Aspect.Math.Vector2,System.Single,Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2@)">
            <summary>
                Computes the submerged area using the specified normal
            </summary>
            <param name="normal">The normal</param>
            <param name="offset">The offset</param>
            <param name="xf">The xf</param>
            <param name="c">The </param>
            <returns>The area</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.GetSupport(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Get the supporting vertex index in the given direction.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.GetSupportVertex(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Get the supporting vertex in the given direction.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.GetVertex(System.Int32)">
            <summary>
                Get a vertex by index. Used by Distance.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.ComputeSweepRadius(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Computes the sweep radius using the specified pivot
            </summary>
            <param name="pivot">The pivot</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.Dispose">
            <summary>
                dispose
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.GetRadius">
            <summary>
                return the radius of the polygon
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.CircleShape.GetShapeType">
            <summary>
                return the shape type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Shape.EdgeShape">
            <summary>
                The edge shape class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Collisions.Shape.IShape" />
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Shape.EdgeShape.NextEdge">
            <summary>
                The next edge
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Shape.EdgeShape.PrevEdge">
            <summary>
                The prev edge
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collisions.Shape.EdgeShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.Radius">
            <summary>
                The radius
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.ShapeType">
            <summary>
                The unknown shape
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.Length">
            <summary>
                Gets the value of the length
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.Vertex1">
            <summary>
                Gets the value of the vertex 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.Vertex2">
            <summary>
                Gets the value of the vertex 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.NormalVector">
            <summary>
                Gets the value of the normal vector
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.DirectionVector">
            <summary>
                Gets the value of the direction vector
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.Corner1Vector">
            <summary>
                Gets the value of the corner 1 vector
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.Corner2Vector">
            <summary>
                Gets the value of the corner 2 vector
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.Corner1IsConvex">
            <summary>
                Gets the value of the corner 1 is convex
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.EdgeShape.Corner2IsConvex">
            <summary>
                Gets the value of the corner 2 is convex
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.TestPoint(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.TestSegment(Alis.Core.Aspect.Math.XForm,System.Single@,Alis.Core.Aspect.Math.Vector2@,Alis.Core.Physic.Collisions.Segment,System.Single)">
            <summary>
                Tests the segment using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="lambda">The lambda</param>
            <param name="normal">The normal</param>
            <param name="segment">The segment</param>
            <param name="maxLambda">The max lambda</param>
            <returns>The segment collide</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.ComputeAabb(Alis.Core.Physic.Collisions.Aabb@,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Computes the aabb using the specified aabb
            </summary>
            <param name="aabb">The aabb</param>
            <param name="transform">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.ComputeMass(Alis.Core.Physic.Collisions.MassData@,System.Single)">
            <summary>
                Computes the mass using the specified mass data
            </summary>
            <param name="massData">The mass data</param>
            <param name="density">The density</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.ComputeSubmergedArea(Alis.Core.Aspect.Math.Vector2,System.Single,Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2@)">
            <summary>
                Computes the submerged area using the specified normal
            </summary>
            <param name="normal">The normal</param>
            <param name="offset">The offset</param>
            <param name="xf">The xf</param>
            <param name="c">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.GetSupport(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Gets the support using the specified d
            </summary>
            <param name="d">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.GetSupportVertex(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Gets the support vertex using the specified d
            </summary>
            <param name="d">The </param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.GetVertex(System.Int32)">
            <summary>
                Gets the vertex using the specified index
            </summary>
            <param name="index">The index</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.GetRadius">
            <summary>
                return the radius of the polygon
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.GetShapeType">
            <summary>
                return the shape type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.ComputeSweepRadius(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Computes the sweep radius using the specified pivot
            </summary>
            <param name="pivot">The pivot</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.Set(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Sets the v 1
            </summary>
            <param name="v1">The </param>
            <param name="v2">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.SetPrevEdge(Alis.Core.Physic.Collisions.Shape.EdgeShape,Alis.Core.Aspect.Math.Vector2,System.Boolean)">
            <summary>
                Sets the prev edge using the specified edge
            </summary>
            <param name="edge">The edge</param>
            <param name="cornerDir">The corner dir</param>
            <param name="convex">The convex</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.EdgeShape.SetNextEdge(Alis.Core.Physic.Collisions.Shape.EdgeShape,Alis.Core.Aspect.Math.Vector2,System.Boolean)">
            <summary>
                Sets the next edge using the specified edge
            </summary>
            <param name="edge">The edge</param>
            <param name="cornerDir">The corner dir</param>
            <param name="convex">The convex</param>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Shape.IShape">
            <summary>
                A shape is used for collision detection. You can create a shape however you like.
                Shapes used for simulation in World are created automatically when a Fixture is created.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.GetRadius">
            <summary>
                Return the radius of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.GetShapeType">
            <summary>
                Return the type of the shape. You can use this to down cast to the concrete shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.TestPoint(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Test a point for containment in this shape. This only works for convex shapes.
            </summary>
            <param name="xf">The shape world transform.</param>
            <param name="p">A point in world coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.TestSegment(Alis.Core.Aspect.Math.XForm,System.Single@,Alis.Core.Aspect.Math.Vector2@,Alis.Core.Physic.Collisions.Segment,System.Single)">
            <summary>
                Perform a ray cast against this shape.
            </summary>
            <param name="xf">The shape world transform.</param>
            <param name="lambda">
                Returns the hit fraction. You can use this to compute the contact point
                p = (1 - lambda) * segment.P1 + lambda * segment.P2.
            </param>
            <param name="normal">
                Returns the normal at the contact point. If there is no intersection,
                the normal is not set.
            </param>
            <param name="segment">Defines the begin and end point of the ray cast.</param>
            <param name="maxLambda">A number typically in the range [0,1].</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.ComputeAabb(Alis.Core.Physic.Collisions.Aabb@,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Given a transform, compute the associated axis aligned bounding box for this shape.
            </summary>
            <param name="aabb">Returns the axis aligned box.</param>
            <param name="xf">The world transform of the shape.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.ComputeMass(Alis.Core.Physic.Collisions.MassData@,System.Single)">
            <summary>
                Compute the mass properties of this shape using its dimensions and density.
                The inertia tensor is computed about the local origin, not the centroid.
            </summary>
            <param name="massData">Returns the mass data for this shape</param>
            <param name="density"></param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.ComputeSubmergedArea(Alis.Core.Aspect.Math.Vector2,System.Single,Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2@)">
            <summary>
                Compute the volume and centroid of this shape intersected with a half plane.
            </summary>
            <param name="normal">Normal the surface normal.</param>
            <param name="offset">Offset the surface offset along normal.</param>
            <param name="xf">The shape transform.</param>
            <param name="c">Returns the centroid.</param>
            <returns>The total volume less than offset along normal.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.ComputeSweepRadius(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Compute the sweep radius. This is used for conservative advancement (continuous collision detection).
            </summary>
            <param name="pivot">Pivot is the pivot point for rotation.</param>
            <returns>The distance of the furthest point from the pivot.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.GetVertex(System.Int32)">
            <summary>
                Gets the vertex using the specified index
            </summary>
            <param name="index">The index</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.GetSupport(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Gets the support using the specified d
            </summary>
            <param name="d">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.IShape.GetSupportVertex(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Gets the support vertex using the specified d
            </summary>
            <param name="d">The </param>
            <returns>The vec</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Shape.PolygonShape">
            <summary>
                A convex polygon. It is assumed that the interior of the polygon is to the left of each edge.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collisions.Shape.PolygonShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.PolygonShape.Radius">
            <summary>
                The radius
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.PolygonShape.ShapeType">
            <summary>
                The unknown shape
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.PolygonShape.Centroid">
            <summary>
                The centroid
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.PolygonShape.Normals">
            <summary>
                The max polygon vertices
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.PolygonShape.VertexCount">
            <summary>
                Gets the value of the vertex count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collisions.Shape.PolygonShape.Vertices">
            <summary>
                Gets the value of the vertices
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.GetRadius">
            <summary>
                return the radius of the polygon
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.GetShapeType">
            <summary>
                return the shape type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.TestPoint(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="xf">The xf</param>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.TestSegment(Alis.Core.Aspect.Math.XForm,System.Single@,Alis.Core.Aspect.Math.Vector2@,Alis.Core.Physic.Collisions.Segment,System.Single)">
            <summary>
                Tests the segment using the specified xf
            </summary>
            <param name="xf">The xf</param>
            <param name="lambda">The lambda</param>
            <param name="normal">The normal</param>
            <param name="segment">The segment</param>
            <param name="maxLambda">The max lambda</param>
            <returns>The segment collide</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.ComputeAabb(Alis.Core.Physic.Collisions.Aabb@,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Computes the aabb using the specified aabb
            </summary>
            <param name="aabb">The aabb</param>
            <param name="xf">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.ComputeMass(Alis.Core.Physic.Collisions.MassData@,System.Single)">
            <summary>
                Computes the mass using the specified mass data
            </summary>
            <param name="massData">The mass data</param>
            <param name="denstity">The denstity</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.ComputeSubmergedArea(Alis.Core.Aspect.Math.Vector2,System.Single,Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2@)">
            <summary>
                Computes the submerged area using the specified normal
            </summary>
            <param name="normal">The normal</param>
            <param name="offset">The offset</param>
            <param name="xf">The xf</param>
            <param name="c">The </param>
            <returns>The area</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.ComputeSweepRadius(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Computes the sweep radius using the specified pivot
            </summary>
            <param name="pivot">The pivot</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.GetSupport(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Get the supporting vertex index in the given direction.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.GetSupportVertex(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Gets the support vertex using the specified d
            </summary>
            <param name="d">The </param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.GetVertex(System.Int32)">
            <summary>
                Gets the vertex using the specified index
            </summary>
            <param name="index">The index</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.Dispose">
            <summary>
                dispose
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.Set(Alis.Core.Aspect.Math.Vector2[],System.Int32)">
            <summary>
                Copy vertices. This assumes the vertices define a convex polygon.
                It is assumed that the exterior is the the right of each edge.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.SetAsBox(System.Single,System.Single)">
            <summary>
                Build vertices to represent an axis-aligned box.
            </summary>
            <param name="hx">The half-width</param>
            <param name="hy">The half-height.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.SetAsBox(System.Single,System.Single,Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                Build vertices to represent an oriented box.
            </summary>
            <param name="hx">The half-width</param>
            <param name="hy">The half-height.</param>
            <param name="center">The center of the box in local coordinates.</param>
            <param name="angle">The rotation of the box in local coordinates.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.SetAsEdge(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Sets the as edge using the specified v 1
            </summary>
            <param name="v1">The </param>
            <param name="v2">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Shape.PolygonShape.ComputeCentroid(Alis.Core.Aspect.Math.Vector2[],System.Int32)">
            <summary>
                Computes the centroid using the specified vs
            </summary>
            <param name="vs">The vs</param>
            <param name="count">The count</param>
            <returns>The </returns>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Shape.ShapeType">
            <summary>
                The various collision shape types supported by Box2D.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Shape.ShapeType.UnknownShape">
            <summary>
                The unknown shape shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Shape.ShapeType.CircleShape">
            <summary>
                The circle shape shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Shape.ShapeType.PolygonShape">
            <summary>
                The polygon shape shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Shape.ShapeType.EdgeShape">
            <summary>
                The edge shape shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Shape.ShapeType.ShapeTypeCount">
            <summary>
                The shape type count shape type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.Simplex">
            <summary>
                The simplex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Simplex.V1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Simplex.V2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Simplex.V3">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.Simplex.Count">
            <summary>
                The count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Simplex.ReadCache(Alis.Core.Physic.Collisions.SimplexCache*,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Reads the cache using the specified cache
            </summary>
            <param name="cache">The cache</param>
            <param name="shapeA">The shape</param>
            <param name="transformA">The transform</param>
            <param name="shapeB">The shape</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Simplex.WriteCache(Alis.Core.Physic.Collisions.SimplexCache*)">
            <summary>
                Writes the cache using the specified cache
            </summary>
            <param name="cache">The cache</param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Simplex.GetClosestPoint">
            <summary>
                Gets the closest point
            </summary>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Simplex.GetWitnessPoints(Alis.Core.Aspect.Math.Vector2*,Alis.Core.Aspect.Math.Vector2*)">
            <summary>
                Gets the witness points using the specified p a
            </summary>
            <param name="pA">The </param>
            <param name="pB">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Simplex.GetMetric">
            <summary>
                Gets the metric
            </summary>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Simplex.Solve2">
            <summary>
                Solves the 2
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.Simplex.Solve3">
            <summary>
                Solves the 3
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.SimplexCache">
            <summary>
                Used to warm start Distance.
                Set count to zero on first call.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SimplexCache.Metric">
            <summary>
                Length or area.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SimplexCache.Count">
            <summary>
                The count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SimplexCache.IndexA">
            <summary>
                Vertices on shape A.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SimplexCache.IndexB">
            <summary>
                Vertices on shape B.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.SimplexVertex">
            <summary>
                The simplex vertex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SimplexVertex.Wa">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SimplexVertex.Wb">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SimplexVertex.W">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SimplexVertex.A">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SimplexVertex.IndexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.SimplexVertex.IndexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.SortKeyFunc">
            <summary>
                The sort key func
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.ToiInput">
            <summary>
                Inpute parameters for TimeOfImpact
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ToiInput.SweepA">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ToiInput.SweepB">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ToiInput.SweepRadiusA">
            <summary>
                The sweep radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ToiInput.SweepRadiusB">
            <summary>
                The sweep radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.ToiInput.Tolerance">
            <summary>
                The tolerance
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collisions.WorldManifold">
            <summary>
                This is used to compute the current state of a contact manifold.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.WorldManifold.Points">
            <summary>
                World contact point (point of intersection).
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collisions.WorldManifold.Normal">
            <summary>
                World vector pointing from A to B.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.WorldManifold.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The new manifold</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collisions.WorldManifold.Initialize(Alis.Core.Physic.Collisions.Manifold,Alis.Core.Aspect.Math.XForm,System.Single,Alis.Core.Aspect.Math.XForm,System.Single)">
            Evaluate the manifold with supplied transforms. This assumes
            modest motion from the original state. This does not change the
            point count, impulses, etc. The radii must come from the shapes
            that generated the manifold.
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Body.BodyBase">
            <summary>
                A rigid body. These are created via World.AddBody.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.world">
            <summary>
                The world
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.AngularDamping">
            <summary>
                The angular damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.AngularVelocity">
            <summary>
                The angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.bodyDef">
            <summary>
                body data
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.ContactList">
            <summary>
                The contact list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.ControllerList">
            <summary>
                The controller list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.FixtureCount">
            <summary>
                The fixture count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.FixtureList">
            <summary>
                The fixture list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.Flags">
            <summary>
                The flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.Force">
            <summary>
                The force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.I">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.InvI">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.InvMass">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.IslandIndex">
            <summary>
                The island index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.JointList">
            <summary>
                The joint list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.LinearDamping">
            <summary>
                The linear damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.LinearVelocity">
            <summary>
                The linear velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.Mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.Prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.SleepTime">
            <summary>
                The sleep time
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.Sweep">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.Torque">
            <summary>
                The torque
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyBase.Xf">
            <summary>
                The xf
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.#ctor(Alis.Core.Physic.Dynamics.Body.BodyDef,Alis.Core.Physic.World)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Body.BodyBase" /> class
            </summary>
            <param name="bd">The bd</param>
            <param name="world">The world</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SynchronizeFixtures">
            <summary>
                Describes whether this instance synchronize fixtures
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.IsConnected(Alis.Core.Physic.Dynamics.Body.BodyBase)">
            <summary>
                Describes whether this instance is connected
            </summary>
            <param name="other">The other</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.CreateFixture(Alis.Core.Physic.Dynamics.Fixtures.FixtureDef)">
            <summary>
                Creates a fixture and attach it to this body.
                @warning This function is locked during callbacks.
            </summary>
            <param name="def">The fixture definition.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.DestroyFixture(Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Destroy a fixture. This removes the fixture from the broad-phase and
                therefore destroys any contacts associated with this fixture. All fixtures
                attached to a body are implicitly destroyed when the body is destroyed.
                @warning This function is locked during callbacks.
            </summary>
            <param name="fixture">The fixture to be removed.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetMass(Alis.Core.Physic.Collisions.MassData)">
            <summary>
                Set the mass properties. Note that this changes the center of mass position.
                If you are not sure how to compute mass properties, use SetMassFromShapes.
                The inertia tensor is assumed to be relative to the center of mass.
            </summary>
            <param name="massData">The mass properties.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetMassFromShapes">
            <summary>
                Compute the mass properties from the attached shapes. You typically call this
                after adding all the shapes. If you add or remove shapes later, you may want
                to call this again. Note that this changes the center of mass position.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetXForm(Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                Set the position of the body's origin and rotation (radians).
                This breaks any contacts and wakes the other bodies.
            </summary>
            <param name="position">
                The new world position of the body's origin (not necessarily
                the center of mass).
            </param>
            <param name="angle">The new world rotation angle of the body in radians.</param>
            <returns>
                Return false if the movement put a shape outside the world. In this case the
                body is automatically frozen.
            </returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetXForm(Alis.Core.Aspect.Math.XForm)">
            <summary>
                Set the position of the body's origin and rotation (radians).
                This breaks any contacts and wakes the other bodies.
                Note this is less efficient than the other overload - you should use that
                if the angle is available.
            </summary>
            <param name="xf">The transform of position and angle to set the body to.</param>
            <returns>
                False if the movement put a shape outside the world. In this case the
                body is automatically frozen.
            </returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetXForm">
            <summary>
                Get the body transform for the body's origin.
            </summary>
            <returns>Return the world transform of the body's origin.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetPosition(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Set the world body origin position.
            </summary>
            <param name="position">The new position of the body.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetAngle(System.Single)">
            <summary>
                Set the world body angle.
            </summary>
            <param name="angle">The new angle of the body.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetPosition">
            <summary>
                Get the world body origin position.
            </summary>
            <returns>Return the world position of the body's origin.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetAngle">
            <summary>
                Get the angle in radians.
            </summary>
            <returns>Return the current world rotation angle in radians.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetWorldCenter">
            <summary>
                Get the world position of the center of mass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetLocalCenter">
            <summary>
                Get the local position of the center of mass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetLinearVelocity(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Set the linear velocity of the center of mass.
            </summary>
            <param name="v">The new linear velocity of the center of mass.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetLinearVelocity">
            <summary>
                Get the linear velocity of the center of mass.
            </summary>
            <returns>Return the linear velocity of the center of mass.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetAngularVelocity(System.Single)">
            <summary>
                Sets the angular velocity.
            </summary>
            <param name="w">The w.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetAngularVelocity">
            <summary>
                Get the angular velocity.
            </summary>
            <returns>Return the angular velocity in radians/second.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.ApplyForce(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Apply a force at a world point. If the force is not
                applied at the center of mass, it will generate a torque and
                affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.ApplyTorque(System.Single)">
            <summary>
                Apply a torque. This affects the angular velocity
                without affecting the linear velocity of the center of mass.
                This wakes up the body.
            </summary>
            <param name="torque">Torque about the z-axis (out of the screen), usually in N-m.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.ApplyImpulse(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Apply an impulse at a point. This immediately modifies the velocity.
                It also modifies the angular velocity if the point of application
                is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetMass">
            <summary>
                Get the total mass of the body.
            </summary>
            <returns>Return the mass, usually in kilograms (kg).</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetInertia">
            <summary>
                Get the central rotational inertia of the body.
            </summary>
            <returns>Return the rotational inertia, usually in kg-m^2.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetMassData">
            <summary>
                Get the mass data of the body.
            </summary>
            <returns>A struct containing the mass, inertia and center of the body.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetWorldPoint(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Get the world coordinates of a point given the local coordinates.
            </summary>
            <param name="localPoint">A point on the body measured relative the the body's origin.</param>
            <returns>Return the same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetWorldVector(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Get the world coordinates of a vector given the local coordinates.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>Return the same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetLocalPoint(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Gets a local point relative to the body's origin given a world point.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>Return the corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetLocalVector(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Gets a local vector given a world vector.
            </summary>
            <param name="worldVector">A vector in world coordinates.</param>
            <returns>Return the corresponding local vector.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetLinearVelocityFromWorldPoint(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Get the world linear velocity of a world point attached to this body.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetLinearVelocityFromLocalPoint(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Get the world velocity of a local point.
            </summary>
            <param name="localPoint">A point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetLinearDamping">
            <summary>
                Gets the linear damping
            </summary>
            <returns>The linear damping</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetLinearDamping(System.Single)">
            <summary>
                Sets the linear damping using the specified linear damping
            </summary>
            <param name="linearDamping">The linear damping</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetAngularDamping">
            <summary>
                Gets the angular damping
            </summary>
            <returns>The angular damping</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetAngularDamping(System.Single)">
            <summary>
                Sets the angular damping using the specified angular damping
            </summary>
            <param name="angularDamping">The angular damping</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.IsBullet">
            <summary>
                Is this body treated like a bullet for continuous collision detection?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetBullet(System.Boolean)">
            <summary>
                Should this body be treated like a bullet for continuous collision detection?
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.IsFixedRotation">
            <summary>
                Describes whether this instance is fixed rotation
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetFixedRotation(System.Boolean)">
            <summary>
                Sets the fixed rotation using the specified fixedr
            </summary>
            <param name="fixedr">The fixedr</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.IsStatic">
            <summary>
                Is this body static (immovable)?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetStatic">
            <summary>
                Sets the static
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.IsDynamic">
            <summary>
                Is this body dynamic (movable)?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.IsFrozen">
            <summary>
                Is this body frozen?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.IsSleeping">
            <summary>
                Is this body sleeping (not simulating).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.IsAllowSleeping">
            <summary>
                Describes whether this instance is allow sleeping
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.AllowSleeping(System.Boolean)">
            <summary>
                You can disable sleeping on this body.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.WakeUp">
            <summary>
                Wake up this body so it will begin simulating.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.PutToSleep">
            <summary>
                Put this body to sleep so it will stop simulating.
                This also sets the velocity to zero.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetFixtureList">
            <summary>
                Get the list of all fixtures attached to this body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetJointList">
            <summary>
                Get the list of all joints attached to this body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetControllerList">
            <summary>
                Gets the controller list
            </summary>
            <returns>The controller list</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetNext">
            <summary>
                Get the next body in the world's body list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetUserData">
            <summary>
                Get the user data pointer that was provided in the body definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SetUserData(System.Object)">
            <summary>
                Set the user data. Use this to store your application specific data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.GetWorld">
            <summary>
                Get the parent world of this body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.SynchronizeTransform">
            <summary>
                Synchronizes the transform
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyBase.Advance(System.Single)">
            <summary>
                Advances the t
            </summary>
            <param name="t">The </param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Body.BodyDef">
            <summary>
                A body definition holds all the data needed to construct a rigid body.
                You can safely re-use body definitions.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.BodyDef.#ctor(System.Byte)">
            <summary>
                This constructor sets the body definition default values.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.MassData">
            <summary>
                You can use this to initialized the mass properties of the body.
                If you prefer, you can set the mass properties after the shapes
                have been added using Body.SetMassFromShapes.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.UserData">
            <summary>
                Use this to store application specific body data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.Position">
            <summary>
                The world position of the body. Avoid creating bodies at the origin
                since this can lead to many overlapping shapes.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.Angle">
            <summary>
                The world angle of the body in radians.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.LinearVelocity">
            The linear velocity of the body in world co-ordinates.
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.AngularVelocity">
            <summary>
                The angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.LinearDamping">
            <summary>
                Linear damping is use to reduce the linear velocity. The damping parameter
                can be larger than 1.0f but the damping effect becomes sensitive to the
                time step when the damping parameter is large.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.AngularDamping">
            <summary>
                Angular damping is use to reduce the angular velocity. The damping parameter
                can be larger than 1.0f but the damping effect becomes sensitive to the
                time step when the damping parameter is large.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.AllowSleep">
            <summary>
                Set this flag to false if this body should never fall asleep. Note that
                this increases CPU usage.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.IsSleeping">
            <summary>
                Is this body initially sleeping?
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.FixedRotation">
            <summary>
                Should this body be prevented from rotating? Useful for characters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyDef.IsBullet">
            <summary>
                Is this a fast moving body that should be prevented from tunneling through
                other moving bodies? Note that all bodies are prevented from tunneling through
                static bodies.
                @warning You should use this flag sparingly since it increases processing time.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Body.BodyFlags">
            <summary>
                The body flags enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyFlags.Frozen">
            <summary>
                The frozen body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyFlags.Island">
            <summary>
                The island body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyFlags.Sleep">
            <summary>
                The sleep body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyFlags.AllowSleep">
            <summary>
                The allow sleep body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyFlags.Bullet">
            <summary>
                The bullet body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyFlags.FixedRotation">
            <summary>
                The fixed rotation body flags
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Body.BodyType">
            <summary>
                Body type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyType.Static">
            <summary>
                The static body type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.BodyType.Dynamic">
            <summary>
                The dynamic body type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.ContactFilter">
            <summary>
                Implement this class to provide collision filtering. In other words, you can implement
                this class if you want finer control over contact creation.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactFilter.ShouldCollide(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Return true if contact calculations should be performed between these two shapes.
                If you implement your own collision filter you may want to build from this implementation.
                @warning for performance reasons this is only called when the AABBs begin to overlap.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactFilter.RayCollide(System.Object,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Return true if the given shape should be considered for ray intersection.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.ContactImpulse">
            Contact impulses for reporting. Impulses are used instead of forces because
            sub-step forces may approach infinity for rigid body collisions. These
            match up one-to-one with the contact points in b2Manifold.
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.ContactImpulse.NormalImpulses">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.ContactImpulse.TangentImpulses">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.ContactManager">
            <summary>
                The contact manager class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Collisions.PairCallback" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.ContactManager.DestroyImmediate">
            <summary>
                The destroy immediate
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.ContactManager.NullContact">
            <summary>
                The null contact
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.ContactManager.World">
            <summary>
                The world
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactManager.#ctor(Alis.Core.Physic.World)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.ContactManager" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactManager.PairAdded(System.Object,System.Object)">
            <summary>
                Pairs the added using the specified proxy user data a
            </summary>
            <param name="proxyUserDataA">The proxy user data</param>
            <param name="proxyUserDataB">The proxy user data</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactManager.PairRemoved(System.Object,System.Object,System.Object)">
            <summary>
                Pairs the removed using the specified proxy user data 1
            </summary>
            <param name="proxyUserData1">The proxy user data</param>
            <param name="proxyUserData2">The proxy user data</param>
            <param name="pairUserData">The pair user data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactManager.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact)">
            <summary>
                Destroys the c
            </summary>
            <param name="c">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.ContactManager.Collide">
            <summary>
                Collides this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.CircleContact">
            <summary>
                The circle contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.CircleContact.#ctor(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.CircleContact" /> class
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.CircleContact.CollideCircles(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the circles using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.CircleContact.Create(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.CircleContact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.CollisionFlags">
            <summary>
                The collision flags enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.CollisionFlags.NonSolid">
            <summary>
                The non solid collision flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.CollisionFlags.Slow">
            <summary>
                The slow collision flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.CollisionFlags.Island">
            <summary>
                The island collision flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.CollisionFlags.Toi">
            <summary>
                The toi collision flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.CollisionFlags.Touch">
            <summary>
                The touch collision flags
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.Contact">
            <summary>
                The class manages contact between two shapes. A contact exists for each overlapping
                AABB in the broad-phase (except if filtered). Therefore a contact object may exist
                that has no contact points.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.SRegisters">
            <summary>
                The shape type count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.CollideShapeFunction">
            <summary>
                The collide shape function
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.Contact.manifold">
            <summary>
                The manifold
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.#ctor(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" /> class
            </summary>
            <param name="fA">The </param>
            <param name="fB">The </param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.SInitialized">
            <summary>
                The initialized
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.Flags">
            <summary>
                The flags
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.Prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.NodeA">
            <summary>
                The node
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.NodeB">
            <summary>
                The node
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.Toi">
            <summary>
                The toi
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.Manifold">
            <summary>
                Get the contact manifold.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.IsSolid">
            <summary>
                Is this contact solid?
            </summary>
            <returns>True if this contact should generate a response.</returns>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.AreTouching">
            <summary>
                Are fixtures touching?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.FixtureA">
            <summary>
                Get the first fixture in this contact.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.Contact.FixtureB">
            <summary>
                Get the second fixture in this contact.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.AddType(Alis.Core.Physic.Dynamics.Contacts.ContactCreateFcn,Alis.Core.Physic.Dynamics.Contacts.ContactDestroyFcn,Alis.Core.Physic.Collisions.Shape.ShapeType,Alis.Core.Physic.Collisions.Shape.ShapeType)">
            <summary>
                Adds the type using the specified create fcn
            </summary>
            <param name="createFcn">The create fcn</param>
            <param name="contactDestroyFcn">The destory fcn</param>
            <param name="type1">The type</param>
            <param name="type2">The type</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.InitializeRegisters">
            <summary>
                Initializes the registers
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.Create(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.Update(Alis.Core.Physic.Dynamics.IContactListener)">
            <summary>
                Updates the listener
            </summary>
            <param name="listener">The listener</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.Evaluate">
            <summary>
                Evaluates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.ComputeToi(Alis.Core.Aspect.Math.Sweep,Alis.Core.Aspect.Math.Sweep)">
            <summary>
                Computes the toi using the specified sweep a
            </summary>
            <param name="sweepA">The sweep</param>
            <param name="sweepB">The sweep</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.GetWorldManifold(Alis.Core.Physic.Collisions.WorldManifold@)">
            <summary>
                Get the world manifold.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.Contact.GetNext">
            <summary>
                Get the next contact in the world's contact list.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.Contact.CollideShapeDelegate">
            <summary>
                The collide shape delegate
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint">
            <summary>
                The contact constraint class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Points">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.BodyBaseA">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.BodyBaseB">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Friction">
            <summary>
                The friction
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.K">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.LocalPlaneNormal">
            <summary>
                The local plane normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.LocalPoint">
            <summary>
                The local point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Manifold">
            <summary>
                The manifold
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.NormalMass">
            <summary>
                The normal mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.PointCount">
            <summary>
                The point count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Radius">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Restitution">
            <summary>
                The restitution
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraint.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint">
            <summary>
                The contact constraint point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.LocalPoint">
            <summary>
                The local point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.Ra">
            <summary>
                The ra
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.Rb">
            <summary>
                The rb
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.NormalImpulse">
            <summary>
                The normal impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.TangentImpulse">
            <summary>
                The tangent impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.NormalMass">
            <summary>
                The normal mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.TangentMass">
            <summary>
                The tangent mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.EqualizedMass">
            <summary>
                The equalized mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactConstraintPoint.VelocityBias">
            <summary>
                The velocity bias
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactCreateFcn">
            <summary>
                The contact create fcn
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactDestroyFcn">
            <summary>
                The contact destroy fcn
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactEdge">
            <summary>
                A contact edge is used to connect bodies and contacts together
                in a contact graph where each body is a node and each contact
                is an edge. A contact edge belongs to a doubly linked list
                maintained in each attached body. Each contact has two contact
                nodes, one for each attached body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactEdge.Contact">
            <summary>
                The contact.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactEdge.Next">
            <summary>
                The next contact edge in the body's contact list.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactEdge.Other">
            <summary>
                Provides quick access to the other body attached.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactEdge.Prev">
            <summary>
                The previous contact edge in the body's contact list.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactRegister">
            <summary>
                The contact register
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactRegister.CreateFcn">
            <summary>
                The create fcn
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactRegister.DestroyFcn">
            <summary>
                The destroy fcn
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactRegister.Primary">
            <summary>
                The primary
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.ContactSolver">
            <summary>
                The contact solver class
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.SPositionSolverManifold">
            <summary>
                The position solver manifold
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.Constraints">
            <summary>
                The constraints
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.step">
            <summary>
                The step
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.#ctor(Alis.Core.Aspect.Time.TimeStep,Alis.Core.Physic.Dynamics.Contacts.Contact[],System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.ContactSolver" /> class
            </summary>
            <param name="step">The step</param>
            <param name="contacts">The contacts</param>
            <param name="contactCount">The contact count</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.ConstraintCount">
            <summary>
                The constraint count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.SolveVelocityConstraints">
            <summary>
                Solves the velocity constraints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.FinalizeVelocityConstraints">
            <summary>
                Finalizes the velocity constraints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.ContactSolver.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact">
            <summary>
                The edge and circle contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact.#ctor(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact" /> class
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact.CollideEdgeAndCircle(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the edge and circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact.Create(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.EdgeAndCircleContact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.NullContact">
            <summary>
                The null contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.NullContact.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.NullContact" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.NullContact.Collide(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact">
            <summary>
                The poly and circle contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact.#ctor(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact" /> class
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact.CollidePolygonCircle(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the polygon circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact.Create(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndCircleContact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact">
            <summary>
                The poly and edge contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact.#ctor(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact" /> class
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact.CollidePolyAndEdgeContact(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the poly and edge contact using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact.Create(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolyAndEdgeContact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.PolygonContact">
            <summary>
                The polygon contact class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Contacts.Contact" />
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolygonContact.#ctor(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Contacts.PolygonContact" /> class
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolygonContact.CollidePolygons(Alis.Core.Physic.Collisions.Manifold@,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Collisions.Shape.IShape,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Collides the polygons using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="shape1">The shape</param>
            <param name="xf1">The xf</param>
            <param name="shape2">The shape</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolygonContact.Create(Alis.Core.Physic.Dynamics.Fixtures.Fixture,Alis.Core.Physic.Dynamics.Fixtures.Fixture)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PolygonContact.Destroy(Alis.Core.Physic.Dynamics.Contacts.Contact@)">
            <summary>
                Destroys the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Contacts.PositionSolverManifold">
            <summary>
                The position solver manifold class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.PositionSolverManifold.Points">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.PositionSolverManifold.Separations">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Contacts.PositionSolverManifold.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Contacts.PositionSolverManifold.Initialize(Alis.Core.Physic.Dynamics.Contacts.ContactConstraint)">
            <summary>
                Initializes the cc
            </summary>
            <param name="cc">The cc</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController">
            <summary>
                Calculates buoyancy forces for fluids in the form of a half plane.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.angularDrag">
            Linear drag co-efficient
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Density">
            The fluid density
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.LinearDrag">
            Linear drag co-efficient
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Offset">
            The height of the fluid surface along the normal
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.UseDensity">
            If false, bodies are assumed to be uniformly dense, otherwise use the shapes densities
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.UseWorldGravity">
            If true, gravity is taken from the world instead of the gravity parameter.
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.buoyancyControllerDef">
            <summary>
                Buoyancy controller
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Gravity">
            Gravity vector, if the world's gravity is not used
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Normal">
            The outer surface normal
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Velocity">
            Fluid velocity, for drag calculations
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.#ctor(Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController" /> class
            </summary>
            <param name="buoyancyControllerDef">The buoyancy controller def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.BuoyancyController.Step(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Steps the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef">
            <summary>
                This class is used to build buoyancy controllers
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.AngularDrag">
            Linear drag co-efficient
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.Density">
            The fluid density
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.LinearDrag">
            Linear drag co-efficient
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.Offset">
            The height of the fluid surface along the normal
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.UseDensity">
            If false, bodies are assumed to be uniformly dense, otherwise use the shapes densities
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.UseWorldGravity">
            If true, gravity is taken from the world instead of the gravity parameter.
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.Gravity">
            Gravity vector, if the world's gravity is not used
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.Normal">
            The outer surface normal
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.Velocity">
            Fluid velocity, for drag calculations
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.BuoyancyControllerDef" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController">
            <summary>
                The constant accel controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController.A">
            <summary>
                The force to apply
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController.constantAccelControllerDef">
            <summary>
                The constant accel controller def
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController.#ctor(Alis.Core.Physic.Dynamics.Controllers.ConstantAccelControllerDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelController.Step(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Steps the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelControllerDef">
            This class is used to build constant acceleration controllers
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ConstantAccelControllerDef.A">
            <summary>
                The force to apply
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController">
            <summary>
                The constant force controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController.f">
            <summary>
                The force to apply
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController.constantForceControllerDef">
            <summary>
                constant force controller
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController.#ctor(Alis.Core.Physic.Dynamics.Controllers.ConstantForceControllerDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.ConstantForceController.Step(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Steps the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.ConstantForceControllerDef">
            <summary>
                This class is used to build constant force controllers
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ConstantForceControllerDef.F">
            The force to apply
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.Controller">
            <summary>
                Base class for controllers. Controllers are a convience for encapsulating common
                per-step functionality.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.Controller.BodyCount">
            <summary>
                The body count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.Controller.BodyList">
            <summary>
                The body list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.Controller.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.Controller.Prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.Controller.World">
            <summary>
                The world
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.#ctor(Alis.Core.Physic.World)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" /> class
            </summary>
            <param name="world">The world</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.Step(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Controllers override this to implement per-step functionality.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.AddBody(Alis.Core.Physic.Dynamics.Body.BodyBase)">
            <summary>
                Adds a body to the controller list.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.RemoveBody(Alis.Core.Physic.Dynamics.Body.BodyBase)">
            <summary>
                Removes a body from the controller list.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.Clear">
            <summary>
                Removes all bodies from the controller list.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.GetNext">
            <summary>
                Get the next body in the world's body list.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.GetWorld">
            <summary>
                Get the parent world of this body.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.Controller.GetBodyList">
            <summary>
                Get the attached body list
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge">
            <summary>
                A controller edge is used to connect bodies and controllers together
                in a bipartite graph.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.BodyBase">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.Controller">
            <summary>
                The controller
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.NextBody">
            <summary>
                The next body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.NextController">
            <summary>
                The next controller
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.PrevBody">
            <summary>
                The prev body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.ControllerEdge.PrevController">
            <summary>
                The prev controller
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.GravityController">
            <summary>
                The gravity controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.GravityController.G">
            <summary>
                Specifies the strength of the gravitiation force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.GravityController.InvSqr">
            If true, gravity is proportional to r^-2, otherwise r^-1
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.GravityController.gravityControllerDef">
            <summary>
                Gravity controller
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.GravityController.#ctor(Alis.Core.Physic.Dynamics.Controllers.GravityControllerDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Controllers.GravityController" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.GravityController.Step(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Steps the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.GravityControllerDef">
            This class is used to build gravity controllers
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.GravityControllerDef.G">
            <summary>
                Specifies the strength of the gravitiation force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.GravityControllerDef.InvSqr">
            <summary>
                If true, gravity is proportional to r^-2, otherwise r^-1
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Controllers.TensorDampingController">
            <summary>
                The tensor damping controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Dynamics.Controllers.Controller" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.TensorDampingController.maxTimestep">
            <summary>
                Set this to a positive number to clamp the maximum amount of damping done.
                Typically one wants maxTimestep to be 1/(max eigenvalue of T), so that damping will never cause something to
                reverse direction
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Controllers.TensorDampingController.T">
            <summary>
                Tensor to use in damping model
                Some examples (matrixes in format (row1; row2) )
                (-a 0;0 -a)		Standard isotropic damping with strength a
                (0 a;-a 0)		Electron in fixed field - a force at right angles to velocity with proportional magnitude
                (-a 0;0 -b)		Differing x and y damping. Useful e.g. for top-down wheels.
                By the way, tensor in this case just means matrix, don't let the terminology get you down.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.TensorDampingController.SetAxisAligned(System.Single,System.Single)">
            Sets damping independantly along the x and y axes
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Controllers.TensorDampingController.Step(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Steps the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.FilterData">
            <summary>
                This holds contact filtering data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FilterData.CategoryBits">
            <summary>
                The collision category bits. Normally you would just set one bit.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FilterData.MaskBits">
            <summary>
                The collision mask bits. This states the categories that this
                shape would accept for collision.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FilterData.GroupIndex">
            <summary>
                Collision groups allow a certain group of objects to never collide (negative)
                or always collide (positive). Zero means no collision group. Non-zero group
                filtering always wins against the mask bits.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Fixtures.CircleDef">
            <summary>
                This structure is used to build a fixture with a circle shape.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.CircleDef.Radius">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.CircleDef.LocalPosition">
            <summary>
                The local position
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.CircleDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Fixtures.CircleDef" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Fixtures.EdgeDef">
            <summary>
                This structure is used to build a chain of edges.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.EdgeDef.Vertex1">
            <summary>
                The start vertex.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.EdgeDef.Vertex2">
            <summary>
                The end vertex.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.EdgeDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Fixtures.EdgeDef" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Fixtures.Fixture">
            <summary>
                A fixture is used to attach a shape to a body for collision detection. A fixture
                inherits its transform from its parent. Fixtures hold additional non-geometric data
                such as friction, collision filters, etc.
                Fixtures are created via Body.CreateFixture.
                @warning you cannot reuse fixtures.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.Fixture.Density">
            <summary>
                Density, usually in kg/m^2.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.Fixture.Filter">
            <summary>
                Contact filtering data. You must call b2World::Refilter to correct
                existing contacts/non-contacts.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.Fixture.FixtureDef">
            <summary>
                fixture
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.Fixture.Friction">
            <summary>
                Friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.Fixture.Restitution">
            <summary>
                Restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.Fixture.UserData">
            <summary>
                User data that was assigned in the fixture definition. Use this to
                store your application specific data.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Fixtures.Fixture" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixtures.Fixture.ProxyId">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixtures.Fixture.IsSensor">
            <summary>
                Is this fixture a sensor (non-solid)?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixtures.Fixture.Shape">
            <summary>
                Get the child shape. You can modify the child shape, however you should not change the
                number of vertices because this will crash some collision caching mechanisms.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixtures.Fixture.ShapeType">
            <summary>
                Get the type of this shape. You can use this to down cast to the concrete shape.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixtures.Fixture.Next">
            <summary>
                Get the next fixture in the parent body's fixture list.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixtures.Fixture.BodyBase">
            <summary>
                Get the parent body of this fixture. This is NULL if the fixture is not attached.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.Create(Alis.Core.Physic.Collisions.BroadPhase,Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Aspect.Math.XForm,Alis.Core.Physic.Dynamics.Fixtures.FixtureDef)">
            <summary>
                Creates the broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="bodyBase">The body</param>
            <param name="xf">The xf</param>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.Destroy(Alis.Core.Physic.Collisions.BroadPhase)">
            <summary>
                Destroys the broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.Synchronize(Alis.Core.Physic.Collisions.BroadPhase,Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Describes whether this instance synchronize
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="transform1">The transform</param>
            <param name="transform2">The transform</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.RefilterProxy(Alis.Core.Physic.Collisions.BroadPhase,Alis.Core.Aspect.Math.XForm)">
            <summary>
                Refilters the proxy using the specified broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="transform">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.ComputeMass(Alis.Core.Physic.Collisions.MassData@)">
            <summary>
                Compute the mass properties of this shape using its dimensions and density.
                The inertia tensor is computed about the local origin, not the centroid.
            </summary>
            <param name="massData">Returns the mass data for this shape.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.ComputeSubmergedArea(Alis.Core.Aspect.Math.Vector2,System.Single,Alis.Core.Aspect.Math.Vector2@)">
            <summary>
                Compute the volume and centroid of this fixture intersected with a half plane.
            </summary>
            <param name="normal">Normal the surface normal.</param>
            <param name="offset">Offset the surface offset along normal.</param>
            <param name="c">Returns the centroid.</param>
            <returns>The total volume less than offset along normal.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.TestPoint(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Test a point for containment in this fixture. This only works for convex shapes.
            </summary>
            <param name="p">A point in world coordinates.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.TestSegment(System.Single@,Alis.Core.Aspect.Math.Vector2@,Alis.Core.Physic.Collisions.Segment,System.Single)">
            <summary>
                Perform a ray cast against this shape.
            </summary>
            <param name="lambda">
                Returns the hit fraction. You can use this to compute the contact point
                p = (1 - lambda) * segment.p1 + lambda * segment.p2.
            </param>
            <param name="normal">
                Returns the normal at the contact point. If there is no intersection, the normal
                is not set.
            </param>
            <param name="segment">Defines the begin and end point of the ray cast.</param>
            <param name="maxLambda">A number typically in the range [0,1].</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.Fixture.ComputeSweepRadius(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Get the maximum radius about the parent body's center of mass.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Fixtures.FixtureDef">
            <summary>
                A fixture definition is used to create a fixture. This class defines an
                abstract fixture definition. You can reuse fixture definitions safely.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.FixtureDef.IsSensor">
            <summary>
                A sensor shape collects contact information but never generates a collision response.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.FixtureDef.Restitution">
            <summary>
                The restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.FixtureDef.UserData">
            <summary>
                Use this to store application specific fixture data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.FixtureDef.Density">
            <summary>
                The density, usually in kg/m^2.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.FixtureDef.Filter">
            <summary>
                Contact filtering data.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.FixtureDef.Friction">
            <summary>
                The friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.FixtureDef.Type">
            <summary>
                Holds the shape type for down-casting.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.FixtureDef.#ctor">
            <summary>
                The constructor sets the default fixture definition values.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Fixtures.PolygonDef">
            <summary>
                Convex polygon. The vertices must be ordered so that the outside of
                the polygon is on the right side of the edges (looking along the edge
                from start to end).
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.PolygonDef.Vertices">
            <summary>
                The polygon vertices in local coordinates.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixtures.PolygonDef.VertexCount">
            <summary>
                The number of polygon vertices.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.PolygonDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Fixtures.PolygonDef" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.PolygonDef.SetAsBox(System.Single,System.Single)">
            <summary>
                Build vertices to represent an axis-aligned box.
            </summary>
            <param name="hx">The half-width</param>
            <param name="hy">The half-height.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixtures.PolygonDef.SetAsBox(System.Single,System.Single,Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                Build vertices to represent an oriented box.
            </summary>
            <param name="hx">The half-width</param>
            <param name="hy">The half-height.</param>
            <param name="center">The center of the box in local coordinates.</param>
            <param name="angle">The rotation of the box in local coordinates.</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.IContactListener">
            Implement this class to get contact information. You can use these results for
            things like sounds and game logic. You can also get contact results by
            traversing the contact lists after the time step. However, you might miss
            some contacts because continuous physics leads to sub-stepping.
            Additionally you may receive multiple callbacks for the same contact in a
            single time step.
            You should strive to make your callbacks efficient because there may be
            many callbacks per time step.
            @warning You cannot create/destroy Box2DX entities inside these callbacks.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.IContactListener.BeginContact(Alis.Core.Physic.Dynamics.Contacts.Contact)">
            Called when two fixtures begin to touch.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.IContactListener.EndContact(Alis.Core.Physic.Dynamics.Contacts.Contact)">
            Called when two fixtures cease to touch.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.IContactListener.PreSolve(Alis.Core.Physic.Dynamics.Contacts.Contact,Alis.Core.Physic.Collisions.Manifold)">
            This is called after a contact is updated. This allows you to inspect a
            contact before it goes to the solver. If you are careful, you can modify the
            contact manifold (e.g. disable contact).
            A copy of the old manifold is provided so that you can detect changes.
            Note: this is called only for awake bodies.
            Note: this is called even when the number of contact points is zero.
            Note: this is not called for sensors.
            Note: if you set the number of contact points to zero, you will not
            get an EndContact callback. However, you may get a BeginContact callback
            the next step.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.IContactListener.PostSolve(Alis.Core.Physic.Dynamics.Contacts.Contact,Alis.Core.Physic.Dynamics.ContactImpulse)">
            This lets you inspect a contact after the solver is finished. This is useful
            for inspecting impulses.
            Note: the contact manifold does not include time of impact impulses, which can be
            arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly
            in a separate data structure.
            Note: this is only called for contacts that are touching, solid, and awake.
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Island">
            <summary>
                The island class
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.bodyCapacity">
            <summary>
                The body capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.ContactCapacity">
            <summary>
                The contact capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.JointCapacity">
            <summary>
                The joint capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Listener">
            <summary>
                The listener
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Bodies">
            <summary>
                The bodies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.BodyCount">
            <summary>
                The body count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.ContactCount">
            <summary>
                The contact count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Contacts">
            <summary>
                The contacts
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.JointCount">
            <summary>
                The joint count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Joints">
            <summary>
                The joints
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.PositionIterationCount">
            <summary>
                The position iteration count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Positions">
            <summary>
                The positions
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Island.Velocities">
            <summary>
                The velocities
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.#ctor(System.Int32,System.Int32,System.Int32,Alis.Core.Physic.Dynamics.IContactListener)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Island" /> class
            </summary>
            <param name="bodyCapacity">The body capacity</param>
            <param name="contactCapacity">The contact capacity</param>
            <param name="jointCapacity">The joint capacity</param>
            <param name="listener">The listener</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Dispose">
            <summary>
                Disposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Solve(Alis.Core.Aspect.Time.TimeStep,Alis.Core.Aspect.Math.Vector2,System.Boolean)">
            <summary>
                Solves the step
            </summary>
            <param name="step">The step</param>
            <param name="gravity">The gravity</param>
            <param name="allowSleep">The allow sleep</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.SolveToi(Alis.Core.Aspect.Time.TimeStep@)">
            <summary>
                Solves the toi using the specified sub step
            </summary>
            <param name="subStep">The sub step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Add(Alis.Core.Physic.Dynamics.Body.BodyBase)">
            <summary>
                Adds the body
            </summary>
            <param name="bodyBase">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Add(Alis.Core.Physic.Dynamics.Contacts.Contact)">
            <summary>
                Adds the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Add(Alis.Core.Physic.Dynamics.Joint.IJoint)">
            <summary>
                Adds the joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Island.Report(Alis.Core.Physic.Dynamics.Contacts.ContactConstraint[])">
            <summary>
                Reports the constraints
            </summary>
            <param name="constraints">The constraints</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Jacobian">
            <summary>
                The jacobian
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Jacobian.Linear1">
            <summary>
                The linear
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Jacobian.Angular1">
            <summary>
                The angular
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Jacobian.Linear2">
            <summary>
                The linear
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Jacobian.Angular2">
            <summary>
                The angular
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Jacobian.SetZero">
            <summary>
                Sets the zero
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Jacobian.Set(Alis.Core.Aspect.Math.Vector2,System.Single,Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                Sets the x 1
            </summary>
            <param name="x1">The </param>
            <param name="a1">The </param>
            <param name="x2">The </param>
            <param name="a2">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Jacobian.Compute(Alis.Core.Aspect.Math.Vector2,System.Single,Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                Computes the x 1
            </summary>
            <param name="x1">The </param>
            <param name="a1">The </param>
            <param name="x2">The </param>
            <param name="a2">The </param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.DistanceJoint">
            <summary>
                A distance joint constrains two points on two bodies
                to remain at a fixed distance from each other. You can view
                this as a massless, rigid rod.
                1-D constrained system
                m (v2 - v1) = lambda
                v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.
                x2 = x1 + h * v2
                1-D mass-damper-spring system
                m (v2 - v1) + h * d * v2 + h * k *
                C = norm(p2 - p1) - L
                u = (p2 - p1) / norm(p2 - p1)
                Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))
                J = [-u -cross(r1, u) u cross(r2, u)]
                K = J * invM * JT
                = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.collideConnected">
            <summary>
                The collide connected
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.DampingRatio">
            <summary>
                The damping ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.FrequencyHz">
            <summary>
                The frequency hz
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.length">
            <summary>
                The length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.node1">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.node2">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Bias">
            <summary>
                The bias
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.body1">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.body2">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.invI1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.invI2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.invMass1">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.invMass2">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.islandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.localCenter1">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.localCenter2">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.U">
            <summary>
                The vector
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.#ctor(Alis.Core.Physic.Dynamics.Joint.DistanceJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.DistanceJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#Type">
            <summary>
                Gets or sets the value of the type
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#Prev">
            <summary>
                Gets or sets the value of the prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#Next">
            <summary>
                Gets or sets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#Node1">
            <summary>
                Gets the value of the node 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#Node2">
            <summary>
                Gets the value of the node 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#Body1">
            <summary>
                Gets or sets the value of the body 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#Body2">
            <summary>
                Gets or sets the value of the body 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#IslandFlag">
            <summary>
                Gets or sets the value of the island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#CollideConnected">
            <summary>
                Gets the value of the collide connected
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#LocalCenter1">
            <summary>
                Gets or sets the value of the local center 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#LocalCenter2">
            <summary>
                Gets or sets the value of the local center 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InvMass1">
            <summary>
                Gets or sets the value of the inv mass 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InvI1">
            <summary>
                Gets or sets the value of the inv i 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InvMass2">
            <summary>
                Gets or sets the value of the inv mass 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InvI2">
            <summary>
                Gets or sets the value of the inv i 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.UserData">
            <summary>
                Gets the value user data.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJoint.SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.DistanceJointDef">
            <summary>
                Distance joint definition. This requires defining an
                anchor point on both bodies and the non-zero length of the
                distance joint. The definition uses local anchor points
                so that the initial configuration can violate the constraint
                slightly. This helps when saving and loading a game.
                @warning Do not use a zero or short length.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJointDef.DampingRatio">
            <summary>
                The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJointDef.FrequencyHz">
            <summary>
                The response speed.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJointDef.Length">
            <summary>
                The equilibrium length between the anchor points.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJointDef.LocalAnchor1">
            <summary>
                The local anchor point relative to body1's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.DistanceJointDef.LocalAnchor2">
            <summary>
                The local anchor point relative to body2's origin.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.DistanceJointDef" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.DistanceJointDef.Initialize(Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Initialize the bodies, anchors, and length using the world anchors.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.GearJoint">
            <summary>
                A gear joint is used to connect two joints together. Either joint
                can be a revolute or prismatic joint. You specify a gear ratio
                to bind the motions together:
                coordinate1 + ratio * coordinate2 = constant
                The ratio can be negative or positive. If one joint is a revolute joint
                and the other joint is a prismatic joint, then the ratio will have units
                of length or units of 1/length.
                @warning The revolute and prismatic joints must be attached to
                fixed bodies (which must be body1 on those joints).
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.collideConnected">
            <summary>
                The collide connected
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.constant">
            <summary>
                The constant
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.ground1">
            <summary>
                The ground
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.ground2">
            <summary>
                The ground
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.groundAnchor1">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.groundAnchor2">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.localAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.localAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.node1">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.node2">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.prismatic1">
            <summary>
                The prismatic
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.prismatic2">
            <summary>
                The prismatic
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.revolute1">
            <summary>
                The revolute
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.revolute2">
            <summary>
                The revolute
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.body1">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.body2">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.invI1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.invI2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.invMass1">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.invMass2">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.islandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.jacobian">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.localCenter1">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.localCenter2">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.ratio">
            <summary>
                The ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJoint.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.GearJoint.#ctor(Alis.Core.Physic.Dynamics.Joint.GearJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.GearJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Ground1">
            <summary>
                The ground
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Ground2">
            <summary>
                The ground
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Revolute1">
            <summary>
                The revolute
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Prismatic1">
            <summary>
                The prismatic
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Revolute2">
            <summary>
                The revolute
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Prismatic2">
            <summary>
                The prismatic
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.GroundAnchor1">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.GroundAnchor2">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Constant">
            <summary>
                The constant
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Ratio">
            <summary>
                Get the gear ratio.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Type">
            <summary>
                Gets or sets the value of the type
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Prev">
            <summary>
                Gets or sets the value of the prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Next">
            <summary>
                Gets or sets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Node1">
            <summary>
                Gets the value of the node 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Node2">
            <summary>
                Gets the value of the node 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Body1">
            <summary>
                Gets or sets the value of the body 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Body2">
            <summary>
                Gets or sets the value of the body 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.IslandFlag">
            <summary>
                Gets or sets the value of the island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.CollideConnected">
            <summary>
                Gets the value of the collide connected
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.LocalCenter1">
            <summary>
                Gets or sets the value of the local center 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.LocalCenter2">
            <summary>
                Gets or sets the value of the local center 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.InvMass1">
            <summary>
                Gets or sets the value of the inv mass 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.InvI1">
            <summary>
                Gets or sets the value of the inv i 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.InvMass2">
            <summary>
                Gets or sets the value of the inv mass 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.InvI2">
            <summary>
                Gets or sets the value of the inv i 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.GearJoint.UserData">
            <summary>
                Gets or sets the value of the user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.GearJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.GearJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.GearJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.GearJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.GearJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.GearJoint.InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.GearJoint.SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.GearJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.GearJointDef">
            <summary>
                Gear joint definition. This definition requires two existing
                revolute or prismatic joints (any combination will work).
                The provided joints must attach a dynamic body to a static body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJointDef.Joint1">
            <summary>
                The first revolute/prismatic joint attached to the gear joint.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJointDef.Joint2">
            <summary>
                The second revolute/prismatic joint attached to the gear joint.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.GearJointDef.Ratio">
            <summary>
                The gear ratio.
                @see GearJoint for explanation.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.GearJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.GearJointDef" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.IJoint">
            <summary>
                The base joint class. Joints are used to constraint two bodies together in
                various fashions. Some joints also feature limits and motors.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.Prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.Node1">
            <summary>
                The joint edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.Node2">
            <summary>
                The joint edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.Body1">
            <summary>
                The body
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.Body2">
            <summary>
                The body
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.IslandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.CollideConnected">
            <summary>
                The collide connected
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.LocalCenter1">
            <summary>
                The local center
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.LocalCenter2">
            <summary>
                The local center
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.InvMass1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.InvI1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.InvMass2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.InvI2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.Anchor1">
            <summary>
                Get the anchor point on body1 in world coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.Anchor2">
            <summary>
                Get the anchor point on body2 in world coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.IJoint.UserData">
            <summary>
                Get/Set the user data pointer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.GetType">
            <summary>
                Get the type of the concrete joint.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.GetBody1">
            <summary>
                Get the first body attached to this joint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.GetBody2">
            <summary>
                Get the second body attached to this joint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.GetReactionForce(System.Single)">
            <summary>
                Get the reaction force on body2 at the joint anchor.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.GetReactionTorque(System.Single)">
            <summary>
                Get the reaction torque on body2.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.GetNext">
            <summary>
                Get the next joint the world joint list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.Create(Alis.Core.Physic.Dynamics.Joint.JointDef)">
            <summary>
                Creates the def
            </summary>
            <param name="def">The def</param>
            <returns>The joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.Destroy(Alis.Core.Physic.Dynamics.Joint.IJoint)">
            <summary>
                Destroys the joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.IJoint.ComputeXForm(Alis.Core.Aspect.Math.XForm@,Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                Computes the x form using the specified xf
            </summary>
            <param name="xf">The xf</param>
            <param name="center">The center</param>
            <param name="localCenter">The local center</param>
            <param name="angle">The angle</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.JointDef">
            <summary>
                Joint definitions are used to construct joints.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointDef.UserData">
            <summary>
                Use this to attach application specific data to your joints.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointDef.Body1">
            <summary>
                The first attached body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointDef.Body2">
            <summary>
                The second attached body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointDef.CollideConnected">
            <summary>
                Set this flag to true if the attached bodies should collide.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointDef.Type">
            <summary>
                The joint type is set automatically for concrete joint types.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.JointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.JointDef" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.JointEdge">
            <summary>
                A joint edge is used to connect bodies and joints together
                in a joint graph where each body is a node and each joint
                is an edge. A joint edge belongs to a doubly linked list
                maintained in each attached body. Each joint has two joint
                nodes, one for each attached body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointEdge.Joint">
            <summary>
                The joint.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointEdge.Next">
            <summary>
                The next joint edge in the body's joint list.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointEdge.Other">
            <summary>
                Provides quick access to the other body attached.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointEdge.Prev">
            <summary>
                The previous joint edge in the body's joint list.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.JointType">
            <summary>
                The joint type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointType.UnknownJoint">
            <summary>
                The unknown joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointType.RevoluteJoint">
            <summary>
                The revolute joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointType.PrismaticJoint">
            <summary>
                The prismatic joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointType.DistanceJoint">
            <summary>
                The distance joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointType.PulleyJoint">
            <summary>
                The pulley joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointType.MouseJoint">
            <summary>
                The mouse joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointType.GearJoint">
            <summary>
                The gear joint joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.JointType.LineJoint">
            <summary>
                The line joint joint type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.LineJoint">
            <summary>
                A line joint. This joint provides one degree of freedom: translation
                along an axis fixed in body1. You can use a joint limit to restrict
                the range of motion and a joint motor to drive the motion or to
                model joint friction.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.collideConnected">
            <summary>
                The collide connected
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.node1">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.node2">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.A1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.A2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.Axis">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.body1">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.body2">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.EnableLimitx">
            <summary>
                The enable limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.EnableMotorx">
            <summary>
                The enable motor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.invI1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.invI2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.invMass1">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.invMass2">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.islandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.K">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.LimitState">
            <summary>
                The limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.localCenter1">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.localCenter2">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.LocalXAxis1">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.LocalYAxis1">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.LowerTranslation">
            <summary>
                The lower translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.MaxMotorForce">
            <summary>
                The max motor force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.MotorImpulse">
            <summary>
                The motor impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.MotorMass">
            <summary>
                The motor mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.MotorSpeed">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.Perp">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.S1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.s2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.UpperTranslation">
            <summary>
                The upper translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJoint.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.#ctor(Alis.Core.Physic.Dynamics.Joint.LineJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.LineJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.Type">
            <summary>
                Gets or sets the value of the type
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.Prev">
            <summary>
                Gets or sets the value of the prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.Next">
            <summary>
                Gets or sets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.Node1">
            <summary>
                Gets the value of the node 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.Node2">
            <summary>
                Gets the value of the node 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.Body1">
            <summary>
                Gets or sets the value of the body 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.Body2">
            <summary>
                Gets or sets the value of the body 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.IslandFlag">
            <summary>
                Gets or sets the value of the island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.CollideConnected">
            <summary>
                Gets the value of the collide connected
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.LocalCenter1">
            <summary>
                Gets or sets the value of the local center 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.LocalCenter2">
            <summary>
                Gets or sets the value of the local center 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.InvMass1">
            <summary>
                Gets or sets the value of the inv mass 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.InvI1">
            <summary>
                Gets or sets the value of the inv i 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.InvMass2">
            <summary>
                Gets or sets the value of the inv mass 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.InvI2">
            <summary>
                Gets or sets the value of the inv i 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.LineJoint.UserData">
            <summary>
                Gets or sets the value of the user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt"></param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.GetJointTranslation">
            <summary>
                Get the current joint translation, usually in meters.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.GetJointSpeed">
            <summary>
                Get the current joint translation speed, usually in meters per second.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.IsLimitEnabled">
            <summary>
                Is the joint limit enabled?
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.EnableLimit(System.Boolean)">
            <summary>
                Enable/disable the joint limit.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.GetLowerLimit">
            <summary>
                Get the lower joint limit, usually in meters.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.GetUpperLimit">
            <summary>
                Get the upper joint limit, usually in meters.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.SetLimits(System.Single,System.Single)">
            <summary>
                Set the joint limits, usually in meters.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.IsMotorEnabled">
            <summary>
                Is the joint motor enabled?
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.EnableMotor(System.Boolean)">
            <summary>
                Enable/disable the joint motor.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.SetMotorSpeed(System.Single)">
            <summary>
                Set the motor speed, usually in meters per second.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.SetMaxMotorForce(System.Single)">
            <summary>
                Set the maximum motor force, usually in N.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.GetMotorForce">
            <summary>
                Get the current motor force, usually in N.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.GetMotorSpeed">
            <summary>
                Get the motor speed, usually in meters per second.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.LineJointDef">
            <summary>
                Line joint definition. This requires defining a line of
                motion using an axis and an anchor point. The definition uses local
                anchor points and a local axis so that the initial configuration
                can violate the constraint slightly. The joint translation is zero
                when the local anchor points coincide in world space. Using local
                anchors and a local axis helps when saving and loading a game.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJointDef.EnableLimit">
            <summary>
                Enable/disable the joint limit.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJointDef.EnableMotor">
            <summary>
                Enable/disable the joint motor.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJointDef.LowerTranslation">
            <summary>
                The lower translation limit, usually in meters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJointDef.MaxMotorForce">
            <summary>
                The maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJointDef.MotorSpeed">
            <summary>
                The desired motor speed in radians per second.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJointDef.UpperTranslation">
            <summary>
                The upper translation limit, usually in meters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJointDef.LocalAnchor1">
            <summary>
                The local anchor point relative to body1's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJointDef.LocalAnchor2">
            <summary>
                The local anchor point relative to body2's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.LineJointDef.LocalAxis1">
            <summary>
                The local translation axis in body1.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.LineJointDef" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.LineJointDef.Initialize(Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Initialize the bodies, anchors, axis, and reference angle using the world
                anchor and world axis.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.MouseJoint">
            <summary>
                A mouse joint is used to make a point on a body track a
                specified world point. This a soft constraint with a maximum
                force. This allows the constraint to stretch and without
                applying huge forces.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.collideConnected">
            <summary>
                The collide connected
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.dampingRatio">
            <summary>
                The damping ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.frequencyHz">
            <summary>
                The frequency hz
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.localAnchor">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.maxForce">
            <summary>
                The max force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.node1">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.node2">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.beta">
            <summary>
                The beta
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.body1">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.body2">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.c">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.invI1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.invI2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.invMass1">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.invMass2">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.islandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.localCenter1">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.localCenter2">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Target">
            <summary>
                The target
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.MouseJoint.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJoint.#ctor(Alis.Core.Physic.Dynamics.Joint.MouseJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.MouseJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.LocalAnchor">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.C">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.MaxForce">
            <summary>
                The max force
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.FrequencyHz">
            <summary>
                The frequency hz
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.DampingRatio">
            <summary>
                The damping ratio
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Beta">
            <summary>
                The beta
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Type">
            <summary>
                Gets or sets the value of the type
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Prev">
            <summary>
                Gets or sets the value of the prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Next">
            <summary>
                Gets or sets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Node1">
            <summary>
                Gets the value of the node 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Node2">
            <summary>
                Gets the value of the node 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Body1">
            <summary>
                Gets or sets the value of the body 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Body2">
            <summary>
                Gets or sets the value of the body 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.IslandFlag">
            <summary>
                Gets or sets the value of the island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.CollideConnected">
            <summary>
                Gets the value of the collide connected
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.LocalCenter1">
            <summary>
                Gets or sets the value of the local center 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.LocalCenter2">
            <summary>
                Gets or sets the value of the local center 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.InvMass1">
            <summary>
                Gets or sets the value of the inv mass 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.InvI1">
            <summary>
                Gets or sets the value of the inv i 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.InvMass2">
            <summary>
                Gets or sets the value of the inv mass 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.InvI2">
            <summary>
                Gets or sets the value of the inv i 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJoint.UserData">
            <summary>
                Gets or sets the value of the user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param>The inv dt</param>
            <param name="invDt"></param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param>The inv dt</param>
            <param name="invDt"></param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJoint.SetTarget(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Use this to update the target point.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJoint.InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJoint.SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.MouseJointDef">
            <summary>
                Mouse joint definition. This requires a world target point,
                tuning parameters, and the time step.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.MouseJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.MouseJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJointDef.Target">
            <summary>
                The initial world target point. This is assumed
                to coincide with the body anchor initially.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJointDef.MaxForce">
            <summary>
                The maximum constraint force that can be exerted
                to move the candidate body. Usually you will express
                as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJointDef.FrequencyHz">
            <summary>
                The response speed.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.MouseJointDef.DampingRatio">
            <summary>
                The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint">
            <summary>
                A prismatic joint. This joint provides one degree of freedom: translation
                along an axis fixed in body1. Relative rotation is prevented. You can
                use a joint limit to restrict the range of motion and a joint motor to
                drive the motion or to model joint friction.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.collideConnected">
            <summary>
                The collide connected
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.node1">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.node2">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.refAngle">
            <summary>
                The ref angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.a1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.A2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Axis">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.body1">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.body2">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.invI1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.invI2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.invMass1">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.invMass2">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.islandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.isLimitEnabled">
            <summary>
                The is limit enabled
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.isMotorEnabled">
            <summary>
                The is motor enabled
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.K">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.LimitState">
            <summary>
                The limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.localCenter1">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.localCenter2">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.LocalXAxis1">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.LocalYAxis1">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.lowerLimit">
            <summary>
                The lower limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.MaxMotorForce">
            <summary>
                The max motor force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.motorForce">
            <summary>
                The motor force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.MotorMass">
            <summary>
                The motor mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.motorSpeedx">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Perp">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.s1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.s2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.upperLimit">
            <summary>
                The upper limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.#ctor(Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.JointTranslation">
            <summary>
                Get the current joint translation, usually in meters.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.JointSpeed">
            <summary>
                Get the current joint translation speed, usually in meters per second.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.IsLimitEnabled">
            <summary>
                Is the joint limit enabled?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.LowerLimit">
            <summary>
                Get the lower joint limit, usually in meters.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.UpperLimit">
            <summary>
                Get the upper joint limit, usually in meters.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.IsMotorEnabled">
            <summary>
                Is the joint motor enabled?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.MotorSpeedx">
            <summary>
                Get\Set the motor speed, usually in meters per second.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.MotorForce">
            <summary>
                Get the current motor force, usually in N.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Type">
            <summary>
                Gets or sets the value of the type
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Prev">
            <summary>
                Gets or sets the value of the prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Next">
            <summary>
                Gets or sets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Node1">
            <summary>
                Gets the value of the node 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Node2">
            <summary>
                Gets the value of the node 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Body1">
            <summary>
                Gets or sets the value of the body 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Body2">
            <summary>
                Gets or sets the value of the body 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.IslandFlag">
            <summary>
                Gets or sets the value of the island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.CollideConnected">
            <summary>
                Gets the value of the collide connected
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.LocalCenter1">
            <summary>
                Gets or sets the value of the local center 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.LocalCenter2">
            <summary>
                Gets or sets the value of the local center 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.InvMass1">
            <summary>
                Gets or sets the value of the inv mass 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.InvI1">
            <summary>
                Gets or sets the value of the inv i 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.InvMass2">
            <summary>
                Gets or sets the value of the inv mass 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.InvI2">
            <summary>
                Gets or sets the value of the inv i 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.UserData">
            <summary>
                Gets or sets the value of the user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.EnableLimit(System.Boolean)">
            <summary>
                Enable/disable the joint limit.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.SetLimits(System.Single,System.Single)">
            <summary>
                Set the joint limits, usually in meters.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.EnableMotor(System.Boolean)">
            <summary>
                Enable/disable the joint motor.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.SetMaxMotorForce(System.Single)">
            <summary>
                Set the maximum motor force, usually in N.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef">
            <summary>
                Prismatic joint definition. This requires defining a line of
                motion using an axis and an anchor point. The definition uses local
                anchor points and a local axis so that the initial configuration
                can violate the constraint slightly. The joint translation is zero
                when the local anchor points coincide in world space. Using local
                anchors and a local axis helps when saving and loading a game.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.EnableLimit">
            <summary>
                Enable/disable the joint limit.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.EnableMotor">
            <summary>
                Enable/disable the joint motor.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.LowerTranslation">
            <summary>
                The lower translation limit, usually in meters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.MaxMotorForce">
            <summary>
                The maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.MotorSpeed">
            <summary>
                The desired motor speed in radians per second.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.UpperTranslation">
            <summary>
                The upper translation limit, usually in meters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.LocalAnchor1">
            <summary>
                The local anchor point relative to body1's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.LocalAnchor2">
            <summary>
                The local anchor point relative to body2's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.LocalAxis1">
            <summary>
                The local translation axis in body1.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.ReferenceAngle">
            <summary>
                The constrained angle between the bodies: body2_angle - body1_angle.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PrismaticJointDef.Initialize(Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Initialize the bodies, anchors, axis, and reference angle using the world
                anchor and world axis.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.PulleyJoint">
            <summary>
                The pulley joint is connected to two bodies and two fixed ground points.
                The pulley supports a ratio such that:
                length1 + ratio * length2 constant
                Yes, the force transmitted is scaled by the ratio.
                The pulley also enforces a maximum length limit on both sides. This is
                useful to prevent one side of the pulley hitting the top.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.MinPulleyLength1">
            <summary>
                The min pulley length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.collideConnected">
            <summary>
                The collide connected
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.constant">
            <summary>
                The constant
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.ground">
            <summary>
                The ground
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.groundAnchor1">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.groundAnchor2">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.localAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.localAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.maxLength1">
            <summary>
                The max length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.maxLength2">
            <summary>
                The max length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.node1">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.node2">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.body1">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.body2">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.invI1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.invI2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.invMass1">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.invMass2">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.islandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.limitImpulse1">
            <summary>
                The limit impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.limitImpulse2">
            <summary>
                The limit impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.limitMass1">
            <summary>
                The limit mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.limitMass2">
            <summary>
                The limit mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.limitState">
            <summary>
                The limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.localCenter1">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.localCenter2">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.pulleyMass">
            <summary>
                The pulley mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.ratio">
            <summary>
                The ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.state">
            <summary>
                The state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.u1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.u2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.#ctor(Alis.Core.Physic.Dynamics.Joint.PulleyJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.PulleyJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.MinPulleyLength">
            <summary>
                The min pulley length
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.LimitState">
            <summary>
                The limit state
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Ground">
            <summary>
                The ground
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.GroundAnchor1">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.GroundAnchor2">
            <summary>
                The ground anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.U1">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.U2">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Constant">
            <summary>
                The constant
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.MaxLength1">
            <summary>
                The max length
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.MaxLength2">
            <summary>
                The max length
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.PulleyMass">
            <summary>
                The pulley mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.LimitMass1">
            <summary>
                The limit mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.LimitMass2">
            <summary>
                The limit mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.LimitImpulse1">
            <summary>
                The limit impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.LimitImpulse2">
            <summary>
                The limit impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.State">
            <summary>
                The state
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.GroundAnchorX1">
            <summary>
                Get the first ground anchor.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.GroundAnchorX2">
            <summary>
                Get the second ground anchor.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Length1">
            <summary>
                Get the current length of the segment attached to body1.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Length2">
            <summary>
                Get the current length of the segment attached to body2.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Ratio">
            <summary>
                Get the pulley ratio.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Type">
            <summary>
                Gets or sets the value of the type
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Prev">
            <summary>
                Gets or sets the value of the prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Next">
            <summary>
                Gets or sets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Node1">
            <summary>
                Gets the value of the node 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Node2">
            <summary>
                Gets the value of the node 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Body1">
            <summary>
                Gets or sets the value of the body 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Body2">
            <summary>
                Gets or sets the value of the body 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.IslandFlag">
            <summary>
                Gets or sets the value of the island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.CollideConnected">
            <summary>
                Gets the value of the collide connected
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.LocalCenter1">
            <summary>
                Gets or sets the value of the local center 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.LocalCenter2">
            <summary>
                Gets or sets the value of the local center 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.InvMass1">
            <summary>
                Gets or sets the value of the inv mass 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.InvI1">
            <summary>
                Gets or sets the value of the inv i 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.InvMass2">
            <summary>
                Gets or sets the value of the inv mass 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.InvI2">
            <summary>
                Gets or sets the value of the inv i 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.UserData">
            <summary>
                Gets or sets the value of the user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef">
            <summary>
                Pulley joint definition. This requires two ground anchors,
                two dynamic body anchor points, max lengths for each side,
                and a pulley ratio.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.GroundAnchor1">
            <summary>
                The first ground anchor in world coordinates. This point never moves.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.GroundAnchor2">
            <summary>
                The second ground anchor in world coordinates. This point never moves.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.Length1">
            <summary>
                The a reference length for the segment attached to body1.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.LocalAnchor1">
            <summary>
                The local anchor point relative to body1's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.LocalAnchor2">
            <summary>
                The local anchor point relative to body2's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.MaxLength1">
            <summary>
                The maximum length of the segment attached to body1.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.Ratio">
            <summary>
                The pulley ratio, used to simulate a block-and-tackle.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.Length2">
            <summary>
                The a reference length for the segment attached to body2.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.MaxLength2">
            <summary>
                The maximum length of the segment attached to body2.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.PulleyJointDef.Initialize(Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2,System.Single)">
            Initialize the bodies, anchors, lengths, max lengths, and ratio using the world anchors.
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint">
            <summary>
                A revolute joint constrains to bodies to share a common point while they
                are free to rotate about the point. The relative rotation about the shared
                point is the joint angle. You can limit the relative rotation with
                a joint limit that specifies a lower and upper angle. You can use a motor
                to drive the relative rotation about the shared point. A maximum motor torque
                is provided so that infinite forces are not generated.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.collideConnected">
            <summary>
                The collide connected
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.localAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.localAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.node1">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.node2">
            <summary>
                The node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.referenceAngle">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.body1">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.body2">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.invI1">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.invI2">
            <summary>
                The inv
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.invMass1">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.invMass2">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.islandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.isLimitEnabled">
            <summary>
                The is limit enabled
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.isMotorEnabled">
            <summary>
                The is motor enabled
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.localCenter1">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.localCenter2">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.lowerLimit">
            <summary>
                The lower limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.maxMotorTorque">
            <summary>
                The max motor torque
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.motorMass">
            <summary>
                The motor mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.motorSpeed">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.motorTorque">
            <summary>
                The motor torque
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.state">
            <summary>
                The state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.upperLimit">
            <summary>
                The upper limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.#ctor(Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.LocalAnchor1">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.LocalAnchor2">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.MotorMass">
            <summary>
                The motor mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.MaxMotorTorque">
            <summary>
                The max motor torque
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.ReferenceAngle">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.State">
            <summary>
                The limit state
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.JointAngleX">
            <summary>
                Get the current joint angle in radians.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.JointSpeedX">
            <summary>
                Get the current joint angle speed in radians per second.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.IsLimitEnabled">
            <summary>
                Is the joint limit enabled?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.LowerLimit">
            <summary>
                Get the lower joint limit in radians.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.UpperLimit">
            <summary>
                Get the upper joint limit in radians.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.IsMotorEnabled">
            <summary>
                Is the joint motor enabled?
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.MotorSpeed">
            <summary>
                Get\Set the motor speed in radians per second.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.MotorTorque">
            <summary>
                Get the current motor torque, usually in N-m.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Type">
            <summary>
                Gets or sets the value of the type
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Prev">
            <summary>
                Gets or sets the value of the prev
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Next">
            <summary>
                Gets or sets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Node1">
            <summary>
                Gets the value of the node 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Node2">
            <summary>
                Gets the value of the node 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Body1">
            <summary>
                Gets or sets the value of the body 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Body2">
            <summary>
                Gets or sets the value of the body 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.IslandFlag">
            <summary>
                Gets or sets the value of the island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.CollideConnected">
            <summary>
                Gets the value of the collide connected
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.LocalCenter1">
            <summary>
                Gets or sets the value of the local center 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.LocalCenter2">
            <summary>
                Gets or sets the value of the local center 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.InvMass1">
            <summary>
                Gets or sets the value of the inv mass 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.InvI1">
            <summary>
                Gets or sets the value of the inv i 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.InvMass2">
            <summary>
                Gets or sets the value of the inv mass 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.InvI2">
            <summary>
                Gets or sets the value of the inv i 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Anchor1">
            <summary>
                Gets the value of the anchor 1
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Anchor2">
            <summary>
                Gets the value of the anchor 2
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.UserData">
            <summary>
                Gets or sets the value of the user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param>The inv dt</param>
            <param name="invDt"></param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param>The inv dt</param>
            <param name="invDt"></param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.Alis#Core#Physic#Dynamics#Joint#IJoint#InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.EnableLimit(System.Boolean)">
            <summary>
                Enable/disable the joint limit.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.SetLimits(System.Single,System.Single)">
            <summary>
                Set the joint limits in radians.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.EnableMotor(System.Boolean)">
            <summary>
                Enable/disable the joint motor.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.SetMaxMotorTorque(System.Single)">
            <summary>
                Set the maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.InitVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Inits the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJoint.SolvePositionConstraints(System.Single)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="baumgarte">The baumgarte</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef">
            <summary>
                Revolute joint definition. This requires defining an
                anchor point where the bodies are joined. The definition
                uses local anchor points so that the initial configuration
                can violate the constraint slightly. You also need to
                specify the initial relative angle for joint limits. This
                helps when saving and loading a game.
                The local anchor points are measured from the body's origin
                rather than the center of mass because:
                1. you might not know where the center of mass will be.
                2. if you add/remove shapes from a body and recompute the mass,
                the joints will be broken.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.EnableLimit">
            <summary>
                A flag to enable joint limits.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.EnableMotor">
            <summary>
                A flag to enable the joint motor.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.LowerAngle">
            <summary>
                The lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.MaxMotorTorque">
            <summary>
                The maximum motor torque used to achieve the desired motor speed.
                Usually in N-m.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.MotorSpeed">
            <summary>
                The desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.UpperAngle">
            <summary>
                The upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.LocalAnchor1">
            <summary>
                The local anchor point relative to body1's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.LocalAnchor2">
            <summary>
                The local anchor point relative to body2's origin.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.ReferenceAngle">
            <summary>
                The body2 angle minus body1 angle in the reference state (radians).
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joint.RevoluteJointDef.Initialize(Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Physic.Dynamics.Body.BodyBase,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Initialize the bodies, anchors, and reference angle using the world
                anchor.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.LimitState">
            <summary>
                The limit state enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.LimitState.InactiveLimit">
            <summary>
                The inactive limit limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.LimitState.AtLowerLimit">
            <summary>
                The at lower limit limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.LimitState.AtUpperLimit">
            <summary>
                The at upper limit limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.LimitState.EqualLimits">
            <summary>
                The equal limits limit state
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.World">
            <summary>
                The world class manages all physics entities, dynamic simulation,
                and asynchronous queries.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.#ctor(Alis.Core.Physic.Collisions.Aabb,Alis.Core.Aspect.Math.Vector2,System.Boolean)">
            <summary>
                Construct a world object.
            </summary>
            <param name="worldAabb">A bounding box that completely encompasses all your shapes.</param>
            <param name="gravity">The world gravity vector.</param>
            <param name="allowSleep">Improve performance by not simulating inactive bodies.</param>
        </member>
        <member name="P:Alis.Core.Physic.World.AllowSleep">
            <summary>
                The allow sleep
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.ContactManager">
            <summary>
                The contact manager
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.GroundBodyBase">
            <summary>
                The ground bodyDef
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.BodyList">
            <summary>
                The bodyDef list
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.BroadPhase">
            <summary>
                The broad phase
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.ContactFilter">
            <summary>
                The contact filter
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.ContactList">
            <summary>
                The contact list
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.ContactListener">
            <summary>
                The contact listener
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.ControllerList">
            <summary>
                The controller list
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.InvDt0">
            <summary>
                The inv dt0
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.JointList">
            <summary>
                The joint list
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.WarmStarting">
            <summary>
                The warm starting
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.Gravity">
            <summary>
                Get\Set global gravity vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.AddBody(Alis.Core.Physic.Dynamics.Body.BodyBase)">
            <summary>
                Create a rigid bodyDef given a definition. No reference to the definition
                is retained.
                @warning This function is locked during callbacks.
            </summary>
            <param name="bodyBase"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveBody(Alis.Core.Physic.Dynamics.Body.BodyBase)">
            <summary>
                Destroy a rigid bodyDef given a definition. No reference to the definition
                is retained. This function is locked during callbacks.
                @warning This automatically deletes all associated shapes and joints.
                @warning This function is locked during callbacks.
            </summary>
            <param name="bodyBase"></param>
        </member>
        <member name="M:Alis.Core.Physic.World.AddJoint(Alis.Core.Physic.Dynamics.Joint.IJoint)">
            <summary>
                Create a joint to constrain bodies together. No reference to the definition
                is retained. This may cause the connected bodies to cease colliding.
                @warning This function is locked during callbacks.
            </summary>
            <param name="joint"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveJoint(Alis.Core.Physic.Dynamics.Joint.IJoint)">
            <summary>
                Destroy a joint. This may cause the connected bodies to begin colliding.
                @warning This function is locked during callbacks.
            </summary>
            <param name="joint"></param>
        </member>
        <member name="M:Alis.Core.Physic.World.AddController(Alis.Core.Physic.Dynamics.Controllers.Controller)">
            <summary>
                Adds the controller using the specified def
            </summary>
            <param name="controller">The def</param>
            <returns>The def</returns>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveController(Alis.Core.Physic.Dynamics.Controllers.Controller)">
            <summary>
                Removes the controller using the specified controller
            </summary>
            <param name="controller">The controller</param>
        </member>
        <member name="M:Alis.Core.Physic.World.Step(System.Single,System.Int32,System.Int32)">
            <summary>
                Take a time step. This performs collision detection, integration,
                and constraint solution.
            </summary>
            <param name="dt">The amount of time to simulate, this should not vary.</param>
            <param name="velocityIterations">The velocity iterations.</param>
            <param name="positionIteration">The position iteration.</param>
        </member>
        <member name="M:Alis.Core.Physic.World.Query(Alis.Core.Physic.Collisions.Aabb,Alis.Core.Physic.Dynamics.Fixtures.Fixture[],System.Int32)">
            Query the world for all shapes that potentially overlap the
            provided AABB. You provide a shape pointer buffer of specified
            size. The number of shapes found is returned.
            @param aabb the query box.
            @param shapes a user allocated shape pointer array of size maxCount (or greater).
            @param maxCount the capacity of the shapes array.
            @return the number of shapes found in aabb.
        </member>
        <member name="M:Alis.Core.Physic.World.Solve(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.World.SolveToi(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the toi using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="T:Alis.Core.Aspect.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Base.AlisObject">
            <summary>
                The object base class
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Base.AlisObject.Name">
            <summary>
                The name
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Base.AlisObject.Tag">
            <summary>
                The tag
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Base.AlisObject.IsActive">
            <summary>
                Gets or sets the value of the is active
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.GetHashCode(System.Object)">
            <summary>
                The object base class
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.Equals(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.GetHashCode">
            <summary>
                Get hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.ToString">
            <summary>
                To string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Attributes.SuppressUnmanagedCodeSecurityAttribute">
            <summary>Allows managed code to call into unmanaged code without a stack walk. This class cannot be inherited.</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.ComponentDontExits">
            <summary>
                The component dont exits class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.ComponentInstancieIsTheSame">
            <summary>
                The component instancie is the same class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.ComponentTypeAlredyExist">
            <summary>
                The component type alredy exist class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.GameObjectIsFull">
            <summary>
                The game object is full class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.IndexOutOfBounds">
            <summary>
                The index out of bounds class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.LimitOfComponents">
            <summary>
                The limit of components class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException">
            <summary>
                Exception thrown by SFML whenever loading a resource fails
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor">
            <summary>
                Default constructor (unknown error)
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String)">
            <summary>
                Failure to load a resource from memory
            </summary>
            <param name="resourceName">Name of the resource</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String,System.Exception)">
            <summary>
                Failure to load a resource from memory
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="innerException">Exception which is the cause ofthe current exception</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String,System.String)">
            <summary>
                Failure to load a resource from a file
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="filename">Path of the file</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Failure to load a resource from a file
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="filename">Path of the file</param>
            <param name="innerException">Exception which is the cause ofthe current exception</param>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.MaxSceneGame">
            <summary>
                The max scene game class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.NullArgumentException">
            <summary>
                The null argument exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.ObjectBase">
            <summary>
                The ObjectBase class is an abstract base for every
                SFML object. It's meant for internal use only
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.ObjectBase.myCPointer">
            <summary>
                The zero
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.ObjectBase.#ctor(System.IntPtr)">
            <summary>
                Construct the object from a pointer to the C library object
            </summary>
            <param name="cPointer">Internal pointer to the object in the C libraries</param>
        </member>
        <member name="P:Alis.Core.Aspect.Base.ObjectBase.CPointer">
            <summary>
                Access to the internal pointer of the object.
                For internal use only
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.ObjectBase.Dispose">
            <summary>
                Explicitly dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.ObjectBase.Finalize">
            <summary>
                Dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.ObjectBase.Dispose(System.Boolean)">
            <summary>
                Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.ObjectBase.Destroy(System.Boolean)">
            <summary>
                Destroy the object (implementation is left to each derived class)
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Settings.Csfml">
            <summary>
                The csfml class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.Audio">
            <summary>
                The audio
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.Graphics">
            <summary>
                The graphics
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.System">
            <summary>
                The system
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.Window">
            <summary>
                The window
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Settings.Time">
            <summary>
                This class represents a time value
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Time.Zero">
            <summary>
                Predefined "zero" time value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.FromSeconds(System.Single)">
            <summary>
                Construct a time value from a number of seconds
            </summary>
            <param name="seconds">Number of seconds</param>
            <returns>Time value constructed from the amount of seconds</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.FromMilliseconds(System.Int32)">
            <summary>
                Construct a time value from a number of milliseconds
            </summary>
            <param name="milliseconds">Number of milliseconds</param>
            <returns>Time value constructed from the amount of milliseconds</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.FromMicroseconds(System.Int64)">
            <summary>
                Construct a time value from a number of microseconds
            </summary>
            <param name="microseconds">Number of microseconds</param>
            <returns>Time value constructed from the amount of microseconds</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.AsSeconds">
            <summary>
                Returns the time value as a number of seconds
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.AsMilliseconds">
            <summary>
                Returns the time value as a number of milliseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.AsMicroseconds">
            <summary>
                Returns the time value as a number of microseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Equality(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Compare two times and checks if they are equal
            </summary>
            <returns>Times are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Inequality(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Compare two times and checks if they are not equal
            </summary>
            <returns>Times are not equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.Equals(System.Object)">
            <summary>
                Compare time and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and time are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.Equals(Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Compare two times and checks if they are equal
            </summary>
            <param name="other">Time to check</param>
            <returns>times are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_LessThan(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of &lt; operator to compare two time values
            </summary>
            <returns>True if left is lesser than right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_LessThanOrEqual(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of &lt;= operator to compare two time values
            </summary>
            <returns>True if left is lesser or equal than right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_GreaterThan(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of &gt; operator to compare two time values
            </summary>
            <returns>True if left is greater than right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_GreaterThanOrEqual(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of &gt;= operator to compare two time values
            </summary>
            <returns>True if left is greater or equal than right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Subtraction(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary - operator to subtract two time values
            </summary>
            <returns>Difference of the two times values</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Addition(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary + operator to add two time values
            </summary>
            <returns>Sum of the two times values</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Multiply(Alis.Core.Aspect.Base.Settings.Time,System.Single)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Multiply(Alis.Core.Aspect.Base.Settings.Time,System.Int64)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Multiply(System.Single,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Multiply(System.Int64,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Division(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Division(Alis.Core.Aspect.Base.Settings.Time,System.Single)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Division(Alis.Core.Aspect.Base.Settings.Time,System.Int64)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Modulus(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary % operator to compute remainder of a time value
            </summary>
            <returns>left modulo of right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Time.microseconds">
            <summary>
                The microseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfSeconds(System.Single)">
            <summary>
                Sfs the seconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfMilliseconds(System.Int32)">
            <summary>
                Sfs the milliseconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfMicroseconds(System.Int64)">
            <summary>
                Sfs the microseconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfTime_asSeconds(Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Sfs the time as seconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfTime_asMilliseconds(Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Sfs the time as milliseconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfTime_asMicroseconds(Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Sfs the time as microseconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The long</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Data.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.IBuild`1">
            <summary>
                The build interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.IBuild`1.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The origin</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.IBuilder`1">
            <summary>
                The builder interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.IBuilder`1.Builder">
            <summary>
                Builders
            </summary>
            <returns>The</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.IBuilder`1.Builder``1">
            <summary>
            Builder static 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAdd`3">
            <summary>
                The add interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAdd`3.Add``1(`2)">
            <summary>
                Adds the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAddComponent`2">
            <summary>
                The add component class
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAddComponent`2.AddComponent``1(System.Func{``0,`1})">
            <summary>
                Adds the component using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAddComponent`2.AddComponent``1(``0)">
            <summary>
                Adds the component using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAuthor`2">
            <summary>
                The author interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAuthor`2.Author(`1)">
            <summary>
                Authors the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IConfiguration`2">
            <summary>
                The configuration interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IConfiguration`2.Configuration(`1)">
            <summary>
                Configurations the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ICreate`2">
            <summary>
                The create interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ICreate`2.Create(`1)">
            <summary>
                Creates the obj
            </summary>
            <param name="obj">The obj</param>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDebug`2">
            <summary>
                The debug interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDebug`2.Debug(`1)">
            <summary>
                Debugs the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDelete`1">
            <summary>
                The delete interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDelete`1.Delete">
            <summary>
                Deletes this instance
            </summary>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDepth`2">
            <summary>
                The depth interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDepth`2.Depth(`1)">
            <summary>
                Depths the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDescription`2">
            <summary>
                The description interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDescription`2.Description(`1)">
            <summary>
                Descriptions the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IFile`2">
            <summary>
                The file interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IFile`2.File(`1)">
            <summary>
                Files the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IFilePath`2">
            <summary>
                The file path interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IFilePath`2.FilePath(`1)">
            <summary>
                Files the path using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IGeneral`2">
            <summary>
                The general interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IGeneral`2.General(`1)">
            <summary>
                Generals the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IHas`2">
            <summary>
                The has interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IHas`2.Has(`1)">
            <summary>
                Hases the obj
            </summary>
            <param name="obj">The obj</param>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIs`3">
            <summary>
                The is interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIs`3.Is``1(`2)">
            <summary>
                Ises the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsActive`2">
            <summary>
                The is active interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsActive`2.IsActive(`1)">
            <summary>
                Ises the active using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsDynamic`2">
            <summary>
                The is dynamic interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsDynamic`2.IsDynamic">
            <summary>
                Ises the dynamic
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsDynamic`2.IsDynamic(`1)">
            <summary>
                Ises the dynamic using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsStatic`2">
            <summary>
                The is static interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsStatic`2.IsStatic">
            <summary>
                Ises the static
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsStatic`2.IsStatic(`1)">
            <summary>
                Ises the static using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsTrigger`2">
            <summary>
                The is trigger interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsTrigger`2.IsTrigger">
            <summary>
                Ises the trigger
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsTrigger`2.IsTrigger(`1)">
            <summary>
                Ises the trigger using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IManager`3">
            <summary>
                The manager interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IManager`3.Manager``1(`2)">
            <summary>Withes the specified value.</summary>
            <param name="value">The value.</param>
            <returns>Return that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IManagerOf`3">
            <summary>
                The manager of interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IManagerOf`3.ManagerOf``1(`2)">
            <summary>
                Managers the of using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IMute`2">
            <summary>
                The mute interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IMute`2.Mute(`1)">
            <summary>
                Mutes the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IName`2">
            <summary>
                The name interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IName`2.Name(`1)">
            <summary>
                Names the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IPlayOnAwake`2">
            <summary>
                The play on awake interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IPlayOnAwake`2.PlayOnAwake(`1)">
            <summary>
                Plays the on awake using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IPosition2D`3">
            <summary>
                The position interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IPosition2D`3.Position(`1,`2)">
            <summary>
                Positions the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IResolution`3">
            <summary>
                The resolution interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IResolution`3.Resolution(`1,`2)">
            <summary>
                Resolutions the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IRotation`2">
            <summary>
                The rotation interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IRotation`2.Rotation(`1)">
            <summary>
                Rotations the angle
            </summary>
            <param name="angle">The angle</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IRun">
            <summary>
                The run interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IRun.Run">
            <summary>
                Runs this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IScale2D`3">
            <summary>
                The scale interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IScale2D`3.Scale(`1,`2)">
            <summary>
                Scales the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IScreenMode`2">
            <summary>
                The screen mode interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IScreenMode`2.ScreenMode(`1)">
            <summary>
                Screens the mode using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISet`3">
            <summary>
                The set interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISet`3.Set``1(`2)">
            <summary>
                Sets the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISetAudioClip`2">
            <summary>
                The set audio clip interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISetAudioClip`2.SetAudioClip(`1)">
            <summary>
                Sets the audio clip using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISetMax`3">
            <summary>
                The set max interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISetMax`3.SetMax``1(`2)">
            <summary>
                Sets the max using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISetTexture`2">
            <summary>
                The texture interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISetTexture`2.SetTexture(`1)">
            <summary>
                Textures the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISettings`2">
            <summary>
                The settings interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISettings`2.Settings(`1)">
            <summary>
                Settingses the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISize`3">
            <summary>
                The size interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISize`3.Size(`1,`2)">
            <summary>
                Sizes the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ITime`2">
            <summary>
                The time interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ITime`2.Time(`1)">
            <summary>
                Times the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ITransform`2">
            <summary>
                The transform interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ITransform`2.Transform(`1)">
            <summary>
                Transforms the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IUpdate`2">
            <summary>
                The update interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IUpdate`2.Update(`1)">
            <summary>
                Updates the obj
            </summary>
            <param name="obj">The obj</param>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IVolume`2">
            <summary>
                The volume interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IVolume`2.Volume(`1)">
            <summary>
                Volumes the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWhere`2">
            <summary>
                The where interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWhere`2.Where(`1)">
            <summary>Wheres the specified value.</summary>
            <param name="value">The value.</param>
            <returns>
                <br />
            </returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWindow`2">
            <summary>
                The window interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWindow`2.Window(`1)">
            <summary>
                Windows the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWith`3">
            <summary>
                Simple comment
            </summary>
            <typeparam name="TBuilder">the builder</typeparam>
            <typeparam name="TArgument">the argument</typeparam>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWith`3.With``1(`2)">
            <summary>Withes the specified value.</summary>
            <param name="value">The value.</param>
            <returns>Return that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWithName`2">
            <summary>Define the word "Name" </summary>
            <typeparam name="TBuilder">The type of the uilder.</typeparam>
            <typeparam name="TArgument">The type of the rgument.</typeparam>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWithName`2.WithName(`1)">
            <summary>Withes the name.</summary>
            <param name="value">The value.</param>
            <returns>Return the value that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWithTag`2">
            <summary>
                Define the word "Tag"
            </summary>
            <typeparam name="TBuilder">The type of the uilder.</typeparam>
            <typeparam name="TArgument">The type of the rgument.</typeparam>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWithTag`2.WithTag(`1)">
            <summary>Withes the tag.</summary>
            <param name="value">The value.</param>
            <returns>return the object that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.Box2DxDebug">
            <summary>
                The box dx debug class
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Box2DxDebug.Assert(System.Boolean)">
            <summary>
                Asserts the condition
            </summary>
            <param name="condition">The condition</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Box2DxDebug.Assert(System.Boolean,System.String)">
            <summary>
                Asserts the condition
            </summary>
            <param name="condition">The condition</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Box2DxDebug.Assert(System.Boolean,System.String,System.String)">
            <summary>
                Asserts the condition
            </summary>
            <param name="condition">The condition</param>
            <param name="message">The message</param>
            <param name="detailMessage">The detail message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Box2DxDebug.ThrowBox2DxException(System.String)">
            <summary>
                Throws the box 2 dx exception using the specified message
            </summary>
            <param name="message">The message</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.Color">
            <summary>
                Color for debug drawing. Each value has the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.Color.r">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.Color.g">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.Color.b">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Aspect.Logging.Color" /> class
            </summary>
            <param name="r">The </param>
            <param name="g">The </param>
            <param name="b">The </param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Color.Set(System.Single,System.Single,System.Single)">
            <summary>
                Sets the r
            </summary>
            <param name="r">The </param>
            <param name="g">The </param>
            <param name="b">The </param>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.Logger">
            <summary>
                The logger class
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Log(System.String)">
            <summary>
                Logs the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Trace(System.String)">
            <summary>
                Traces the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.LogLevel">
            <summary>
                The log level enum
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Info">
            <summary>
                The info log level
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Log">
            <summary>
                The log log level
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Normal">
            <summary>
                The normal log level
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Critical">
            <summary>
                The critical log level
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Constant">
            <summary>
                The math constants class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Pi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.TwoPi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.MaxFloat">
            <summary>
                The max value
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Epsilon">
            <summary>
                The epsilon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Euler">
            <summary>
                The euler
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.E">
            <summary>Represents the mathematical constant e(2.71828175).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Log10E">
            <summary>Represents the log base ten of e(0.4342945).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Log2E">
            <summary>Represents the log base two of e(1.442695).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.PiOver2">
            <summary>Represents the value of pi divided by two(1.57079637).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.PiOver4">
            <summary>Represents the value of pi divided by four(0.7853982).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Tau">
            <summary>Represents the value of pi times two(6.28318548). This is an alias of TwoPi.</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Helper">
            <summary>
                The math class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.UshrtMax">
            <summary>
                The ushrt max
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.UcharMax">
            <summary>
                The uchar max
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.RandLimit">
            <summary>
                The rand limit
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.SRnd">
            <summary>
                The random
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.IsValid(System.Single)">
            <summary>
                This function is used to ensure that a floating point number is
                not a NaN or infinity.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.InvSqrt(System.Single)">
            <summary>
                This is a approximate yet fast inverse square-root.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Sqrt(System.Single)">
            <summary>
                Sqrts the x
            </summary>
            <param name="x">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Random">
            <summary>
                Random number in range [-1,1]
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Random(System.Single,System.Single)">
            <summary>
                Random floating point number in range [lo, hi]
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.NextPowerOfTwo(System.UInt32)">
            <summary>
                "Next Largest Power of 2
                Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm
                that recursively "folds" the upper bits into the lower bits. This process yields a bit vector with
                the same most significant 1 as x, but all 1's below it. Adding 1 to that value yields the next
                largest power of 2. For a 32-bit value:"
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.IsPowerOfTwo(System.UInt32)">
            <summary>
                Describes whether is power of two
            </summary>
            <param name="x">The </param>
            <returns>The result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Abs(System.Single)">
            <summary>
                Abses the a
            </summary>
            <param name="a">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Abs(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Abses the a
            </summary>
            <param name="a">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Abs(Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                Abses the a
            </summary>
            <param name="a">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Min(System.Single,System.Single)">
            <summary>
                Mins the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Min(System.Int32,System.Int32)">
            <summary>
                Mins the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Min(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Mins the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Max(System.Single,System.Single)">
            <summary>
                Maxes the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Max(System.Int32,System.Int32)">
            <summary>
                Maxes the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Max(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Maxes the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Clamp(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Swap``1(``0@,``0@)">
            <summary>
                Swaps the a
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="a">The </param>
            <param name="b">The </param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Multiply a matrix times a vector. If a rotation matrix is provided,
                then this transforms the vector from one frame to another.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.MulT(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Multiply a matrix transpose times a vector. If a rotation matrix is provided,
                then this transforms the vector from one frame to another (inverse transform).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                A * B
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.MulT(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                A^T * B
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Muls the t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.MulT(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Muls the t using the specified t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.Matrix33,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Multiply a matrix times a vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Atan2(System.Single,System.Single)">
            <summary>
                Atans the 2 using the specified y
            </summary>
            <param name="y">The </param>
            <param name="x">The </param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Helper.Convert">
            <summary>
                The convert
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.Convert.x">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.Convert.i">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Matrix22">
            <summary>
                A 2-by-2 matrix. Stored in column-major order.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Matrix22.Col1">
            <summary>
                The col
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Matrix22.Col2">
            <summary>
                The col
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.#ctor(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Construct this matrix using columns.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct this matrix using scalars.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.#ctor(System.Single)">
            <summary>
                Construct this matrix using an angle.
                This matrix becomes an orthonormal rotation matrix.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.Set(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Initialize this matrix using columns.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.Set(System.Single)">
            <summary>
                Initialize this matrix using an angle.
                This matrix becomes an orthonormal rotation matrix.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.SetIdentity">
            <summary>
                Set this to the identity matrix.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.SetZero">
            <summary>
                Set this matrix to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.GetAngle">
            <summary>
                Extract the angle from this matrix (assumed to be a rotation matrix).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.GetInverse">
            <summary>
                Compute the inverse of this matrix, such that inv(A) * A = identity.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.Solve(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient
                than computing the inverse in one-shot cases.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix22.Identity">
            <summary>
                Gets the value of the identity
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.op_Addition(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Matrix33">
            <summary>
                A 3-by-3 matrix. Stored in column-major order.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.#ctor(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Construct this matrix using columns.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.SetZero">
            <summary>
                Set this matrix to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.Solve33(Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient
                than computing the inverse in one-shot cases.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.Solve22(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient
                than computing the inverse in one-shot cases. Solve only the upper
                2-by-2 matrix equation.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix33.Col1">
            <summary>
                The col
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix33.Col2">
            <summary>
                The col
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix33.Col3">
            <summary>
                The col
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Position.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Position.A">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Settings">
            <summary>
                The settings class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.FltEpsilon">
            <summary>
                The flt epsilon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.FltEpsilonSquared">
            <summary>
                The flt epsilon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.FltMax">
            <summary>
                The flt max
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.FORCE_SCALE(System.Single)">
            <summary>
                Forces the scale using the specified x
            </summary>
            <param name="x">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.FORCE_INV_SCALE(System.Single)">
            <summary>
                Forces the inv scale using the specified x
            </summary>
            <param name="x">The </param>
            <returns>The </returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.Pi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxManifoldPoints">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxPolygonVertices">
            <summary>
                The max polygon vertices
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxProxies">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxPairs">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.LinearSlop">
            <summary>
                A small length used as a collision and constraint tolerance. Usually it is
                chosen to be numerically significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.AngularSlop">
            <summary>
                A small angle used as a collision and constraint tolerance. Usually it is
                chosen to be numerically significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.PolygonRadius">
            <summary>
                The radius of the polygon/edge shape skin. This should not be modified. Making
                this smaller means polygons will have and insufficient for continuous collision.
                Making it larger may create artifacts for vertex collision.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.ToiSlop">
            <summary>
                Continuous collision detection (CCD) works with core, shrunken shapes. This is amount
                by which shapes are automatically shrunk to work with CCD.
                This must be larger than LinearSlop.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxToiContactsPerIsland">
            <summary>
                Maximum number of contacts to be handled to solve a TOI island.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxToiJointsPerIsland">
            <summary>
                Maximum number of joints to be handled to solve a TOI island.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.VelocityThreshold">
            <summary>
                A velocity threshold for elastic collisions. Any collision with a relative linear
                velocity below this threshold will be treated as inelastic.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxLinearCorrection">
            <summary>
                The maximum linear position correction used when solving constraints.
                This helps to prevent overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxAngularCorrection">
            <summary>
                The maximum angular position correction used when solving constraints.
                This helps to prevent overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxLinearVelocity">
            <summary>
                The maximum linear velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxLinearVelocitySquared">
            <summary>
                The max linear velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxAngularVelocity">
            <summary>
                The maximum angular velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxAngularVelocitySquared">
            <summary>
                The max angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxTranslation">
            <summary>
                The maximum linear velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxTranslationSquared">
            <summary>
                The max translation
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxRotation">
            <summary>
                The maximum angular velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxRotationSquared">
            <summary>
                The max rotation
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.ContactBaumgarte">
            <summary>
                This scale factor controls how fast overlap is resolved. Ideally this would be 1 so
                that overlap is removed in one time step. However using values close to 1 often lead to overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.TimeToSleep">
            <summary>
                The time that a body must be still before it will go to sleep.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.LinearSleepTolerance">
            <summary>
                A body cannot sleep if its linear velocity is above this tolerance.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.AngularSleepTolerance">
            <summary>
                A body cannot sleep if its angular velocity is above this tolerance.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.MixFriction(System.Single,System.Single)">
            <summary>
                Friction mixing law. Feel free to customize this.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.MixRestitution(System.Single,System.Single)">
            <summary>
                Restitution mixing law. Feel free to customize this.
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Bvec2">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec2" /> is a struct represent a glsl bvec2 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Bvec2.#ctor(System.Boolean,System.Boolean)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec2" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec2.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec2.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Bvec3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec3" /> is a struct represent a glsl bvec3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Bvec3.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec3" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec3.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec3.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec3.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Bvec4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec4" /> is a struct represent a glsl bvec4 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Bvec4.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec4" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="w">W coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.W">
            <summary>Projective/Homogenous component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.FloatRect">
            <summary>
                IntRect is an utility class for manipulating 2D rectangles
                with float coordinates
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the rectangle from its coordinates
            </summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the rectangle from position and size
            </summary>
            <param name="position">Position of the top-left corner of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Contains(System.Single,System.Single)">
            <summary>
                Check if a point is inside the rectangle's area
            </summary>
            <param name="x">X coordinate of the point to test</param>
            <param name="y">Y coordinate of the point to test</param>
            <returns>True if the point is inside</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Intersects(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Intersects(Alis.Core.Aspect.Math.SFML.FloatRect,Alis.Core.Aspect.Math.SFML.FloatRect@)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <param name="overlap">Rectangle to be filled with overlapping rect</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Equals(System.Object)">
            <summary>
                Compare rectangle and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and rectangle are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Equals(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Compare two rectangles and checks if they are equal
            </summary>
            <param name="other">Rectangle to check</param>
            <returns>Rectangles are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.op_Equality(Alis.Core.Aspect.Math.SFML.FloatRect,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Operator == overload ; check rect equality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 == r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.op_Inequality(Alis.Core.Aspect.Math.SFML.FloatRect,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Operator != overload ; check rect inequality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 != r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.op_Explicit(Alis.Core.Aspect.Math.SFML.FloatRect)~Alis.Core.Aspect.Math.SFML.IntRect">
            <summary>
                Explicit casting to another rectangle type
            </summary>
            <param name="r">Rectangle being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Left">
            <summary>Left coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Top">
            <summary>Top coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Width">
            <summary>Width of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Height">
            <summary>Height of the rectangle</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.IntRect">
            <summary>
                IntRect is an utility class for manipulating 2D rectangles
                with integer coordinates
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Construct the rectangle from its coordinates
            </summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.#ctor(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Construct the rectangle from position and size
            </summary>
            <param name="position">Position of the top-left corner of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Contains(System.Int32,System.Int32)">
            <summary>
                Check if a point is inside the rectangle's area
            </summary>
            <param name="x">X coordinate of the point to test</param>
            <param name="y">Y coordinate of the point to test</param>
            <returns>True if the point is inside</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Intersects(Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Intersects(Alis.Core.Aspect.Math.SFML.IntRect,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <param name="overlap">Rectangle to be filled with overlapping rect</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Equals(System.Object)">
            <summary>
                Compare rectangle and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and rectangle are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Equals(Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Compare two rectangles and checks if they are equal
            </summary>
            <param name="other">Rectangle to check</param>
            <returns>Rectangles are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.op_Equality(Alis.Core.Aspect.Math.SFML.IntRect,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Operator == overload ; check rect equality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 == r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.op_Inequality(Alis.Core.Aspect.Math.SFML.IntRect,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Operator != overload ; check rect inequality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 != r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.op_Explicit(Alis.Core.Aspect.Math.SFML.IntRect)~Alis.Core.Aspect.Math.SFML.FloatRect">
            <summary>
                Explicit casting to another rectangle type
            </summary>
            <param name="r">Rectangle being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Left">
            <summary>Left coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Top">
            <summary>Top coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Width">
            <summary>Width of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Height">
            <summary>Height of the rectangle</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Ivec2">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" /> is a struct represent a glsl ivec2 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec2.op_Implicit(Alis.Core.Aspect.Math.SFML.Vector2I)~Alis.Core.Aspect.Math.SFML.Ivec2">
            <summary>
                Implicit cast from <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2I" /> to <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" />
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec2.#ctor(System.Int32,System.Int32)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec2.#ctor(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" /> from a standard SFML <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2I" />
            </summary>
            <param name="vec">A standard SFML 2D integer vector</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec2.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec2.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Ivec3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec3" /> is a struct represent a glsl ivec3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec3" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec3.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec3.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec3.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Ivec4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec4" /> is a struct represent a glsl ivec4 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec4" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="w">W coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.W">
            <summary>Projective/Homogenous component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Mat3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Mat3" /> is a struct representing a glsl mat3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Mat3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Mat3" /> from its components
            </summary>
            <remarks>
                Arguments are in row-major order
            </remarks>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Mat3.array">
            <summary>
                The array
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Mat4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Mat4" /> is a struct representing a glsl mat4 value
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.SFML.Mat4.Identity">
            <summary>
                Provides easy-access to an identity matrix
            </summary>
            <remarks>
                Keep in mind that a Mat4 cannot be modified after construction
            </remarks>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Mat4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Mat4" /> from its components
            </summary>
            <remarks>
                Arguments are in row-major order
            </remarks>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Mat4.array">
            <summary>
                The array
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vec2">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" /> is a struct represent a glsl vec2 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec2.op_Implicit(Alis.Core.Aspect.Math.SFML.Vector2F)~Alis.Core.Aspect.Math.SFML.Vec2">
            <summary>
                Implicit cast from <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2F" /> to <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" />
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec2.#ctor(System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec2.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" /> from a standard SFML <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2F" />
            </summary>
            <param name="vec">A standard SFML 2D vector</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec2.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec2.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vec3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" /> is a struct represent a glsl vec3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec3.op_Implicit(Alis.Core.Aspect.Math.SFML.Vector3F)~Alis.Core.Aspect.Math.SFML.Vec3">
            <summary>
                Implicit cast from <see cref="T:Alis.Core.Aspect.Math.SFML.Vector3F" /> to <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" />
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec3.#ctor(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" /> from a standard SFML <see cref="T:Alis.Core.Aspect.Math.SFML.Vector3F" />
            </summary>
            <param name="vec">A standard SFML 3D vector</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec3.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec3.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec3.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vec4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Vec4" /> is a struct represent a glsl vec4 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec4" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="w">W coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.W">
            <summary>Projective/Homogenous component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector2F">
            <summary>
                Vector2f is an utility class for manipulating 2 dimensional
                vectors with float components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.#ctor(System.Single,System.Single)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_UnaryNegation(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Addition(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector2F,System.Single)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Multiply(System.Single,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Division(Alis.Core.Aspect.Math.SFML.Vector2F,System.Single)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Equality(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.Equals(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2F)~Alis.Core.Aspect.Math.SFML.Vector2I">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2F)~Alis.Core.Aspect.Math.SFML.Vector2U">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2F.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2F.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector2I">
            <summary>
                Vector2i is an utility class for manipulating 2 dimensional
                vectors with integer components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.#ctor(System.Int32,System.Int32)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_UnaryNegation(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Addition(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector2I,System.Int32)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Multiply(System.Int32,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Division(Alis.Core.Aspect.Math.SFML.Vector2I,System.Int32)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Equality(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.Equals(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2I)~Alis.Core.Aspect.Math.SFML.Vector2F">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2I)~Alis.Core.Aspect.Math.SFML.Vector2U">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2I.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2I.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector2U">
            <summary>
                Vector2u is an utility class for manipulating 2 dimensional
                vectors with unsigned integer components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Addition(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector2U,System.UInt32)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Multiply(System.UInt32,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Division(Alis.Core.Aspect.Math.SFML.Vector2U,System.UInt32)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Equality(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.Equals(Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2U)~Alis.Core.Aspect.Math.SFML.Vector2I">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2U)~Alis.Core.Aspect.Math.SFML.Vector2F">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2U.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2U.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector3F">
            <summary>
                Vector3f is an utility class for manipulating 3 dimensional
                vectors with float components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_UnaryNegation(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Addition(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector3F,System.Single)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Multiply(System.Single,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Division(Alis.Core.Aspect.Math.SFML.Vector3F,System.Single)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Equality(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.Equals(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector3F.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector3F.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector3F.Z">
            <summary>Z (depth) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Sweep">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.LocalCenter">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.C0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.C">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.A0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.A">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.T0">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Sweep.GetTransform(Alis.Core.Aspect.Math.XForm@,System.Single)">
            <summary>
                Get the interpolated transform at a specific time.
            </summary>
            <param name="xf">The xf.</param>
            <param name="alpha">Alpha is a factor in [0,1], where 0 indicates t0.</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Sweep.Advance(System.Single)">
            <summary>
                Advance the sweep forward, yielding a new initial state.
            </summary>
            <param name="t">The new initial time.</param>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Vector2">
            <summary>
                A 2D column vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Equals(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="other">The other</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Equals(System.Object)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="obj">The obj</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.GetHashCode">
            <summary>
                Gets the hash code
            </summary>
            <returns>The int</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector2.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector2.Y">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Vector2.Item(System.Int32)">
            <summary>
                The assert
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.#ctor(System.Single)">
            <summary>
                Construct using coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
                Construct using coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.SetZero">
            <summary>
                Set this vector to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Set(System.Single,System.Single)">
            <summary>
                Set this vector to some specified coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Set(System.Single)">
            <summary>
                Sets the xy
            </summary>
            <param name="xy">The xy</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Length">
            <summary>
                Get the length of this vector (the norm).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.LengthSquared">
            <summary>
                Get the length squared. For performance, use this instead of
                Length (if possible).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Normalize">
            <summary>
                Convert this vector into a unit vector. Returns the length.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Vector2.IsValid">
            <summary>
                Does this vector contain finite coordinates?
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_UnaryNegation(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Negate this vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Addition(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Hello
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Subtraction(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Hello
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Multiply(Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                operator
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Multiply(System.Single,Alis.Core.Aspect.Math.Vector2)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Equality(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Inequality(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Vector2.Zero">
            <summary>
                Gets the value of the zero
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Dot(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Peform the dot product on two vectors.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Cross(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Perform the cross product on two vectors. In 2D this produces a scalar.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Cross(Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                Perform the cross product on a vector and a scalar.
                In 2D this produces a vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Cross(System.Single,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Perform the cross product on a scalar and a vector.
                In 2D this produces a vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Distance(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Distances the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.DistanceSquared(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Distances the squared using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Vector3">
            <summary>
                A 2D column vector with 3 elements.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Construct using coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.SetZero">
            <summary>
                Set this vector to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.Set(System.Single,System.Single,System.Single)">
            <summary>
                Set this vector to some specified coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.Dot(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Perform the dot product on two vectors.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.Cross(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Perform the cross product on two vectors.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_UnaryNegation(Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Negate this vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Addition(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Add two vectors component-wise.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Subtraction(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Subtract two vectors component-wise.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Multiply(Alis.Core.Aspect.Math.Vector3,System.Single)">
            <summary>
                Multiply this vector by a scalar.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Multiply(System.Single,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Multiply this vector by a scalar.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector3.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector3.Y">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector3.Z">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Velocity">
            <summary>
                The velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Velocity.V">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Velocity.W">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.XForm">
            <summary>
                A transform contains translation and rotation.
                It is used to represent the position and orientation of rigid frames.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.XForm.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.XForm.R">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.#ctor(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Aspect.Math.XForm" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.SetIdentity">
            <summary>
                Set this to the identity transform.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.Set(Alis.Core.Aspect.Math.Vector2,System.Single)">
            Set this based on the position and angle.
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.GetAngle">
            Calculate the angle that the rotation matrix represents.
        </member>
        <member name="P:Alis.Core.Aspect.Math.XForm.Identity">
            <summary>
                Gets the value of the identity
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream">
            <summary>
                Structure that contains InputStream callbacks
                (directly maps to a CSFML sfInputStream)
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.ReadCallbackType">
            <summary>
                Type of callback to read data from the current stream
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.SeekCallbackType">
            <summary>
                Type of callback to seek the current stream's position
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.TellCallbackType">
            <summary>
                Type of callback to return the current stream's position
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.GetSizeCallbackType">
            <summary>
                Type of callback to return the current stream's size
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.Read">
            <summary>
                Function that is called to read data from the stream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.Seek">
            <summary>
                Function that is called to seek the stream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.Tell">
            <summary>
                Function that is called to return the positon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.GetSize">
            <summary>
                Function that is called to return the size
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor">
            <summary>
                Adapts a System.IO.Stream to be usable as a SFML InputStream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.myInputStream">
            <summary>
                The my input stream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.myInputStreamPtr">
            <summary>
                The my input stream ptr
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.myStream">
            <summary>
                The my stream
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.#ctor(System.IO.Stream)">
            <summary>
                Construct from a System.IO.Stream
            </summary>
            <param name="stream">Stream to adapt</param>
        </member>
        <member name="P:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.InputStreamPtr">
            <summary>
                The pointer to the CSFML InputStream structure
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Dispose">
            <summary>
                Explicitly dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Finalize">
            <summary>
                Dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Dispose(System.Boolean)">
            <summary>
                Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Read(System.IntPtr,System.Int64,System.IntPtr)">
            <summary>
                Called to read from the stream
            </summary>
            <param name="data">Where to copy the read bytes</param>
            <param name="size">Size to read, in bytes</param>
            <param name="userData">User data -- unused</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Seek(System.Int64,System.IntPtr)">
            <summary>
                Called to set the read position in the stream
            </summary>
            <param name="position">New read position</param>
            <param name="userData">User data -- unused</param>
            <returns>Actual position</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Tell(System.IntPtr)">
            <summary>
                Get the current read position in the stream
            </summary>
            <param name="userData">User data -- unused</param>
            <returns>Current position in the stream</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.GetSize(System.IntPtr)">
            <summary>
                Called to get the total size of the stream
            </summary>
            <param name="userData">User data -- unused</param>
            <returns>Number of bytes in the stream</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Security.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Thread.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Time.TimeStep">
            <summary>
                The time step
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.Dt">
            <summary>
                The dt
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.InvDt">
            <summary>
                The inv dt
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.DtRatio">
            <summary>
                The dt ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.VelocityIterations">
            <summary>
                The velocity iterations
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.PositionIterations">
            <summary>
                The position iterations
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.WarmStarting">
            <summary>
                The warm starting
            </summary>
        </member>
    </members>
</doc>
