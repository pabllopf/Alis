<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alis.Core.Aspect</name>
    </assembly>
    <members>
        <member name="T:Alis.Core.Aspect.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Base.AlisObject">
            <summary>
                The object base class
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Base.AlisObject.Name">
            <summary>
                The name
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Base.AlisObject.Tag">
            <summary>
                The tag
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Base.AlisObject.IsActive">
            <summary>
                Gets or sets the value of the is active
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.GetHashCode(System.Object)">
            <summary>
                The object base class
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.Equals(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.GetHashCode">
            <summary>
                Get hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.ToString">
            <summary>
                To string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Attributes.SuppressUnmanagedCodeSecurityAttribute">
            <summary>Allows managed code to call into unmanaged code without a stack walk. This class cannot be inherited.</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.ComponentDontExits">
            <summary>
                The component dont exits class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.ComponentInstancieIsTheSame">
            <summary>
                The component instancie is the same class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.ComponentTypeAlredyExist">
            <summary>
                The component type alredy exist class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.GameObjectIsFull">
            <summary>
                The game object is full class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.IndexOutOfBounds">
            <summary>
                The index out of bounds class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.LimitOfComponents">
            <summary>
                The limit of components class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException">
            <summary>
                Exception thrown by SFML whenever loading a resource fails
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor">
            <summary>
                Default constructor (unknown error)
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String)">
            <summary>
                Failure to load a resource from memory
            </summary>
            <param name="resourceName">Name of the resource</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String,System.Exception)">
            <summary>
                Failure to load a resource from memory
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="innerException">Exception which is the cause ofthe current exception</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String,System.String)">
            <summary>
                Failure to load a resource from a file
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="filename">Path of the file</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Failure to load a resource from a file
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="filename">Path of the file</param>
            <param name="innerException">Exception which is the cause ofthe current exception</param>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.MaxSceneGame">
            <summary>
                The max scene game class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.NullArgumentException">
            <summary>
                The null argument exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.ObjectBase">
            <summary>
                The ObjectBase class is an abstract base for every
                SFML object. It's meant for internal use only
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.ObjectBase.myCPointer">
            <summary>
                The zero
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.ObjectBase.#ctor(System.IntPtr)">
            <summary>
                Construct the object from a pointer to the C library object
            </summary>
            <param name="cPointer">Internal pointer to the object in the C libraries</param>
        </member>
        <member name="P:Alis.Core.Aspect.Base.ObjectBase.CPointer">
            <summary>
                Access to the internal pointer of the object.
                For internal use only
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.ObjectBase.Dispose">
            <summary>
                Explicitly dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.ObjectBase.Finalize">
            <summary>
                Dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.ObjectBase.Dispose(System.Boolean)">
            <summary>
                Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.ObjectBase.Destroy(System.Boolean)">
            <summary>
                Destroy the object (implementation is left to each derived class)
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Settings.Csfml">
            <summary>
                The csfml class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.Audio">
            <summary>
                The audio
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.Graphics">
            <summary>
                The graphics
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.System">
            <summary>
                The system
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.Window">
            <summary>
                The window
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Settings.Time">
            <summary>
                This class represents a time value
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Time.Zero">
            <summary>
                Predefined "zero" time value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.FromSeconds(System.Single)">
            <summary>
                Construct a time value from a number of seconds
            </summary>
            <param name="seconds">Number of seconds</param>
            <returns>Time value constructed from the amount of seconds</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.FromMilliseconds(System.Int32)">
            <summary>
                Construct a time value from a number of milliseconds
            </summary>
            <param name="milliseconds">Number of milliseconds</param>
            <returns>Time value constructed from the amount of milliseconds</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.FromMicroseconds(System.Int64)">
            <summary>
                Construct a time value from a number of microseconds
            </summary>
            <param name="microseconds">Number of microseconds</param>
            <returns>Time value constructed from the amount of microseconds</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.AsSeconds">
            <summary>
                Returns the time value as a number of seconds
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.AsMilliseconds">
            <summary>
                Returns the time value as a number of milliseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.AsMicroseconds">
            <summary>
                Returns the time value as a number of microseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Equality(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Compare two times and checks if they are equal
            </summary>
            <returns>Times are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Inequality(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Compare two times and checks if they are not equal
            </summary>
            <returns>Times are not equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.Equals(System.Object)">
            <summary>
                Compare time and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and time are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.Equals(Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Compare two times and checks if they are equal
            </summary>
            <param name="other">Time to check</param>
            <returns>times are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_LessThan(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of &lt; operator to compare two time values
            </summary>
            <returns>True if left is lesser than right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_LessThanOrEqual(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of &lt;= operator to compare two time values
            </summary>
            <returns>True if left is lesser or equal than right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_GreaterThan(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of &gt; operator to compare two time values
            </summary>
            <returns>True if left is greater than right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_GreaterThanOrEqual(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of &gt;= operator to compare two time values
            </summary>
            <returns>True if left is greater or equal than right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Subtraction(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary - operator to subtract two time values
            </summary>
            <returns>Difference of the two times values</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Addition(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary + operator to add two time values
            </summary>
            <returns>Sum of the two times values</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Multiply(Alis.Core.Aspect.Base.Settings.Time,System.Single)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Multiply(Alis.Core.Aspect.Base.Settings.Time,System.Int64)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Multiply(System.Single,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Multiply(System.Int64,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Division(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Division(Alis.Core.Aspect.Base.Settings.Time,System.Single)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Division(Alis.Core.Aspect.Base.Settings.Time,System.Int64)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.op_Modulus(Alis.Core.Aspect.Base.Settings.Time,Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Overload of binary % operator to compute remainder of a time value
            </summary>
            <returns>left modulo of right</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Time.microseconds">
            <summary>
                The microseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfSeconds(System.Single)">
            <summary>
                Sfs the seconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfMilliseconds(System.Int32)">
            <summary>
                Sfs the milliseconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfMicroseconds(System.Int64)">
            <summary>
                Sfs the microseconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfTime_asSeconds(Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Sfs the time as seconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfTime_asMilliseconds(Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Sfs the time as milliseconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Settings.Time.sfTime_asMicroseconds(Alis.Core.Aspect.Base.Settings.Time)">
            <summary>
                Sfs the time as microseconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The long</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Data.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.IBuild`1">
            <summary>
                The build interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.IBuild`1.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The origin</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.IBuilder`1">
            <summary>
                The builder interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.IBuilder`1.Builder">
            <summary>
                Builders
            </summary>
            <returns>The</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.IBuilder`1.Builder``1">
            <summary>
                Builder static
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAdd`3">
            <summary>
                The add interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAdd`3.Add``1(`2)">
            <summary>
                Adds the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAddAnimation`2">
            <summary>
                The add animation interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAddAnimation`2.AddAnimation(`1)">
            <summary>
                Adds the animation using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAddComponent`2">
            <summary>
                The add component class
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAddComponent`2.AddComponent``1(System.Func{``0,`1})">
            <summary>
                Adds the component using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAddComponent`2.AddComponent``1(``0)">
            <summary>
                Adds the component using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAddFrame`2">
            <summary>
                The add frame interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAddFrame`2.AddFrame(`1)">
            <summary>
                Adds the frame using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAudio`2">
            <summary>
                The audio interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAudio`2.Audio(`1)">
            <summary>
                Audioes the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAuthor`2">
            <summary>
                The author interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAuthor`2.Author(`1)">
            <summary>
                Authors the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAutoTilling`2">
            <summary>
            The auto tilling interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAutoTilling`2.AutoTilling(`1)">
            <summary>
            Autoes the tilling using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IBackground`2">
            <summary>
                The background interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IBackground`2.Background(`1)">
            <summary>
                Backgrounds the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IBodyType`2">
            <summary>
            The body type interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IBodyType`2.BodyType(`1)">
            <summary>
            Bodies the type using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IConfiguration`2">
            <summary>
                The configuration interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IConfiguration`2.Configuration(`1)">
            <summary>
                Configurations the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ICreate`2">
            <summary>
                The create interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ICreate`2.Create(`1)">
            <summary>
                Creates the obj
            </summary>
            <param name="obj">The obj</param>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDebug`2">
            <summary>
                The debug interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDebug`2.Debug(`1)">
            <summary>
                Debugs the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDelete`1">
            <summary>
                The delete interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDelete`1.Delete">
            <summary>
                Deletes this instance
            </summary>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDensity`2">
            <summary>
            The density interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDensity`2.Density(`1)">
            <summary>
            Densities the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDepth`2">
            <summary>
                The depth interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDepth`2.Depth(`1)">
            <summary>
                Depths the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDescription`2">
            <summary>
                The description interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDescription`2.Description(`1)">
            <summary>
                Descriptions the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IFile`2">
            <summary>
                The file interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IFile`2.File(`1)">
            <summary>
                Files the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IFilePath`2">
            <summary>
                The file path interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IFilePath`2.FilePath(`1)">
            <summary>
                Files the path using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IFixedRotation`2">
            <summary>
            The fixed rotation interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IFixedRotation`2.FixedRotation(`1)">
            <summary>
            Fixeds the rotation using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IFriction`2">
            <summary>
            The friction interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IFriction`2.Friction(`1)">
            <summary>
            Frictions the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IGeneral`2">
            <summary>
                The general interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IGeneral`2.General(`1)">
            <summary>
                Generals the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IGraphic`2">
            <summary>
                The graphic interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IGraphic`2.Graphic(`1)">
            <summary>
                Graphics the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IGravityScale`2">
            <summary>
            The gravity scale interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IGravityScale`2.GravityScale(`1)">
            <summary>
            Gravities the scale using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IHas`2">
            <summary>
                The has interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IHas`2.Has(`1)">
            <summary>
                Hases the obj
            </summary>
            <param name="obj">The obj</param>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIcon`2">
            <summary>
                The icon interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIcon`2.Icon(`1)">
            <summary>
                Icons the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIs`3">
            <summary>
                The is interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIs`3.Is``1(`2)">
            <summary>
                Ises the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsActive`2">
            <summary>
                The is active interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsActive`2.IsActive(`1)">
            <summary>
                Ises the active using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsDynamic`2">
            <summary>
                The is dynamic interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsDynamic`2.IsDynamic">
            <summary>
                Ises the dynamic
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsDynamic`2.IsDynamic(`1)">
            <summary>
                Ises the dynamic using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsStatic`2">
            <summary>
                The is static interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsStatic`2.IsStatic">
            <summary>
                Ises the static
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsStatic`2.IsStatic(`1)">
            <summary>
                Ises the static using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsTrigger`2">
            <summary>
                The is trigger interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsTrigger`2.IsTrigger">
            <summary>
                Ises the trigger
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsTrigger`2.IsTrigger(`1)">
            <summary>
                Ises the trigger using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ILinearVelocity`3">
            <summary>
            The linear velocity interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ILinearVelocity`3.LinearVelocity(`1,`2)">
            <summary>
            Linears the velocity using the specified x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IManager`3">
            <summary>
                The manager interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IManager`3.Manager``1(`2)">
            <summary>Withes the specified value.</summary>
            <param name="value">The value.</param>
            <returns>Return that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IManagerOf`3">
            <summary>
                The manager of interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IManagerOf`3.ManagerOf``1(`2)">
            <summary>
                Managers the of using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IMass`2">
            <summary>
            The mass interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IMass`2.Mass(`1)">
            <summary>
            Masses the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IMute`2">
            <summary>
                The mute interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IMute`2.Mute(`1)">
            <summary>
                Mutes the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IName`2">
            <summary>
                The name interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IName`2.Name(`1)">
            <summary>
                Names the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IOrder`2">
            <summary>
                The order interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IOrder`2.Order(`1)">
            <summary>
                Orders the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IPlayOnAwake`2">
            <summary>
                The play on awake interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IPlayOnAwake`2.PlayOnAwake(`1)">
            <summary>
                Plays the on awake using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IPosition2D`3">
            <summary>
                The position interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IPosition2D`3.Position(`1,`2)">
            <summary>
                Positions the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IRelativePosition`3">
            <summary>
            The relative position interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IRelativePosition`3.RelativePosition(`1,`2)">
            <summary>
            Relatives the position using the specified x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IResolution`3">
            <summary>
                The resolution interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IResolution`3.Resolution(`1,`2)">
            <summary>
                Resolutions the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IRestitution`2">
            <summary>
            The restitution interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IRestitution`2.Restitution(`1)">
            <summary>
            Restitutions the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IRotation`2">
            <summary>
                The rotation interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IRotation`2.Rotation(`1)">
            <summary>
                Rotations the angle
            </summary>
            <param name="angle">The angle</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IRun">
            <summary>
                The run interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IRun.Run">
            <summary>
                Runs this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IScale2D`3">
            <summary>
                The scale interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IScale2D`3.Scale(`1,`2)">
            <summary>
                Scales the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IScreenMode`2">
            <summary>
                The screen mode interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IScreenMode`2.ScreenMode(`1)">
            <summary>
                Screens the mode using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISet`3">
            <summary>
                The set interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISet`3.Set``1(`2)">
            <summary>
                Sets the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISetAudioClip`2">
            <summary>
                The set audio clip interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISetAudioClip`2.SetAudioClip(`1)">
            <summary>
                Sets the audio clip using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISetMax`3">
            <summary>
                The set max interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISetMax`3.SetMax``1(`2)">
            <summary>
                Sets the max using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISetTexture`2">
            <summary>
                The texture interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISetTexture`2.SetTexture(`1)">
            <summary>
                Textures the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISettings`2">
            <summary>
                The settings interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISettings`2.Settings(`1)">
            <summary>
                Settingses the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISize`3">
            <summary>
                The size interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISize`3.Size(`1,`2)">
            <summary>
                Sizes the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISpeed`2">
            <summary>
                The speed interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISpeed`2.Speed(`1)">
            <summary>
                Speeds the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISplashScreen`2">
            <summary>
                The splash screen interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISplashScreen`2.SplashScreen(`1)">
            <summary>
                Splashes the screen using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IStyle`2">
            <summary>
                The style interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IStyle`2.Style(`1)">
            <summary>
                Styles the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ITime`2">
            <summary>
                The time interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ITime`2.Time(`1)">
            <summary>
                Times the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ITransform`2">
            <summary>
                The transform interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ITransform`2.Transform(`1)">
            <summary>
                Transforms the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IUpdate`2">
            <summary>
                The update interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IUpdate`2.Update(`1)">
            <summary>
                Updates the obj
            </summary>
            <param name="obj">The obj</param>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IVolume`2">
            <summary>
                The volume interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IVolume`2.Volume(`1)">
            <summary>
                Volumes the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWhere`2">
            <summary>
                The where interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWhere`2.Where(`1)">
            <summary>Wheres the specified value.</summary>
            <param name="value">The value.</param>
            <returns>
                <br />
            </returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWindow`2">
            <summary>
                The window interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWindow`2.Window(`1)">
            <summary>
                Windows the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWith`3">
            <summary>
                Simple comment
            </summary>
            <typeparam name="TBuilder">the builder</typeparam>
            <typeparam name="TArgument">the argument</typeparam>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWith`3.With``1(`2)">
            <summary>Withes the specified value.</summary>
            <param name="value">The value.</param>
            <returns>Return that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWithName`2">
            <summary>Define the word "Name" </summary>
            <typeparam name="TBuilder">The type of the uilder.</typeparam>
            <typeparam name="TArgument">The type of the rgument.</typeparam>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWithName`2.WithName(`1)">
            <summary>Withes the name.</summary>
            <param name="value">The value.</param>
            <returns>Return the value that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWithTag`2">
            <summary>
                Define the word "Tag"
            </summary>
            <typeparam name="TBuilder">The type of the uilder.</typeparam>
            <typeparam name="TArgument">The type of the rgument.</typeparam>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWithTag`2.WithTag(`1)">
            <summary>Withes the tag.</summary>
            <param name="value">The value.</param>
            <returns>return the object that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.Box2DxDebug">
            <summary>
                The box dx debug class
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Box2DxDebug.Assert(System.Boolean)">
            <summary>
                Asserts the condition
            </summary>
            <param name="condition">The condition</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Box2DxDebug.Assert(System.Boolean,System.String)">
            <summary>
                Asserts the condition
            </summary>
            <param name="condition">The condition</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Box2DxDebug.Assert(System.Boolean,System.String,System.String)">
            <summary>
                Asserts the condition
            </summary>
            <param name="condition">The condition</param>
            <param name="message">The message</param>
            <param name="detailMessage">The detail message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Box2DxDebug.ThrowBox2DxException(System.String)">
            <summary>
                Throws the box 2 dx exception using the specified message
            </summary>
            <param name="message">The message</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.Color">
            <summary>
                Color for debug drawing. Each value has the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.Color.r">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.Color.g">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.Color.b">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Aspect.Logging.Color" /> class
            </summary>
            <param name="r">The </param>
            <param name="g">The </param>
            <param name="b">The </param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Color.Set(System.Single,System.Single,System.Single)">
            <summary>
                Sets the r
            </summary>
            <param name="r">The </param>
            <param name="g">The </param>
            <param name="b">The </param>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.Logger">
            <summary>
                The logger class
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Log(System.String)">
            <summary>
                Logs the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Trace(System.String)">
            <summary>
                Traces the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.LogLevel">
            <summary>
                The log level enum
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Info">
            <summary>
                The info log level
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Log">
            <summary>
                The log log level
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Normal">
            <summary>
                The normal log level
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Critical">
            <summary>
                The critical log level
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Constant">
            <summary>
                The math constants class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Pi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.TwoPi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.MaxFloat">
            <summary>
                The max value
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Epsilon">
            <summary>
                The epsilon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Euler">
            <summary>
                The euler
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.E">
            <summary>Represents the mathematical constant e(2.71828175).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Log10E">
            <summary>Represents the log base ten of e(0.4342945).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Log2E">
            <summary>Represents the log base two of e(1.442695).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.PiOver2">
            <summary>Represents the value of pi divided by two(1.57079637).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.PiOver4">
            <summary>Represents the value of pi divided by four(0.7853982).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Tau">
            <summary>Represents the value of pi times two(6.28318548). This is an alias of TwoPi.</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Helper">
            <summary>
                The math class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.UshrtMax">
            <summary>
                The ushrt max
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.UcharMax">
            <summary>
                The uchar max
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.RandLimit">
            <summary>
                The rand limit
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.SRnd">
            <summary>
                The random
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.IsValid(System.Single)">
            <summary>
                This function is used to ensure that a floating point number is
                not a NaN or infinity.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.InvSqrt(System.Single)">
            <summary>
                This is a approximate yet fast inverse square-root.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Sqrt(System.Single)">
            <summary>
                Sqrts the x
            </summary>
            <param name="x">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Random">
            <summary>
                Random number in range [-1,1]
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Random(System.Single,System.Single)">
            <summary>
                Random floating point number in range [lo, hi]
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.NextPowerOfTwo(System.UInt32)">
            <summary>
                "Next Largest Power of 2
                Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm
                that recursively "folds" the upper bits into the lower bits. This process yields a bit vector with
                the same most significant 1 as x, but all 1's below it. Adding 1 to that value yields the next
                largest power of 2. For a 32-bit value:"
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.IsPowerOfTwo(System.UInt32)">
            <summary>
                Describes whether is power of two
            </summary>
            <param name="x">The </param>
            <returns>The result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Abs(System.Single)">
            <summary>
                Abses the a
            </summary>
            <param name="a">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Abs(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Abses the a
            </summary>
            <param name="a">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Abs(Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                Abses the a
            </summary>
            <param name="a">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Min(System.Single,System.Single)">
            <summary>
                Mins the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Min(System.Int32,System.Int32)">
            <summary>
                Mins the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Min(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Mins the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Max(System.Single,System.Single)">
            <summary>
                Maxes the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Max(System.Int32,System.Int32)">
            <summary>
                Maxes the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Max(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Maxes the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Clamp(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Swap``1(``0@,``0@)">
            <summary>
                Swaps the a
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="a">The </param>
            <param name="b">The </param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Multiply a matrix times a vector. If a rotation matrix is provided,
                then this transforms the vector from one frame to another.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.MulT(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Multiply a matrix transpose times a vector. If a rotation matrix is provided,
                then this transforms the vector from one frame to another (inverse transform).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                A * B
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.MulT(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                A^T * B
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Muls the t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.MulT(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Muls the t using the specified t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.Matrix33,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Multiply a matrix times a vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Atan2(System.Single,System.Single)">
            <summary>
                Atans the 2 using the specified y
            </summary>
            <param name="y">The </param>
            <param name="x">The </param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Helper.Convert">
            <summary>
                The convert
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.Convert.x">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.Convert.i">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Matrix22">
            <summary>
                A 2-by-2 matrix. Stored in column-major order.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Matrix22.Col1">
            <summary>
                The col
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Matrix22.Col2">
            <summary>
                The col
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.#ctor(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Construct this matrix using columns.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct this matrix using scalars.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.#ctor(System.Single)">
            <summary>
                Construct this matrix using an angle.
                This matrix becomes an orthonormal rotation matrix.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.Set(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Initialize this matrix using columns.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.Set(System.Single)">
            <summary>
                Initialize this matrix using an angle.
                This matrix becomes an orthonormal rotation matrix.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.SetIdentity">
            <summary>
                Set this to the identity matrix.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.SetZero">
            <summary>
                Set this matrix to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.GetAngle">
            <summary>
                Extract the angle from this matrix (assumed to be a rotation matrix).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.GetInverse">
            <summary>
                Compute the inverse of this matrix, such that inv(A) * A = identity.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.Solve(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient
                than computing the inverse in one-shot cases.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix22.Identity">
            <summary>
                Gets the value of the identity
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.op_Addition(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Matrix33">
            <summary>
                A 3-by-3 matrix. Stored in column-major order.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.#ctor(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Construct this matrix using columns.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.SetZero">
            <summary>
                Set this matrix to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.Solve33(Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient
                than computing the inverse in one-shot cases.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.Solve22(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient
                than computing the inverse in one-shot cases. Solve only the upper
                2-by-2 matrix equation.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix33.Col1">
            <summary>
                The col
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix33.Col2">
            <summary>
                The col
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix33.Col3">
            <summary>
                The col
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Position.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Position.A">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Settings">
            <summary>
                The settings class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.FltEpsilon">
            <summary>
                The flt epsilon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.FltEpsilonSquared">
            <summary>
                The flt epsilon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.FltMax">
            <summary>
                The flt max
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.FORCE_SCALE(System.Single)">
            <summary>
                Forces the scale using the specified x
            </summary>
            <param name="x">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.FORCE_INV_SCALE(System.Single)">
            <summary>
                Forces the inv scale using the specified x
            </summary>
            <param name="x">The </param>
            <returns>The </returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.Pi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxManifoldPoints">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxPolygonVertices">
            <summary>
                The max polygon vertices
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxProxies">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxPairs">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.LinearSlop">
            <summary>
                A small length used as a collision and constraint tolerance. Usually it is
                chosen to be numerically significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.AngularSlop">
            <summary>
                A small angle used as a collision and constraint tolerance. Usually it is
                chosen to be numerically significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.PolygonRadius">
            <summary>
                The radius of the polygon/edge shape skin. This should not be modified. Making
                this smaller means polygons will have and insufficient for continuous collision.
                Making it larger may create artifacts for vertex collision.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.ToiSlop">
            <summary>
                Continuous collision detection (CCD) works with core, shrunken shapes. This is amount
                by which shapes are automatically shrunk to work with CCD.
                This must be larger than LinearSlop.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxToiContactsPerIsland">
            <summary>
                Maximum number of contacts to be handled to solve a TOI island.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxToiJointsPerIsland">
            <summary>
                Maximum number of joints to be handled to solve a TOI island.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.VelocityThreshold">
            <summary>
                A velocity threshold for elastic collisions. Any collision with a relative linear
                velocity below this threshold will be treated as inelastic.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxLinearCorrection">
            <summary>
                The maximum linear position correction used when solving constraints.
                This helps to prevent overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxAngularCorrection">
            <summary>
                The maximum angular position correction used when solving constraints.
                This helps to prevent overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxLinearVelocity">
            <summary>
                The maximum linear velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxLinearVelocitySquared">
            <summary>
                The max linear velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxAngularVelocity">
            <summary>
                The maximum angular velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxAngularVelocitySquared">
            <summary>
                The max angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxTranslation">
            <summary>
                The maximum linear velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxTranslationSquared">
            <summary>
                The max translation
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxRotation">
            <summary>
                The maximum angular velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxRotationSquared">
            <summary>
                The max rotation
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.ContactBaumgarte">
            <summary>
                This scale factor controls how fast overlap is resolved. Ideally this would be 1 so
                that overlap is removed in one time step. However using values close to 1 often lead to overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.TimeToSleep">
            <summary>
                The time that a body must be still before it will go to sleep.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.LinearSleepTolerance">
            <summary>
                A body cannot sleep if its linear velocity is above this tolerance.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.AngularSleepTolerance">
            <summary>
                A body cannot sleep if its angular velocity is above this tolerance.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.MixFriction(System.Single,System.Single)">
            <summary>
                Friction mixing law. Feel free to customize this.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.MixRestitution(System.Single,System.Single)">
            <summary>
                Restitution mixing law. Feel free to customize this.
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Bvec2">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec2" /> is a struct represent a glsl bvec2 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Bvec2.#ctor(System.Boolean,System.Boolean)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec2" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec2.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec2.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Bvec3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec3" /> is a struct represent a glsl bvec3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Bvec3.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec3" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec3.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec3.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec3.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Bvec4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec4" /> is a struct represent a glsl bvec4 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Bvec4.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec4" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="w">W coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.W">
            <summary>Projective/Homogenous component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.FloatRect">
            <summary>
                IntRect is an utility class for manipulating 2D rectangles
                with float coordinates
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the rectangle from its coordinates
            </summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the rectangle from position and size
            </summary>
            <param name="position">Position of the top-left corner of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Contains(System.Single,System.Single)">
            <summary>
                Check if a point is inside the rectangle's area
            </summary>
            <param name="x">X coordinate of the point to test</param>
            <param name="y">Y coordinate of the point to test</param>
            <returns>True if the point is inside</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Intersects(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Intersects(Alis.Core.Aspect.Math.SFML.FloatRect,Alis.Core.Aspect.Math.SFML.FloatRect@)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <param name="overlap">Rectangle to be filled with overlapping rect</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Equals(System.Object)">
            <summary>
                Compare rectangle and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and rectangle are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Equals(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Compare two rectangles and checks if they are equal
            </summary>
            <param name="other">Rectangle to check</param>
            <returns>Rectangles are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.op_Equality(Alis.Core.Aspect.Math.SFML.FloatRect,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Operator == overload ; check rect equality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 == r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.op_Inequality(Alis.Core.Aspect.Math.SFML.FloatRect,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Operator != overload ; check rect inequality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 != r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.op_Explicit(Alis.Core.Aspect.Math.SFML.FloatRect)~Alis.Core.Aspect.Math.SFML.IntRect">
            <summary>
                Explicit casting to another rectangle type
            </summary>
            <param name="r">Rectangle being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Left">
            <summary>Left coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Top">
            <summary>Top coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Width">
            <summary>Width of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Height">
            <summary>Height of the rectangle</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.IntRect">
            <summary>
                IntRect is an utility class for manipulating 2D rectangles
                with integer coordinates
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Construct the rectangle from its coordinates
            </summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.#ctor(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Construct the rectangle from position and size
            </summary>
            <param name="position">Position of the top-left corner of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Contains(System.Int32,System.Int32)">
            <summary>
                Check if a point is inside the rectangle's area
            </summary>
            <param name="x">X coordinate of the point to test</param>
            <param name="y">Y coordinate of the point to test</param>
            <returns>True if the point is inside</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Intersects(Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Intersects(Alis.Core.Aspect.Math.SFML.IntRect,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <param name="overlap">Rectangle to be filled with overlapping rect</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Equals(System.Object)">
            <summary>
                Compare rectangle and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and rectangle are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Equals(Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Compare two rectangles and checks if they are equal
            </summary>
            <param name="other">Rectangle to check</param>
            <returns>Rectangles are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.op_Equality(Alis.Core.Aspect.Math.SFML.IntRect,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Operator == overload ; check rect equality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 == r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.op_Inequality(Alis.Core.Aspect.Math.SFML.IntRect,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Operator != overload ; check rect inequality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 != r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.op_Explicit(Alis.Core.Aspect.Math.SFML.IntRect)~Alis.Core.Aspect.Math.SFML.FloatRect">
            <summary>
                Explicit casting to another rectangle type
            </summary>
            <param name="r">Rectangle being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Left">
            <summary>Left coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Top">
            <summary>Top coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Width">
            <summary>Width of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Height">
            <summary>Height of the rectangle</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Ivec2">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" /> is a struct represent a glsl ivec2 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec2.op_Implicit(Alis.Core.Aspect.Math.SFML.Vector2I)~Alis.Core.Aspect.Math.SFML.Ivec2">
            <summary>
                Implicit cast from <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2I" /> to <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" />
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec2.#ctor(System.Int32,System.Int32)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec2.#ctor(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" /> from a standard SFML <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2I" />
            </summary>
            <param name="vec">A standard SFML 2D integer vector</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec2.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec2.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Ivec3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec3" /> is a struct represent a glsl ivec3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec3" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec3.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec3.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec3.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Ivec4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec4" /> is a struct represent a glsl ivec4 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec4" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="w">W coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.W">
            <summary>Projective/Homogenous component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Mat3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Mat3" /> is a struct representing a glsl mat3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Mat3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Mat3" /> from its components
            </summary>
            <remarks>
                Arguments are in row-major order
            </remarks>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Mat3.array">
            <summary>
                The array
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Mat4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Mat4" /> is a struct representing a glsl mat4 value
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.SFML.Mat4.Identity">
            <summary>
                Provides easy-access to an identity matrix
            </summary>
            <remarks>
                Keep in mind that a Mat4 cannot be modified after construction
            </remarks>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Mat4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Mat4" /> from its components
            </summary>
            <remarks>
                Arguments are in row-major order
            </remarks>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Mat4.array">
            <summary>
                The array
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vec2">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" /> is a struct represent a glsl vec2 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec2.op_Implicit(Alis.Core.Aspect.Math.SFML.Vector2F)~Alis.Core.Aspect.Math.SFML.Vec2">
            <summary>
                Implicit cast from <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2F" /> to <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" />
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec2.#ctor(System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec2.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" /> from a standard SFML <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2F" />
            </summary>
            <param name="vec">A standard SFML 2D vector</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec2.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec2.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vec3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" /> is a struct represent a glsl vec3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec3.op_Implicit(Alis.Core.Aspect.Math.SFML.Vector3F)~Alis.Core.Aspect.Math.SFML.Vec3">
            <summary>
                Implicit cast from <see cref="T:Alis.Core.Aspect.Math.SFML.Vector3F" /> to <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" />
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec3.#ctor(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" /> from a standard SFML <see cref="T:Alis.Core.Aspect.Math.SFML.Vector3F" />
            </summary>
            <param name="vec">A standard SFML 3D vector</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec3.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec3.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec3.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vec4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Vec4" /> is a struct represent a glsl vec4 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec4" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="w">W coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.W">
            <summary>Projective/Homogenous component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector2F">
            <summary>
                Vector2f is an utility class for manipulating 2 dimensional
                vectors with float components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.#ctor(System.Single,System.Single)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_UnaryNegation(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Addition(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector2F,System.Single)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Multiply(System.Single,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Division(Alis.Core.Aspect.Math.SFML.Vector2F,System.Single)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Equality(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.Equals(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2F)~Alis.Core.Aspect.Math.SFML.Vector2I">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2F)~Alis.Core.Aspect.Math.SFML.Vector2U">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2F.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2F.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector2I">
            <summary>
                Vector2i is an utility class for manipulating 2 dimensional
                vectors with integer components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.#ctor(System.Int32,System.Int32)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_UnaryNegation(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Addition(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector2I,System.Int32)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Multiply(System.Int32,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Division(Alis.Core.Aspect.Math.SFML.Vector2I,System.Int32)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Equality(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.Equals(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2I)~Alis.Core.Aspect.Math.SFML.Vector2F">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2I)~Alis.Core.Aspect.Math.SFML.Vector2U">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2I.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2I.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector2U">
            <summary>
                Vector2u is an utility class for manipulating 2 dimensional
                vectors with unsigned integer components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Addition(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector2U,System.UInt32)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Multiply(System.UInt32,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Division(Alis.Core.Aspect.Math.SFML.Vector2U,System.UInt32)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Equality(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.Equals(Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2U)~Alis.Core.Aspect.Math.SFML.Vector2I">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2U)~Alis.Core.Aspect.Math.SFML.Vector2F">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2U.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2U.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector3F">
            <summary>
                Vector3f is an utility class for manipulating 3 dimensional
                vectors with float components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_UnaryNegation(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Addition(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector3F,System.Single)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Multiply(System.Single,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Division(Alis.Core.Aspect.Math.SFML.Vector3F,System.Single)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Equality(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.Equals(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector3F.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector3F.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector3F.Z">
            <summary>Z (depth) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Sweep">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.LocalCenter">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.C0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.C">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.A0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.A">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.T0">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Sweep.GetTransform(Alis.Core.Aspect.Math.XForm@,System.Single)">
            <summary>
                Get the interpolated transform at a specific time.
            </summary>
            <param name="xf">The xf.</param>
            <param name="alpha">Alpha is a factor in [0,1], where 0 indicates t0.</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Sweep.Advance(System.Single)">
            <summary>
                Advance the sweep forward, yielding a new initial state.
            </summary>
            <param name="t">The new initial time.</param>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Vector2">
            <summary>
                A 2D column vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Equals(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="other">The other</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Equals(System.Object)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="obj">The obj</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.GetHashCode">
            <summary>
                Gets the hash code
            </summary>
            <returns>The int</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector2.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector2.Y">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Vector2.Item(System.Int32)">
            <summary>
                The assert
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.#ctor(System.Single)">
            <summary>
                Construct using coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
                Construct using coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.SetZero">
            <summary>
                Set this vector to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Set(System.Single,System.Single)">
            <summary>
                Set this vector to some specified coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Set(System.Single)">
            <summary>
                Sets the xy
            </summary>
            <param name="xy">The xy</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Length">
            <summary>
                Get the length of this vector (the norm).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.LengthSquared">
            <summary>
                Get the length squared. For performance, use this instead of
                Length (if possible).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Normalize">
            <summary>
                Convert this vector into a unit vector. Returns the length.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Vector2.IsValid">
            <summary>
                Does this vector contain finite coordinates?
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_UnaryNegation(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Negate this vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Addition(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Hello
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Subtraction(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Hello
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Multiply(Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                operator
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Multiply(System.Single,Alis.Core.Aspect.Math.Vector2)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Equality(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Inequality(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Vector2.Zero">
            <summary>
                Gets the value of the zero
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Dot(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Peform the dot product on two vectors.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Cross(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Perform the cross product on two vectors. In 2D this produces a scalar.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Cross(Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                Perform the cross product on a vector and a scalar.
                In 2D this produces a vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Cross(System.Single,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Perform the cross product on a scalar and a vector.
                In 2D this produces a vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Distance(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Distances the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.DistanceSquared(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Distances the squared using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Vector3">
            <summary>
                A 2D column vector with 3 elements.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Construct using coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.SetZero">
            <summary>
                Set this vector to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.Set(System.Single,System.Single,System.Single)">
            <summary>
                Set this vector to some specified coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.Dot(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Perform the dot product on two vectors.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.Cross(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Perform the cross product on two vectors.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_UnaryNegation(Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Negate this vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Addition(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Add two vectors component-wise.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Subtraction(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Subtract two vectors component-wise.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Multiply(Alis.Core.Aspect.Math.Vector3,System.Single)">
            <summary>
                Multiply this vector by a scalar.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Multiply(System.Single,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Multiply this vector by a scalar.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector3.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector3.Y">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector3.Z">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Velocity">
            <summary>
                The velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Velocity.V">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Velocity.W">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.XForm">
            <summary>
                A transform contains translation and rotation.
                It is used to represent the position and orientation of rigid frames.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.XForm.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.XForm.R">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.#ctor(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Aspect.Math.XForm" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.SetIdentity">
            <summary>
                Set this to the identity transform.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.Set(Alis.Core.Aspect.Math.Vector2,System.Single)">
            Set this based on the position and angle.
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.GetAngle">
            Calculate the angle that the rotation matrix represents.
        </member>
        <member name="P:Alis.Core.Aspect.Math.XForm.Identity">
            <summary>
                Gets the value of the identity
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream">
            <summary>
                Structure that contains InputStream callbacks
                (directly maps to a CSFML sfInputStream)
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.ReadCallbackType">
            <summary>
                Type of callback to read data from the current stream
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.SeekCallbackType">
            <summary>
                Type of callback to seek the current stream's position
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.TellCallbackType">
            <summary>
                Type of callback to return the current stream's position
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.GetSizeCallbackType">
            <summary>
                Type of callback to return the current stream's size
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.Read">
            <summary>
                Function that is called to read data from the stream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.Seek">
            <summary>
                Function that is called to seek the stream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.Tell">
            <summary>
                Function that is called to return the positon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.GetSize">
            <summary>
                Function that is called to return the size
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor">
            <summary>
                Adapts a System.IO.Stream to be usable as a SFML InputStream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.myInputStream">
            <summary>
                The my input stream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.myInputStreamPtr">
            <summary>
                The my input stream ptr
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.myStream">
            <summary>
                The my stream
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.#ctor(System.IO.Stream)">
            <summary>
                Construct from a System.IO.Stream
            </summary>
            <param name="stream">Stream to adapt</param>
        </member>
        <member name="P:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.InputStreamPtr">
            <summary>
                The pointer to the CSFML InputStream structure
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Dispose">
            <summary>
                Explicitly dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Finalize">
            <summary>
                Dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Dispose(System.Boolean)">
            <summary>
                Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Read(System.IntPtr,System.Int64,System.IntPtr)">
            <summary>
                Called to read from the stream
            </summary>
            <param name="data">Where to copy the read bytes</param>
            <param name="size">Size to read, in bytes</param>
            <param name="userData">User data -- unused</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Seek(System.Int64,System.IntPtr)">
            <summary>
                Called to set the read position in the stream
            </summary>
            <param name="position">New read position</param>
            <param name="userData">User data -- unused</param>
            <returns>Actual position</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Tell(System.IntPtr)">
            <summary>
                Get the current read position in the stream
            </summary>
            <param name="userData">User data -- unused</param>
            <returns>Current position in the stream</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.GetSize(System.IntPtr)">
            <summary>
                Called to get the total size of the stream
            </summary>
            <param name="userData">User data -- unused</param>
            <returns>Number of bytes in the stream</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Security.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Thread.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Time.TimeStep">
            <summary>
                The time step
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.Dt">
            <summary>
                The dt
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.InvDt">
            <summary>
                The inv dt
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.DtRatio">
            <summary>
                The dt ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.VelocityIterations">
            <summary>
                The velocity iterations
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.PositionIterations">
            <summary>
                The position iterations
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.WarmStarting">
            <summary>
                The warm starting
            </summary>
        </member>
    </members>
</doc>
