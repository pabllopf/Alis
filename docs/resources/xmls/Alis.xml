<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alis</name>
    </assembly>
    <members>
        <member name="T:Alis.Builder.ConsoleGameBuilder">
            <summary>
                The console game builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="P:Alis.Builder.ConsoleGameBuilder.ConsoleGame">
            <summary>
                Gets the value of the console game
            </summary>
        </member>
        <member name="M:Alis.Builder.ConsoleGameBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The console game</returns>
        </member>
        <member name="M:Alis.Builder.ConsoleGameBuilder.Run">
            <summary>
                Runs this instance
            </summary>
        </member>
        <member name="T:Alis.Builder.Core.Component.Audio.AudioClipBuilder">
            <summary>
                The audio clip builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="P:Alis.Builder.Core.Component.Audio.AudioClipBuilder.AudioClip">
            <summary>
                The audio clip
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.Audio.AudioClipBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The audio clip</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Audio.AudioClipBuilder.FilePath(System.String)">
            <summary>
                Files the path using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The audio clip builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Audio.AudioClipBuilder.Mute(System.Boolean)">
            <summary>
                Mutes the value
            </summary>
            <param name="value">The value</param>
            <returns>The audio clip builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Audio.AudioClipBuilder.Volume(System.Single)">
            <summary>
                Volumes the value
            </summary>
            <param name="value">The value</param>
            <returns>The audio clip builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Component.Audio.AudioRecorderBuilder">
            <summary>
                The audio recorder builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="F:Alis.Builder.Core.Component.Audio.AudioRecorderBuilder.audioRecorder">
            <summary>
                The audio recorder
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.Audio.AudioRecorderBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The audio recorder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Component.Audio.AudioSourceBuilder">
            <summary>
                The audio source builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="F:Alis.Builder.Core.Component.Audio.AudioSourceBuilder.audioSource">
            <summary>
                Gets or sets the value of the audio source
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.Audio.AudioSourceBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The audio source</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Audio.AudioSourceBuilder.IsActive(System.Boolean)">
            <summary>
                Ises the active using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The audio source builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Audio.AudioSourceBuilder.PlayOnAwake(System.Boolean)">
            <summary>
                Plays the on awake using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The audio source builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Audio.AudioSourceBuilder.SetAudioClip(System.Func{Alis.Builder.Core.Component.Audio.AudioClipBuilder,Alis.Core.Component.Audio.AudioClip})">
            <summary>
                Sets the audio clip using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The audio source builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Component.Body.RigidBodyBuilder">
            <summary>
                The rigid body builder class
            </summary>
        </member>
        <member name="T:Alis.Builder.Core.Component.Collider.BoxColliderBuilder">
            <summary>
                The box collider builder class
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.boxCollider">
            <summary>
            The box collider
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.Build">
            <summary>
            Builds this instance
            </summary>
            <returns>The box collider</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.Size(System.Single,System.Single)">
            <summary>
            Sizes the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.FixedRotation(System.Boolean)">
            <summary>
            Fixeds the rotation using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.AutoTilling(System.Boolean)">
            <summary>
            Autoes the tilling using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.GravityScale(System.Single)">
            <summary>
            Gravities the scale using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.Mass(System.Single)">
            <summary>
            Masses the value
            </summary>
            <param name="value">The value</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.Friction(System.Single)">
            <summary>
            Frictions the value
            </summary>
            <param name="value">The value</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.Density(System.Single)">
            <summary>
            Densities the value
            </summary>
            <param name="value">The value</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.Rotation(System.Single)">
            <summary>
            Rotations the angle
            </summary>
            <param name="angle">The angle</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.RelativePosition(System.Single,System.Single)">
            <summary>
            Relatives the position using the specified x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.Restitution(System.Single)">
            <summary>
            Restitutions the value
            </summary>
            <param name="value">The value</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.IsTrigger">
            <summary>
            Ises the trigger
            </summary>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.IsTrigger(System.Boolean)">
            <summary>
            Ises the trigger using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.IsActive(System.Boolean)">
            <summary>
            Ises the active using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.LinearVelocity(System.Single,System.Single)">
            <summary>
            Linears the velocity using the specified x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The box collider builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Collider.BoxColliderBuilder.BodyType(Alis.Core.Physic.Dynamics.BodyType)">
            <summary>
            Bodies the type using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The box collider builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Component.Collider.CircleColliderBuilder">
            <summary>
                The circle collider builder class
            </summary>
        </member>
        <member name="T:Alis.Builder.Core.Component.ComponentBaseBuilder">
            <summary>
                The component base builder class
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Component.ComponentBaseBuilder.componentBase">
            <summary>
                The component base
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.ComponentBaseBuilder.#ctor(Alis.Core.Component.ComponentBase)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Builder.Core.Component.ComponentBaseBuilder" /> class
            </summary>
            <param name="componentBase">The component base</param>
        </member>
        <member name="M:Alis.Builder.Core.Component.ComponentBaseBuilder.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Builder.Core.Component.ComponentBaseBuilder" /> class
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.ComponentBaseBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The component base</returns>
        </member>
        <member name="T:Alis.Builder.Core.Component.Light.AreaLightBuilder">
            <summary>
                The area light builder class
            </summary>
        </member>
        <member name="T:Alis.Builder.Core.Component.Light.DirectionalLightBuilder">
            <summary>
                The directional light builder class
            </summary>
        </member>
        <member name="T:Alis.Builder.Core.Component.Light.PointLightBuilder">
            <summary>
                The point light builder class
            </summary>
        </member>
        <member name="T:Alis.Builder.Core.Component.Light.SpotLightBuilder">
            <summary>
                The spot light builder class
            </summary>
        </member>
        <member name="T:Alis.Builder.Core.Component.Mesh.BoxMeshBuilder">
            <summary>
                The box mesh builder class
            </summary>
        </member>
        <member name="T:Alis.Builder.Core.Component.Mesh.CircleMeshBuilder">
            <summary>
                The circle mesh builder class
            </summary>
        </member>
        <member name="T:Alis.Builder.Core.Component.Particle.ExplosionParticleBuilder">
            <summary>
                The explosion particle builder class
            </summary>
            <seealso cref="T:Alis.Builder.Core.Component.ComponentBaseBuilder" />
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="M:Alis.Builder.Core.Component.Particle.ExplosionParticleBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The explosion particle</returns>
        </member>
        <member name="T:Alis.Builder.Core.Component.Render.AnimationBuilder">
            <summary>
                The animation builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="F:Alis.Builder.Core.Component.Render.AnimationBuilder.animation">
            <summary>
                The animation
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.AnimationBuilder.AddFrame(System.Func{Alis.Builder.Core.Component.Render.FrameBuilder,Alis.Core.Component.Render.Frame})">
            <summary>
                Adds the frame using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The animation builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.AnimationBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The animation</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.AnimationBuilder.Name(System.String)">
            <summary>
                Names the value
            </summary>
            <param name="value">The value</param>
            <returns>The animation builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.AnimationBuilder.Order(System.Int32)">
            <summary>
                Orders the value
            </summary>
            <param name="value">The value</param>
            <returns>The animation builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.AnimationBuilder.Speed(System.Single)">
            <summary>
                Speeds the value
            </summary>
            <param name="value">The value</param>
            <returns>The animation builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Component.Render.AnimatorBuilder">
            <summary>
                The animator builder class
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Component.Render.AnimatorBuilder.animator">
            <summary>
                The animator
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.AnimatorBuilder.AddAnimation(System.Func{Alis.Builder.Core.Component.Render.AnimationBuilder,Alis.Core.Component.Render.Animation})">
            <summary>
                Adds the animation using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The animator builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.AnimatorBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The animator</returns>
        </member>
        <member name="T:Alis.Builder.Core.Component.Render.CameraBuilder">
            <summary>
                The camera builder class
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Component.Render.CameraBuilder.camera">
            <summary>
                The camera
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.CameraBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The camera</returns>
        </member>
        <member name="T:Alis.Builder.Core.Component.Render.FrameBuilder">
            <summary>
                The frame builder class
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Component.Render.FrameBuilder.frame">
            <summary>
                The frame
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.FrameBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The frame</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.FrameBuilder.FilePath(System.String)">
            <summary>
                Files the path using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The frame builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Component.Render.SpriteBuilder">
            <summary>
                The sprite builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="F:Alis.Builder.Core.Component.Render.SpriteBuilder.sprite">
            <summary>
                The sprite
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.SpriteBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The sprite</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.SpriteBuilder.Depth(System.Int32)">
            <summary>
                Depths the value
            </summary>
            <param name="value">The value</param>
            <returns>The sprite builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Component.Render.SpriteBuilder.SetTexture(System.String)">
            <summary>
                Textures the value
            </summary>
            <param name="value">The value</param>
            <returns>The sprite builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Entity.GameObjectBuilder">
            <summary>
                The game object builder class
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Entity.GameObjectBuilder.gameObject">
            <summary>
                Gets or sets the value of the game object
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Entity.GameObjectBuilder.AddComponent``1(System.Func{``0,Alis.Core.Component.ComponentBase})">
            <summary>
                Adds the component using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The game object builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.GameObjectBuilder.AddComponent``1(``0)">
            <summary>
                Adds the component using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The game object builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.GameObjectBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The game object</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.GameObjectBuilder.Name(System.String)">
            <summary>
                Names the value
            </summary>
            <param name="value">The value</param>
            <returns>The game object builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.GameObjectBuilder.Transform(System.Func{Alis.Builder.Core.Entity.TransformBuilder,Alis.Core.Entity.Transform})">
            <summary>
                Transforms the value
            </summary>
            <param name="value">The value</param>
            <returns>The game object builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.GameObjectBuilder.WithTag(System.String)">
            <summary>
                Adds the tag using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The game object builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Entity.SceneBuilder">
            <summary>
                The scene builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="P:Alis.Builder.Core.Entity.SceneBuilder.Scene">
            <summary>
                Gets the value of the scene
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Entity.SceneBuilder.Add``1(System.Func{Alis.Builder.Core.Entity.GameObjectBuilder,Alis.Core.Entity.GameObject})">
            <summary>
                Adds the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The scene builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.SceneBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The scene</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.SceneBuilder.Name(System.String)">
            <summary>
                Names the value
            </summary>
            <param name="value">The value</param>
            <returns>The scene builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Entity.SplashScreenBuilder">
            <summary>
                The splash screen builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="F:Alis.Builder.Core.Entity.SplashScreenBuilder.splashScreen">
            <summary>
                The splash screen
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Entity.SplashScreenBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The splash screen</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.SplashScreenBuilder.FilePath(System.String)">
            <summary>
                Files the path using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The splash screen builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.SplashScreenBuilder.IsActive(System.Boolean)">
            <summary>
                Ises the active using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The splash screen builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.SplashScreenBuilder.Style(Alis.Core.Entity.Style)">
            <summary>
                Styles the value
            </summary>
            <param name="value">The value</param>
            <returns>The splash screen builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Entity.TransformBuilder">
            <summary>
                The transform builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="F:Alis.Builder.Core.Entity.TransformBuilder.transform">
            <summary>
                The transform
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Entity.TransformBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The transform</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.TransformBuilder.Position(System.Single,System.Single)">
            <summary>
                Positions the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The transform builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.TransformBuilder.Rotation(System.Single)">
            <summary>
                Rotations the angle
            </summary>
            <param name="angle">The angle</param>
            <returns>The transform builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.TransformBuilder.Scale(System.Single,System.Single)">
            <summary>
                Scales the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The transform builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Entity.WindowBuilder">
            <summary>
                The window builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="F:Alis.Builder.Core.Entity.WindowBuilder.window">
            <summary>
                The window
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Entity.WindowBuilder.Background(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Backgrounds the value
            </summary>
            <param name="value">The value</param>
            <returns>The window builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.WindowBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The window</returns>
        </member>
        <member name="M:Alis.Builder.Core.Entity.WindowBuilder.Resolution(System.Single,System.Single)">
            <summary>
                Resolutions the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The window builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Manager.ManagerBaseBuilder">
            <summary>
                The manager base builder class
            </summary>
        </member>
        <member name="T:Alis.Builder.Core.Manager.SceneManagerBuilder">
            <summary>
                The scene manager builder class
            </summary>
        </member>
        <member name="P:Alis.Builder.Core.Manager.SceneManagerBuilder.SceneManager">
            <summary>
                Gets the value of the scene manager
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Manager.SceneManagerBuilder.Add``1(System.Func{Alis.Builder.Core.Entity.SceneBuilder,Alis.Core.Entity.Scene})">
            <summary>
                Adds the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The scene builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Manager.SceneManagerBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The scene manager</returns>
        </member>
        <member name="T:Alis.Builder.Core.Manager.SettingManagerBuilder">
            <summary>
                The setting manager builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="F:Alis.Builder.Core.Manager.SettingManagerBuilder.settingManager">
            <summary>
                The setting manager
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Manager.SettingManagerBuilder.Audio(System.Func{Alis.Builder.Core.Setting.AudioSettingBuilder,Alis.Core.Setting.AudioSetting})">
            <summary>
                Audioes the value
            </summary>
            <param name="value">The value</param>
            <returns>The setting manager builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Manager.SettingManagerBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The setting manager</returns>
        </member>
        <member name="M:Alis.Builder.Core.Manager.SettingManagerBuilder.Debug(System.Func{Alis.Builder.Core.Setting.DebugSettingBuilder,Alis.Core.Setting.DebugSetting})">
            <summary>
                Debugs the value
            </summary>
            <param name="value">The value</param>
            <returns>The setting manager builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Manager.SettingManagerBuilder.General(System.Func{Alis.Builder.Core.Setting.GeneralSettingBuilder,Alis.Core.Setting.GeneralSetting})">
            <summary>
                Generals the value
            </summary>
            <param name="value">The value</param>
            <returns>The setting manager builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Manager.SettingManagerBuilder.Graphic(System.Func{Alis.Builder.Core.Setting.GraphicSettingBuilder,Alis.Core.Setting.GraphicSetting})">
            <summary>
                Graphics the value
            </summary>
            <param name="value">The value</param>
            <returns>The setting manager builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Setting.AudioSettingBuilder">
            <summary>
                The audio setting builder class
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Setting.AudioSettingBuilder.audioSetting">
            <summary>
                The audio setting
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Setting.AudioSettingBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The audio setting</returns>
        </member>
        <member name="T:Alis.Builder.Core.Setting.DebugSettingBuilder">
            <summary>
                The debug setting builder class
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Setting.DebugSettingBuilder.debugSetting">
            <summary>
                The debug setting
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Setting.DebugSettingBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The debug setting</returns>
        </member>
        <member name="T:Alis.Builder.Core.Setting.GeneralSettingBuilder">
            <summary>
                The general setting builder class
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Setting.GeneralSettingBuilder.generalSetting">
            <summary>
                The general setting
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Setting.GeneralSettingBuilder.Author(System.String)">
            <summary>
                Authors the value
            </summary>
            <param name="value">The value</param>
            <returns>The general setting builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Setting.GeneralSettingBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The general setting</returns>
        </member>
        <member name="M:Alis.Builder.Core.Setting.GeneralSettingBuilder.Description(System.String)">
            <summary>
                Descriptions the value
            </summary>
            <param name="value">The value</param>
            <returns>The general setting builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Setting.GeneralSettingBuilder.Icon(System.String)">
            <summary>
                Icons the value
            </summary>
            <param name="value">The value</param>
            <returns>The general setting builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Setting.GeneralSettingBuilder.Name(System.String)">
            <summary>
                Names the value
            </summary>
            <param name="value">The value</param>
            <returns>The general setting builder</returns>
        </member>
        <member name="M:Alis.Builder.Core.Setting.GeneralSettingBuilder.SplashScreen(System.Func{Alis.Builder.Core.Entity.SplashScreenBuilder,Alis.Core.Entity.SplashScreen})">
            <summary>
                Splashes the screen using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The general setting builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Setting.GraphicSettingBuilder">
            <summary>
                The graphic setting builder class
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Setting.GraphicSettingBuilder.graphicSetting">
            <summary>
                The graphic setting
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Setting.GraphicSettingBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The graphic setting</returns>
        </member>
        <member name="M:Alis.Builder.Core.Setting.GraphicSettingBuilder.Window(System.Func{Alis.Builder.Core.Entity.WindowBuilder,Alis.Core.Entity.Window})">
            <summary>
                Windows the value
            </summary>
            <param name="value">The value</param>
            <returns>The graphic setting builder</returns>
        </member>
        <member name="T:Alis.Builder.Core.Setting.SettingBuilder">
            <summary>
                Setting builder
            </summary>
        </member>
        <member name="F:Alis.Builder.Core.Setting.SettingBuilder.settingBase">
            <summary>
                The setting base
            </summary>
        </member>
        <member name="M:Alis.Builder.Core.Setting.SettingBuilder.Build">
            <summary>
                Build setting
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alis.Builder.SoundGameBuilder">
            <summary>
                The sound game builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="P:Alis.Builder.SoundGameBuilder.SoundGame">
            <summary>
                Gets the value of the sound game
            </summary>
        </member>
        <member name="M:Alis.Builder.SoundGameBuilder.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The sound game</returns>
        </member>
        <member name="M:Alis.Builder.SoundGameBuilder.Run">
            <summary>
                Runs this instance
            </summary>
        </member>
        <member name="T:Alis.Builder.VideoGameBuilder">
            <summary>
                The video game builder class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuild`1" />
        </member>
        <member name="P:Alis.Builder.VideoGameBuilder.videoGame">
            <summary>Gets or sets the video game.</summary>
            <value>The video game.</value>
        </member>
        <member name="M:Alis.Builder.VideoGameBuilder.Build">
            <summary>Builds this instance.</summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Builder.VideoGameBuilder.Manager``1(System.Func{Alis.Builder.Core.Manager.SceneManagerBuilder,Alis.Core.Manager.Scene.SceneManager})">
            <summary>
                Managers the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The video game builder</returns>
        </member>
        <member name="M:Alis.Builder.VideoGameBuilder.Settings(System.Func{Alis.Builder.Core.Manager.SettingManagerBuilder,Alis.Core.Manager.Setting.SettingManager})">
            <summary>
                Setting the value
            </summary>
            <param name="value">The value</param>
            <returns>The video game builder</returns>
        </member>
        <member name="M:Alis.Builder.VideoGameBuilder.Run">
            <summary>Runs this instance.</summary>
        </member>
        <member name="T:Alis.ConsoleGame">
            <summary>
                The console game class
            </summary>
            <seealso cref="T:Alis.Core.GameBase" />
        </member>
        <member name="M:Alis.ConsoleGame.Run">
            <summary>
            </summary>
        </member>
        <member name="M:Alis.ConsoleGame.Builder">
            <summary>
                Builders
            </summary>
            <returns>The console game builder</returns>
        </member>
        <member name="T:Alis.Core.Component.Audio.AudioClip">
            <summary>
                The audio clip class
            </summary>
            <seealso cref="T:Alis.Core.Audio.AudioClipBase" />
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioClip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alis.Core.Component.Audio.AudioClip"/> class
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioClip.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Audio.AudioClip" /> class
            </summary>
            <param name="fullPathAudio">The full path audio</param>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioClip.#ctor(System.String,Alis.Core.Audio.AudioBackendType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Audio.AudioClip" /> class
            </summary>
            <param name="fullPathAudio">The full path audio</param>
            <param name="audioBackendType">The audio backend type</param>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioClip.Play">
            <summary>
                Plays this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioClip.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioClip.Resume">
            <summary>
                Resumes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioClip.Builder">
            <summary>
                Builders
            </summary>
            <returns>The audio clip builder</returns>
        </member>
        <member name="T:Alis.Core.Component.Audio.AudioRecorder">
            <summary>
                The audio recorder class
            </summary>
            <seealso cref="T:Alis.Core.Audio.IAudioRecorder" />
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioRecorder.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The audio recorder builder</returns>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioRecorder.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioRecorder.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Component.Audio.AudioSource">
            <summary>
                The audio source class
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioSource.#ctor(Alis.Core.Component.Audio.AudioClip)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Audio.AudioSource" /> class
            </summary>
            <param name="audioClip">The audio clip</param>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioSource.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Audio.AudioSource" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Audio.AudioSource.AudioClip">
            <summary>
                Gets or sets the value of the audio clip
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Audio.AudioSource.IsPlaying">
            <summary>
                Gets the value of the is playing
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Audio.AudioSource.PlayOnAwake">
            <summary>
                Gets or sets the value of the play on awake
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Audio.AudioSource.Mute">
            <summary>
                Gets or sets the value of the mute
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Audio.AudioSource.Loop">
            <summary>
                Gets or sets the value of the loop
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Audio.AudioSource.Volume">
            <summary>
                Gets or sets the value of the volume
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioSource.Play">
            <summary>
                Plays this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioSource.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioSource.Resume">
            <summary>
                Resumes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioSource.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The audio source builder</returns>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioSource.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioSource.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Audio.AudioSource.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Component.Body.BodyBase">
            <summary>
                The physical body class
            </summary>
            <seealso cref="T:Alis.Core.Component.ComponentBase" />
        </member>
        <member name="M:Alis.Core.Component.Body.BodyBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Body.BodyBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Component.Body.RigidBody">
            <summary>
                The rigid body class
            </summary>
            <seealso cref="T:Alis.Core.Component.Body.BodyBase" />
        </member>
        <member name="M:Alis.Core.Component.Body.RigidBody.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The rigid body builder</returns>
        </member>
        <member name="T:Alis.Core.Component.Collider.BoxCollider">
            <summary>
                The box collider class
            </summary>
            <seealso cref="T:Alis.Core.Component.Collider.ColliderBase" />
        </member>
        <member name="F:Alis.Core.Component.Collider.BoxCollider.rectangleShape">
            <summary>
                The rectangle shape
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.IsTrigger">
            <summary>
            Gets or sets the value of the is trigger
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.Width">
            <summary>
                Gets or sets the value of the width
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.Height">
            <summary>
                Gets or sets the value of the height
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.Density">
            <summary>
                Gets or sets the value of the density
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.Rotation">
            <summary>
                Gets or sets the value of the rotation
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.RelativePosition">
            <summary>
                Gets or sets the value of the relative position
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.Body">
            <summary>
                Gets or sets the value of the body
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.AutoTilling">
            <summary>
                Gets or sets the value of the auto tilling
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.BodyType">
            <summary>
                Gets or sets the value of the body type
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.Restitution">
            <summary>
                Gets or sets the value of the restitution
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.Friction">
            <summary>
                Gets or sets the value of the friction
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.FixedRotation">
            <summary>
                Gets or sets the value of the fixed rotation
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.Mass">
            <summary>
                Gets or sets the value of the mass
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.GravityScale">
            <summary>
                Gets or sets the value of the gravity scale
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Collider.BoxCollider.LinearVelocity">
            <summary>
                Gets or sets the value of the linear velocity
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Collider.BoxCollider.Init">
            <summary>
            Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Collider.BoxCollider.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Collider.BoxCollider.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Collider.BoxCollider.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Collider.BoxCollider.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Collider.BoxCollider.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Collider.BoxCollider.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Collider.BoxCollider.Builder">
            <summary>
            Builders this instance
            </summary>
            <returns>The box collider builder</returns>
        </member>
        <member name="T:Alis.Core.Component.Collider.CircleCollider">
            <summary>
                The circle collider class
            </summary>
            <seealso cref="T:Alis.Core.Component.Collider.ColliderBase" />
        </member>
        <member name="T:Alis.Core.Component.Collider.ColliderBase">
            <summary>
                The collider class
            </summary>
            <seealso cref="T:Alis.Core.Component.ComponentBase" />
        </member>
        <member name="M:Alis.Core.Component.Collider.ColliderBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Collider.ColliderBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Component.Light.AreaLight">
            <summary>
                The area light class
            </summary>
            <seealso cref="T:Alis.Core.Component.Light.LightBase" />
        </member>
        <member name="T:Alis.Core.Component.Light.DirectionalLight">
            <summary>
                The directional light class
            </summary>
            <seealso cref="T:Alis.Core.Component.Light.LightBase" />
        </member>
        <member name="T:Alis.Core.Component.Light.LightBase">
            <summary>
                The light class
            </summary>
            <seealso cref="T:Alis.Core.Component.ComponentBase" />
        </member>
        <member name="M:Alis.Core.Component.Light.LightBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Light.LightBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Component.Light.PointLight">
            <summary>
                The point light class
            </summary>
            <seealso cref="T:Alis.Core.Component.Light.LightBase" />
        </member>
        <member name="T:Alis.Core.Component.Light.SpotLight">
            <summary>
                The spot light class
            </summary>
            <seealso cref="T:Alis.Core.Component.Light.LightBase" />
        </member>
        <member name="T:Alis.Core.Component.Mesh.BoxMesh">
            <summary>
                The cube mesh class
            </summary>
        </member>
        <member name="T:Alis.Core.Component.Mesh.CircleMesh">
            <summary>
                The sphere mesh class
            </summary>
            <seealso cref="T:Alis.Core.Component.Mesh.MeshBase" />
        </member>
        <member name="T:Alis.Core.Component.Mesh.MeshBase">
            <summary>
                The mesh class
            </summary>
            <seealso cref="T:Alis.Core.Component.ComponentBase" />
        </member>
        <member name="M:Alis.Core.Component.Mesh.MeshBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Mesh.MeshBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Component.Particle.ExplosionParticle">
            <summary>
                The explosion particle class
            </summary>
            <seealso cref="T:Alis.Core.Component.Particle.ParticleBase" />
        </member>
        <member name="M:Alis.Core.Component.Particle.ExplosionParticle.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The explosion particle builder</returns>
        </member>
        <member name="T:Alis.Core.Component.Particle.ParticleBase">
            <summary>
                The particle class
            </summary>
            <seealso cref="T:Alis.Core.Component.ComponentBase" />
        </member>
        <member name="M:Alis.Core.Component.Particle.ParticleBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Particle.ParticleBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Component.Render.Animation">
            <summary>
                The animation class
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animation.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Render.Animation" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animation.#ctor(System.Collections.Generic.List{Alis.Core.Component.Render.Frame})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Render.Animation" /> class
            </summary>
            <param name="textures">The textures</param>
        </member>
        <member name="P:Alis.Core.Component.Render.Animation.Name">
            <summary>
                Gets or sets the value of the name
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Render.Animation.Index">
            <summary>
                Gets or sets the value of the index
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Render.Animation.Order">
            <summary>
                Gets or sets the value of the order
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Render.Animation.Speed">
            <summary>
                Gets or sets the value of the speed
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Render.Animation.Frames">
            <summary>
                Gets or sets the value of the textures
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animation.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The animator builder</returns>
        </member>
        <member name="M:Alis.Core.Component.Render.Animation.HasNext">
            <summary>
                Describes whether this instance has next
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Component.Render.Animation.NextTexture">
            <summary>
                Nexts the texture
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <returns>The texture</returns>
        </member>
        <member name="M:Alis.Core.Component.Render.Animation.AddFrame(Alis.Core.Component.Render.Frame)">
            <summary>
                Adds the frame using the specified frame
            </summary>
            <param name="frame">The frame</param>
        </member>
        <member name="T:Alis.Core.Component.Render.Animator">
            <summary>
                The animator class
            </summary>
        </member>
        <member name="F:Alis.Core.Component.Render.Animator.currentAnimation">
            <summary>
                The current animation
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Render.Animator" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animator.#ctor(System.Collections.Generic.List{Alis.Core.Component.Render.Animation})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Render.Animator" /> class
            </summary>
            <param name="animations">The animations</param>
        </member>
        <member name="P:Alis.Core.Component.Render.Animator.Timer">
            <summary>
                Gets or sets the value of the timer
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Render.Animator.Sprite">
            <summary>
                Gets or sets the value of the sprite
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Render.Animator.Animations">
            <summary>
                Gets or sets the value of the animations
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animator.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The animator builder</returns>
        </member>
        <member name="M:Alis.Core.Component.Render.Animator.AddAnimation(Alis.Core.Component.Render.Animation)">
            <summary>
                Adds the animation using the specified animation
            </summary>
            <param name="animation">The animation</param>
        </member>
        <member name="M:Alis.Core.Component.Render.Animator.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animator.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animator.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animator.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animator.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Animator.ChangeAnimationTo(System.String)">
            <summary>
                Changes the animation to using the specified name animation
            </summary>
            <param name="nameAnimation">The name animation</param>
        </member>
        <member name="T:Alis.Core.Component.Render.Camera">
            <summary>
                The camera class
            </summary>
            <seealso cref="T:Alis.Core.Component.ComponentBase" />
        </member>
        <member name="F:Alis.Core.Component.Render.Camera.view">
            <summary>
                Gets or sets the value of the view
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Camera.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Render.Camera" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Render.Camera.PointOfView">
            <summary>
                Gets or sets the value of the point of view
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Render.Camera.Resolution">
            <summary>
                Gets or sets the value of the resolution
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Camera.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The camera builder</returns>
        </member>
        <member name="M:Alis.Core.Component.Render.Camera.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Camera.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Camera.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Component.Render.Frame">
            <summary>
                The frame class
            </summary>
            <seealso cref="T:Alis.Core.Graphic.D2.FrameBase" />
        </member>
        <member name="M:Alis.Core.Component.Render.Frame.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Render.Frame" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Frame.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Component.Render.Frame" /> class
            </summary>
            <param name="filePath">The file path</param>
        </member>
        <member name="M:Alis.Core.Component.Render.Frame.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The frame builder</returns>
        </member>
        <member name="T:Alis.Core.Component.Render.Image">
            <summary>
                The image class
            </summary>
        </member>
        <member name="T:Alis.Core.Component.Render.Sprite">
            <summary>
                The sprite class
            </summary>
            <seealso cref="T:Alis.Core.Component.ComponentBase" />
        </member>
        <member name="F:Alis.Core.Component.Render.Sprite.Image">
            <summary>
                The image
            </summary>
        </member>
        <member name="F:Alis.Core.Component.Render.Sprite.size">
            <summary>
                The size
            </summary>
        </member>
        <member name="F:Alis.Core.Component.Render.Sprite.sprite">
            <summary>
                The sprite
            </summary>
        </member>
        <member name="F:Alis.Core.Component.Render.Sprite.texturePath">
            <summary>
                The texture path
            </summary>
        </member>
        <member name="P:Alis.Core.Component.Render.Sprite.Depth">
            <summary>
                The level
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Sprite.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The sprite builder</returns>
        </member>
        <member name="M:Alis.Core.Component.Render.Sprite.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Sprite.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.Render.Sprite.Start">
            <summary>
                Starts this instance
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Alis.Core.Component.Render.Sprite.Update">
            <summary>
                Updates this instance
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Alis.Core.Component.Render.Sprite.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Component.ComponentBase">
            <summary>Define a general component.</summary>
        </member>
        <member name="P:Alis.Core.Component.ComponentBase.GameObject">
            <summary>
                Game Object.
            </summary>
        </member>
        <member name="P:Alis.Core.Component.ComponentBase.IsActive">
            <summary>
                Gets or sets the value of the is active
            </summary>
        </member>
        <member name="P:Alis.Core.Component.ComponentBase.Tag">
            <summary>
                Gets or sets the value of the tag
            </summary>
        </member>
        <member name="P:Alis.Core.Component.ComponentBase.Transform">
            <summary>
                Gets or sets the value of the tag
            </summary>
        </member>
        <member name="P:Alis.Core.Component.ComponentBase.Destroyed">
            <summary>
                Gets or sets the value of the destroyed
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.AttachGameObject(Alis.Core.Entity.GameObjectBase)">
            <summary>
                Attaches the game object using the specified game object
            </summary>
            <param name="gameObject">The game object</param>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.OnDestroy">
            <summary>
                Ons the destroy
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Enable">
            <summary>Enables this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Disable">
            <summary>Disables this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Awake">
            <summary>Awakes this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Start">
            <summary>Starts this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.BeforeUpdate">
            <summary>Befores the update.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Update">
            <summary>Updates this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.AfterUpdate">
            <summary>Afters the update.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.FixedUpdate">
            <summary>Fixeds the update.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Stop">
            <summary>Stops this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Reset">
            <summary>Resets this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Destroy">
            <summary>
                Destroys this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.OnPressKey(System.String)">
            <summary>
                Ons the press key using the specified key
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.OnPressDownKey(System.String)">
            <summary>
                Ons the press down key using the specified key
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.OnReleaseKey(System.String)">
            <summary>
                Ons the release key using the specified key
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.Exit">
            <summary>Exits this instance.</summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.DestroyImmediate">
            <summary>
                Destroys the immediate
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.DontDestroyOnLoad">
            <summary>
                Donts the destroy on load
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.FindObjectOfType">
            <summary>
                Finds the object of type
            </summary>
        </member>
        <member name="M:Alis.Core.Component.ComponentBase.FindObjectsOfType">
            <summary>
                Finds the objects of type
            </summary>
        </member>
        <member name="T:Alis.Core.Entity.GameObject">
            <summary>Represent a object of the game.</summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Entity.GameObject" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Entity.GameObject" /> class
            </summary>
            <param name="name">The name</param>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The game object builder</returns>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.Awake">
            <summary>Awakes this instance.</summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.Start">
            <summary>Starts this instance.</summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.BeforeUpdate">
            <summary>Befores the update.</summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.Update">
            <summary>Updates this instance.</summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.AfterUpdate">
            <summary>Afters the update.</summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.FixedUpdate">
            <summary>Afters the update.</summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.DispatchEvents">
            <summary>
                Dispatches the events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.Stop">
            <summary>Stops this instance.</summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.Reset">
            <summary>Resets this instance.</summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.Exit">
            <summary>Exits this instance.</summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.CreatePrimitive">
            <summary>
                Creates the primitive
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.Find(System.String)">
            <summary>
                Finds
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.FindGameObjectsWithTag">
            <summary>
                Finds the game objects with tag
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObject.FindWithTag(System.String)">
            <summary>
                Finds the with tag
            </summary>
        </member>
        <member name="T:Alis.Core.Entity.Scene">
            <summary>
                The scene class
            </summary>
        </member>
        <member name="F:Alis.Core.Entity.Scene.gameObjects">
            <summary>
                The game objects
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Entity.Scene" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.BeforeUpdate">
            <summary>
                Before run the update
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.FixedUpdate">
            <summary>
                Update every frame.
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Scene.Add(Alis.Core.Entity.GameObject)">
            <summary>
                Adds the game object
            </summary>
            <param name="gameObject">The game object</param>
        </member>
        <member name="T:Alis.Core.Entity.SplashScreen">
            <summary>
                The splash screen class
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.SplashScreen.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Entity.SplashScreen" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.SplashScreen.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Entity.SplashScreen" /> class
            </summary>
            <param name="filePath">The file path</param>
        </member>
        <member name="P:Alis.Core.Entity.SplashScreen.Enabled">
            <summary>
                Gets or sets the value of the enabled
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.SplashScreen.Style">
            <summary>
                Gets or sets the value of the style
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.SplashScreen.filePath">
            <summary>
                The file path
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.SplashScreen.EnabledAlisLogo">
            <summary>
                Gets or sets the value of the enabled alis logo
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.SplashScreen.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The splash screen builder</returns>
        </member>
        <member name="T:Alis.Core.Entity.Style">
            <summary>
                The style enum
            </summary>
        </member>
        <member name="F:Alis.Core.Entity.Style.Light">
            <summary>
                The light style
            </summary>
        </member>
        <member name="F:Alis.Core.Entity.Style.Dark">
            <summary>
                The dark style
            </summary>
        </member>
        <member name="T:Alis.Core.Entity.Transform">
            <summary>Control the object space in the game.</summary>
        </member>
        <member name="T:Alis.Core.Entity.Window">
            <summary>
                The window class
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.Window.Background">
            <summary>
                Gets or sets the value of the background
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.Window.Resolution">
            <summary>
                Gets or sets the value of the resolution
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.Window.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The window builder</returns>
        </member>
        <member name="T:Alis.Core.Entity.GameObjectBase">
            <summary>
                The game object base class
            </summary>
        </member>
        <member name="F:Alis.Core.Entity.GameObjectBase.components">
            <summary>
                The components
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.GameObjectBase.Transform">
            <summary>
                The transform
            </summary>
        </member>
        <member name="M:Alis.Core.Entity.GameObjectBase.AddComponent``1(``0)">
            <summary>
                Adds the component
            </summary>
            <param name="component">The component</param>
        </member>
        <member name="M:Alis.Core.Entity.GameObjectBase.RemoveComponent``1(``0)">
            <summary>
                Removes the component
            </summary>
            <param name="component">The component</param>
        </member>
        <member name="M:Alis.Core.Entity.GameObjectBase.ContainComponent(Alis.Core.Component.ComponentBase)">
            <summary>
                Describes whether this instance contain component
            </summary>
            <param name="component">The component</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Entity.GameObjectBase.GetComponent``1">
            <summary>
                Gets the component
            </summary>
            <typeparam name="T">The </typeparam>
            <returns>The</returns>
        </member>
        <member name="M:Alis.Core.Entity.GameObjectBase.Contains``1">
            <summary>
            Describes whether this instance contains
            </summary>
            <typeparam name="T">The </typeparam>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Entity.SceneBase">
            <summary>
                The scene base class
            </summary>
            <seealso cref="T:Alis.Core.Aspect.Base.AlisObject" />
        </member>
        <member name="T:Alis.Core.Entity.TransformBase">
            <summary>
                The transform base class
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.TransformBase.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.TransformBase.Rotation">
            <summary>
                The rotation
            </summary>
        </member>
        <member name="P:Alis.Core.Entity.TransformBase.Scale">
            <summary>
                The scale
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Audio.AudioManager">
            <summary>
                The audio manager class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase" />
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManager.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Audio.AudioManagerBase">
            <summary>
                The audio manager base class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase" />
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Audio.AudioManagerBase.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Graphic.GraphicManager">
            <summary>
                The graphic manager class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase" />
        </member>
        <member name="F:Alis.Core.Manager.Graphic.GraphicManager.defaultSize">
            <summary>
                The vector
            </summary>
        </member>
        <member name="F:Alis.Core.Manager.Graphic.GraphicManager.renderWindow">
            <summary>
                The renderWindow
            </summary>
        </member>
        <member name="F:Alis.Core.Manager.Graphic.GraphicManager.styles">
            <summary>
                The default
            </summary>
        </member>
        <member name="F:Alis.Core.Manager.Graphic.GraphicManager.VideoMode">
            <summary>
                The video mode
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Manager.Graphic.GraphicManager" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Graphic.GraphicManager.Sprites">
            <summary>
                Gets or sets the value of the sprites
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Graphic.GraphicManager.Colliders">
            <summary>
            Gets or sets the value of the colliders
            </summary>
        </member>
        <member name="F:Alis.Core.Manager.Graphic.GraphicManager.Current">
            <summary>
                The current
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.RenderWindowOnKeyPressed(System.Object,Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs)">
            <summary>
                Renders the window on key pressed using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.RenderWindowOnResized(System.Object,Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs)">
            <summary>
                Renders the window on resized using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.InitRenderWindow">
            <summary>
                Inits the render window
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.RenderWindowOnClosed(System.Object,System.EventArgs)">
            <summary>
                Windows the on closed using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.Attach(Alis.Core.Component.Render.Sprite)">
            <summary>
                Attaches the sprite
            </summary>
            <param name="sprite">The sprite</param>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.UnAttach(Alis.Core.Component.Render.Sprite)">
            <summary>
                Uns the attach using the specified sprite
            </summary>
            <param name="sprite">The sprite</param>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.SetView(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Sets the view using the specified view
            </summary>
            <param name="view">The view</param>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManager.AttachCollider(Alis.Core.Graphic.D2.SFML.Graphics.Shape)">
            <summary>
            Attaches the collider using the specified shape
            </summary>
            <param name="shape">The shape</param>
        </member>
        <member name="T:Alis.Core.Manager.Graphic.GraphicManagerBase">
            <summary>
                The graphic manager base class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase" />
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Graphic.GraphicManagerBase.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Input.InputManager">
            <summary>
            </summary>
        </member>
        <member name="F:Alis.Core.Manager.Input.InputManager.keys">
            <summary>
                Array of key of keyboard
            </summary>
        </member>
        <member name="F:Alis.Core.Manager.Input.InputManager.tempListOfKeys">
            <summary>
                Temp list of keys
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManager.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Input.InputManagerBase">
            <summary>
                The input manager base class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase" />
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Input.InputManagerBase.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Physic.PhysicManager">
            <summary>
                The physic manager class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase" />
        </member>
        <member name="P:Alis.Core.Manager.Physic.PhysicManager.World">
            <summary>
            Gets or sets the value of the world
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManager.AttachBody(Alis.Core.Physic.Dynamics.Body)">
            <summary>
            Attaches the body using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="T:Alis.Core.Manager.Physic.PhysicManagerBase">
            <summary>
                The physic manager base class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase" />
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Physic.PhysicManagerBase.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Scene.SceneManager">
            <summary>
                Scene manager
            </summary>
        </member>
        <member name="F:Alis.Core.Manager.Scene.SceneManager.currentScene">
            <summary>
                The current scene
            </summary>
        </member>
        <member name="F:Alis.Core.Manager.Scene.SceneManager.scenes">
            <summary>
                Scene list
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Manager.Scene.SceneManager" /> class
            </summary>
        </member>
        <member name="F:Alis.Core.Manager.Scene.SceneManager.currentSceneManager">
            <summary>
                Define the current scene manager
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.BeforeUpdate">
            <summary>
                Before the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.FixedUpdate">
            <summary>
                Fix the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManager.Add(Alis.Core.Entity.Scene)">
            <summary>
                Adds the scene
            </summary>
            <param name="scene">The scene</param>
        </member>
        <member name="T:Alis.Core.Manager.Scene.SceneManagerBase">
            <summary>
                The scene manager base class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase" />
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Scene.SceneManagerBase.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Setting.SettingManager">
            <summary>
                The setting manager class
            </summary>
            <seealso cref="T:Alis.Core.Manager.Setting.SettingManagerBase" />
        </member>
        <member name="P:Alis.Core.Manager.Setting.SettingManager.General">
            <summary>
                Gets or sets the value of the general
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Setting.SettingManager.Audio">
            <summary>
                Gets or sets the value of the audio
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Setting.SettingManager.Debug">
            <summary>
                Gets or sets the value of the debug
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Setting.SettingManager.Graphic">
            <summary>
                Gets or sets the value of the graphic
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Setting.SettingManagerBase">
            <summary>
                The setting manager base class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase" />
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Setting.SettingManagerBase.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Time.TimeManager">
            <summary>
                The time manager class
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.Time.TimeManagerBase">
            <summary>
                The time manager base class
            </summary>
            <seealso cref="T:Alis.Core.Manager.ManagerBase" />
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Manager.Time.TimeManagerBase" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.Timer">
            <summary>
                Gets the value of the timer
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.FixedTime">
            <summary>
                Gets or sets the value of the fixed time
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.TimeScale">
            <summary>
                Gets or sets the value of the time scale
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.FrameCount">
            <summary>
                Gets or sets the value of the frame count
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.CurrentFrame">
            <summary>
                Gets or sets the value of the current frame
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.FixedDeltaTime">
            <summary>
                Gets or sets the value of the fixed delta time
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.MaximumFramesPerSecond">
            <summary>
                Gets or sets the value of the maximum frames per second
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.TimeStep">
            <summary>
                Gets or sets the value of the time step
            </summary>
        </member>
        <member name="P:Alis.Core.Manager.Time.TimeManagerBase.MaximunAllowedTimeStep">
            <summary>
                Gets or sets the value of the maximun allowed time step
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.SyncFixedDeltaTime">
            <summary>
                Syncs the fixed delta time
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.IsNewFrame">
            <summary>
                Describes whether this instance is new frame
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.UpdateTimeStep">
            <summary>
                Updates the time step
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.CounterFrames">
            <summary>
                Counters the frames
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.UpdateFixedTime">
            <summary>
                Updates the fixed time
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Awake">
            <summary>
                Awakes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Start">
            <summary>
                Starts this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.BeforeUpdate">
            <summary>
                Befores the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.AfterUpdate">
            <summary>
                Afters the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.FixedUpdate">
            <summary>
                Fixeds the update
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.DispatchEvents">
            <summary>
                Dispatches the events
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.Time.TimeManagerBase.Exit">
            <summary>
                Exits this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Manager.ManagerBase">
            <summary>
                Manager base
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Init">
            <summary>
                Inits this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Awake">
            <summary>Awakes this instance.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Start">
            <summary>Starts this instance.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.BeforeUpdate">
            <summary>Befores the update.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Update">
            <summary>Updates this instance.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.AfterUpdate">
            <summary>Afters the update.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.FixedUpdate">
            <summary>Fixeds the update.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.DispatchEvents">
            <summary>Dispatches the events.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Draw">
            <summary>
            Draws this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Reset">
            <summary>Resets this instance.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Stop">
            <summary>Stops this instance.</summary>
        </member>
        <member name="M:Alis.Core.Manager.ManagerBase.Exit">
            <summary>Exits this instance.</summary>
        </member>
        <member name="T:Alis.Core.Setting.AudioSetting">
            <summary>
                The audio setting class
            </summary>
        </member>
        <member name="M:Alis.Core.Setting.AudioSetting.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The audio setting builder</returns>
        </member>
        <member name="T:Alis.Core.Setting.DebugSetting">
            <summary>
                The debug class
            </summary>
        </member>
        <member name="P:Alis.Core.Setting.DebugSetting.Level">
            <summary>
                The log level
            </summary>
        </member>
        <member name="P:Alis.Core.Setting.DebugSetting.CreateFileLog">
            <summary>
                Gets or sets the value of the create file log
            </summary>
        </member>
        <member name="M:Alis.Core.Setting.DebugSetting.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The debug setting builder</returns>
        </member>
        <member name="T:Alis.Core.Setting.GeneralSetting">
            <summary>Define a </summary>
        </member>
        <member name="P:Alis.Core.Setting.GeneralSetting.Name">
            <summary>
                Gets or sets the value of the game name
            </summary>
        </member>
        <member name="P:Alis.Core.Setting.GeneralSetting.Author">
            <summary>
                Gets or sets the value of the author
            </summary>
        </member>
        <member name="P:Alis.Core.Setting.GeneralSetting.Description">
            <summary>
                Gets or sets the value of the description
            </summary>
        </member>
        <member name="P:Alis.Core.Setting.GeneralSetting.IconFile">
            <summary>
                Gets or sets the value of the icon file
            </summary>
        </member>
        <member name="P:Alis.Core.Setting.GeneralSetting.SplashScreen">
            <summary>
                Gets or sets the value of the splash screen
            </summary>
        </member>
        <member name="M:Alis.Core.Setting.GeneralSetting.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The general setting builder</returns>
        </member>
        <member name="T:Alis.Core.Setting.GraphicSetting">
            <summary>
                The graphic setting class
            </summary>
            <seealso cref="T:Alis.Core.Setting.SettingBase" />
            <seealso cref="T:Alis.Core.Aspect.Fluent.IBuilder`1" />
        </member>
        <member name="P:Alis.Core.Setting.GraphicSetting.Window">
            <summary>
                Gets or sets the value of the window
            </summary>
        </member>
        <member name="M:Alis.Core.Setting.GraphicSetting.Builder">
            <summary>
                Builders this instance
            </summary>
            <returns>The graphic setting builder</returns>
        </member>
        <member name="T:Alis.Core.Setting.SettingBase">
            <summary>
                The setting base class
            </summary>
        </member>
        <member name="T:Alis.Core.GameBase">
            <summary>
                Define a game.
            </summary>
        </member>
        <member name="F:Alis.Core.GameBase.Managers">
            <summary>
                The manager base
            </summary>
        </member>
        <member name="P:Alis.Core.GameBase.TimeManager">
            <summary>
                The time manager base
            </summary>
        </member>
        <member name="F:Alis.Core.GameBase.IsRunning">
            <summary>
                Active game
            </summary>
        </member>
        <member name="M:Alis.Core.GameBase.Run">
            <summary>
                Run program
            </summary>
        </member>
        <member name="M:Alis.Core.GameBase.FindManager``1">
            <summary>
                Gets the manager using the specified type
            </summary>
            <typeparam name="T">The </typeparam>
            <returns>The manager base</returns>
        </member>
        <member name="M:Alis.Core.GameBase.SetManager``1(``0)">
            <summary>
                Sets the manager using the specified manager
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="manager">The manager</param>
        </member>
        <member name="T:Alis.Core.Audio.AudioBackendType">
            <summary>
                The audio type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.AudioBackendType.OS">
            <summary>
                The os audio type
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.AudioBackendType.SFML">
            <summary>
                The sfml audio type
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.AudioClipBase">
            <summary>
                The audio clip base class
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alis.Core.Audio.AudioClipBase"/> class
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.AudioClipBase.music">
            <summary>
                The music
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.AudioClipBase.player">
            <summary>
                The player
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Audio.AudioClipBase" /> class
            </summary>
            <param name="fullPathAudio">The full path audio</param>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alis.Core.Audio.AudioClipBase"/> class
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.#ctor(System.String,Alis.Core.Audio.AudioBackendType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Audio.AudioClipBase" /> class
            </summary>
            <param name="fullPathAudio">The full path audio</param>
            <param name="audioBackendType">The audio backend type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.SampleRate">
            <summary>
                Gets or sets the value of the sample rate
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.ChannelCount">
            <summary>
                Gets or sets the value of the channel count
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.Duration">
            <summary>
                Gets or sets the value of the duration
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.Pitch">
            <summary>
                Gets or sets the value of the pitch
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.IsMute">
            <summary>
                Gets or sets the value of the is mute
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.IsPlaying">
            <summary>
                Gets or sets the value of the is playing
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.FullPathAudioFile">
            <summary>
                Gets or sets the value of the full path audio file
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.AudioBackendType">
            <summary>
                Gets the value of the audio backend type
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.IsLooping">
            <summary>
                Gets or sets the value of the is loopping
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.AudioClipBase.Volume">
            <summary>
                Gets or sets the value of the volume
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.Play">
            <summary>
                Plays this instance
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.Stop">
            <summary>
                Stops this instance
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Alis.Core.Audio.AudioClipBase.Resume">
            <summary>
                Resumes this instance
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Alis.Core.Audio.IAudioRecorder">
            <summary>
                The audio recorder interface
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.IAudioSource`1">
            <summary>
                The audio source interface
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.AudioClip">
            <summary>
                Gets or sets the value of the audio clip base
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.IsPlaying">
            <summary>
                Gets the value of the is playing
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.PlayOnAwake">
            <summary>
                Gets or sets the value of the play on awake
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.Mute">
            <summary>
                Gets or sets the value of the mute
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.Loop">
            <summary>
                Gets or sets the value of the loop
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.IAudioSource`1.Volume">
            <summary>
                Gets or sets the value of the volume
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.IAudioSource`1.Play">
            <summary>
                Plays this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.IAudioSource`1.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.IAudioSource`1.Resume">
            <summary>
                Resumes this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.ObjectBase">
            <summary>
                The ObjectBase class is an abstract base for every
                SFML object. It's meant for internal use only
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.ObjectBase.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alis.Core.Audio.ObjectBase"/> class
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.ObjectBase.myCPointer">
            <summary>
                The zero
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.ObjectBase.#ctor(System.IntPtr)">
            <summary>
                Construct the object from a pointer to the C library object
            </summary>
            <param name="cPointer">Internal pointer to the object in the C libraries</param>
        </member>
        <member name="M:Alis.Core.Audio.ObjectBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alis.Core.Audio.ObjectBase"/> class
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.ObjectBase.CPointer">
            <summary>
                Access to the internal pointer of the object.
                For internal use only
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.ObjectBase.Dispose">
            <summary>
                Explicitly dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.ObjectBase.Finalize">
            <summary>
                Dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.ObjectBase.Dispose(System.Boolean)">
            <summary>
                Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="M:Alis.Core.Audio.ObjectBase.Destroy(System.Boolean)">
            <summary>
                Destroy the object (implementation is left to each derived class)
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="T:Alis.Core.Audio.OS.Interfaces.IPlayer">
            <summary>
                The player interface
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Interfaces.IPlayer.Playing">
            <summary>
                Gets the value of the playing
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Interfaces.IPlayer.Paused">
            <summary>
                Gets the value of the paused
            </summary>
        </member>
        <member name="E:Alis.Core.Audio.OS.Interfaces.IPlayer.PlaybackFinished">
            <summary>
                playback
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Interfaces.IPlayer.Play(System.String)">
            <summary>
                Plays the file name
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Interfaces.IPlayer.Pause">
            <summary>
                Pauses this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Interfaces.IPlayer.Resume">
            <summary>
                Resumes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Interfaces.IPlayer.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Interfaces.IPlayer.SetVolume(System.Byte)">
            <summary>
                Sets the volume using the specified percent
            </summary>
            <param name="percent">The percent</param>
        </member>
        <member name="T:Alis.Core.Audio.OS.Player">
            <summary>
                The player class
            </summary>
            <seealso cref="T:Alis.Core.Audio.OS.Interfaces.IPlayer" />
        </member>
        <member name="F:Alis.Core.Audio.OS.Player._internalPlayer">
            <summary>
                The internal player
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Audio.OS.Player" /> class
            </summary>
            <exception cref="T:System.Exception">No implementation exist for the current OS</exception>
        </member>
        <member name="E:Alis.Core.Audio.OS.Player.PlaybackFinished">
            <summary>
                Internally, sets Playing flag to false. Additional handlers can be attached to it to handle any custom logic.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Player.Playing">
            <summary>
                Indicates that the audio is currently playing.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Player.Paused">
            <summary>
                Indicates that the audio playback is currently paused.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.Play(System.String)">
            <summary>
                Will stop any current playback and will start playing the specified audio file. The fileName parameter can be an
                absolute path or a path relative to the directory where the library is located. Sets Playing flag to true. Sets
                Paused flag to false.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.Pause">
            <summary>
                Pauses any ongong playback. Sets Paused flag to true. Doesn't modify Playing flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.Resume">
            <summary>
                Resumes any paused playback. Sets Paused flag to false. Doesn't modify Playing flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.Stop">
            <summary>
                Stops any current playback and clears the buffer. Sets Playing and Paused flags to false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.SetVolume(System.Byte)">
            <summary>
                Sets the playing volume as percent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Player.OnPlaybackFinished(System.Object,System.EventArgs)">
            <summary>
                Ons the playback finished using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="T:Alis.Core.Audio.OS.Players.LinuxPlayer">
            <summary>
                The linux player class
            </summary>
            <seealso cref="T:Alis.Core.Audio.OS.Players.UnixPlayerBase" />
            <seealso cref="T:Alis.Core.Audio.OS.Interfaces.IPlayer" />
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.LinuxPlayer.SetVolume(System.Byte)">
            <summary>
                Sets the volume using the specified percent
            </summary>
            <param name="percent">The percent</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Percent can't exceed 100</exception>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.LinuxPlayer.GetBashCommand(System.String)">
            <summary>
                Gets the bash command using the specified file name
            </summary>
            <param name="fileName">The file name</param>
            <returns>The string</returns>
        </member>
        <member name="T:Alis.Core.Audio.OS.Players.MacPlayer">
            <summary>
                The mac player class
            </summary>
            <seealso cref="T:Alis.Core.Audio.OS.Players.UnixPlayerBase" />
            <seealso cref="T:Alis.Core.Audio.OS.Interfaces.IPlayer" />
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.MacPlayer.SetVolume(System.Byte)">
            <summary>
                Sets the volume using the specified percent
            </summary>
            <param name="percent">The percent</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Percent can't exceed 100</exception>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.MacPlayer.GetBashCommand(System.String)">
            <summary>
                Gets the bash command using the specified file name
            </summary>
            <param name="fileName">The file name</param>
            <returns>The string</returns>
        </member>
        <member name="T:Alis.Core.Audio.OS.Players.UnixPlayerBase">
            <summary>
                The unix player base class
            </summary>
            <seealso cref="T:Alis.Core.Audio.OS.Interfaces.IPlayer" />
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.UnixPlayerBase._process">
            <summary>
                The process
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.UnixPlayerBase.PauseProcessCommand">
            <summary>
                The pause process command
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.UnixPlayerBase.ResumeProcessCommand">
            <summary>
                The resume process command
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Players.UnixPlayerBase.Playing">
            <summary>
                Gets or sets the value of the playing
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Players.UnixPlayerBase.Paused">
            <summary>
                Gets or sets the value of the paused
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.Play(System.String)">
            <summary>
                Plays the file name
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.Pause">
            <summary>
                Pauses this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.Resume">
            <summary>
                Resumes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.SetVolume(System.Byte)">
            <summary>
                Sets the volume using the specified percent
            </summary>
            <param name="percent">The percent</param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.GetBashCommand(System.String)">
            <summary>
                Gets the bash command using the specified file name
            </summary>
            <param name="fileName">The file name</param>
            <returns>The string</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.StartBashProcess(System.String)">
            <summary>
                Starts the bash process using the specified command
            </summary>
            <param name="command">The command</param>
            <returns>The process</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.UnixPlayerBase.HandlePlaybackFinished(System.Object,System.EventArgs)">
            <summary>
                Handles the playback finished using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="T:Alis.Core.Audio.OS.Players.WindowsPlayer">
            <summary>
                The windows player class
            </summary>
            <seealso cref="T:Alis.Core.Audio.OS.Interfaces.IPlayer" />
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.WindowsPlayer._fileName">
            <summary>
                The file name
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.WindowsPlayer._playbackTimer">
            <summary>
                The playback timer
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.OS.Players.WindowsPlayer._playStopwatch">
            <summary>
                The play stopwatch
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Players.WindowsPlayer.Playing">
            <summary>
                Gets or sets the value of the playing
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.OS.Players.WindowsPlayer.Paused">
            <summary>
                Gets or sets the value of the paused
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.Play(System.String)">
            <summary>
                Plays the file name
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.Pause">
            <summary>
                Pauses this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.Resume">
            <summary>
                Resumes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.Stop">
            <summary>
                Stops this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.SetVolume(System.Byte)">
            <summary>
                Sets the volume using the specified percent
            </summary>
            <param name="percent">The percent</param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.mciSendString(System.String,System.Text.StringBuilder,System.Int32,System.IntPtr)">
            <summary>
                Mcis the send string using the specified command
            </summary>
            <param name="command">The command</param>
            <param name="stringReturn">The string return</param>
            <param name="returnLength">The return length</param>
            <param name="hwndCallback">The hwnd callback</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.mciGetErrorString(System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>
                Mcis the get error string using the specified error code
            </summary>
            <param name="errorCode">The error code</param>
            <param name="errorText">The error text</param>
            <param name="errorTextSize">The error text size</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.waveOutSetVolume(System.IntPtr,System.UInt32)">
            <summary>
                Waves the out set volume using the specified hwo
            </summary>
            <param name="hwo">The hwo</param>
            <param name="dwVolume">The dw volume</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.HandlePlaybackFinished(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
                Handles the playback finished using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="M:Alis.Core.Audio.OS.Players.WindowsPlayer.ExecuteMsiCommand(System.String)">
            <summary>
                Executes the msi command using the specified command string
            </summary>
            <param name="commandString">The command string</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Alis.Core.Audio.OS.Utils.FileUtil">
            <summary>
                The file util class
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.OS.Utils.FileUtil.TempDirName">
            <summary>
                The temp dir name
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.OS.Utils.FileUtil.CheckFileToPlay(System.String)">
            <summary>
                Checks the file to play using the specified original file name
            </summary>
            <param name="originalFileName">The original file name</param>
            <returns>The file name to return</returns>
        </member>
        <member name="M:Alis.Core.Audio.OS.Utils.FileUtil.ClearTempFiles">
            <summary>
                Clears the temp files
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.Listener">
            <summary>
                The audio listener is the point in the scene
                from where all the sounds are heard
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Listener.GlobalVolume">
            <summary>
                The volume is a number between 0 and 100; it is combined with
                the individual volume of each sound / music.
                The default value for the volume is 100 (maximum).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Listener.Position">
            <summary>
                3D position of the listener (default is (0, 0, 0))
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Listener.Direction">
            <summary>
                The direction (also called "at vector") is the vector
                pointing forward from the listener's perspective. Together
                with the up vector, it defines the 3D orientation of the
                listener in the scene. The direction vector doesn't
                have to be normalized.
                The default listener's direction is (0, 0, -1).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Listener.UpVector">
            <summary>
                The up vector is the vector that points upward from the
                listener's perspective. Together with the direction, it
                defines the 3D orientation of the listener in the scene.
                The up vector doesn't have to be normalized.
                The default listener's up vector is (0, 1, 0). It is usually
                not necessary to change it, especially in 2D scenarios.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_setGlobalVolume(System.Single)">
            <summary>
                Sfs the listener set global volume using the specified volume
            </summary>
            <param name="volume">The volume</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_getGlobalVolume">
            <summary>
                Sfs the listener get global volume
            </summary>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_setPosition(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the listener set position using the specified position
            </summary>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_getPosition">
            <summary>
                Sfs the listener get position
            </summary>
            <returns>The vector 3f</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_setDirection(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the listener set direction using the specified direction
            </summary>
            <param name="direction">The direction</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_getDirection">
            <summary>
                Sfs the listener get direction
            </summary>
            <returns>The vector 3f</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_setUpVector(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the listener set up vector using the specified up vector
            </summary>
            <param name="upVector">The up vector</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Listener.sfListener_getUpVector">
            <summary>
                Sfs the listener get up vector
            </summary>
            <returns>The vector 3f</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.Music">
            <summary>
                Streamed music played from an audio file
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.Music.myStream">
            <summary>
                The my stream
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.#ctor(System.String)">
            <summary>
                Constructs a music from an audio file
            </summary>
            <param name="filename">Path of the music file to open</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.#ctor(System.IO.Stream)">
            <summary>
                Constructs a music from a custom stream
            </summary>
            <param name="stream">Source stream to read from</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.#ctor(System.Byte[])">
            <summary>
                Constructs a music from an audio file in memory
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.SampleRate">
            <summary>
                Sample rate of the music.
                The sample rate is the number of audio samples played per
                second. The higher, the better the quality.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.ChannelCount">
            <summary>
                Number of channels (1 = mono, 2 = stereo)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Status">
            <summary>
                Current status of the music (see SoundStatus enum)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Duration">
            <summary>
                Total duration of the music
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Loop">
            <summary>
                Flag if the music should loop after reaching the end.
                If set, the music will restart from beginning after
                reaching the end and so on, until it is stopped or
                Loop = false is set.
                The default looping state for music is false.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Pitch">
            <summary>
                Pitch of the music.
                The pitch represents the perceived fundamental frequency
                of a sound; thus you can make a sound more acute or grave
                by changing its pitch. A side effect of changing the pitch
                is to modify the playing speed of the sound as well.
                The default value for the pitch is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Volume">
            <summary>
                Volume of the music.
                The volume is a value between 0 (mute) and 100 (full volume).
                The default value for the volume is 100.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Position">
            <summary>
                3D position of the music in the audio scene.
                Only sounds with one channel (mono sounds) can be
                spatialized.
                The default position of a sound is (0, 0, 0).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.RelativeToListener">
            <summary>
                Make the music's position relative to the listener or absolute.
                Making a sound relative to the listener will ensure that it will always
                be played the same way regardless the position of the listener.
                This can be useful for non-spatialized sounds, sounds that are
                produced by the listener, or sounds attached to it.
                The default value is false (position is absolute).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.MinDistance">
            <summary>
                Minimum distance of the music.
                The "minimum distance" of a sound is the maximum
                distance at which it is heard at its maximum volume. Further
                than the minimum distance, it will start to fade out according
                to its attenuation factor. A value of 0 ("inside the head
                of the listener") is an invalid value and is forbidden.
                The default value of the minimum distance is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.Attenuation">
            <summary>
                Attenuation factor of the music.
                The attenuation is a multiplicative factor which makes
                the music more or less loud according to its distance
                from the listener. An attenuation of 0 will produce a
                non-attenuated sound, i.e. its volume will always be the same
                whether it is heard from near or from far. On the other hand,
                an attenuation value such as 100 will make the sound fade out
                very quickly as it gets further from the listener.
                The default value of the attenuation is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.PlayingOffset">
            <summary>
                Current playing position of the music.
                The playing position can be changed when the music is
                either paused or playing.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Music.LoopPoints">
            <summary>
                Current loop points of the music.
                Since setting performs some adjustments on the
                provided values and rounds them to internal samples, getting this
                value later is not guaranteed to return the same times passed
                into it. However, it is guaranteed to return times that will map
                to the valid internal samples of this Music if they are later
                set again.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.Play">
            <summary>
                Start or resume playing the audio stream.
                This function starts the stream if it was stopped, resumes
                it if it was paused, and restarts it from beginning if it
                was it already playing.
                This function uses its own thread so that it doesn't block
                the rest of the program while the stream is played.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.Pause">
            <summary>
                Pause the audio stream.
                This function pauses the stream if it was playing,
                otherwise (stream already paused or stopped) it has no effect.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.Stop">
            <summary>
                Stop playing the audio stream.
                This function stops the stream if it was playing or paused,
                and does nothing if it was already stopped.
                It also resets the playing position (unlike Pause()).
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_createFromFile(System.String)">
            <summary>
                Sfs the music create from file using the specified filename
            </summary>
            <param name="filename">The filename</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_createFromStream(System.IntPtr)">
            <summary>
                Sfs the music create from stream using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_createFromMemory(System.IntPtr,System.UInt64)">
            <summary>
                Sfs the music create from memory using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="size">The size</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_destroy(System.IntPtr)">
            <summary>
                Sfs the music destroy using the specified music stream
            </summary>
            <param name="musicStream">The music stream</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_play(System.IntPtr)">
            <summary>
                Sfs the music play using the specified music
            </summary>
            <param name="music">The music</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_pause(System.IntPtr)">
            <summary>
                Sfs the music pause using the specified music
            </summary>
            <param name="music">The music</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_stop(System.IntPtr)">
            <summary>
                Sfs the music stop using the specified music
            </summary>
            <param name="music">The music</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getStatus(System.IntPtr)">
            <summary>
                Sfs the music get status using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The sound status</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getDuration(System.IntPtr)">
            <summary>
                Sfs the music get duration using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The systems time</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getLoopPoints(System.IntPtr)">
            <summary>
                Sfs the music get loop points using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The time span</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setLoopPoints(System.IntPtr,Alis.Core.Audio.SFML.Music.TimeSpan)">
            <summary>
                Sfs the music set loop points using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="timePoints">The time points</param>
            <returns>The time span</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getChannelCount(System.IntPtr)">
            <summary>
                Sfs the music get channel count using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getSampleRate(System.IntPtr)">
            <summary>
                Sfs the music get sample rate using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setPitch(System.IntPtr,System.Single)">
            <summary>
                Sfs the music set pitch using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="pitch">The pitch</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setLoop(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the music set loop using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="loop">The loop</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setVolume(System.IntPtr,System.Single)">
            <summary>
                Sfs the music set volume using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="volume">The volume</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setPosition(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the music set position using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setRelativeToListener(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the music set relative to listener using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="relative">The relative</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setMinDistance(System.IntPtr,System.Single)">
            <summary>
                Sfs the music set min distance using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="minDistance">The min distance</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setAttenuation(System.IntPtr,System.Single)">
            <summary>
                Sfs the music set attenuation using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="attenuation">The attenuation</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_setPlayingOffset(System.IntPtr,Alis.Core.Audio.SFML.Time)">
            <summary>
                Sfs the music set playing offset using the specified music
            </summary>
            <param name="music">The music</param>
            <param name="timeOffset">The time offset</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getLoop(System.IntPtr)">
            <summary>
                Describes whether sf music get loop
            </summary>
            <param name="music">The music</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getPitch(System.IntPtr)">
            <summary>
                Sfs the music get pitch using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getVolume(System.IntPtr)">
            <summary>
                Sfs the music get volume using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getPosition(System.IntPtr)">
            <summary>
                Sfs the music get position using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The vector 3f</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_isRelativeToListener(System.IntPtr)">
            <summary>
                Describes whether sf music is relative to listener
            </summary>
            <param name="music">The music</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getMinDistance(System.IntPtr)">
            <summary>
                Sfs the music get min distance using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getAttenuation(System.IntPtr)">
            <summary>
                Sfs the music get attenuation using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Music.sfMusic_getPlayingOffset(System.IntPtr)">
            <summary>
                Sfs the music get playing offset using the specified music
            </summary>
            <param name="music">The music</param>
            <returns>The systems time</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.Music.TimeSpan">
            <summary>
                The time span
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.Music.TimeSpan.offset">
            <summary>
                The offset
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.Music.TimeSpan.length">
            <summary>
                The length
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.Sound">
            <summary>
                Regular sound that can be played in the audio environment
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.Sound.myBuffer">
            <summary>
                The my buffer
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.#ctor">
            <summary>
                Default constructor (invalid sound)
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.#ctor(Alis.Core.Audio.SFML.SoundBuffer)">
            <summary>
                Construct the sound with a buffer
            </summary>
            <param name="buffer">Sound buffer containing the audio data to play with the sound</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.#ctor(Alis.Core.Audio.SFML.Sound)">
            <summary>
                Construct the sound from another source
            </summary>
            <param name="copy">Sound to copy</param>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.SoundBuffer">
            <summary>
                Buffer containing the sound data to play through the sound.
                It is important to note that the sound buffer is not copied,
                thus the SoundBuffer instance must remain alive as long
                as it is attached to the sound.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Status">
            <summary>
                Current status of the sound (see SoundStatus enum)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Loop">
            <summary>
                Flag if the sound should loop after reaching the end.
                If set, the sound will restart from beginning after
                reaching the end and so on, until it is stopped or
                Loop = false is set.
                The default looping state for sounds is false.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Pitch">
            <summary>
                Pitch of the sound.
                The pitch represents the perceived fundamental frequency
                of a sound; thus you can make a sound more acute or grave
                by changing its pitch. A side effect of changing the pitch
                is to modify the playing speed of the sound as well.
                The default value for the pitch is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Volume">
            <summary>
                Volume of the sound.
                The volume is a value between 0 (mute) and 100 (full volume).
                The default value for the volume is 100.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.PlayingOffset">
            <summary>
                Current playing position of the sound.
                The playing position can be changed when the sound is
                either paused or playing.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Position">
            <summary>
                3D position of the sound in the audio scene.
                Only sounds with one channel (mono sounds) can be
                spatialized.
                The default position of a sound is (0, 0, 0).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.RelativeToListener">
            <summary>
                Make the music's position relative to the listener or absolute.
                Making a sound relative to the listener will ensure that it will always
                be played the same way regardless the position of the listener.
                This can be useful for non-spatialized sounds, sounds that are
                produced by the listener, or sounds attached to it.
                The default value is false (position is absolute).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.MinDistance">
            <summary>
                Minimum distance of the sound.
                The "minimum distance" of a sound is the maximum
                distance at which it is heard at its maximum volume. Further
                than the minimum distance, it will start to fade out according
                to its attenuation factor. A value of 0 ("inside the head
                of the listener") is an invalid value and is forbidden.
                The default value of the minimum distance is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.Sound.Attenuation">
            <summary>
                Attenuation factor of the music.
                The attenuation is a multiplicative factor which makes
                the music more or less loud according to its distance
                from the listener. An attenuation of 0 will produce a
                non-attenuated sound, i.e. its volume will always be the same
                whether it is heard from near or from far. On the other hand,
                an attenuation value such as 100 will make the sound fade out
                very quickly as it gets further from the listener.
                The default value of the attenuation is 1.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.Play">
            <summary>
                Start or resume playing the sound.
                This function starts the stream if it was stopped, resumes
                it if it was paused, and restarts it from beginning if it
                was it already playing.
                This function uses its own thread so that it doesn't block
                the rest of the program while the sound is played.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.Pause">
            <summary>
                Pause the sound.
                This function pauses the sound if it was playing,
                otherwise (sound already paused or stopped) it has no effect.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.Stop">
            <summary>
                Stop playing the sound.
                This function stops the sound if it was playing or paused,
                and does nothing if it was already stopped.
                It also resets the playing position (unlike pause()).
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_create">
            <summary>
                Sfs the sound create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_copy(System.IntPtr)">
            <summary>
                Sfs the sound copy using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_destroy(System.IntPtr)">
            <summary>
                Sfs the sound destroy using the specified sound
            </summary>
            <param name="sound">The sound</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_play(System.IntPtr)">
            <summary>
                Sfs the sound play using the specified sound
            </summary>
            <param name="sound">The sound</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_pause(System.IntPtr)">
            <summary>
                Sfs the sound pause using the specified sound
            </summary>
            <param name="sound">The sound</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_stop(System.IntPtr)">
            <summary>
                Sfs the sound stop using the specified sound
            </summary>
            <param name="sound">The sound</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setBuffer(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the sound set buffer using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="buffer">The buffer</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getBuffer(System.IntPtr)">
            <summary>
                Sfs the sound get buffer using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setLoop(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the sound set loop using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="loop">The loop</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getLoop(System.IntPtr)">
            <summary>
                Describes whether sf sound get loop
            </summary>
            <param name="sound">The sound</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getStatus(System.IntPtr)">
            <summary>
                Sfs the sound get status using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The sound status</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setPitch(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound set pitch using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="pitch">The pitch</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setVolume(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound set volume using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="volume">The volume</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setPosition(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the sound set position using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setRelativeToListener(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the sound set relative to listener using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="relative">The relative</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setMinDistance(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound set min distance using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="minDistance">The min distance</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setAttenuation(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound set attenuation using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="attenuation">The attenuation</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_setPlayingOffset(System.IntPtr,Alis.Core.Audio.SFML.Time)">
            <summary>
                Sfs the sound set playing offset using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <param name="timeOffset">The time offset</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getPitch(System.IntPtr)">
            <summary>
                Sfs the sound get pitch using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getVolume(System.IntPtr)">
            <summary>
                Sfs the sound get volume using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getPosition(System.IntPtr)">
            <summary>
                Sfs the sound get position using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The vector 3f</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_isRelativeToListener(System.IntPtr)">
            <summary>
                Describes whether sf sound is relative to listener
            </summary>
            <param name="sound">The sound</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getMinDistance(System.IntPtr)">
            <summary>
                Sfs the sound get min distance using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getAttenuation(System.IntPtr)">
            <summary>
                Sfs the sound get attenuation using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Sound.sfSound_getPlayingOffset(System.IntPtr)">
            <summary>
                Sfs the sound get playing offset using the specified sound
            </summary>
            <param name="sound">The sound</param>
            <returns>The systems time</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundBuffer">
            <summary>
                Storage for audio samples defining a sound
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.#ctor(System.String)">
            <summary>
                Construct a sound buffer from a file
                Here is a complete list of all the supported audio formats:
                ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
                w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </summary>
            <param name="filename">Path of the sound file to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.#ctor(System.IO.Stream)">
            <summary>
                Construct a sound buffer from a custom stream.
                Here is a complete list of all the supported audio formats:
                ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
                w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </summary>
            <param name="stream">Source stream to read from</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.#ctor(System.Byte[])">
            <summary>
                Construct a sound buffer from a file in memory.
                Here is a complete list of all the supported audio formats:
                ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
                w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.#ctor(System.Int16[],System.UInt32,System.UInt32)">
            <summary>
                Construct a sound buffer from an array of samples
            </summary>
            <param name="samples">Array of samples</param>
            <param name="channelCount">Channel count</param>
            <param name="sampleRate">Sample rate</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.#ctor(Alis.Core.Audio.SFML.SoundBuffer)">
            <summary>
                Construct a sound buffer from another sound buffer
            </summary>
            <param name="copy">Sound buffer to copy</param>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundBuffer.SampleRate">
            <summary>
                Sample rate of the sound buffer.
                The sample rate is the number of audio samples played per
                second. The higher, the better the quality.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundBuffer.ChannelCount">
            <summary>
                Number of channels (1 = mono, 2 = stereo)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundBuffer.Duration">
            <summary>
                Total duration of the buffer
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundBuffer.Samples">
            <summary>
                Array of audio samples stored in the buffer.
                The format of the returned samples is 16 bits signed integer
                (sf::Int16).
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.SaveToFile(System.String)">
            <summary>
                Save the sound buffer to an audio file.
                Here is a complete list of all the supported audio formats:
                ogg, wav, flac, aiff, au, raw, paf, svx, nist, voc, ircam,
                w64, mat4, mat5 pvf, htk, sds, avr, sd2, caf, wve, mpc2k, rf64.
            </summary>
            <param name="filename">Path of the sound file to write</param>
            <returns>True if saving has been successful</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_createFromFile(System.String)">
            <summary>
                Sfs the sound buffer create from file using the specified filename
            </summary>
            <param name="filename">The filename</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_createFromStream(System.IntPtr)">
            <summary>
                Sfs the sound buffer create from stream using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_createFromMemory(System.IntPtr,System.UInt64)">
            <summary>
                Sfs the sound buffer create from memory using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="size">The size</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_createFromSamples(System.Int16*,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Sfs the sound buffer create from samples using the specified samples
            </summary>
            <param name="samples">The samples</param>
            <param name="sampleCount">The sample count</param>
            <param name="channelsCount">The channels count</param>
            <param name="sampleRate">The sample rate</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_copy(System.IntPtr)">
            <summary>
                Sfs the sound buffer copy using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_destroy(System.IntPtr)">
            <summary>
                Sfs the sound buffer destroy using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_saveToFile(System.IntPtr,System.String)">
            <summary>
                Describes whether sf sound buffer save to file
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <param name="filename">The filename</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_getSamples(System.IntPtr)">
            <summary>
                Sfs the sound buffer get samples using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_getSampleCount(System.IntPtr)">
            <summary>
                Sfs the sound buffer get sample count using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_getSampleRate(System.IntPtr)">
            <summary>
                Sfs the sound buffer get sample rate using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_getChannelCount(System.IntPtr)">
            <summary>
                Sfs the sound buffer get channel count using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBuffer.sfSoundBuffer_getDuration(System.IntPtr)">
            <summary>
                Sfs the sound buffer get duration using the specified sound buffer
            </summary>
            <param name="soundBuffer">The sound buffer</param>
            <returns>The systems time</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundBufferRecorder">
            <summary>
                Specialized SoundRecorder which saves the captured
                audio data into a sound buffer
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundBufferRecorder.mySamplesArray">
            <summary>
                The list
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundBufferRecorder.mySoundBuffer">
            <summary>
                The my sound buffer
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundBufferRecorder.SoundBuffer">
            <summary>
                Sound buffer containing the captured audio data
                The sound buffer is valid only after the capture has ended.
                This function provides a reference to the internal
                sound buffer, but you should make a copy of it if you want
                to make any modifications to it.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBufferRecorder.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBufferRecorder.OnStart">
            <summary>
                Called when a new capture starts
            </summary>
            <returns>False to abort recording audio data, true to continue</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBufferRecorder.OnProcessSamples(System.Int16[])">
            <summary>
                Process a new chunk of recorded samples
            </summary>
            <param name="samples">Array of samples to process</param>
            <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundBufferRecorder.OnStop">
            <summary>
                Called when the current capture stops
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundRecorder">
            <summary>
                Base class intended for capturing sound data
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundRecorder.myProcessCallback">
            <summary>
                The my process callback
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundRecorder.myStartCallback">
            <summary>
                The my start callback
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundRecorder.myStopCallback">
            <summary>
                The my stop callback
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundRecorder.SampleRate">
            <summary>
                Sample rate of the sound recorder.
            </summary>
            <remarks>
                The sample rate defines the number of audio samples
                captured per second. The higher, the better the quality
                (for example, 44100 samples/sec is CD quality).
            </remarks>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundRecorder.ChannelCount">
            <summary>
                Get/Set the channel count of the audio capture device
            </summary>
            <remarks>
                This method allows you to specify the number of channels
                used for recording. Currently only 16-bit mono (1) and
                16-bit stereo (2) are supported.
            </remarks>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundRecorder.IsAvailable">
            <summary>
                Check if the system supports audio capture.
            </summary>
            <remarks>
                This function should always be called before using
                the audio capture features. If it returns false, then
                any attempt to use the SoundRecorder or one of its derived
                classes will fail.
            </remarks>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundRecorder.AvailableDevices">
            <summary>
                Get the list of the names of all available audio capture devices
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundRecorder.DefaultDevice">
            <summary>
                Get the name of the default audio capture device
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.Start">
            <summary>
                Start the capture using the default sample rate (44100 Hz).
                Please note that only one capture can happen at the same time.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.Start(System.UInt32)">
            <summary>
                Start the capture.
                The sampleRate parameter defines the number of audio samples
                captured per second. The higher, the better the quality
                (for example, 44100 samples/sec is CD quality).
                This function uses its own thread so that it doesn't block
                the rest of the program while the capture runs.
                Please note that only one capture can happen at the same time.
            </summary>
            <param name="sampleRate"> Sound frequency; the more samples, the higher the quality (44100 by default = CD quality)</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.Stop">
            <summary>
                Stop the capture
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.OnStart">
            <summary>
                Start capturing audio data.
                This virtual function may be overridden by a derived class
                if something has to be done every time a new capture
                starts. If not, this function can be ignored; the default
                implementation does nothing.
            </summary>
            <returns>False to abort recording audio data, true to continue</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.OnProcessSamples(System.Int16[])">
            <summary>
                Process a new chunk of recorded samples.
                This virtual function is called every time a new chunk of
                recorded data is available. The derived class can then do
                whatever it wants with it (storing it, playing it, sending
                it over the network, etc.).
            </summary>
            <param name="samples">Array of samples to process</param>
            <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.OnStop">
            <summary>
                Stop capturing audio data.
                This virtual function may be overridden by a derived class
                if something has to be done every time the capture
                ends. If not, this function can be ignored; the default
                implementation does nothing.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.SetProcessingInterval(Alis.Core.Audio.SFML.Time)">
            <summary>
                The processing interval controls the period
                between calls to the onProcessSamples function. You may
                want to use a small interval if you want to process the
                recorded data in real time, for example.
                Note: this is only a hint, the actual period may vary.
                So don't rely on this parameter to implement precise timing.
                The default processing interval is 100 ms.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.SetDevice(System.String)">
            <summary>
                Set the audio capture device
            </summary>
            <param name="name">The name of the audio capture device</param>
            <returns>True, if it was able to set the requested device</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.GetDevice">
            <summary>
                Get the name of the current audio capture device
            </summary>
            <returns>The name of the current audio capture device</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.ProcessSamples(System.IntPtr,System.UInt32,System.IntPtr)">
            <summary>
                Function called directly by the C library ; convert
                arguments and forward them to the internal virtual function
            </summary>
            <param name="samples">Pointer to the array of samples</param>
            <param name="nbSamples">Number of samples in the array</param>
            <param name="userData">User data -- unused</param>
            <returns>False to stop recording audio data, true to continue</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_create(Alis.Core.Audio.SFML.SoundRecorder.StartCallback,Alis.Core.Audio.SFML.SoundRecorder.ProcessCallback,Alis.Core.Audio.SFML.SoundRecorder.StopCallback,System.IntPtr)">
            <summary>
                Sfs the sound recorder create using the specified on start
            </summary>
            <param name="onStart">The on start</param>
            <param name="onProcess">The on process</param>
            <param name="onStop">The on stop</param>
            <param name="userData">The user data</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_destroy(System.IntPtr)">
            <summary>
                Sfs the sound recorder destroy using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_start(System.IntPtr,System.UInt32)">
            <summary>
                Describes whether sf sound recorder start
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <param name="sampleRate">The sample rate</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_stop(System.IntPtr)">
            <summary>
                Sfs the sound recorder stop using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_getSampleRate(System.IntPtr)">
            <summary>
                Sfs the sound recorder get sample rate using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_isAvailable">
            <summary>
                Describes whether sf sound recorder is available
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_setProcessingInterval(System.IntPtr,Alis.Core.Audio.SFML.Time)">
            <summary>
                Sfs the sound recorder set processing interval using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <param name="interval">The interval</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_getAvailableDevices(System.UInt32@)">
            <summary>
                Sfs the sound recorder get available devices using the specified count
            </summary>
            <param name="count">The count</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_getDefaultDevice">
            <summary>
                Sfs the sound recorder get default device
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_setDevice(System.IntPtr,System.String)">
            <summary>
                Describes whether sf sound recorder set device
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <param name="name">The name</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_getDevice(System.IntPtr)">
            <summary>
                Sfs the sound recorder get device using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_setChannelCount(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the sound recorder set channel count using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <param name="channelCount">The channel count</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundRecorder.sfSoundRecorder_getChannelCount(System.IntPtr)">
            <summary>
                Sfs the sound recorder get channel count using the specified sound recorder
            </summary>
            <param name="soundRecorder">The sound recorder</param>
            <returns>The uint</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundRecorder.StartCallback">
            <summary>
                The start callback
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundRecorder.ProcessCallback">
            <summary>
                The process callback
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundRecorder.StopCallback">
            <summary>
                The stop callback
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundStatus">
            <summary>
                Enumeration of all possible sound states
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStatus.Stopped">
            <summary>Sound is not playing</summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStatus.Paused">
            <summary>Sound is paused</summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStatus.Playing">
            <summary>Sound is playing</summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundStream">
            <summary>
                Abstract base class for streamed audio sources
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStream.myGetDataCallback">
            <summary>
                The my get data callback
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStream.mySeekCallback">
            <summary>
                The my seek callback
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStream.myTempBuffer">
            <summary>
                The my temp buffer
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.SampleRate">
            <summary>
                Sample rate of the stream
                The sample rate is the number of audio samples played per
                second. The higher, the better the quality.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.ChannelCount">
            <summary>
                Number of channels (1 = mono, 2 = stereo)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Status">
            <summary>
                Current status of the sound stream (see SoundStatus enum)
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Loop">
            <summary>
                Flag if the music should loop after reaching the end.
                If set, the music will restart from beginning after
                reaching the end and so on, until it is stopped or
                Loop = false is set.
                The default looping state for music is false.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Pitch">
            <summary>
                Pitch of the stream.
                The pitch represents the perceived fundamental frequency
                of a sound; thus you can make a sound more acute or grave
                by changing its pitch. A side effect of changing the pitch
                is to modify the playing speed of the sound as well.
                The default value for the pitch is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Volume">
            <summary>
                Volume of the stream.
                The volume is a value between 0 (mute) and 100 (full volume).
                The default value for the volume is 100.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Position">
            <summary>
                3D position of the stream in the audio scene.
                Only sounds with one channel (mono sounds) can be
                spatialized.
                The default position of a sound is (0, 0, 0).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.RelativeToListener">
            <summary>
                Make the stream's position relative to the listener or absolute.
                Making a sound relative to the listener will ensure that it will always
                be played the same way regardless the position of the listener.
                This can be useful for non-spatialized sounds, sounds that are
                produced by the listener, or sounds attached to it.
                The default value is false (position is absolute).
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.MinDistance">
            <summary>
                Minimum distance of the music.
                The "minimum distance" of a sound is the maximum
                distance at which it is heard at its maximum volume. Further
                than the minimum distance, it will start to fade out according
                to its attenuation factor. A value of 0 ("inside the head
                of the listener") is an invalid value and is forbidden.
                The default value of the minimum distance is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.Attenuation">
            <summary>
                Attenuation factor of the stream.
                The attenuation is a multiplicative factor which makes
                the music more or less loud according to its distance
                from the listener. An attenuation of 0 will produce a
                non-attenuated sound, i.e. its volume will always be the same
                whether it is heard from near or from far. On the other hand,
                an attenuation value such as 100 will make the sound fade out
                very quickly as it gets further from the listener.
                The default value of the attenuation is 1.
            </summary>
        </member>
        <member name="P:Alis.Core.Audio.SFML.SoundStream.PlayingOffset">
            <summary>
                Current playing position of the stream.
                The playing position can be changed when the music is
                either paused or playing.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Play">
            <summary>
                Start or resume playing the audio stream.
                This function starts the stream if it was stopped, resumes
                it if it was paused, and restarts it from beginning if it
                was it already playing.
                This function uses its own thread so that it doesn't block
                the rest of the program while the stream is played.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Pause">
            <summary>
                Pause the audio stream.
                This function pauses the stream if it was playing,
                otherwise (stream already paused or stopped) it has no effect.
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Stop">
            <summary>
                Stop playing the audio stream.
                This function stops the stream if it was playing or paused,
                and does nothing if it was already stopped.
                It also resets the playing position (unlike pause()).
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Initialize(System.UInt32,System.UInt32)">
            <summary>
                Set the audio stream parameters, you must call it before Play()
            </summary>
            <param name="channelCount">Number of channels</param>
            <param name="sampleRate">Sample rate, in samples per second</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.OnGetData(System.Int16[]@)">
            <summary>
                Virtual function called each time new audio data is needed to feed the stream
            </summary>
            <param name="samples">Array of samples to fill for the stream</param>
            <returns>True to continue playback, false to stop</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.OnSeek(Alis.Core.Audio.SFML.Time)">
            <summary>
                Virtual function called to seek into the stream
            </summary>
            <param name="timeOffset">New position</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.GetData(Alis.Core.Audio.SFML.SoundStream.Chunk@,System.IntPtr)">
            <summary>
                Called each time new audio data is needed to feed the stream
            </summary>
            <param name="dataChunk">Data chunk to fill with new audio samples</param>
            <param name="userData">User data -- unused</param>
            <returns>True to continue playback, false to stop</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.Seek(Alis.Core.Audio.SFML.Time,System.IntPtr)">
            <summary>
                Called to seek in the stream
            </summary>
            <param name="timeOffset">New position</param>
            <param name="userData">User data -- unused</param>
            <returns>If false is returned, the playback is aborted</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_create(Alis.Core.Audio.SFML.SoundStream.GetDataCallbackType,Alis.Core.Audio.SFML.SoundStream.SeekCallbackType,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
                Sfs the sound stream create using the specified on get data
            </summary>
            <param name="onGetData">The on get data</param>
            <param name="onSeek">The on seek</param>
            <param name="channelCount">The channel count</param>
            <param name="sampleRate">The sample rate</param>
            <param name="userData">The user data</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_destroy(System.IntPtr)">
            <summary>
                Sfs the sound stream destroy using the specified sound stream stream
            </summary>
            <param name="soundStreamStream">The sound stream stream</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_play(System.IntPtr)">
            <summary>
                Sfs the sound stream play using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_pause(System.IntPtr)">
            <summary>
                Sfs the sound stream pause using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_stop(System.IntPtr)">
            <summary>
                Sfs the sound stream stop using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getStatus(System.IntPtr)">
            <summary>
                Sfs the sound stream get status using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The sound status</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getChannelCount(System.IntPtr)">
            <summary>
                Sfs the sound stream get channel count using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getSampleRate(System.IntPtr)">
            <summary>
                Sfs the sound stream get sample rate using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setLoop(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the sound stream set loop using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="loop">The loop</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setPitch(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound stream set pitch using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="pitch">The pitch</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setVolume(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound stream set volume using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="volume">The volume</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setPosition(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Sfs the sound stream set position using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setRelativeToListener(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the sound stream set relative to listener using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="relative">The relative</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setMinDistance(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound stream set min distance using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="minDistance">The min distance</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setAttenuation(System.IntPtr,System.Single)">
            <summary>
                Sfs the sound stream set attenuation using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="attenuation">The attenuation</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_setPlayingOffset(System.IntPtr,Alis.Core.Audio.SFML.Time)">
            <summary>
                Sfs the sound stream set playing offset using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <param name="timeOffset">The time offset</param>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getLoop(System.IntPtr)">
            <summary>
                Describes whether sf sound stream get loop
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getPitch(System.IntPtr)">
            <summary>
                Sfs the sound stream get pitch using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getVolume(System.IntPtr)">
            <summary>
                Sfs the sound stream get volume using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getPosition(System.IntPtr)">
            <summary>
                Sfs the sound stream get position using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The vector 3f</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_isRelativeToListener(System.IntPtr)">
            <summary>
                Describes whether sf sound stream is relative to listener
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getMinDistance(System.IntPtr)">
            <summary>
                Sfs the sound stream get min distance using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getAttenuation(System.IntPtr)">
            <summary>
                Sfs the sound stream get attenuation using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.SoundStream.sfSoundStream_getPlayingOffset(System.IntPtr)">
            <summary>
                Sfs the sound stream get playing offset using the specified sound stream
            </summary>
            <param name="soundStream">The sound stream</param>
            <returns>The systems time</returns>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundStream.Chunk">
            <summary>
                Structure mapping the C library arguments passed to the data callback
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStream.Chunk.samples">
            <summary>
                The samples
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.SoundStream.Chunk.sampleCount">
            <summary>
                The sample count
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundStream.GetDataCallbackType">
            <summary>
                The get data callback type
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.SoundStream.SeekCallbackType">
            <summary>
                The seek callback type
            </summary>
        </member>
        <member name="T:Alis.Core.Audio.SFML.Time">
            <summary>
                This class represents a time value
            </summary>
        </member>
        <member name="F:Alis.Core.Audio.SFML.Time.Zero">
            <summary>
                Predefined "zero" time value
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.FromSeconds(System.Single)">
            <summary>
                Construct a time value from a number of seconds
            </summary>
            <param name="seconds">Number of seconds</param>
            <returns>Time value constructed from the amount of seconds</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.FromMilliseconds(System.Int32)">
            <summary>
                Construct a time value from a number of milliseconds
            </summary>
            <param name="milliseconds">Number of milliseconds</param>
            <returns>Time value constructed from the amount of milliseconds</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.FromMicroseconds(System.Int64)">
            <summary>
                Construct a time value from a number of microseconds
            </summary>
            <param name="microseconds">Number of microseconds</param>
            <returns>Time value constructed from the amount of microseconds</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.AsSeconds">
            <summary>
                Returns the time value as a number of seconds
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.AsMilliseconds">
            <summary>
                Returns the time value as a number of milliseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.AsMicroseconds">
            <summary>
                Returns the time value as a number of microseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Equality(Alis.Core.Audio.SFML.Time,Alis.Core.Audio.SFML.Time)">
            <summary>
                Compare two times and checks if they are equal
            </summary>
            <returns>Times are equal</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Inequality(Alis.Core.Audio.SFML.Time,Alis.Core.Audio.SFML.Time)">
            <summary>
                Compare two times and checks if they are not equal
            </summary>
            <returns>Times are not equal</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.Equals(System.Object)">
            <summary>
                Compare time and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and time are equal</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.Equals(Alis.Core.Audio.SFML.Time)">
            <summary>
                Compare two times and checks if they are equal
            </summary>
            <param name="other">Time to check</param>
            <returns>times are equal</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_LessThan(Alis.Core.Audio.SFML.Time,Alis.Core.Audio.SFML.Time)">
            <summary>
                Overload of &lt; operator to compare two time values
            </summary>
            <returns>True if left is lesser than right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_LessThanOrEqual(Alis.Core.Audio.SFML.Time,Alis.Core.Audio.SFML.Time)">
            <summary>
                Overload of &lt;= operator to compare two time values
            </summary>
            <returns>True if left is lesser or equal than right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_GreaterThan(Alis.Core.Audio.SFML.Time,Alis.Core.Audio.SFML.Time)">
            <summary>
                Overload of &gt; operator to compare two time values
            </summary>
            <returns>True if left is greater than right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_GreaterThanOrEqual(Alis.Core.Audio.SFML.Time,Alis.Core.Audio.SFML.Time)">
            <summary>
                Overload of &gt;= operator to compare two time values
            </summary>
            <returns>True if left is greater or equal than right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Subtraction(Alis.Core.Audio.SFML.Time,Alis.Core.Audio.SFML.Time)">
            <summary>
                Overload of binary - operator to subtract two time values
            </summary>
            <returns>Difference of the two times values</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Addition(Alis.Core.Audio.SFML.Time,Alis.Core.Audio.SFML.Time)">
            <summary>
                Overload of binary + operator to add two time values
            </summary>
            <returns>Sum of the two times values</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Multiply(Alis.Core.Audio.SFML.Time,System.Single)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Multiply(Alis.Core.Audio.SFML.Time,System.Int64)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Multiply(System.Single,Alis.Core.Audio.SFML.Time)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Multiply(System.Int64,Alis.Core.Audio.SFML.Time)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Division(Alis.Core.Audio.SFML.Time,Alis.Core.Audio.SFML.Time)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Division(Alis.Core.Audio.SFML.Time,System.Single)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Division(Alis.Core.Audio.SFML.Time,System.Int64)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.op_Modulus(Alis.Core.Audio.SFML.Time,Alis.Core.Audio.SFML.Time)">
            <summary>
                Overload of binary % operator to compute remainder of a time value
            </summary>
            <returns>left modulo of right</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="F:Alis.Core.Audio.SFML.Time.microseconds">
            <summary>
                The microseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.sfSeconds(System.Single)">
            <summary>
                Sfs the seconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.sfMilliseconds(System.Int32)">
            <summary>
                Sfs the milliseconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.sfMicroseconds(System.Int64)">
            <summary>
                Sfs the microseconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.sfTime_asSeconds(Alis.Core.Audio.SFML.Time)">
            <summary>
                Sfs the time as seconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.sfTime_asMilliseconds(Alis.Core.Audio.SFML.Time)">
            <summary>
                Sfs the time as milliseconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Audio.SFML.Time.sfTime_asMicroseconds(Alis.Core.Audio.SFML.Time)">
            <summary>
                Sfs the time as microseconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The long</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.FrameBase">
            <summary>
                The frame base class
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.FrameBase.filePath">
            <summary>
                The file path
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.FrameBase.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Graphic.D2.FrameBase" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.FrameBase.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Graphic.D2.FrameBase" /> class
            </summary>
            <param name="filePath">The file path</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.FrameBase.Texture">
            <summary>
                Gets or sets the value of the texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.FrameBase.SetFrame(System.String)">
            <summary>
                Sets the frame using the specified file path
            </summary>
            <param name="filePath">The file path</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode">
            <summary>
                Blending modes for drawing
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor">
            <summary>
                Enumeration of the blending factors
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.Zero">
            <summary>(0, 0, 0, 0)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.One">
            <summary>(1, 1, 1, 1)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.SrcColor">
            <summary>(src.r, src.g, src.b, src.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.OneMinusSrcColor">
            <summary>(1, 1, 1, 1) - (src.r, src.g, src.b, src.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.DstColor">
            <summary>(dst.r, dst.g, dst.b, dst.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.OneMinusDstColor">
            <summary>(1, 1, 1, 1) - (dst.r, dst.g, dst.b, dst.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.SrcAlpha">
            <summary>(src.a, src.a, src.a, src.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.OneMinusSrcAlpha">
            <summary>(1, 1, 1, 1) - (src.a, src.a, src.a, src.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.DstAlpha">
            <summary>(dst.a, dst.a, dst.a, dst.a)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor.OneMinusDstAlpha">
            <summary>(1, 1, 1, 1) - (dst.a, dst.a, dst.a, dst.a)</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation">
            <summary>
                Enumeration of the blending equations
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation.Add">
            <summary>Pixel = Src * SrcFactor + Dst * DstFactor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation.Subtract">
            <summary>Pixel = Src * SrcFactor - Dst * DstFactor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation.ReverseSubtract">
            <summary>Pixel = Dst * DstFactor - Src * SrcFactor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Alpha">
            <summary>Blend source and dest according to dest alpha</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Add">
            <summary>Add source to dest</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Multiply">
            <summary>Multiply source and dest</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.None">
            <summary>Overwrite dest with source</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor)">
            <summary>
                Construct the blend mode given the factors and equation
            </summary>
            <param name="sourceFactor">Specifies how to compute the source factor for the color and alpha channels.</param>
            <param name="destinationFactor">Specifies how to compute the destination factor for the color and alpha channels.</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation)">
            <summary>
                Construct the blend mode given the factors and equation
            </summary>
            <param name="sourceFactor">Specifies how to compute the source factor for the color and alpha channels.</param>
            <param name="destinationFactor">Specifies how to compute the destination factor for the color and alpha channels.</param>
            <param name="blendEquation">Specifies how to combine the source and destination colors and alpha.</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Factor,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equation)">
            <summary>
                Construct the blend mode given the factors and equation
            </summary>
            <param name="colorSourceFactor">Specifies how to compute the source factor for the color channels.</param>
            <param name="colorDestinationFactor">Specifies how to compute the destination factor for the color channels.</param>
            <param name="colorBlendEquation">Specifies how to combine the source and destination colors.</param>
            <param name="alphaSourceFactor">Specifies how to compute the source factor.</param>
            <param name="alphaDestinationFactor">Specifies how to compute the destination factor.</param>
            <param name="alphaBlendEquation">Specifies how to combine the source and destination alphas.</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.op_Equality(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode)">
            <summary>
                Compare two blend modes and checks if they are equal
            </summary>
            <returns>Blend Modes are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.op_Inequality(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode,Alis.Core.Graphic.D2.SFML.Graphics.BlendMode)">
            <summary>
                Compare two blend modes and checks if they are not equal
            </summary>
            <returns>Blend Modes are not equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equals(System.Object)">
            <summary>
                Compare blend mode and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and blend mode are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.Equals(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode)">
            <summary>
                Compare two blend modes and checks if they are equal
            </summary>
            <param name="other">Blend Mode to check</param>
            <returns>blend modes are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.ColorSrcFactor">
            <summary>Source blending factor for the color channels</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.ColorDstFactor">
            <summary>Destination blending factor for the color channels</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.ColorEquation">
            <summary>Blending equation for the color channels</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.AlphaSrcFactor">
            <summary>Source blending factor for the alpha channel</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.AlphaDstFactor">
            <summary>Destination blending factor for the alpha channel</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.BlendMode.AlphaEquation">
            <summary>Blending equation for the alpha channel</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape">
            <summary>
                Specialized shape representing a circle
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.myPointCount">
            <summary>
                The my point count
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.myRadius">
            <summary>
                The my radius
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.#ctor(System.Single)">
            <summary>
                Construct the shape with an initial radius
            </summary>
            <param name="radius">Radius of the shape</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.#ctor(System.Single,System.UInt32)">
            <summary>
                Construct the shape with an initial radius and point count
            </summary>
            <param name="radius">Radius of the shape</param>
            <param name="pointCount">Number of points of the shape</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.CircleShape)">
            <summary>
                Construct the shape from another shape
            </summary>
            <param name="copy">Shape to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.Radius">
            <summary>
                The radius of the shape
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.GetPointCount">
            <summary>
                Get the total number of points of the circle
            </summary>
            <returns>The total point count</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.SetPointCount(System.UInt32)">
            <summary>
                Set the number of points of the circle.
                The count must be greater than 2 to define a valid shape.
            </summary>
            <param name="count">New number of points of the circle</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.CircleShape.GetPoint(System.UInt32)">
            <summary>
                Get the position of a point
                The returned point is in local coordinates, that is,
                the shape's transforms (position, rotation, scale) are
                not taken into account.
                The result is undefined if index is out of the valid range.
            </summary>
            <param name="index">Index of the point to get, in range [0 .. PointCount - 1]</param>
            <returns>index-th point of the shape</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Clock">
            <summary>
                Utility class that measures the elapsed time
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.#ctor">
            <summary>
                Default Constructor
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Clock.ElapsedTime">
            <summary>
                Gets the time elapsed since the last call to Restart
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.Restart">
            <summary>
                This function puts the time counter back to zero.
            </summary>
            <returns>Time elapsed since the clock was started.</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.sfClock_create">
            <summary>
                Sfs the clock create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.sfClock_destroy(System.IntPtr)">
            <summary>
                Sfs the clock destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.sfClock_getElapsedTime(System.IntPtr)">
            <summary>
                Sfs the clock get elapsed time using the specified clock
            </summary>
            <param name="clock">The clock</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Clock.sfClock_restart(System.IntPtr)">
            <summary>
                Sfs the clock restart using the specified clock
            </summary>
            <param name="clock">The clock</param>
            <returns>The time</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Color">
            <summary>
                Utility class for manipulating 32-bits RGBA colors
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
                Construct the color from its red, green and blue components
            </summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
                Construct the color from its red, green, blue and alpha components
            </summary>
            <param name="red">Red component</param>
            <param name="green">Green component</param>
            <param name="blue">Blue component</param>
            <param name="alpha">Alpha (transparency) component</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.#ctor(System.UInt32)">
            <summary>
                Construct the color from 32-bit unsigned integer
            </summary>
            <param name="color">Number containing the RGBA components (in that order)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Construct the color from another
            </summary>
            <param name="color">Color to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.ToInteger">
            <summary>
                Convert a color to a 32-bit unsigned integer
            </summary>
            <returns>Color represented as a 32-bit unsigned integer</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.Equals(System.Object)">
            <summary>
                Compare color and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and color are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.Equals(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Compare two colors and checks if they are equal
            </summary>
            <param name="other">Color to check</param>
            <returns>Colors are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.op_Equality(Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Compare two colors and checks if they are equal
            </summary>
            <returns>Colors are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.op_Inequality(Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Compare two colors and checks if they are not equal
            </summary>
            <returns>Colors are not equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.op_Addition(Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                This operator returns the component-wise sum of two colors.
                Components that exceed 255 are clamped to 255.
            </summary>
            <returns>Result of left + right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.op_Subtraction(Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                This operator returns the component-wise subtraction of two colors.
                Components below 0 are clamped to 0.
            </summary>
            <returns>Result of left - right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Color.op_Multiply(Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                This operator returns the component-wise multiplication of two colors.
                Components above 255 are clamped to 255.
            </summary>
            <returns>Result of left * right</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.R">
            <summary>Red component of the color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.G">
            <summary>Green component of the color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.B">
            <summary>Blue component of the color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.A">
            <summary>Alpha (transparent) component of the color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Black">
            <summary>Predefined black color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.White">
            <summary>Predefined white color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Red">
            <summary>Predefined red color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Green">
            <summary>Predefined green color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Blue">
            <summary>Predefined blue color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Yellow">
            <summary>Predefined yellow color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Magenta">
            <summary>Predefined magenta color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Cyan">
            <summary>Predefined cyan color</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Color.Transparent">
            <summary>Predefined (black) transparent color</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape">
            <summary>
                Specialized shape representing a convex polygon
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.myPoints">
            <summary>
                The my points
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.#ctor(System.UInt32)">
            <summary>
                Construct the shape with an initial point count
            </summary>
            <param name="pointCount">Number of points of the shape</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape)">
            <summary>
                Construct the shape from another shape
            </summary>
            <param name="copy">Shape to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.GetPointCount">
            <summary>
                Get the total number of points of the polygon
            </summary>
            <returns>The total point count</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.SetPointCount(System.UInt32)">
            <summary>
                Set the number of points of the polygon.
                The count must be greater than 2 to define a valid shape.
            </summary>
            <param name="count">New number of points of the polygon</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.GetPoint(System.UInt32)">
            <summary>
                Get the position of a point
                The returned point is in local coordinates, that is,
                the shape's transforms (position, rotation, scale) are
                not taken into account.
                The result is undefined if index is out of the valid range.
            </summary>
            <param name="index">Index of the point to get, in range [0 .. PointCount - 1]</param>
            <returns>index-th point of the shape</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.ConvexShape.SetPoint(System.UInt32,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Set the position of a point.
                Don't forget that the polygon must remain convex, and
                the points need to stay ordered!
                PointCount must be set first in order to set the total
                number of points. The result is undefined if index is out
                of the valid range.
            </summary>
            <param name="index">Index of the point to change, in range [0 .. PointCount - 1]</param>
            <param name="point">New position of the point</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.IDrawable">
            <summary>
                Interface for every object that can be drawn to a render window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IDrawable.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the object to a render target
                This is a function that has to be implemented by the
                derived class to define how the drawable should be drawn.
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Font">
            <summary>
                Font is the low-level class for loading and
                manipulating character fonts. This class is meant to
                be used by String2D
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Font.myStream">
            <summary>
                The my stream
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Font.myTextures">
            <summary>
                The texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.#ctor(System.String)">
            <summary>
                Construct the font from a file
            </summary>
            <param name="filename">Font file to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.#ctor(System.IO.Stream)">
            <summary>
                Construct the font from a custom stream
            </summary>
            <param name="stream">Source stream to read from</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.#ctor(System.Byte[])">
            <summary>
                Construct the font from a file in memory
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Font)">
            <summary>
                Construct the font from another font
            </summary>
            <param name="copy">Font to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.#ctor(System.IntPtr)">
            <summary>
                Internal constructor
            </summary>
            <param name="cPointer">Pointer to the object in C library</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetGlyph(System.UInt32,System.UInt32,System.Boolean,System.Single)">
            <summary>
                Get a glyph in the font
            </summary>
            <param name="codePoint">Unicode code point of the character to get</param>
            <param name="characterSize">Character size</param>
            <param name="bold">Retrieve the bold version or the regular one?</param>
            <param name="outlineThickness">Thickness of outline (when != 0 the glyph will not be filled)</param>
            <returns>The glyph corresponding to the character</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetKerning(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Get the kerning offset between two glyphs
            </summary>
            <param name="first">Unicode code point of the first character</param>
            <param name="second">Unicode code point of the second character</param>
            <param name="characterSize">Character size</param>
            <returns>Kerning offset, in pixels</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetLineSpacing(System.UInt32)">
            <summary>
                Get spacing between two consecutive lines
            </summary>
            <param name="characterSize">Character size</param>
            <returns>Line spacing, in pixels</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetUnderlinePosition(System.UInt32)">
            <summary>
                Get the position of the underline
            </summary>
            <param name="characterSize">Character size</param>
            <returns>Underline position, in pixels</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetUnderlineThickness(System.UInt32)">
            <summary>
                Get the thickness of the underline
            </summary>
            <param name="characterSize">Character size</param>
            <returns>Underline thickness, in pixels</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetTexture(System.UInt32)">
            <summary>
                Get the texture containing the glyphs of a given size
            </summary>
            <param name="characterSize">Character size</param>
            <returns>Texture storing the glyphs for the given size</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.GetInfo">
            <summary>
                Get the font information
            </summary>
            <returns>A structure that holds the font information</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_createFromFile(System.String)">
            <summary>
                Sfs the font create from file using the specified filename
            </summary>
            <param name="filename">The filename</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_createFromStream(System.IntPtr)">
            <summary>
                Sfs the font create from stream using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_createFromMemory(System.IntPtr,System.UInt64)">
            <summary>
                Sfs the font create from memory using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="size">The size</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_copy(System.IntPtr)">
            <summary>
                Sfs the font copy using the specified font
            </summary>
            <param name="font">The font</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_destroy(System.IntPtr)">
            <summary>
                Sfs the font destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getGlyph(System.IntPtr,System.UInt32,System.UInt32,System.Boolean,System.Single)">
            <summary>
                Sfs the font get glyph using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="codePoint">The code point</param>
            <param name="characterSize">The character size</param>
            <param name="bold">The bold</param>
            <param name="outlineThickness">The outline thickness</param>
            <returns>The glyph</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getKerning(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Sfs the font get kerning using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="first">The first</param>
            <param name="second">The second</param>
            <param name="characterSize">The character size</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getLineSpacing(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the font get line spacing using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="characterSize">The character size</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getUnderlinePosition(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the font get underline position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="characterSize">The character size</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getUnderlineThickness(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the font get underline thickness using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="characterSize">The character size</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getTexture(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the font get texture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="characterSize">The character size</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Font.sfFont_getInfo(System.IntPtr)">
            <summary>
                Sfs the font get info using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The info marshal data</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Font.Info">
            <summary>
                Info holds various information about a font
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Font.Info.Family">
            <summary>The font family</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Font.InfoMarshalData">
            <summary>
                Internal struct used for marshaling the font info
                struct from unmanaged code.
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Font.InfoMarshalData.Family">
            <summary>
                The family
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Glyph">
            <summary>
                Structure describing a glyph (a visual character)
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Glyph.Advance">
            <summary>Offset to move horizontally to the next character</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Glyph.Bounds">
            <summary>Bounding rectangle of the glyph, in coordinates relative to the baseline</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Glyph.TextureRect">
            <summary>Texture coordinates of the glyph inside the font's texture</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Image">
            <summary>
                Image is the low-level class for loading and
                manipulating images
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the image with black color
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Construct the image from a single color
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="color">Color to fill the image with</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.String)">
            <summary>
                Construct the image from a file
            </summary>
            <param name="filename">Path of the image file to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.IO.Stream)">
            <summary>
                Construct the image from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.Byte[])">
            <summary>
                Construct the image from a file in memory
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Color[0:,0:])">
            <summary>
                Construct the image directly from an array of pixels
            </summary>
            <param name="pixels">2 dimensions array containing the pixels</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
                Construct the image directly from an array of pixels
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="pixels">array containing the pixels</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Image)">
            <summary>
                Construct the image from another image
            </summary>
            <param name="copy">Image to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.#ctor(System.IntPtr)">
            <summary>
                Internal constructor
            </summary>
            <param name="cPointer">Pointer to the object in C library</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Image.Pixels">
            <summary>
                Get a copy of the array of pixels (RGBA 8 bits integers components)
                Array size is Width x Height x 4
            </summary>
            <returns>Array of pixels</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Image.Size">
            <summary>
                Size of the image, in pixels
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.SaveToFile(System.String)">
            <summary>
                Save the contents of the image to a file
            </summary>
            <param name="filename">Path of the file to save (overwritten if already exist)</param>
            <returns>True if saving was successful</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.CreateMaskFromColor(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Create a transparency mask from a specified colorkey
            </summary>
            <param name="color">Color to become transparent</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.CreateMaskFromColor(Alis.Core.Graphic.D2.SFML.Graphics.Color,System.Byte)">
            <summary>
                Create a transparency mask from a specified colorkey
            </summary>
            <param name="color">Color to become transparent</param>
            <param name="alpha">Alpha value to use for transparent pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.Copy(Alis.Core.Graphic.D2.SFML.Graphics.Image,System.UInt32,System.UInt32)">
            <summary>
                Copy pixels from another image onto this one.
                This function does a slow pixel copy and should only
                be used at initialization time
            </summary>
            <param name="source">Source image to copy</param>
            <param name="destX">X coordinate of the destination position</param>
            <param name="destY">Y coordinate of the destination position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.Copy(Alis.Core.Graphic.D2.SFML.Graphics.Image,System.UInt32,System.UInt32,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Copy pixels from another image onto this one.
                This function does a slow pixel copy and should only
                be used at initialization time
            </summary>
            <param name="source">Source image to copy</param>
            <param name="destX">X coordinate of the destination position</param>
            <param name="destY">Y coordinate of the destination position</param>
            <param name="sourceRect">Sub-rectangle of the source image to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.Copy(Alis.Core.Graphic.D2.SFML.Graphics.Image,System.UInt32,System.UInt32,Alis.Core.Aspect.Math.SFML.IntRect,System.Boolean)">
            <summary>
                Copy pixels from another image onto this one.
                This function does a slow pixel copy and should only
                be used at initialization time
            </summary>
            <param name="source">Source image to copy</param>
            <param name="destX">X coordinate of the destination position</param>
            <param name="destY">Y coordinate of the destination position</param>
            <param name="sourceRect">Sub-rectangle of the source image to copy</param>
            <param name="applyAlpha">Should the copy take in account the source transparency?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.GetPixel(System.UInt32,System.UInt32)">
            <summary>
                Get a pixel from the image
            </summary>
            <param name="x">X coordinate of pixel in the image</param>
            <param name="y">Y coordinate of pixel in the image</param>
            <returns>Color of pixel (x, y)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.SetPixel(System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Change the color of a pixel
            </summary>
            <param name="x">X coordinate of pixel in the image</param>
            <param name="y">Y coordinate of pixel in the image</param>
            <param name="color">New color for pixel (x, y)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.FlipHorizontally">
            <summary>
                Flip the image horizontally
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.FlipVertically">
            <summary>
                Flip the image vertically
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createFromColor(System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the image create from color using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="col">The col</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createFromPixels(System.UInt32,System.UInt32,System.Byte*)">
            <summary>
                Sfs the image create from pixels using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="pixels">The pixels</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createFromFile(System.String)">
            <summary>
                Sfs the image create from file using the specified filename
            </summary>
            <param name="filename">The filename</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createFromStream(System.IntPtr)">
            <summary>
                Sfs the image create from stream using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createFromMemory(System.IntPtr,System.UInt64)">
            <summary>
                Sfs the image create from memory using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="size">The size</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_copy(System.IntPtr)">
            <summary>
                Sfs the image copy using the specified image
            </summary>
            <param name="image">The image</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_destroy(System.IntPtr)">
            <summary>
                Sfs the image destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_saveToFile(System.IntPtr,System.String)">
            <summary>
                Describes whether sf image save to file
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="filename">The filename</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_createMaskFromColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color,System.Byte)">
            <summary>
                Sfs the image create mask from color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="col">The col</param>
            <param name="alpha">The alpha</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_copyImage(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,Alis.Core.Aspect.Math.SFML.IntRect,System.Boolean)">
            <summary>
                Sfs the image copy image using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="source">The source</param>
            <param name="destX">The dest</param>
            <param name="destY">The dest</param>
            <param name="sourceRect">The source rect</param>
            <param name="applyAlpha">The apply alpha</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_setPixel(System.IntPtr,System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the image set pixel using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="x">The </param>
            <param name="y">The </param>
            <param name="col">The col</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_getPixel(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
                Sfs the image get pixel using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_getPixelsPtr(System.IntPtr)">
            <summary>
                Sfs the image get pixels ptr using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_getSize(System.IntPtr)">
            <summary>
                Sfs the image get size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2u</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_flipHorizontally(System.IntPtr)">
            <summary>
                Sfs the image flip horizontally using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Image.sfImage_flipVertically(System.IntPtr)">
            <summary>
                Sfs the image flip vertically using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType">
            <summary>
                Types of primitives that a VertexArray can render.
                Points and lines have no area, therefore their thickness
                will always be 1 pixel, regardless the current transform
                and view.
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.Points">
            List of individual points
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.Lines">
            List of individual lines
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.LineStrip">
            List of connected lines, a point uses the previous point to form a line
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.Triangles">
            List of individual triangles
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.TriangleStrip">
            List of connected triangles, a point uses the two previous points to form a triangle
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.TriangleFan">
            List of connected triangles, a point uses the common center and the previous point to form a triangle
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.Quads">
            List of individual quads
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.LinesStrip">
            List of connected lines, a point uses the previous point to form a line
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.TrianglesStrip">
            List of connected triangles, a point uses the two previous points to form a triangle
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType.TrianglesFan">
            List of connected triangles, a point uses the common center and the previous point to form a triangle
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape">
            <summary>
                Specialized shape representing a rectangle
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.mySize">
            <summary>
                The my size
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the shape with an initial size
            </summary>
            <param name="size">Size of the shape</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape)">
            <summary>
                Construct the shape from another shape
            </summary>
            <param name="copy">Shape to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.Size">
            <summary>
                The size of the rectangle
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.GetPointCount">
            <summary>
                Get the total number of points of the rectangle.
            </summary>
            <returns>
                The total point count. For rectangle shapes,
                this number is always 4.
            </returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RectangleShape.GetPoint(System.UInt32)">
            <summary>
                Get the position of a point
                The returned point is in local coordinates, that is,
                the shape's transforms (position, rotation, scale) are
                not taken into account.
                The result is undefined if index is out of the valid range.
            </summary>
            <param name="index">Index of the point to get, in range [0 .. 3]</param>
            <returns>index-th point of the shape</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates">
            <summary>
                Define the states used for drawing to a RenderTarget
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode)">
            <summary>
                Construct a default set of render states with a custom blend mode
            </summary>
            <param name="blendMode">Blend mode to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Construct a default set of render states with a custom transform
            </summary>
            <param name="transform">Transform to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Construct a default set of render states with a custom texture
            </summary>
            <param name="texture">Texture to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Shader)">
            <summary>
                Construct a default set of render states with a custom shader
            </summary>
            <param name="shader">Shader to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.BlendMode,Alis.Core.Graphic.D2.SFML.Graphics.Transform,Alis.Core.Graphic.D2.SFML.Graphics.Texture,Alis.Core.Graphic.D2.SFML.Graphics.Shader)">
            <summary>
                Construct a set of render states with all its attributes
            </summary>
            <param name="blendMode">Blend mode to use</param>
            <param name="transform">Transform to use</param>
            <param name="texture">Texture to use</param>
            <param name="shader">Shader to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Copy constructor
            </summary>
            <param name="copy">States to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.Default">
            <summary>Special instance holding the default render states</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.BlendMode">
            <summary>Blending mode</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.Transform">
            <summary>Transform</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.Texture">
            <summary>Texture</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.Shader">
            <summary>Shader</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.Marshal">
            <summary>
                Marshals this instance
            </summary>
            <returns>The data</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData">
            <summary>
                The marshal data
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData.blendMode">
            <summary>
                The blend mode
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData.transform">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData.texture">
            <summary>
                The texture
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData.shader">
            <summary>
                The shader
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget">
            <summary>
                Abstract base class for render targets (renderwindow, renderimage)
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Size">
            <summary>
                Size of the rendering region of the target
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.DefaultView">
            <summary>
                Default view of the target
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.GetView">
            <summary>
                Return the current active view
            </summary>
            <returns>The current view</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.SetView(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Change the current active view
            </summary>
            <param name="view">New view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.GetViewport(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Get the viewport of a view applied to this target
            </summary>
            <param name="view">Target view</param>
            <returns>Viewport rectangle, expressed in pixels in the current target</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Convert a point from target coordinates to world
                coordinates, using the current view
                This function is an overload of the MapPixelToCoords
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapPixelToCoords(point, target.GetView());
            </summary>
            <param name="point">Pixel to convert</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from target coordinates to world coordinates
                This function finds the 2D position that matches the
                given pixel of the render-target. In other words, it does
                the inverse of what the graphics card does, to find the
                initial position of a rendered pixel.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (10, 50) in your render-target may map to the point
                (150, 75) in your 2D world -- if the view is translated by (140, 25).
                For render-windows, this function is typically used to find
                which point (or object) is located below the mouse cursor.
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Pixel to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Convert a point from world coordinates to target
                coordinates, using the current view
                This function is an overload of the mapCoordsToPixel
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapCoordsToPixel(point, target.GetView());
            </summary>
            <param name="point">Point to convert</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from world coordinates to target coordinates
                This function finds the pixel of the render-target that matches
                the given 2D point. In other words, it goes through the same process
                as the graphics card, to compute the final position of a rendered point.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (150, 75) in your 2D world may map to the pixel
                (10, 50) of your render-target -- if the view is translated by (140, 25).
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Point to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Clear">
            <summary>
                Clear the entire target with black color
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Clear(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Clear the entire target with a single color
            </summary>
            <param name="color">Color to use to clear the window</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable)">
            <summary>
                Draw a drawable object to the render-target, with default render states
            </summary>
            <param name="drawable">Object to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw a drawable object to the render-target
            </summary>
            <param name="drawable">Object to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by an array of vertices, with default render states
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by an array of vertices
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by a sub-array of vertices, with default render states
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="start">Index of the first vertex to draw in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by a sub-array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="start">Index of the first vertex to use in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.PushGlStates">
            <summary>
                Save the current OpenGL render states and matrices.
                This function can be used when you mix SFML drawing
                and direct OpenGL rendering. Combined with PopGLStates,
                it ensures that:
                \li SFML's internal states are not messed up by your OpenGL code
                \li your OpenGL states are not modified by a call to a SFML function
                More specifically, it must be used around code that
                calls Draw functions. Example:
                // OpenGL code here...
                window.PushGLStates();
                window.Draw(...);
                window.Draw(...);
                window.PopGLStates();
                // OpenGL code here...
                Note that this function is quite expensive: it saves all the
                possible OpenGL states and matrices, even the ones you
                don't care about. Therefore it should be used wisely.
                It is provided for convenience, but the best results will
                be achieved if you handle OpenGL states yourself (because
                you know which states have really changed, and need to be
                saved and restored). Take a look at the ResetGLStates
                function if you do so.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.PopGlStates">
            <summary>
                Restore the previously saved OpenGL render states and matrices.
                See the description of PushGLStates to get a detailed
                description of these functions.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget.ResetGlStates">
            <summary>
                Reset the internal OpenGL states so that the target is ready for drawing.
                This function can be used when you mix SFML drawing
                and direct OpenGL rendering, if you choose not to use
                PushGLStates/PopGLStates. It makes sure that all OpenGL
                states needed by SFML are set, so that subsequent Draw()
                calls will work as expected.
                Example:
                // OpenGL code here...
                glPushAttrib(...);
                window.ResetGLStates();
                window.Draw(...);
                window.Draw(...);
                glPopAttrib(...);
                // OpenGL code here...
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture">
            <summary>
                Target for off-screen 2D rendering into an texture
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.myDefaultView">
            <summary>
                The my default view
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.myTexture">
            <summary>
                The my texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.#ctor(System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Create the render-texture with the given dimensions and
                a ContextSettings.
            </summary>
            <param name="width">Width of the render-texture</param>
            <param name="height">Height of the render-texture</param>
            <param name="contextSettings"></param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Repeated">
            <summary>
                Enable or disable texture repeating
            </summary>
            <remarks>
                This property is similar to <see />.
                This parameter is disabled by default.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Texture">
            <summary>
                Target texture of the render texture
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.MaximumAntialiasingLevel">
            <summary>
                The maximum anti-aliasing level supported by the system
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Smooth">
            <summary>
                Control the smooth filter
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Size">
            <summary>
                Size of the rendering region of the render texture
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.DefaultView">
            <summary>
                Default view of the render texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.GetView">
            <summary>
                Return the current active view
            </summary>
            <returns>The current view</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.SetView(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Change the current active view
            </summary>
            <param name="view">New view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.GetViewport(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Get the viewport of a view applied to this target
            </summary>
            <param name="view">Target view</param>
            <returns>Viewport rectangle, expressed in pixels in the current target</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Convert a point from target coordinates to world
                coordinates, using the current view
                This function is an overload of the MapPixelToCoords
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapPixelToCoords(point, target.GetView());
            </summary>
            <param name="point">Pixel to convert</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from target coordinates to world coordinates
                This function finds the 2D position that matches the
                given pixel of the render-target. In other words, it does
                the inverse of what the graphics card does, to find the
                initial position of a rendered pixel.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (10, 50) in your render-target may map to the point
                (150, 75) in your 2D world -- if the view is translated by (140, 25).
                For render-windows, this function is typically used to find
                which point (or object) is located below the mouse cursor.
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Pixel to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Convert a point from world coordinates to target
                coordinates, using the current view
                This function is an overload of the mapCoordsToPixel
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapCoordsToPixel(point, target.GetView());
            </summary>
            <param name="point">Point to convert</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from world coordinates to target coordinates
                This function finds the pixel of the render-target that matches
                the given 2D point. In other words, it goes through the same process
                as the graphics card, to compute the final position of a rendered point.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (150, 75) in your 2D world may map to the pixel
                (10, 50) of your render-target -- if the view is translated by (140, 25).
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Point to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Clear">
            <summary>
                Clear the entire render texture with black color
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Clear(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Clear the entire render texture with a single color
            </summary>
            <param name="color">Color to use to clear the texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable)">
            <summary>
                Draw a drawable object to the render-target, with default render states
            </summary>
            <param name="drawable">Object to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw a drawable object to the render-target
            </summary>
            <param name="drawable">Object to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by an array of vertices, with default render states
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by an array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by a sub-array of vertices, with default render states
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="start">Index of the first vertex to draw in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by a sub-array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="start">Index of the first vertex to use in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.PushGlStates">
            <summary>
                Save the current OpenGL render states and matrices.
                This function can be used when you mix SFML drawing
                and direct OpenGL rendering. Combined with PopGLStates,
                it ensures that:
                \li SFML's internal states are not messed up by your OpenGL code
                \li your OpenGL states are not modified by a call to a SFML function
                More specifically, it must be used around code that
                calls Draw functions. Example:
                // OpenGL code here...
                window.PushGLStates();
                window.Draw(...);
                window.Draw(...);
                window.PopGLStates();
                // OpenGL code here...
                Note that this function is quite expensive: it saves all the
                possible OpenGL states and matrices, even the ones you
                don't care about. Therefore it should be used wisely.
                It is provided for convenience, but the best results will
                be achieved if you handle OpenGL states yourself (because
                you know which states have really changed, and need to be
                saved and restored). Take a look at the ResetGLStates
                function if you do so.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.PopGlStates">
            <summary>
                Restore the previously saved OpenGL render states and matrices.
                See the description of PushGLStates to get a detailed
                description of these functions.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.ResetGlStates">
            <summary>
                Reset the internal OpenGL states so that the target is ready for drawing.
                This function can be used when you mix SFML drawing
                and direct OpenGL rendering, if you choose not to use
                PushGLStates/PopGLStates. It makes sure that all OpenGL
                states needed by SFML are set, so that subsequent Draw()
                calls will work as expected.
                Example:
                // OpenGL code here...
                glPushAttrib(...);
                window.ResetGLStates();
                window.Draw(...);
                window.Draw(...);
                glPopAttrib(...);
                // OpenGL code here...
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.SetActive(System.Boolean)">
            <summary>
                Activate of deactivate the render texture as the current target
                for rendering
            </summary>
            <param name="active">True to activate, false to deactivate (true by default)</param>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.GenerateMipmap">
            <summary>
                Generate a mipmap using the current texture data
            </summary>
            <remarks>
                This function is similar to <see /> and operates
                on the texture used as the target for drawing.
                Be aware that any draw operation may modify the base level image data.
                For this reason, calling this function only makes sense after all
                drawing is completed and display has been called. Not calling display
                after subsequent drawing will lead to undefined behavior if a mipmap
                had been previously generated.
            </remarks>
            <returns>True if mipmap generation was successful, false if unsuccessful</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Display">
            <summary>
                Update the contents of the target texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_create(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
                Sfs the render texture create using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="depthBuffer">The depth buffer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_createWithSettings(System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Sfs the render texture create with settings using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="settings">The settings</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_destroy(System.IntPtr)">
            <summary>
                Sfs the render texture destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_clear(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the render texture clear using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="clearColor">The clear color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getSize(System.IntPtr)">
            <summary>
                Sfs the render texture get size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2u</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_setActive(System.IntPtr,System.Boolean)">
            <summary>
                Describes whether sf render texture set active
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="active">The active</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_saveGLStates(System.IntPtr)">
            <summary>
                Describes whether sf render texture save gl states
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_restoreGLStates(System.IntPtr)">
            <summary>
                Describes whether sf render texture restore gl states
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_display(System.IntPtr)">
            <summary>
                Describes whether sf render texture display
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_setView(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render texture set view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="view">The view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getView(System.IntPtr)">
            <summary>
                Sfs the render texture get view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getDefaultView(System.IntPtr)">
            <summary>
                Sfs the render texture get default view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getViewport(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render texture get viewport using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="targetView">The target view</param>
            <returns>The int rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_mapCoordsToPixel(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2F,System.IntPtr)">
            <summary>
                Sfs the render texture map coords to pixel using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="point">The point</param>
            <param name="view">The view</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_mapPixelToCoords(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2I,System.IntPtr)">
            <summary>
                Sfs the render texture map pixel to coords using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="point">The point</param>
            <param name="view">The view</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getTexture(System.IntPtr)">
            <summary>
                Sfs the render texture get texture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_getMaximumAntialiasingLevel">
            <summary>
                Sfs the render texture get maximum antialiasing level
            </summary>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_setSmooth(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render texture set smooth using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="smooth">The smooth</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_isSmooth(System.IntPtr)">
            <summary>
                Describes whether sf render texture is smooth
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_setRepeated(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render texture set repeated using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="repeated">The repeated</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_isRepeated(System.IntPtr)">
            <summary>
                Describes whether sf render texture is repeated
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_generateMipmap(System.IntPtr)">
            <summary>
                Describes whether sf render texture generate mipmap
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_drawPrimitives(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Vertex*,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw primitives using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexPtr">The vertex ptr</param>
            <param name="vertexCount">The vertex count</param>
            <param name="type">The type</param>
            <param name="renderStates">The render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_pushGLStates(System.IntPtr)">
            <summary>
                Sfs the render texture push gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_popGLStates(System.IntPtr)">
            <summary>
                Sfs the render texture pop gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderTexture.sfRenderTexture_resetGLStates(System.IntPtr)">
            <summary>
                Sfs the render texture reset gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow">
            <summary>
                Simple wrapper for Window that allows easy
                2D rendering
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.myDefaultView">
            <summary>
                The my default view
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String)">
            <summary>
                Create the window with default style and creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles)">
            <summary>
                Create the window with default creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Create the window
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.#ctor(System.IntPtr)">
            <summary>
                Create the window from an existing control with default creation settings
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.#ctor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Create the window from an existing control
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.IsOpen">
            <summary>
                Tell whether or not the window is opened (ie. has been created).
                Note that a hidden window (Show(false))
                will still return true
            </summary>
            <returns>True if the window is opened</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Settings">
            <summary>
                Creation settings of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Position">
            <summary>
                Position of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SystemHandle">
            <summary>
                OS-specific handle of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Size">
            <summary>
                Size of the rendering region of the window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Clear">
            <summary>
                Clear the entire window with black color
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Clear(Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Clear the entire window with a single color
            </summary>
            <param name="color">Color to use to clear the window</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetView(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Change the current active view
            </summary>
            <param name="view">New view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.GetView">
            <summary>
                Return the current active view
            </summary>
            <returns>The current view</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.DefaultView">
            <summary>
                Default view of the window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.GetViewport(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Get the viewport of a view applied to this target
            </summary>
            <param name="view">Target view</param>
            <returns>Viewport rectangle, expressed in pixels in the current target</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Convert a point from target coordinates to world
                coordinates, using the current view
                This function is an overload of the MapPixelToCoords
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapPixelToCoords(point, target.GetView());
            </summary>
            <param name="point">Pixel to convert</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.MapPixelToCoords(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from target coordinates to world coordinates
                This function finds the 2D position that matches the
                given pixel of the render-target. In other words, it does
                the inverse of what the graphics card does, to find the
                initial position of a rendered pixel.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (10, 50) in your render-target may map to the point
                (150, 75) in your 2D world -- if the view is translated by (140, 25).
                For render-windows, this function is typically used to find
                which point (or object) is located below the mouse cursor.
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Pixel to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in "world" coordinates</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Convert a point from world coordinates to target
                coordinates, using the current view
                This function is an overload of the mapCoordsToPixel
                function that implicitly uses the current view.
                It is equivalent to:
                target.MapCoordsToPixel(point, target.GetView());
            </summary>
            <param name="point">Point to convert</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.MapCoordsToPixel(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Convert a point from world coordinates to target coordinates
                This function finds the pixel of the render-target that matches
                the given 2D point. In other words, it goes through the same process
                as the graphics card, to compute the final position of a rendered point.
                Initially, both coordinate systems (world units and target pixels)
                match perfectly. But if you define a custom view or resize your
                render-target, this assertion is not true anymore, ie. a point
                located at (150, 75) in your 2D world may map to the pixel
                (10, 50) of your render-target -- if the view is translated by (140, 25).
                This version uses a custom view for calculations, see the other
                overload of the function if you want to use the current view of the
                render-target.
            </summary>
            <param name="point">Point to convert</param>
            <param name="view">The view to use for converting the point</param>
            <returns>The converted point, in target coordinates (pixels)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable)">
            <summary>
                Draw a drawable object to the render-target, with default render states
            </summary>
            <param name="drawable">Object to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IDrawable,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw a drawable object to the render-target
            </summary>
            <param name="drawable">Object to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by an array of vertices, with default render states
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by an array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Draw primitives defined by a sub-array of vertices, with default render states
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="start">Index of the first vertex to draw in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Draw(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw primitives defined by a sub-array of vertices
            </summary>
            <param name="vertices">Pointer to the vertices</param>
            <param name="start">Index of the first vertex to use in the array</param>
            <param name="count">Number of vertices to draw</param>
            <param name="type">Type of primitives to draw</param>
            <param name="states">Render states to use for drawing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.PushGlStates">
            <summary>
                Save the current OpenGL render states and matrices.
            </summary>
            <example>
                // OpenGL code here...
                window.PushGLStates();
                window.Draw(...);
                window.Draw(...);
                window.PopGLStates();
                // OpenGL code here...
            </example>
            <remarks>
                <para>
                    This function can be used when you mix SFML drawing
                    and direct OpenGL rendering. Combined with PopGLStates,
                    it ensures that:
                </para>
                <para>SFML's internal states are not messed up by your OpenGL code</para>
                <para>Your OpenGL states are not modified by a call to a SFML function</para>
                <para>
                    More specifically, it must be used around code that
                    calls Draw functions.
                </para>
                <para>
                    Note that this function is quite expensive: it saves all the
                    possible OpenGL states and matrices, even the ones you
                    don't care about. Therefore it should be used wisely.
                    It is provided for convenience, but the best results will
                    be achieved if you handle OpenGL states yourself (because
                    you know which states have really changed, and need to be
                    saved and restored). Take a look at the <seealso cref="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.ResetGlStates" />
                    function if you do so.
                </para>
            </remarks>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.PopGlStates">
            <summary>
                Restore the previously saved OpenGL render states and matrices.
                See the description of <seealso cref="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.PushGlStates" /> to get a detailed
                description of these functions.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.ResetGlStates">
            <summary>
                Reset the internal OpenGL states so that the target is ready for drawing.
            </summary>
            <remarks>
                This function can be used when you mix SFML drawing
                and direct OpenGL rendering, if you choose not to use
                PushGLStates/PopGLStates. It makes sure that all OpenGL
                states needed by SFML are set, so that subsequent Draw()
                calls will work as expected.
            </remarks>
            <example>
                // OpenGL code here...
                glPushAttrib(...);
                window.ResetGLStates();
                window.Draw(...);
                window.Draw(...);
                glPopAttrib(...);
                // OpenGL code here...
            </example>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Close">
            <summary>
                Close (destroy) the window.
                The Window instance remains valid and you can call
                Create to recreate the window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetTitle(System.String)">
            <summary>
                Change the title of the window
            </summary>
            <param name="title">New title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetIcon(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
                Change the window's icon
            </summary>
            <param name="width">Icon's width, in pixels</param>
            <param name="height">Icon's height, in pixels</param>
            <param name="pixels">Array of pixels, format must be RGBA 32 bits</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetVisible(System.Boolean)">
            <summary>
                Show or hide the window
            </summary>
            <param name="visible">True to show the window, false to hide it</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetVerticalSyncEnabled(System.Boolean)">
            <summary>
                Enable / disable vertical synchronization
            </summary>
            <param name="enable">True to enable v-sync, false to deactivate</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetMouseCursorVisible(System.Boolean)">
            <summary>
                Show or hide the mouse cursor
            </summary>
            <param name="visible">True to show, false to hide</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetMouseCursorGrabbed(System.Boolean)">
            <summary>
                Grab or release the mouse cursor
            </summary>
            <param name="grabbed">True to grab, false to release</param>
            <remarks>
                If set, grabs the mouse cursor inside this window's client
                area so it may no longer be moved outside its bounds.
                Note that grabbing is only active while the window has
                focus and calling this function for fullscreen windows
                won't have any effect (fullscreen windows always grab the
                cursor).
            </remarks>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetMouseCursor(Alis.Core.Graphic.D2.SFML.Windows.Cursor)">
            <summary>
                Set the displayed cursor to a native system cursor
            </summary>
            <param name="cursor">Native system cursor type to display</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetKeyRepeatEnabled(System.Boolean)">
            <summary>
                Enable or disable automatic key-repeat.
                Automatic key-repeat is enabled by default
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetFramerateLimit(System.UInt32)">
            <summary>
                Limit the framerate to a maximum fixed frequency
            </summary>
            <param name="limit">Framerate limit, in frames per seconds (use 0 to disable limit)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetJoystickThreshold(System.Single)">
            <summary>
                Change the joystick threshold, ie. the value below which
                no move event will be generated
            </summary>
            <param name="threshold">New threshold, in range [0, 100]</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.SetActive(System.Boolean)">
            <summary>
                Activate of deactivate the window as the current target
                for rendering
            </summary>
            <param name="active">True to activate, false to deactivate (true by default)</param>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.RequestFocus">
            <summary>
                Request the current window to be made the active
                foreground window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.HasFocus">
            <summary>
                Check whether the window has the input focus
            </summary>
            <returns>True if the window has focus, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Display">
            <summary>
                Display the window on screen
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Capture">
            <summary>
                Capture the current contents of the window into an image.
            </summary>
            <remarks>
                Deprecated. Use <see cref="T:Alis.Core.Graphic.D2.SFML.Graphics.Texture" /> and <see cref="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow)" />
                instead:
                <code>
               Texture texture = new Texture(window.Size);
               texture.update(window);
               Image img = texture.CopyToImage();
               </code>
            </remarks>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.PollEvent(Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Internal function to get the next event
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>True if there was an event, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.WaitEvent(Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Internal function to get the next event (blocking)
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>False if any error occured</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.InternalGetMousePosition">
            <summary>
                Internal function to get the mouse position relative to the window.
                This function is protected because it is called by another class,
                it is not meant to be called by users.
            </summary>
            <returns>Relative mouse position</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.InternalSetMousePosition(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Internal function to set the mouse position relative to the window.
                This function is protected because it is called by another class,
                it is not meant to be called by users.
            </summary>
            <param name="position">Relative mouse position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.InternalGetTouchPosition(System.UInt32)">
            <summary>
                Internal function to get the touch position relative to the window.
                This function is protected because it is called by another class of
                another module, it is not meant to be called by users.
            </summary>
            <param name="finger">Finger index</param>
            <returns>Relative touch position</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.Initialize">
            <summary>
                Do common initializations
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_create(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the render window create using the specified mode
            </summary>
            <param name="mode">The mode</param>
            <param name="title">The title</param>
            <param name="style">The style</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_createUnicode(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the render window create unicode using the specified mode
            </summary>
            <param name="mode">The mode</param>
            <param name="title">The title</param>
            <param name="style">The style</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_createFromHandle(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the render window create from handle using the specified handle
            </summary>
            <param name="handle">The handle</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_destroy(System.IntPtr)">
            <summary>
                Sfs the render window destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_close(System.IntPtr)">
            <summary>
                Sfs the render window close using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_isOpen(System.IntPtr)">
            <summary>
                Describes whether sf render window is open
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getSettings(System.IntPtr)">
            <summary>
                Sfs the render window get settings using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The context settings</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_pollEvent(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Describes whether sf render window poll event
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="evt">The evt</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_waitEvent(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Describes whether sf render window wait event
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="evt">The evt</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getPosition(System.IntPtr)">
            <summary>
                Sfs the render window get position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setPosition(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Sfs the render window set position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getSize(System.IntPtr)">
            <summary>
                Sfs the render window get size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2u</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setSize(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Sfs the render window set size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="size">The size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setTitle(System.IntPtr,System.String)">
            <summary>
                Sfs the render window set title using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="title">The title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setUnicodeTitle(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render window set unicode title using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="title">The title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setIcon(System.IntPtr,System.UInt32,System.UInt32,System.Byte*)">
            <summary>
                Sfs the render window set icon using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="pixels">The pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setVisible(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render window set visible using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="visible">The visible</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setVerticalSyncEnabled(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render window set vertical sync enabled using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="enable">The enable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setMouseCursorVisible(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render window set mouse cursor visible using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="visible">The visible</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setMouseCursorGrabbed(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render window set mouse cursor grabbed using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="grabbed">The grabbed</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setMouseCursor(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render window set mouse cursor using the specified window
            </summary>
            <param name="window">The window</param>
            <param name="cursor">The cursor</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setKeyRepeatEnabled(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the render window set key repeat enabled using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="enable">The enable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setFramerateLimit(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the render window set framerate limit using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="limit">The limit</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setJoystickThreshold(System.IntPtr,System.Single)">
            <summary>
                Sfs the render window set joystick threshold using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="threshold">The threshold</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setActive(System.IntPtr,System.Boolean)">
            <summary>
                Describes whether sf render window set active
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="active">The active</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_requestFocus(System.IntPtr)">
            <summary>
                Sfs the render window request focus using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_hasFocus(System.IntPtr)">
            <summary>
                Describes whether sf render window has focus
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_display(System.IntPtr)">
            <summary>
                Sfs the render window display using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getSystemHandle(System.IntPtr)">
            <summary>
                Sfs the render window get system handle using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_clear(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the render window clear using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="clearColor">The clear color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_setView(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render window set view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="view">The view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getView(System.IntPtr)">
            <summary>
                Sfs the render window get view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getDefaultView(System.IntPtr)">
            <summary>
                Sfs the render window get default view using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getViewport(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the render window get viewport using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="targetView">The target view</param>
            <returns>The int rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_mapPixelToCoords(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2I,System.IntPtr)">
            <summary>
                Sfs the render window map pixel to coords using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="point">The point</param>
            <param name="view">The view</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_mapCoordsToPixel(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2F,System.IntPtr)">
            <summary>
                Sfs the render window map coords to pixel using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="point">The point</param>
            <param name="view">The view</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_drawPrimitives(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Vertex*,System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw primitives using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexPtr">The vertex ptr</param>
            <param name="vertexCount">The vertex count</param>
            <param name="type">The type</param>
            <param name="renderStates">The render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_pushGLStates(System.IntPtr)">
            <summary>
                Sfs the render window push gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_popGLStates(System.IntPtr)">
            <summary>
                Sfs the render window pop gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_resetGLStates(System.IntPtr)">
            <summary>
                Sfs the render window reset gl states using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_capture(System.IntPtr)">
            <summary>
                Sfs the render window capture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfMouse_getPositionRenderWindow(System.IntPtr)">
            <summary>
                Sfs the mouse get position render window using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfMouse_setPositionRenderWindow(Alis.Core.Aspect.Math.SFML.Vector2I,System.IntPtr)">
            <summary>
                Sfs the mouse set position render window using the specified position
            </summary>
            <param name="position">The position</param>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfTouch_getPositionRenderWindow(System.UInt32,System.IntPtr)">
            <summary>
                Sfs the touch get position render window using the specified finger
            </summary>
            <param name="finger">The finger</param>
            <param name="relativeTo">The relative to</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_saveGLStates(System.IntPtr)">
            <summary>
                Describes whether sf render window save gl states
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_restoreGLStates(System.IntPtr)">
            <summary>
                Describes whether sf render window restore gl states
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow.sfRenderWindow_getFrameTime(System.IntPtr)">
            <summary>
                Sfs the render window get frame time using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Shader">
            <summary>
                Wrapper for pixel shaders
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Shader.myTextures">
            <summary>
                The texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.#ctor(System.String,System.String,System.String)">
            <summary>
                Load the vertex, geometry and fragment shaders from files
            </summary>
            <remarks>
                This function loads the vertex, geometry and fragment
                shaders. Pass NULL if you don't want to load
                a specific shader.
                The sources must be text files containing valid shaders
                in GLSL language. GLSL is a C-like language dedicated to
                OpenGL shaders; you'll probably need to read a good documentation
                for it before writing your own shaders.
            </remarks>
            <param name="vertexShaderFilename">Path of the vertex shader file to load, or null to skip this shader</param>
            <param name="geometryShaderFilename">Path of the geometry shader file to load, or null to skip this shader</param>
            <param name="fragmentShaderFilename">Path of the fragment shader file to load, or null to skip this shader</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.#ctor(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
            <summary>
                Load the vertex, geometry and fragment shaders from custom streams
            </summary>
            <remarks>
                This function loads the vertex, geometry and fragment
                shaders. Pass NULL if you don't want to load
                a specific shader.
                The sources must be valid shaders in GLSL language. GLSL is
                a C-like language dedicated to OpenGL shaders; you'll
                probably need to read a good documentation for it before
                writing your own shaders.
            </remarks>
            <param name="vertexShaderStream">Source stream to read the vertex shader from, or null to skip this shader</param>
            <param name="geometryShaderStream">Source stream to read the geometry shader from, or null to skip this shader</param>
            <param name="fragmentShaderStream">Source stream to read the fragment shader from, or null to skip this shader</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.#ctor(System.IntPtr)">
            <summary>
                Construct the shader from a pointer
            </summary>
            <param name="ptr">Pointer to the shader instance</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shader.NativeHandle">
            <summary>
                Get the underlying OpenGL handle of the shader.
            </summary>
            <remarks>
                You shouldn't need to use this handle, unless you have
                very specific stuff to implement that SFML doesn't support.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shader.IsAvailable">
            <summary>
                Tell whether or not the system supports shaders.
            </summary>
            <remarks>
                This property should always be checked before using
                the shader features. If it returns false, then
                any attempt to use Shader will fail.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shader.IsGeometryAvailable">
            <summary>
                Tell whether or not the system supports geometry shaders.
            </summary>
            <remarks>
                <para>
                    This property should always be checked before using
                    the geometry shader features. If it returns false, then
                    any attempt to use geometry shader features will fail.
                </para>
                <para>
                    Note: The first call to this function, whether by your
                    code or SFML will result in a context switch.
                </para>
            </remarks>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Shader.CurrentTexture">
            <summary>
                Special value that can be passed to SetParameter,
                and that represents the texture of the object being drawn
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.FromString(System.String,System.String,System.String)">
            <summary>
                Load the vertex, geometry and fragment shaders from source code in memory
            </summary>
            <remarks>
                This function loads the vertex, geometry and fragment
                shaders. Pass NULL if you don't want to load
                a specific shader.
                The sources must be valid shaders in GLSL language. GLSL is
                a C-like language dedicated to OpenGL shaders; you'll
                probably need to read a good documentation for it before
                writing your own shaders.
            </remarks>
            <param name="vertexShader">String containing the source code of the vertex shader</param>
            <param name="geometryShader">String containing the source code of the geometry shader</param>
            <param name="fragmentShader">String containing the source code of the fragment shader</param>
            <returns>New shader instance</returns>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,System.Single)">
            <summary>
                Specify value for <c>float</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="x">Value of the float scalar</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Vec2)">
            <summary>
                Specify value for <c>vec2</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the vec2 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Vec3)">
            <summary>
                Specify value for <c>vec3</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the vec3 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Vec4)">
            <summary>
                Specify value for <c>vec4</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the vec4 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,System.Int32)">
            <summary>
                Specify value for <c>int</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="x">Value of the int scalar</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Ivec2)">
            <summary>
                Specify value for <c>ivec2</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the ivec2 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Ivec3)">
            <summary>
                Specify value for <c>ivec3</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the ivec3 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Ivec4)">
            <summary>
                Specify value for <c>ivec4</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the ivec4 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,System.Boolean)">
            <summary>
                Specify value for <c>bool</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="x">Value of the bool scalar</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Bvec2)">
            <summary>
                Specify value for <c>bvec2</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the bvec2 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Bvec3)">
            <summary>
                Specify value for <c>bvec3</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the bvec3 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Bvec4)">
            <summary>
                Specify value for <c>bvec4</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="vector">Value of the bvec4 vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Mat3)">
            <summary>
                Specify value for <c>mat3</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="matrix">Value of the mat3 matrix</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Aspect.Math.SFML.Mat4)">
            <summary>
                Specify value for <c>mat4</c> uniform
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="matrix">Value of the mat4 matrix</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Specify a texture as <c>sampler2D</c> uniform
            </summary>
            <remarks>
                <para>
                    name is the name of the variable to change in the shader.
                    The corresponding parameter in the shader must be a 2D texture
                    (<c>sampler2D</c> GLSL type).
                </para>
                <para>
                    Example:
                    <code>
            uniform sampler2D the_texture; // this is the variable in the shader
            </code>
                    <code>
            sf::Texture texture;
            ...
            shader.setUniform("the_texture", texture);
            </code>
                    It is important to note that <paramref name="texture" /> must remain alive as long
                    as the shader uses it, no copy is made internally.
                </para>
                <para>
                    To use the texture of the object being drawn, which cannot be
                    known in advance, you can pass the special value
                    Shader.CurrentTexture:
                    <code>
            shader.setUniform("the_texture", Shader.CurrentTexture);
            </code>
                </para>
            </remarks>
            <param name="name">Name of the texture in the shader</param>
            <param name="texture">Texture to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniform(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Shader.CurrentTextureType)">
            <summary>
                Specify current texture as \p sampler2D uniform
            </summary>
            <remarks>
                <para>
                    This overload maps a shader texture variable to the
                    texture of the object being drawn, which cannot be
                    known in advance. The second argument must be
                    <see cref="F:Alis.Core.Graphic.D2.SFML.Graphics.Shader.CurrentTexture" />.
                    The corresponding parameter in the shader must be a 2D texture
                    (<c>sampler2D</c> GLSL type).
                </para>
                <para>
                    Example:
                    <code>
            uniform sampler2D current; // this is the variable in the shader
            </code>
                    <code>
            shader.setUniform("current", Shader.CurrentTexture);
            </code>
                </para>
            </remarks>
            <param name="name">Name of the texture in the shader</param>
            <param name="current" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,System.Single[])">
            <summary>
                Specify values for <c>float[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>float</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,Alis.Core.Aspect.Math.SFML.Vec2[])">
            <summary>
                Specify values for <c>vec2[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>vec2</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,Alis.Core.Aspect.Math.SFML.Vec3[])">
            <summary>
                Specify values for <c>vec3[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>vec3</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,Alis.Core.Aspect.Math.SFML.Vec4[])">
            <summary>
                Specify values for <c>vec4[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>vec4</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,Alis.Core.Aspect.Math.SFML.Mat3[])">
            <summary>
                Specify values for <c>mat3[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>mat3</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetUniformArray(System.String,Alis.Core.Aspect.Math.SFML.Mat4[])">
            <summary>
                Specify values for <c>mat4[]</c> array uniforms
            </summary>
            <param name="name">Name of the uniform variable in GLSL</param>
            <param name="array">array of <c>mat4</c> values</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,System.Single)">
            <summary>
                Change a float parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a float
                (float GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">Value to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,System.Single,System.Single)">
            <summary>
                Change a 2-components vector parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 2x1 vector
                (vec2 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">First component of the value to assign</param>
            <param name="y">Second component of the value to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,System.Single,System.Single,System.Single)">
            <summary>
                Change a 3-components vector parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 3x1 vector
                (vec3 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">First component of the value to assign</param>
            <param name="y">Second component of the value to assign</param>
            <param name="z">Third component of the value to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Change a 4-components vector parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 4x1 vector
                (vec4 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="x">First component of the value to assign</param>
            <param name="y">Second component of the value to assign</param>
            <param name="z">Third component of the value to assign</param>
            <param name="w">Fourth component of the value to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Change a 2-components vector parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 2x1 vector
                (vec2 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="vector">Vector to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Change a color parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 4x1 vector
                (vec4 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="color">Color to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Change a matrix parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 4x4 matrix
                (mat4 GLSL type).
            </summary>
            <param name="name">Name of the parameter in the shader</param>
            <param name="transform">Transform to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Change a texture parameter of the shader
                "name" is the name of the variable to change in the shader.
                The corresponding parameter in the shader must be a 2D texture
                (sampler2D GLSL type).
                It is important to note that \a texture must remain alive as long
                as the shader uses it, no copy is made internally.
                To use the texture of the object being draw, which cannot be
                known in advance, you can pass the special value
                Shader.CurrentTexture.
            </summary>
            <param name="name">Name of the texture in the shader</param>
            <param name="texture">Texture to assign</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.SetParameter(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Shader.CurrentTextureType)">
            <summary>
                Change a texture parameter of the shader
                This overload maps a shader texture variable to the
                texture of the object being drawn, which cannot be
                known in advance. The second argument must be
                sf::Shader::CurrentTexture.
                The corresponding parameter in the shader must be a 2D texture
                (sampler2D GLSL type).
            </summary>
            <param name="name">Name of the texture in the shader</param>
            <param name="current">Always pass the spacial value Shader.CurrentTexture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.Bind(Alis.Core.Graphic.D2.SFML.Graphics.Shader)">
            <summary>
                Bind a shader for rendering
            </summary>
            <param name="shader">Shader to bind (can be null to use no shader)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_createFromFile(System.String,System.String,System.String)">
            <summary>
                Sfs the shader create from file using the specified vertex shader filename
            </summary>
            <param name="vertexShaderFilename">The vertex shader filename</param>
            <param name="geometryShaderFilename">The geometry shader filename</param>
            <param name="fragmentShaderFilename">The fragment shader filename</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_createFromMemory(System.String,System.String,System.String)">
            <summary>
                Sfs the shader create from memory using the specified vertex shader
            </summary>
            <param name="vertexShader">The vertex shader</param>
            <param name="geometryShader">The geometry shader</param>
            <param name="fragmentShader">The fragment shader</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_createFromStream(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the shader create from stream using the specified vertex shader stream
            </summary>
            <param name="vertexShaderStream">The vertex shader stream</param>
            <param name="geometryShaderStream">The geometry shader stream</param>
            <param name="fragmentShaderStream">The fragment shader stream</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_destroy(System.IntPtr)">
            <summary>
                Sfs the shader destroy using the specified shader
            </summary>
            <param name="shader">The shader</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloatUniform(System.IntPtr,System.String,System.Single)">
            <summary>
                Sfs the shader set float uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec2Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec2)">
            <summary>
                Sfs the shader set vec 2 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec3Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec3)">
            <summary>
                Sfs the shader set vec 3 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec4Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec4)">
            <summary>
                Sfs the shader set vec 4 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setIntUniform(System.IntPtr,System.String,System.Int32)">
            <summary>
                Sfs the shader set int uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setIvec2Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Ivec2)">
            <summary>
                Sfs the shader set ivec 2 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setIvec3Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Ivec3)">
            <summary>
                Sfs the shader set ivec 3 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setIvec4Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Ivec4)">
            <summary>
                Sfs the shader set ivec 4 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setBoolUniform(System.IntPtr,System.String,System.Boolean)">
            <summary>
                Sfs the shader set bool uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setBvec2Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Bvec2)">
            <summary>
                Sfs the shader set bvec 2 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setBvec3Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Bvec3)">
            <summary>
                Sfs the shader set bvec 3 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setBvec4Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Bvec4)">
            <summary>
                Sfs the shader set bvec 4 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="vector">The vector</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setMat3Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Mat3)">
            <summary>
                Sfs the shader set mat 3 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="matrix">The matrix</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setMat4Uniform(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Mat4)">
            <summary>
                Sfs the shader set mat 4 uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="matrix">The matrix</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setTextureUniform(System.IntPtr,System.String,System.IntPtr)">
            <summary>
                Sfs the shader set texture uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="texture">The texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setCurrentTextureUniform(System.IntPtr,System.String)">
            <summary>
                Sfs the shader set current texture uniform using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloatUniformArray(System.IntPtr,System.String,System.Single*,System.UInt32)">
            <summary>
                Sfs the shader set float uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec2UniformArray(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec2*,System.UInt32)">
            <summary>
                Sfs the shader set vec 2 uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec3UniformArray(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec3*,System.UInt32)">
            <summary>
                Sfs the shader set vec 3 uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setVec4UniformArray(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Vec4*,System.UInt32)">
            <summary>
                Sfs the shader set vec 4 uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setMat3UniformArray(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Mat3*,System.UInt32)">
            <summary>
                Sfs the shader set mat 3 uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setMat4UniformArray(System.IntPtr,System.String,Alis.Core.Aspect.Math.SFML.Mat4*,System.UInt32)">
            <summary>
                Sfs the shader set mat 4 uniform array using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="data">The data</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloatParameter(System.IntPtr,System.String,System.Single)">
            <summary>
                Sfs the shader set float parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloat2Parameter(System.IntPtr,System.String,System.Single,System.Single)">
            <summary>
                Sfs the shader set float 2 parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloat3Parameter(System.IntPtr,System.String,System.Single,System.Single,System.Single)">
            <summary>
                Sfs the shader set float 3 parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
            <param name="y">The </param>
            <param name="z">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setFloat4Parameter(System.IntPtr,System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sfs the shader set float 4 parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="x">The </param>
            <param name="y">The </param>
            <param name="z">The </param>
            <param name="w">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setColorParameter(System.IntPtr,System.String,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the shader set color parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setTransformParameter(System.IntPtr,System.String,Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Sfs the shader set transform parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="transform">The transform</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setTextureParameter(System.IntPtr,System.String,System.IntPtr)">
            <summary>
                Sfs the shader set texture parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
            <param name="texture">The texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_setCurrentTextureParameter(System.IntPtr,System.String)">
            <summary>
                Sfs the shader set current texture parameter using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <param name="name">The name</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_getNativeHandle(System.IntPtr)">
            <summary>
                Sfs the shader get native handle using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_bind(System.IntPtr)">
            <summary>
                Sfs the shader bind using the specified shader
            </summary>
            <param name="shader">The shader</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_isAvailable">
            <summary>
                Describes whether sf shader is available
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shader.sfShader_isGeometryAvailable">
            <summary>
                Describes whether sf shader is geometry available
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Shader.CurrentTextureType">
            <summary>
                Special type that can be passed to SetParameter,
                and that represents the texture of the object being drawn
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Shape">
            <summary>
                Base class for textured shapes with outline
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Shape.myGetPointCallback">
            <summary>
                The my get point callback
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Shape.myGetPointCountCallback">
            <summary>
                The my get point count callback
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Shape.myTexture">
            <summary>
                The my texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Shape)">
            <summary>
                Construct the shape from another shape
            </summary>
            <param name="copy">Shape to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shape.Texture">
            <summary>
                Source texture of the shape
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shape.TextureRect">
            <summary>
                Sub-rectangle of the texture that the shape will display
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shape.FillColor">
            <summary>
                Fill color of the shape
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shape.OutlineColor">
            <summary>
                Outline color of the shape
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Shape.OutlineThickness">
            <summary>
                Thickness of the shape's outline
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the shape to a render target
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPointCount">
            <summary>
                Get the total number of points of the shape
            </summary>
            <returns>The total point count</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPoint(System.UInt32)">
            <summary>
                Get the position of a point
                The returned point is in local coordinates, that is,
                the shape's transforms (position, rotation, scale) are
                not taken into account.
                The result is undefined if index is out of the valid range.
            </summary>
            <param name="index">Index of the point to get, in range [0 .. PointCount - 1]</param>
            <returns>index-th point of the shape</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetLocalBounds">
            <summary>
                Get the local bounding rectangle of the entity.
                The returned rectangle is in local coordinates, which means
                that it ignores the transformations (translation, rotation,
                scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                entity in the entity's coordinate system.
            </summary>
            <returns>Local bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetGlobalBounds">
            <summary>
                Get the global bounding rectangle of the entity.
                The returned rectangle is in global coordinates, which means
                that it takes in account the transformations (translation,
                rotation, scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                sprite in the global 2D world's coordinate system.
            </summary>
            <returns>Global bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.Update">
            <summary>
                Recompute the internal geometry of the shape.
                This function must be called by the derived class everytime
                the shape's points change (ie. the result of either
                PointCount or GetPoint is different).
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.InternalGetPointCount(System.IntPtr)">
            <summary>
                Callback passed to the C API
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.InternalGetPoint(System.UInt32,System.IntPtr)">
            <summary>
                Callback passed to the C API
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_create(Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPointCountCallbackType,Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPointCallbackType,System.IntPtr)">
            <summary>
                Sfs the shape create using the specified get point count
            </summary>
            <param name="getPointCount">The get point count</param>
            <param name="getPoint">The get point</param>
            <param name="userData">The user data</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_copy(System.IntPtr)">
            <summary>
                Sfs the shape copy using the specified shape
            </summary>
            <param name="shape">The shape</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_destroy(System.IntPtr)">
            <summary>
                Sfs the shape destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_setTexture(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
                Sfs the shape set texture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="texture">The texture</param>
            <param name="adjustToNewSize">The adjust to new size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_setTextureRect(System.IntPtr,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Sfs the shape set texture rect using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="rect">The rect</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_getTextureRect(System.IntPtr)">
            <summary>
                Sfs the shape get texture rect using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_setFillColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the shape set fill color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_getFillColor(System.IntPtr)">
            <summary>
                Sfs the shape get fill color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_setOutlineColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the shape set outline color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_getOutlineColor(System.IntPtr)">
            <summary>
                Sfs the shape get outline color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_setOutlineThickness(System.IntPtr,System.Single)">
            <summary>
                Sfs the shape set outline thickness using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="thickness">The thickness</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_getOutlineThickness(System.IntPtr)">
            <summary>
                Sfs the shape get outline thickness using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_getLocalBounds(System.IntPtr)">
            <summary>
                Sfs the shape get local bounds using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfShape_update(System.IntPtr)">
            <summary>
                Sfs the shape update using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfRenderWindow_drawShape(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw shape using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="shape">The shape</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Shape.sfRenderTexture_drawShape(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw shape using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="shape">The shape</param>
            <param name="states">The states</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPointCountCallbackType">
            <summary>
                The get point count callback type
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Shape.GetPointCallbackType">
            <summary>
                The get point callback type
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Sprite">
            <summary>
                This class defines a sprite : texture, transformations,
                color, and draw on screen
            </summary>
            <remarks>
                See also the note on coordinates and undistorted rendering in SFML.Graphics.Transformable.
            </remarks>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.myTexture">
            <summary>
                The my texture
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Construct the sprite from a source texture
            </summary>
            <param name="texture">Source texture to assign to the sprite</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Texture,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Construct the sprite from a source texture
            </summary>
            <param name="texture">Source texture to assign to the sprite</param>
            <param name="rectangle">Sub-rectangle of the texture to assign to the sprite</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Sprite)">
            <summary>
                Construct the sprite from another sprite
            </summary>
            <param name="copy">Sprite to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.Color">
            <summary>
                Global color of the object
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.Texture">
            <summary>
                Source texture displayed by the sprite
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.TextureRect">
            <summary>
                Sub-rectangle of the source image displayed by the sprite
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the sprite to a render target
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.GetLocalBounds">
            <summary>
                Get the local bounding rectangle of the entity.
                The returned rectangle is in local coordinates, which means
                that it ignores the transformations (translation, rotation,
                scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                entity in the entity's coordinate system.
            </summary>
            <returns>Local bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.GetGlobalBounds">
            <summary>
                Get the global bounding rectangle of the entity.
                The returned rectangle is in global coordinates, which means
                that it takes in account the transformations (translation,
                rotation, scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                sprite in the global 2D world's coordinate system.
            </summary>
            <returns>Global bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_create">
            <summary>
                Sfs the sprite create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_copy(System.IntPtr)">
            <summary>
                Sfs the sprite copy using the specified sprite
            </summary>
            <param name="sprite">The sprite</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_destroy(System.IntPtr)">
            <summary>
                Sfs the sprite destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_setColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the sprite set color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_getColor(System.IntPtr)">
            <summary>
                Sfs the sprite get color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfRenderWindow_drawSprite(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw sprite using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="sprite">The sprite</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfRenderTexture_drawSprite(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw sprite using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="sprite">The sprite</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_setTexture(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
                Sfs the sprite set texture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="texture">The texture</param>
            <param name="adjustToNewSize">The adjust to new size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_setTextureRect(System.IntPtr,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Sfs the sprite set texture rect using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="rect">The rect</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_getTextureRect(System.IntPtr)">
            <summary>
                Sfs the sprite get texture rect using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Sprite.sfSprite_getLocalBounds(System.IntPtr)">
            <summary>
                Sfs the sprite get local bounds using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float rect</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Text">
            <summary>
                This class defines a graphical 2D text, that can be drawn on screen
            </summary>
            <remarks>
                See also the note on coordinates and undistorted rendering in SFML.Graphics.Transformable.
            </remarks>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.myFont">
            <summary>
                The my font
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.#ctor(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Font)">
            <summary>
                Construct the text from a string and a font
            </summary>
            <param name="str">String to display</param>
            <param name="font">Font to use</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.#ctor(System.String,Alis.Core.Graphic.D2.SFML.Graphics.Font,System.UInt32)">
            <summary>
                Construct the text from a string, font and size
            </summary>
            <param name="str">String to display</param>
            <param name="font">Font to use</param>
            <param name="characterSize">Base characters size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Text)">
            <summary>
                Construct the text from another text
            </summary>
            <param name="copy">Text to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.Color">
            <summary>
                Fill color of the object
            </summary>
            <remarks>
                Deprecated. Use <see cref="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.FillColor" /> instead.
                By default, the text's fill color is opaque white.
                Setting the fill color to a transparent color with an outline
                will cause the outline to be displayed in the fill area of the text.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.FillColor">
            <summary>
                Fill color of the object
            </summary>
            <remarks>
                By default, the text's fill color is opaque white.
                Setting the fill color to a transparent color with an outline
                will cause the outline to be displayed in the fill area of the text.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.OutlineColor">
            <summary>
                Outline color of the object
            </summary>
            <remarks>
                By default, the text's outline color is opaque black.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.OutlineThickness">
            <summary>
                Thickness of the object's outline
            </summary>
            <remarks>
                <para>By default, the outline thickness is 0.</para>
                <para>
                    Be aware that using a negative value for the outline
                    thickness will cause distorted rendering.
                </para>
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.DisplayedString">
            <summary>
                String which is displayed
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.Font">
            <summary>
                Font used to display the text
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.CharacterSize">
            <summary>
                Base size of characters
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.LetterSpacing">
            <summary>
                Size of the letter spacing factor
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.LineSpacing">
            <summary>
                Size of the line spacing factor
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Text.Style">
            <summary>
                Style of the text (see Styles enum)
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles">
            <summary>
                Enumerate the string drawing styles
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles.Regular">
            <summary>Regular characters, no style</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles.Bold">
            <summary>Bold characters</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles.Italic">
            <summary>Italic characters</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles.Underlined">
            <summary>Underlined characters</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles.StrikeThrough">
            <summary>Strike through characters</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the text to a render target
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.FindCharacterPos(System.UInt32)">
            <summary>
                Return the visual position of the Index-th character of the text,
                in coordinates relative to the text
                (note : translation, origin, rotation and scale are not applied)
            </summary>
            <param name="index">Index of the character</param>
            <returns>Position of the Index-th character (end of text if Index is out of range)</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.GetLocalBounds">
            <summary>
                Get the local bounding rectangle of the entity.
                The returned rectangle is in local coordinates, which means
                that it ignores the transformations (translation, rotation,
                scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                entity in the entity's coordinate system.
            </summary>
            <returns>Local bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.GetGlobalBounds">
            <summary>
                Get the global bounding rectangle of the entity.
                The returned rectangle is in global coordinates, which means
                that it takes in account the transformations (translation,
                rotation, scale, ...) that are applied to the entity.
                In other words, this function returns the bounds of the
                sprite in the global 2D world's coordinate system.
            </summary>
            <returns>Global bounding rectangle of the entity</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_create">
            <summary>
                Sfs the text create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_copy(System.IntPtr)">
            <summary>
                Sfs the text copy using the specified text
            </summary>
            <param name="text">The text</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_destroy(System.IntPtr)">
            <summary>
                Sfs the text destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the text set color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setFillColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the text set fill color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setOutlineColor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Sfs the text set outline color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="color">The color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setOutlineThickness(System.IntPtr,System.Single)">
            <summary>
                Sfs the text set outline thickness using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="thickness">The thickness</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getColor(System.IntPtr)">
            <summary>
                Sfs the text get color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getFillColor(System.IntPtr)">
            <summary>
                Sfs the text get fill color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getOutlineColor(System.IntPtr)">
            <summary>
                Sfs the text get outline color using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getOutlineThickness(System.IntPtr)">
            <summary>
                Sfs the text get outline thickness using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfRenderWindow_drawText(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw text using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="text">The text</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfRenderTexture_drawText(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw text using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="text">The text</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setUnicodeString(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the text set unicode string using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="text">The text</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setFont(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the text set font using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="font">The font</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setCharacterSize(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the text set character size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="size">The size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setLineSpacing(System.IntPtr,System.Single)">
            <summary>
                Sfs the text set line spacing using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="spacingFactor">The spacing factor</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setLetterSpacing(System.IntPtr,System.Single)">
            <summary>
                Sfs the text set letter spacing using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="spacingFactor">The spacing factor</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_setStyle(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Text.Styles)">
            <summary>
                Sfs the text set style using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="style">The style</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getString(System.IntPtr)">
            <summary>
                Sfs the text get string using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getUnicodeString(System.IntPtr)">
            <summary>
                Sfs the text get unicode string using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getCharacterSize(System.IntPtr)">
            <summary>
                Sfs the text get character size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getLetterSpacing(System.IntPtr)">
            <summary>
                Sfs the text get letter spacing using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getLineSpacing(System.IntPtr)">
            <summary>
                Sfs the text get line spacing using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getStyle(System.IntPtr)">
            <summary>
                Sfs the text get style using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The styles</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getRect(System.IntPtr)">
            <summary>
                Sfs the text get rect using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_findCharacterPos(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the text find character pos using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="index">The index</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Text.sfText_getLocalBounds(System.IntPtr)">
            <summary>
                Sfs the text get local bounds using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float rect</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Texture">
            <summary>
                Image living on the graphics card that can be used for drawing
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Texture.myExternal">
            <summary>
                The my external
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the texture
            </summary>
            <param name="width">Texture width</param>
            <param name="height">Texture height</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.String)">
            <summary>
                Construct the texture from a file
            </summary>
            <param name="filename">Path of the image file to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.String,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Construct the texture from a file
            </summary>
            <param name="filename">Path of the image file to load</param>
            <param name="area">Area of the image to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.IO.Stream)">
            <summary>
                Construct the texture from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.IO.Stream,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Construct the texture from a file in a stream
            </summary>
            <param name="stream">Stream containing the file contents</param>
            <param name="area">Area of the image to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Image)">
            <summary>
                Construct the texture from an image
            </summary>
            <param name="image">Image to load to the texture</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Image,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Construct the texture from an image
            </summary>
            <param name="image">Image to load to the texture</param>
            <param name="area">Area of the image to load</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.Byte[])">
            <summary>
                Construct the texture from a file in memory
            </summary>
            <param name="bytes">Byte array containing the file contents</param>
            <exception cref="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Construct the texture from another texture
            </summary>
            <param name="copy">Texture to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.#ctor(System.IntPtr)">
            <summary>
                Internal constructor
            </summary>
            <param name="cPointer">Pointer to the object in C library</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.NativeHandle">
            <summary>
                Get the underlying OpenGL handle of the texture.
            </summary>
            <remarks>
                You shouldn't need to use this handle, unless you have
                very specific stuff to implement that SFML doesn't support.
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Smooth">
            <summary>
                Control the smooth filter
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Srgb">
            <summary>
                Enable or disable conversion from sRGB
            </summary>
            <remarks>
                <para>
                    When providing texture data from an image file or memory, it can
                    either be stored in a linear color space or an sRGB color space.
                    Most digital images account for gamma correction already, so they
                    would need to be "uncorrected" back to linear color space before
                    being processed by the hardware. The hardware can automatically
                    convert it from the sRGB color space to a linear color space when
                    it gets sampled. When the rendered image gets output to the final
                    framebuffer, it gets converted back to sRGB.
                </para>
                <para>
                    After enabling or disabling sRGB conversion, make sure to reload
                    the texture data in order for the setting to take effect.
                </para>
                <para>
                    This option is only useful in conjunction with an sRGB capable
                    framebuffer. This can be requested during window creation.
                </para>
            </remarks>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Repeated">
            <summary>
                Control the repeat mode
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Size">
            <summary>
                Size of the texture, in pixels
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Texture.MaximumSize">
            <summary>
                Maximum texture size allowed
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.CopyToImage">
            <summary>
                Copy a texture's pixels to an image
            </summary>
            <returns>Image containing the texture's pixels</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(System.Byte[])">
            <summary>
                Update a texture from an array of pixels
            </summary>
            <param name="pixels">Array of pixels to copy to the texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Update a texture from an array of pixels
            </summary>
            <param name="pixels">Array of pixels to copy to the texture</param>
            <param name="width">Width of the pixel region contained in pixels</param>
            <param name="height">Height of the pixel region contained in pixels</param>
            <param name="x">X offset in the texture where to copy the source pixels</param>
            <param name="y">Y offset in the texture where to copy the source pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.Texture,System.UInt32,System.UInt32)">
            <summary>
                Update a part of this texture from another texture
            </summary>
            <param name="texture">Source texture to copy to destination texture</param>
            <param name="x">X offset in this texture where to copy the source texture</param>
            <param name="y">Y offset in this texture where to copy the source texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.Image)">
            <summary>
                Update a texture from an image
            </summary>
            <param name="image">Image to copy to the texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.Image,System.UInt32,System.UInt32)">
            <summary>
                Update a texture from an image
            </summary>
            <param name="image">Image to copy to the texture</param>
            <param name="x">X offset in the texture where to copy the source pixels</param>
            <param name="y">Y offset in the texture where to copy the source pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Windows.Window)">
            <summary>
                Update a texture from the contents of a window
            </summary>
            <param name="window">Window to copy to the texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Windows.Window,System.UInt32,System.UInt32)">
            <summary>
                Update a texture from the contents of a window
            </summary>
            <param name="window">Window to copy to the texture</param>
            <param name="x">X offset in the texture where to copy the source pixels</param>
            <param name="y">Y offset in the texture where to copy the source pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow)">
            <summary>
                Update a texture from the contents of a render-window
            </summary>
            <param name="window">Render-window to copy to the texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Update(Alis.Core.Graphic.D2.SFML.Graphics.RenderWindow,System.UInt32,System.UInt32)">
            <summary>
                Update a texture from the contents of a render-window
            </summary>
            <param name="window">Render-window to copy to the texture</param>
            <param name="x">X offset in the texture where to copy the source pixels</param>
            <param name="y">Y offset in the texture where to copy the source pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.GenerateMipmap">
            <summary>
                Generate a mipmap using the current texture data
            </summary>
            <remarks>
                <para>
                    Mipmaps are pre-computed chains of optimized textures. Each
                    level of texture in a mipmap is generated by halving each of
                    the previous level's dimensions. This is done until the final
                    level has the size of 1x1. The textures generated in this process may
                    make use of more advanced filters which might improve the visual quality
                    of textures when they are applied to objects much smaller than they are.
                    This is known as minification. Because fewer texels (texture elements)
                    have to be sampled from when heavily minified, usage of mipmaps
                    can also improve rendering performance in certain scenarios.
                </para>
                <para>
                    Mipmap generation relies on the necessary OpenGL extension being
                    available. If it is unavailable or generation fails due to another
                    reason, this function will return false. Mipmap data is only valid from
                    the time it is generated until the next time the base level image is
                    modified, at which point this function will have to be called again to
                    regenerate it.
                </para>
            </remarks>
            <returns>True if mipmap generation was successful, false if unsuccessful</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Swap(Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Swap the contents of this texture with those of another
            </summary>
            <param name="right">Instance to swap with</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Bind(Alis.Core.Graphic.D2.SFML.Graphics.Texture)">
            <summary>
                Bind a texture for rendering
            </summary>
            <param name="texture">Shader to bind (can be null to use no texture)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_create(System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture create using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_createFromFile(System.String,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Sfs the texture create from file using the specified filename
            </summary>
            <param name="filename">The filename</param>
            <param name="area">The area</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_createFromStream(System.IntPtr,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Sfs the texture create from stream using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <param name="area">The area</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_createFromImage(System.IntPtr,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Sfs the texture create from image using the specified image
            </summary>
            <param name="image">The image</param>
            <param name="area">The area</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_createFromMemory(System.IntPtr,System.UInt64,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Sfs the texture create from memory using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="size">The size</param>
            <param name="area">The area</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_copy(System.IntPtr)">
            <summary>
                Sfs the texture copy using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_destroy(System.IntPtr)">
            <summary>
                Sfs the texture destroy using the specified texture
            </summary>
            <param name="texture">The texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_getSize(System.IntPtr)">
            <summary>
                Sfs the texture get size using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <returns>The vector 2u</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_copyToImage(System.IntPtr)">
            <summary>
                Sfs the texture copy to image using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_updateFromPixels(System.IntPtr,System.Byte*,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture update from pixels using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="pixels">The pixels</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_updateFromTexture(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture update from texture using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="texture">The texture</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_updateFromImage(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture update from image using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="image">The image</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_updateFromWindow(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture update from window using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="window">The window</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_updateFromRenderWindow(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
                Sfs the texture update from render window using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="renderWindow">The render window</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_bind(System.IntPtr)">
            <summary>
                Sfs the texture bind using the specified texture
            </summary>
            <param name="texture">The texture</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_setSmooth(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the texture set smooth using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="smooth">The smooth</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_isSmooth(System.IntPtr)">
            <summary>
                Describes whether sf texture is smooth
            </summary>
            <param name="texture">The texture</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_setSrgb(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the texture set srgb using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="sRgb">The rgb</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_isSrgb(System.IntPtr)">
            <summary>
                Describes whether sf texture is srgb
            </summary>
            <param name="texture">The texture</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_setRepeated(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the texture set repeated using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="repeated">The repeated</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_isRepeated(System.IntPtr)">
            <summary>
                Describes whether sf texture is repeated
            </summary>
            <param name="texture">The texture</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_generateMipmap(System.IntPtr)">
            <summary>
                Describes whether sf texture generate mipmap
            </summary>
            <param name="texture">The texture</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_swap(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the texture swap using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="right">The right</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_getNativeHandle(System.IntPtr)">
            <summary>
                Sfs the texture get native handle using the specified shader
            </summary>
            <param name="shader">The shader</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_getTexCoords(System.IntPtr,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Sfs the texture get tex coords using the specified texture
            </summary>
            <param name="texture">The texture</param>
            <param name="rectangle">The rectangle</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Texture.sfTexture_getMaximumSize">
            <summary>
                Sfs the texture get maximum size
            </summary>
            <returns>The uint</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Transform">
            <summary>
                Define a 3x3 transform matrix
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct a transform from a 3x3 matrix
            </summary>
            <param name="a00">Element (0, 0) of the matrix</param>
            <param name="a01">Element (0, 1) of the matrix</param>
            <param name="a02">Element (0, 2) of the matrix</param>
            <param name="a10">Element (1, 0) of the matrix</param>
            <param name="a11">Element (1, 1) of the matrix</param>
            <param name="a12">Element (1, 2) of the matrix</param>
            <param name="a20">Element (2, 0) of the matrix</param>
            <param name="a21">Element (2, 1) of the matrix</param>
            <param name="a22">Element (2, 2) of the matrix</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.GetInverse">
            <summary>
                Return the inverse of the transform.
                If the inverse cannot be computed, an identity transform
                is returned.
            </summary>
            <returns>A new transform which is the inverse of self</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.TransformPoint(System.Single,System.Single)">
            <summary>
                Transform a 2D point.
            </summary>
            <param name="x">X coordinate of the point to transform</param>
            <param name="y">Y coordinate of the point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.TransformPoint(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Transform a 2D point.
            </summary>
            <param name="point">Point to transform</param>
            <returns>Transformed point</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.TransformRect(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Transform a rectangle.
                Since SFML doesn't provide support for oriented rectangles,
                the result of this function is always an axis-aligned
                rectangle. Which means that if the transform contains a
                rotation, the bounding rectangle of the transformed rectangle
                is returned.
            </summary>
            <param name="rectangle">Rectangle to transform</param>
            <returns>Transformed rectangle</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Combine(Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Combine the current transform with another one.
                The result is a transform that is equivalent to applying
                this followed by transform. Mathematically, it is
                equivalent to a matrix multiplication.
            </summary>
            <param name="transform">Transform to combine to this transform</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Translate(System.Single,System.Single)">
            <summary>
                Combine the current transform with a translation.
            </summary>
            <param name="x">Offset to apply on X axis</param>
            <param name="y">Offset to apply on Y axis</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Translate(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Combine the current transform with a translation.
            </summary>
            <param name="offset">Translation offset to apply</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Rotate(System.Single)">
            <summary>
                Combine the current transform with a rotation.
            </summary>
            <param name="angle">Rotation angle, in degrees</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Rotate(System.Single,System.Single,System.Single)">
            <summary>
                Combine the current transform with a rotation.
                The center of rotation is provided for convenience as a second
                argument, so that you can build rotations around arbitrary points
                more easily (and efficiently) than the usual
                Translate(-center); Rotate(angle); Translate(center).
            </summary>
            <param name="angle">Rotation angle, in degrees</param>
            <param name="centerX">X coordinate of the center of rotation</param>
            <param name="centerY">Y coordinate of the center of rotation</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Rotate(System.Single,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Combine the current transform with a rotation.
                The center of rotation is provided for convenience as a second
                argument, so that you can build rotations around arbitrary points
                more easily (and efficiently) than the usual
                Translate(-center); Rotate(angle); Translate(center).
            </summary>
            <param name="angle">Rotation angle, in degrees</param>
            <param name="center">Center of rotation</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Scale(System.Single,System.Single)">
            <summary>
                Combine the current transform with a scaling.
            </summary>
            <param name="scaleX">Scaling factor on the X axis</param>
            <param name="scaleY">Scaling factor on the Y axis</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Scale(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Combine the current transform with a scaling.
                The center of scaling is provided for convenience as a second
                argument, so that you can build scaling around arbitrary points
                more easily (and efficiently) than the usual
                Translate(-center); Scale(factors); Translate(center).
            </summary>
            <param name="scaleX">Scaling factor on X axis</param>
            <param name="scaleY">Scaling factor on Y axis</param>
            <param name="centerX">X coordinate of the center of scaling</param>
            <param name="centerY">Y coordinate of the center of scaling</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Scale(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Combine the current transform with a scaling.
            </summary>
            <param name="factors">Scaling factors</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Scale(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Combine the current transform with a scaling.
                The center of scaling is provided for convenience as a second
                argument, so that you can build scaling around arbitrary points
                more easily (and efficiently) than the usual
                Translate(-center); Scale(factors); Translate(center).
            </summary>
            <param name="factors">Scaling factors</param>
            <param name="center">Center of scaling</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Equals(System.Object)">
            <summary>
                Compare Transform and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and transform are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.GetHashCode">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Equals(Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Compare two transforms for equality
                Performs an element-wise comparison of the elements of this
                transform with the elements of the right transform.
            </summary>
            <param name="transform">Transform to check</param>
            <returns>Transforms are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.op_Multiply(Alis.Core.Graphic.D2.SFML.Graphics.Transform,Alis.Core.Graphic.D2.SFML.Graphics.Transform)">
            <summary>
                Overload of binary operator * to combine two transforms.
                This call is equivalent to calling new Transform(left).Combine(right).
            </summary>
            <param name="left">Left operand (the first transform)</param>
            <param name="right">Right operand (the second transform)</param>
            <returns>New combined transform</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.op_Multiply(Alis.Core.Graphic.D2.SFML.Graphics.Transform,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Overload of binary operator * to transform a point.
                This call is equivalent to calling left.TransformPoint(right).
            </summary>
            <param name="left">Left operand (the transform)</param>
            <param name="right">Right operand (the point to transform)</param>
            <returns>New transformed point</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transform.Identity">
            <summary>The identity transform (does nothing)</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m00">
            <summary>
                The 02
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m01">
            <summary>
                The 02
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m02">
            <summary>
                The 02
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m10">
            <summary>
                The 12
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m11">
            <summary>
                The 12
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m12">
            <summary>
                The 12
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m20">
            <summary>
                The 22
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m21">
            <summary>
                The 22
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transform.m22">
            <summary>
                The 22
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_getInverse(Alis.Core.Graphic.D2.SFML.Graphics.Transform@)">
            <summary>
                Sfs the transform get inverse using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <returns>The transform</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_transformPoint(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Sfs the transform transform point using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="point">The point</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_transformRect(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Sfs the transform transform rect using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="rectangle">The rectangle</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_combine(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,Alis.Core.Graphic.D2.SFML.Graphics.Transform@)">
            <summary>
                Sfs the transform combine using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="other">The other</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_translate(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,System.Single,System.Single)">
            <summary>
                Sfs the transform translate using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_rotate(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,System.Single)">
            <summary>
                Sfs the transform rotate using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="angle">The angle</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_rotateWithCenter(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,System.Single,System.Single,System.Single)">
            <summary>
                Sfs the transform rotate with center using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="angle">The angle</param>
            <param name="centerX">The center</param>
            <param name="centerY">The center</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_scale(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,System.Single,System.Single)">
            <summary>
                Sfs the transform scale using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="scaleX">The scale</param>
            <param name="scaleY">The scale</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_scaleWithCenter(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Sfs the transform scale with center using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="scaleX">The scale</param>
            <param name="scaleY">The scale</param>
            <param name="centerX">The center</param>
            <param name="centerY">The center</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transform.sfTransform_equal(Alis.Core.Graphic.D2.SFML.Graphics.Transform@,Alis.Core.Graphic.D2.SFML.Graphics.Transform@)">
            <summary>
                Describes whether sf transform equal
            </summary>
            <param name="left">The left</param>
            <param name="right">The right</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Transformable">
            <summary>
                Decomposed transform defined by a position, a rotation and a scale
            </summary>
            <remarks>
                A note on coordinates and undistorted rendering:
                By default, SFML (or more exactly, OpenGL) may interpolate drawable objects
                such as sprites or texts when rendering. While this allows transitions
                like slow movements or rotations to appear smoothly, it can lead to
                unwanted results in some cases, for example blurred or distorted objects.
                In order to render a SFML.Graphics.Drawable object pixel-perfectly, make sure
                the involved coordinates allow a 1:1 mapping of pixels in the window
                to texels (pixels in the texture). More specifically, this means:
                * The object's position, origin and scale have no fractional part
                * The object's and the view's rotation are a multiple of 90 degrees
                * The view's center and size have no fractional part
            </remarks>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myInverseNeedUpdate">
            <summary>
                The my inverse need update
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myInverseTransform">
            <summary>
                The my inverse transform
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myOrigin">
            <summary>
                The vector 2f
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myPosition">
            <summary>
                The vector 2f
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myRotation">
            <summary>
                The my rotation
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myScale">
            <summary>
                The vector 2f
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myTransform">
            <summary>
                The my transform
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.myTransformNeedUpdate">
            <summary>
                The my transform need update
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.Transformable)">
            <summary>
                Construct the transformable from another transformable
            </summary>
            <param name="transformable">Transformable to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.#ctor(System.IntPtr)">
            <summary>
                Construct the object from its internal C pointer
            </summary>
            <param name="cPointer">Pointer to the object in the C library</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Position">
            <summary>
                Position of the object
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Rotation">
            <summary>
                Rotation of the object
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Scale">
            <summary>
                Scale of the object
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Origin">
            <summary>
                The origin of an object defines the center point for
                all transformations (position, scale, rotation).
                The coordinates of this point must be relative to the
                top-left corner of the object, and ignore all
                transformations (position, scale, rotation).
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Transform">
            <summary>
                The combined transform of the object
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.InverseTransform">
            <summary>
                The combined transform of the object
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Transformable.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.Vertex">
            <summary>
                Define a point with color and texture coordinates
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the vertex from its position
                The vertex color is white and texture coordinates are (0, 0).
            </summary>
            <param name="position">Vertex position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Graphic.D2.SFML.Graphics.Color)">
            <summary>
                Construct the vertex from its position and color
                The texture coordinates are (0, 0).
            </summary>
            <param name="position">Vertex position</param>
            <param name="color">Vertex color</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the vertex from its position and texture coordinates
                The vertex color is white.
            </summary>
            <param name="position">Vertex position</param>
            <param name="texCoords">Vertex texture coordinates</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Graphic.D2.SFML.Graphics.Color,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the vertex from its position, color and texture coordinates
            </summary>
            <param name="position">Vertex position</param>
            <param name="color">Vertex color</param>
            <param name="texCoords">Vertex texture coordinates</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.Position">
            <summary>2D position of the vertex</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.Color">
            <summary>Color of the vertex</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.Vertex.TexCoords">
            <summary>Coordinates of the texture's pixel to map to the vertex</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray">
            <summary>
                Define a set of one or more 2D primitives
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Construct the vertex array with a type
            </summary>
            <param name="type">Type of primitives</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,System.UInt32)">
            <summary>
                Construct the vertex array with a type and an initial number of vertices
            </summary>
            <param name="type">Type of primitives</param>
            <param name="vertexCount">Initial number of vertices in the array</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.VertexArray)">
            <summary>
                Construct the vertex array from another vertex array
            </summary>
            <param name="copy">Transformable to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.VertexCount">
            <summary>
                Total vertex count
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Item(System.UInt32)">
            <summary>
                Read-write access to vertices by their index.
                This function doesn't check index, it must be in range
                [0, VertexCount - 1]. The behaviour is undefined
                otherwise.
            </summary>
            <param name="index">Index of the vertex to get</param>
            <returns>Reference to the index-th vertex</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.PrimitiveType">
            <summary>
                Type of primitives to draw
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Bounds">
            <summary>
                Compute the bounding rectangle of the vertex array.
                This function returns the axis-aligned rectangle that
                contains all the vertices of the array.
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the vertex array to a render target
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Clear">
            <summary>
                Clear the vertex array
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Resize(System.UInt32)">
            <summary>
                Resize the vertex array
                If \a vertexCount is greater than the current size, the previous
                vertices are kept and new (default-constructed) vertices are
                added.
                If \a vertexCount is less than the current size, existing vertices
                are removed from the array.
            </summary>
            <param name="vertexCount">New size of the array (number of vertices)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Append(Alis.Core.Graphic.D2.SFML.Graphics.Vertex)">
            <summary>
                Add a vertex to the array
            </summary>
            <param name="vertex">Vertex to add</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_create">
            <summary>
                Sfs the vertex array create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_copy(System.IntPtr)">
            <summary>
                Sfs the vertex array copy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_destroy(System.IntPtr)">
            <summary>
                Sfs the vertex array destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_getVertexCount(System.IntPtr)">
            <summary>
                Sfs the vertex array get vertex count using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_getVertex(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the vertex array get vertex using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="index">The index</param>
            <returns>The vertex</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_clear(System.IntPtr)">
            <summary>
                Sfs the vertex array clear using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_resize(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the vertex array resize using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexCount">The vertex count</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_append(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Vertex)">
            <summary>
                Sfs the vertex array append using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertex">The vertex</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_setPrimitiveType(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Sfs the vertex array set primitive type using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="type">The type</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_getPrimitiveType(System.IntPtr)">
            <summary>
                Sfs the vertex array get primitive type using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The primitive type</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfVertexArray_getBounds(System.IntPtr)">
            <summary>
                Sfs the vertex array get bounds using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfRenderWindow_drawVertexArray(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw vertex array using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexArray">The vertex array</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexArray.sfRenderTexture_drawVertexArray(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw vertex array using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexArray">The vertex array</param>
            <param name="states">The states</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer">
            <summary>
                The vertex buffer class
            </summary>
            <seealso cref="T:Alis.Core.Graphic.D2.SFML.ObjectBase" />
            <seealso cref="T:Alis.Core.Graphic.D2.SFML.Graphics.IDrawable" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.#ctor(System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier)">
            <summary>
                Create a new vertex buffer with a specific
                PrimitiveType and usage specifier.
                Creates the vertex buffer, allocating enough graphcis
                memory to hold \p vertexCount vertices, and sets its
                primitive type to \p type and usage to \p usage.
            </summary>
            <param name="vertexCount">Amount of vertices</param>
            <param name="primitiveType">Type of primitives</param>
            <param name="usageType">Usage specifier</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer)">
            <summary>
                Construct the vertex buffer from another vertex array
            </summary>
            <param name="copy">VertexBuffer to copy</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Available">
            <summary>
                Whether or not the system supports vertex buffers
                This function should always be called before using
                the vertex buffer features. If it returns false, then
                any attempt to use sf::VertexBuffer will fail.
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.VertexCount">
            <summary>
                Total vertex count
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.NativeHandle">
            <summary>
                OpenGL handle of the vertex buffer or 0 if not yet created
                You shouldn't need to use this property, unless you have
                very specific stuff to implement that SFML doesn't support.
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.PrimitiveType">
            <summary>
                The type of primitives drawn by the vertex buffer
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Usage">
            <summary>
                The usage specifier for the vertex buffer
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier">
            <summary>
                Usage specifiers
                If data is going to be updated once or more every frame,
                set the usage to Stream. If data is going
                to be set once and used for a long time without being
                modified, set the usage to Static.
                For everything else Dynamic should
                be a good compromise.
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier.Stream">
            <summary>
                The stream usage specifier
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier.Dynamic">
            <summary>
                The dynamic usage specifier
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier.Static">
            <summary>
                The static usage specifier
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Draw(Alis.Core.Graphic.D2.SFML.Graphics.IRenderTarget,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates)">
            <summary>
                Draw the vertex buffer to a render target
            </summary>
            <param name="target">Render target to draw to</param>
            <param name="states">Current render states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Update(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32,System.UInt32)">
            <summary>
                Update a part of the buffer from an array of vertices
                offset is specified as the number of vertices to skip
                from the beginning of the buffer.
                If offset is 0 and vertexCount is equal to the size of
                the currently created buffer, its whole contents are replaced.
                If offset is 0 and vertexCount is greater than the
                size of the currently created buffer, a new buffer is created
                containing the vertex data.
                If offset is 0 and vertexCount is less than the size of
                the currently created buffer, only the corresponding region
                is updated.
                If offset is not 0 and offset + vertexCount is greater
                than the size of the currently created buffer, the update fails.
                No additional check is performed on the size of the vertex
                array, passing invalid arguments will lead to undefined
                behavior.
            </summary>
            <param name="vertices">Array of vertices to copy to the buffer</param>
            <param name="vertexCount">Number of vertices to copy</param>
            <param name="offset">Offset in the buffer to copy to</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Update(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[])">
            <summary>
                Update a part of the buffer from an array of vertices
                assuming an offset of 0 and a vertex count the length of the passed array.
                If offset is 0 and vertexCount is equal to the size of
                the currently created buffer, its whole contents are replaced.
                If offset is 0 and vertexCount is greater than the
                size of the currently created buffer, a new buffer is created
                containing the vertex data.
                If offset is 0 and vertexCount is less than the size of
                the currently created buffer, only the corresponding region
                is updated.
                If offset is not 0 and offset + vertexCount is greater
                than the size of the currently created buffer, the update fails.
                No additional check is performed on the size of the vertex
                array, passing invalid arguments will lead to undefined
                behavior.
            </summary>
            <param name="vertices">Array of vertices to copy to the buffer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Update(Alis.Core.Graphic.D2.SFML.Graphics.Vertex[],System.UInt32)">
            <summary>
                Update a part of the buffer from an array of vertices
                assuming a vertex count the length of the passed array.
                If offset is 0 and vertexCount is equal to the size of
                the currently created buffer, its whole contents are replaced.
                If offset is 0 and vertexCount is greater than the
                size of the currently created buffer, a new buffer is created
                containing the vertex data.
                If offset is 0 and vertexCount is less than the size of
                the currently created buffer, only the corresponding region
                is updated.
                If offset is not 0 and offset + vertexCount is greater
                than the size of the currently created buffer, the update fails.
                No additional check is performed on the size of the vertex
                array, passing invalid arguments will lead to undefined
                behavior.
            </summary>
            <param name="vertices">Array of vertices to copy to the buffer</param>
            <param name="offset">Offset in the buffer to copy to</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Update(Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer)">
            <summary>
                Copy the contents of another buffer into this buffer
            </summary>
            <param name="other">Vertex buffer whose contents to copy into first vertex buffer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Swap(Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer)">
            <summary>
                Swap the contents of another buffer into this buffer
            </summary>
            <param name="other">Vertex buffer whose contents to swap with</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_create(System.UInt32,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType,Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier)">
            <summary>
                Sfs the vertex buffer create using the specified vertex count
            </summary>
            <param name="vertexCount">The vertex count</param>
            <param name="type">The type</param>
            <param name="usage">The usage</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_copy(System.IntPtr)">
            <summary>
                Sfs the vertex buffer copy using the specified copy
            </summary>
            <param name="copy">The copy</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_destroy(System.IntPtr)">
            <summary>
                Sfs the vertex buffer destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_getVertexCount(System.IntPtr)">
            <summary>
                Sfs the vertex buffer get vertex count using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_update(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.Vertex*,System.UInt32,System.UInt32)">
            <summary>
                Describes whether sf vertex buffer update
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertices">The vertices</param>
            <param name="vertexCount">The vertex count</param>
            <param name="offset">The offset</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_updateFromVertexBuffer(System.IntPtr,System.IntPtr)">
            <summary>
                Describes whether sf vertex buffer update from vertex buffer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="other">The other</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_swap(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the vertex buffer swap using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="other">The other</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_getNativeHandle(System.IntPtr)">
            <summary>
                Sfs the vertex buffer get native handle using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_setPrimitiveType(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.PrimitiveType)">
            <summary>
                Sfs the vertex buffer set primitive type using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="primitiveType">The primitive type</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_getPrimitiveType(System.IntPtr)">
            <summary>
                Sfs the vertex buffer get primitive type using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The primitive type</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_setUsage(System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.UsageSpecifier)">
            <summary>
                Sfs the vertex buffer set usage using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="usageType">The usage type</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_getUsage(System.IntPtr)">
            <summary>
                Sfs the vertex buffer get usage using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The usage specifier</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfVertexBuffer_isAvailable">
            <summary>
                Describes whether sf vertex buffer is available
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfRenderWindow_drawVertexBuffer(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render window draw vertex buffer using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexArray">The vertex array</param>
            <param name="states">The states</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.VertexBuffer.sfRenderTexture_drawVertexBuffer(System.IntPtr,System.IntPtr,Alis.Core.Graphic.D2.SFML.Graphics.RenderStates.MarshalData@)">
            <summary>
                Sfs the render texture draw vertex buffer using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="vertexBuffer">The vertex buffer</param>
            <param name="states">The states</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Graphics.View">
            <summary>
                This class defines a view (position, size, etc.) ;
                you can consider it as a 2D camera
            </summary>
            <remarks>
                See also the note on coordinates and undistorted rendering in SFML.Graphics.Transformable.
            </remarks>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Graphics.View.myExternal">
            <summary>
                The my external
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.#ctor">
            <summary>
                Create a default view (1000x1000)
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.#ctor(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Construct the view from a rectangle
            </summary>
            <param name="viewRect">Rectangle defining the position and size of the view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the view from its center and size
            </summary>
            <param name="center">Center of the view</param>
            <param name="size">Size of the view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.#ctor(Alis.Core.Graphic.D2.SFML.Graphics.View)">
            <summary>
                Construct the view from another view
            </summary>
            <param name="copy">View to copy</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.#ctor(System.IntPtr)">
            <summary>
                Internal constructor for other classes which need to manipulate raw views
            </summary>
            <param name="cPointer">Direct pointer to the view object in the C library</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.View.Center">
            <summary>
                Center of the view
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.View.Size">
            <summary>
                Half-size of the view
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.View.Rotation">
            <summary>
                Rotation of the view, in degrees
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Graphics.View.Viewport">
            <summary>
                Target viewport of the view, defined as a factor of the
                size of the target to which the view is applied
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.Reset(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Rebuild the view from a rectangle
            </summary>
            <param name="rectangle">Rectangle defining the position and size of the view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.Move(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Move the view
            </summary>
            <param name="offset">Offset to move the view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.Rotate(System.Single)">
            <summary>
                Rotate the view
            </summary>
            <param name="angle">Angle of rotation, in degrees</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.Zoom(System.Single)">
            <summary>
                Resize the view rectangle to simulate a zoom / unzoom effect
            </summary>
            <param name="factor">Zoom factor to apply, relative to the current zoom</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_create">
            <summary>
                Sfs the view create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_createFromRect(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Sfs the view create from rect using the specified rect
            </summary>
            <param name="rect">The rect</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_copy(System.IntPtr)">
            <summary>
                Sfs the view copy using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_destroy(System.IntPtr)">
            <summary>
                Sfs the view destroy using the specified view
            </summary>
            <param name="view">The view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_setCenter(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Sfs the view set center using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="center">The center</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_setSize(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Sfs the view set size using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="size">The size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_setRotation(System.IntPtr,System.Single)">
            <summary>
                Sfs the view set rotation using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="angle">The angle</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_setViewport(System.IntPtr,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Sfs the view set viewport using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="viewport">The viewport</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_reset(System.IntPtr,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Sfs the view reset using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="rectangle">The rectangle</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_getCenter(System.IntPtr)">
            <summary>
                Sfs the view get center using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_getSize(System.IntPtr)">
            <summary>
                Sfs the view get size using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The vector 2f</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_getRotation(System.IntPtr)">
            <summary>
                Sfs the view get rotation using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_getViewport(System.IntPtr)">
            <summary>
                Sfs the view get viewport using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The float rect</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_move(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Sfs the view move using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="offset">The offset</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_rotate(System.IntPtr,System.Single)">
            <summary>
                Sfs the view rotate using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="angle">The angle</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Graphics.View.sfView_zoom(System.IntPtr,System.Single)">
            <summary>
                Sfs the view zoom using the specified view
            </summary>
            <param name="view">The view</param>
            <param name="factor">The factor</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.ObjectBase">
            <summary>
                The ObjectBase class is an abstract base for every
                SFML object. It's meant for internal use only
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.ObjectBase.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alis.Core.Graphic.D2.SFML.ObjectBase"/> class
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.ObjectBase.myCPointer">
            <summary>
                The zero
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.ObjectBase.#ctor(System.IntPtr)">
            <summary>
                Construct the object from a pointer to the C library object
            </summary>
            <param name="cPointer">Internal pointer to the object in the C libraries</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.ObjectBase.CPointer">
            <summary>
                Access to the internal pointer of the object.
                For internal use only
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.ObjectBase.Dispose">
            <summary>
                Explicitly dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.ObjectBase.Finalize">
            <summary>
                Dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.ObjectBase.Dispose(System.Boolean)">
            <summary>
                Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.ObjectBase.Destroy(System.Boolean)">
            <summary>
                Destroy the object (implementation is left to each derived class)
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call?</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Time">
            <summary>
                This class represents a time value
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Time.Zero">
            <summary>
                Predefined "zero" time value
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.FromSeconds(System.Single)">
            <summary>
                Construct a time value from a number of seconds
            </summary>
            <param name="seconds">Number of seconds</param>
            <returns>Time value constructed from the amount of seconds</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.FromMilliseconds(System.Int32)">
            <summary>
                Construct a time value from a number of milliseconds
            </summary>
            <param name="milliseconds">Number of milliseconds</param>
            <returns>Time value constructed from the amount of milliseconds</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.FromMicroseconds(System.Int64)">
            <summary>
                Construct a time value from a number of microseconds
            </summary>
            <param name="microseconds">Number of microseconds</param>
            <returns>Time value constructed from the amount of microseconds</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.AsSeconds">
            <summary>
                Returns the time value as a number of seconds
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.AsMilliseconds">
            <summary>
                Returns the time value as a number of milliseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.AsMicroseconds">
            <summary>
                Returns the time value as a number of microseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Equality(Alis.Core.Graphic.D2.SFML.Time,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Compare two times and checks if they are equal
            </summary>
            <returns>Times are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Inequality(Alis.Core.Graphic.D2.SFML.Time,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Compare two times and checks if they are not equal
            </summary>
            <returns>Times are not equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.Equals(System.Object)">
            <summary>
                Compare time and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and time are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.Equals(Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Compare two times and checks if they are equal
            </summary>
            <param name="other">Time to check</param>
            <returns>times are equal</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_LessThan(Alis.Core.Graphic.D2.SFML.Time,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Overload of &lt; operator to compare two time values
            </summary>
            <returns>True if left is lesser than right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_LessThanOrEqual(Alis.Core.Graphic.D2.SFML.Time,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Overload of &lt;= operator to compare two time values
            </summary>
            <returns>True if left is lesser or equal than right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_GreaterThan(Alis.Core.Graphic.D2.SFML.Time,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Overload of &gt; operator to compare two time values
            </summary>
            <returns>True if left is greater than right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_GreaterThanOrEqual(Alis.Core.Graphic.D2.SFML.Time,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Overload of &gt;= operator to compare two time values
            </summary>
            <returns>True if left is greater or equal than right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Subtraction(Alis.Core.Graphic.D2.SFML.Time,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Overload of binary - operator to subtract two time values
            </summary>
            <returns>Difference of the two times values</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Addition(Alis.Core.Graphic.D2.SFML.Time,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Overload of binary + operator to add two time values
            </summary>
            <returns>Sum of the two times values</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Multiply(Alis.Core.Graphic.D2.SFML.Time,System.Single)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Multiply(Alis.Core.Graphic.D2.SFML.Time,System.Int64)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Multiply(System.Single,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Multiply(System.Int64,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Overload of binary * operator to scale a time value
            </summary>
            <returns>left multiplied by the right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Division(Alis.Core.Graphic.D2.SFML.Time,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Division(Alis.Core.Graphic.D2.SFML.Time,System.Single)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Division(Alis.Core.Graphic.D2.SFML.Time,System.Int64)">
            <summary>
                Overload of binary / operator to scale a time value
            </summary>
            <returns>left divided by the right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.op_Modulus(Alis.Core.Graphic.D2.SFML.Time,Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Overload of binary % operator to compute remainder of a time value
            </summary>
            <returns>left modulo of right</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Time.microseconds">
            <summary>
                The microseconds
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.sfSeconds(System.Single)">
            <summary>
                Sfs the seconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.sfMilliseconds(System.Int32)">
            <summary>
                Sfs the milliseconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.sfMicroseconds(System.Int64)">
            <summary>
                Sfs the microseconds using the specified amount
            </summary>
            <param name="amount">The amount</param>
            <returns>The time</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.sfTime_asSeconds(Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Sfs the time as seconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.sfTime_asMilliseconds(Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Sfs the time as milliseconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Time.sfTime_asMicroseconds(Alis.Core.Graphic.D2.SFML.Time)">
            <summary>
                Sfs the time as microseconds using the specified time
            </summary>
            <param name="time">The time</param>
            <returns>The long</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Axis">
            <summary>
                Axes supported by SFML joysticks
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.X">
            <summary>The X axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.Y">
            <summary>The Y axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.Z">
            <summary>The Z axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.R">
            <summary>The R axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.U">
            <summary>The U axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.V">
            <summary>The V axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.PovX">
            <summary>The X axis of the point-of-view hat</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Axis.PovY">
            <summary>TheY axis of the point-of-view hat</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Clipboard">
            <summary>
                The clipboard class
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Clipboard.Contents">
            <summary>
                The contents of the Clipboard as a UTF-32 string
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Clipboard.sfClipboard_getUnicodeString">
            <summary>
                Sfs the clipboard get unicode string
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Clipboard.sfClipboard_setUnicodeString(System.IntPtr)">
            <summary>
                Sfs the clipboard set unicode string using the specified ptr
            </summary>
            <param name="ptr">The ptr</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Context">
            <summary>
                This class defines a .NET interface to an SFML OpenGL Context
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Context.myThis">
            <summary>
                The zero
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Context.Settings">
            <summary>
                Get the settings of the context.
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Context.Global">
            <summary>
                Global helper context
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Context._ourGlobalContext">
            <summary>
                The our global context
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.Finalize">
            <summary>
                Finalizer
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.SetActive(System.Boolean)">
            <summary>
                Activate or deactivate the context
            </summary>
            <param name="active">True to activate, false to deactivate</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.sfContext_create">
            <summary>
                Sfs the context create
            </summary>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.sfContext_destroy(System.IntPtr)">
            <summary>
                Sfs the context destroy using the specified view
            </summary>
            <param name="view">The view</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.sfContext_setActive(System.IntPtr,System.Boolean)">
            <summary>
                Describes whether sf context set active
            </summary>
            <param name="view">The view</param>
            <param name="active">The active</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Context.sfContext_getSettings(System.IntPtr)">
            <summary>
                Sfs the context get settings using the specified view
            </summary>
            <param name="view">The view</param>
            <returns>The context settings</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings">
            <summary>
                Structure defining the creation settings of OpenGL contexts
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.Attribute">
            <summary>
                Enumeration of the context attribute flags
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.Attribute.Default">
            <summary>Non-debug, compatibility context (this and the core attribute are mutually exclusive)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.Attribute.Core">
            <summary>Core attribute</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.Attribute.Debug">
            <summary>Debug attribute</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the settings from depth / stencil bits
            </summary>
            <param name="depthBits">Depth buffer bits</param>
            <param name="stencilBits">Stencil buffer bits</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Construct the settings from depth / stencil bits and antialiasing level
            </summary>
            <param name="depthBits">Depth buffer bits</param>
            <param name="stencilBits">Stencil buffer bits</param>
            <param name="antialiasingLevel">Antialiasing level</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.Attribute,System.Boolean)">
            <summary>
                Construct the settings from depth / stencil bits and antialiasing level
            </summary>
            <param name="depthBits">Depth buffer bits</param>
            <param name="stencilBits">Stencil buffer bits</param>
            <param name="antialiasingLevel">Antialiasing level</param>
            <param name="majorVersion">Major number of the context version</param>
            <param name="minorVersion">Minor number of the context version</param>
            <param name="attributes">Attribute flags of the context</param>
            <param name="sRgbCapable">sRGB capability of the context</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.DepthBits">
            <summary>Depth buffer bits (0 is disabled)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.StencilBits">
            <summary>Stencil buffer bits (0 is disabled)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.AntialiasingLevel">
            <summary>Antialiasing level (0 is disabled)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.MajorVersion">
            <summary>Major number of the context version</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.MinorVersion">
            <summary>Minor number of the context version</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.AttributeFlags">
            <summary>The attribute flags to create the context with</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.ContextSettings.SRgbCapable">
            <summary>Whether the context framebuffer is sRGB capable</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Cursor">
            <summary>
                The cursor class
            </summary>
            <seealso cref="T:Alis.Core.Graphic.D2.SFML.ObjectBase" />
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.#ctor(Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType)">
            <summary>
                Create a native system cursor
                Refer to the list of cursor available on each system
                (see CursorType) to know whether a given cursor is
                expected to load successfully or is not supported by
                the operating system.
            </summary>
            <param name="type">System cursor type</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.#ctor(System.Byte[],Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Create a cursor with the provided image
                Pixels must be an array of width by height pixels
                in 32-bit RGBA format. If not, this will cause undefined behavior.
                If pixels is null or either width or height are 0,
                the current cursor is left unchanged and the function will
                return false.
                In addition to specifying the pixel data, you can also
                specify the location of the hotspot of the cursor. The
                hotspot is the pixel coordinate within the cursor image
                which will be located exactly where the mouse pointer
                position is. Any mouse actions that are performed will
                return the window/screen location of the hotspot.
                Warning: On Unix, the pixels are mapped into a monochrome
                bitmap: pixels with an alpha channel to 0 are
                transparent, black if the RGB channel are close
                to zero, and white otherwise.
            </summary>
            <param name="pixels">Array of pixels of the image</param>
            <param name="size">Width and height of the image</param>
            <param name="hotspot">(x,y) location of the hotspot</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType">
            <summary>
                Enumeration of possibly available native system cursor types
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Arrow">
            <summary>
                Arrow cursor (default)
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.ArrowWait">
            <summary>
                Busy arrow cursor
                Windows: Yes
                Mac OS:  No
                Linux:   No
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Wait">
            <summary>
                Busy cursor
                Windows: Yes
                Mac OS:  No
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Text">
            <summary>
                I-beam, cursor when hovering over a field allowing text entry
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Hand">
            <summary>
                Pointing hand cursor
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.SizeHorinzontal">
            <summary>
                Horizontal double arrow cursor
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.SizeVertical">
            <summary>
                Vertical double arrow cursor
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.SizeTopLeftBottomRight">
            <summary>
                Double arrow cursor going from top-left to bottom-right
                Windows: Yes
                Mac OS:  No
                Linux:   No
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.SizeBottomLeftTopRight">
            <summary>
                Double arrow cursor going from bottom-left to top-right
                Windows: Yes
                Mac OS:  No
                Linux:   No
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.SizeAll">
            <summary>
                Combination of SizeHorizontal and SizeVertical
                Windows: Yes
                Mac OS:  No
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Cross">
            <summary>
                Crosshair cursor
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.Help">
            <summary>
                Help cursor
                Windows: Yes
                Mac OS:  No
                Linux:   Yes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType.NotAllowed">
            <summary>
                Action not allowed cursor
                Windows: Yes
                Mac OS:  Yes
                Linux:   Yes
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.Destroy(System.Boolean)">
            <summary>
                Destroys the disposing
            </summary>
            <param name="disposing">The disposing</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.sfCursor_createFromSystem(Alis.Core.Graphic.D2.SFML.Windows.Cursor.CursorType)">
            <summary>
                Sfs the cursor create from system using the specified type
            </summary>
            <param name="type">The type</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.sfCursor_createFromPixels(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Sfs the cursor create from pixels using the specified pixels
            </summary>
            <param name="pixels">The pixels</param>
            <param name="size">The size</param>
            <param name="hotspot">The hotspot</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Cursor.sfCursor_destroy(System.IntPtr)">
            <summary>
                Sfs the cursor destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Event">
            <summary>
                Event defines a system event and its parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Type">
            <summary>Type of event (see EventType enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Size">
            <summary>Arguments for size events (Resized)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Key">
            <summary>Arguments for key events (KeyPressed, KeyReleased)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Text">
            <summary>Arguments for text events (TextEntered)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.MouseMove">
            <summary>Arguments for mouse move events (MouseMoved)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.MouseButton">
            <summary>Arguments for mouse button events (MouseButtonPressed, MouseButtonReleased)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.MouseWheel">
            <summary>Arguments for mouse wheel events (MouseWheelMoved)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.MouseWheelScroll">
            <summary>Arguments for mouse wheel scroll events (MouseWheelScrolled)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.JoystickMove">
            <summary>Arguments for joystick axis events (JoystickMoved)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.JoystickButton">
            <summary>Arguments for joystick button events (JoystickButtonPressed, JoystickButtonReleased)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.JoystickConnect">
            <summary>Arguments for joystick connect events (JoystickConnected, JoystickDisconnected)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Touch">
            <summary>Arguments for touch events (TouchBegan, TouchMoved, TouchEnded)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Event.Sensor">
            <summary>Arguments for sensor events (SensorChanged)</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.EventType">
            <summary>
                Enumeration of the different types of events
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.Closed">
            <summary>Event triggered when a window is manually closed</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.Resized">
            <summary>Event triggered when a window is resized</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.LostFocus">
            <summary>Event triggered when a window loses the focus</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.GainedFocus">
            <summary>Event triggered when a window gains the focus</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.TextEntered">
            <summary>Event triggered when a valid character is entered</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.KeyPressed">
            <summary>Event triggered when a keyboard key is pressed</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.KeyReleased">
            <summary>Event triggered when a keyboard key is released</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseWheelMoved">
            <summary>Event triggered when the mouse wheel is scrolled (deprecated)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseWheelScrolled">
            <summary>Event triggered when a mouse wheel is scrolled</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseButtonPressed">
            <summary>Event triggered when a mouse button is pressed</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseButtonReleased">
            <summary>Event triggered when a mouse button is released</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseMoved">
            <summary>Event triggered when the mouse moves within the area of a window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseEntered">
            <summary>Event triggered when the mouse enters the area of a window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.MouseLeft">
            <summary>Event triggered when the mouse leaves the area of a window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.JoystickButtonPressed">
            <summary>Event triggered when a joystick button is pressed</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.JoystickButtonReleased">
            <summary>Event triggered when a joystick button is released</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.JoystickMoved">
            <summary>Event triggered when a joystick axis moves</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.JoystickConnected">
            <summary>Event triggered when a joystick is connected</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.JoystickDisconnected">
            <summary>Event triggered when a joystick is disconnected</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.TouchBegan">
            <summary>Event triggered when a touch begins</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.TouchMoved">
            <summary>Event triggered when a touch is moved</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.TouchEnded">
            <summary>Event triggered when a touch is ended</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.EventType.SensorChanged">
            <summary>Event triggered when a sensor is changed</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Joystick">
            <summary>
                Give access to the real-time state of the joysticks
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Count">
            <summary>Maximum number of supported joysticks</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.ButtonCount">
            <summary>Maximum number of supported buttons</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.AxisCount">
            <summary>Maximum number of supported axes</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IsConnected(System.UInt32)">
            <summary>
                Check if a joystick is connected
            </summary>
            <param name="joystick">Index of the joystick to check</param>
            <returns>True if the joystick is connected, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.GetButtonCount(System.UInt32)">
            <summary>
                Return the number of buttons supported by a joystick
            </summary>
            If the joystick is not connected, this function returns 0.
            <param name="joystick">Index of the joystick</param>
            <returns>Number of buttons supported by the joystick</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.HasAxis(System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.Axis)">
            <summary>
                Check if a joystick supports a given axis
            </summary>
            If the joystick is not connected, this function returns false.
            <param name="joystick">Index of the joystick</param>
            <param name="axis">Axis to check</param>
            <returns>True if the joystick supports the axis, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IsButtonPressed(System.UInt32,System.UInt32)">
            <summary>
                Check if a joystick button is pressed
            </summary>
            If the joystick is not connected, this function returns false.
            <param name="joystick">Index of the joystick</param>
            <param name="button">Button to check</param>
            <returns>True if the button is pressed, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.GetAxisPosition(System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.Axis)">
            <summary>
                Get the current position of a joystick axis
            </summary>
            If the joystick is not connected, this function returns 0.
            <param name="joystick">Index of the joystick</param>
            <param name="axis">Axis to check</param>
            <returns>Current position of the axis, in range [-100 .. 100]</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Update">
            <summary>
                Update the states of all joysticks
            </summary>
            This function is used internally by SFML, so you normally
            don't have to call it explicitly. However, you may need to
            call it if you have no window yet (or no window at all):
            in this case the joysticks states are not updated automatically.
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.GetIdentification(System.UInt32)">
            <summary>
                Get the joystick information
            </summary>
            <param name="joystick">Index of the joystick</param>
            <returns>Structure containing joystick information</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_isConnected(System.UInt32)">
            <summary>
                Describes whether sf joystick is connected
            </summary>
            <param name="joystick">The joystick</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_getButtonCount(System.UInt32)">
            <summary>
                Sfs the joystick get button count using the specified joystick
            </summary>
            <param name="joystick">The joystick</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_hasAxis(System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.Axis)">
            <summary>
                Describes whether sf joystick has axis
            </summary>
            <param name="joystick">The joystick</param>
            <param name="axis">The axis</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_isButtonPressed(System.UInt32,System.UInt32)">
            <summary>
                Describes whether sf joystick is button pressed
            </summary>
            <param name="joystick">The joystick</param>
            <param name="button">The button</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_getAxisPosition(System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.Axis)">
            <summary>
                Sfs the joystick get axis position using the specified joystick
            </summary>
            <param name="joystick">The joystick</param>
            <param name="axis">The axis</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_update">
            <summary>
                Sfs the joystick update
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Joystick.sfJoystick_getIdentification(System.UInt32)">
            <summary>
                Sfs the joystick get identification using the specified joystick
            </summary>
            <param name="joystick">The joystick</param>
            <returns>The identification marshal data</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Identification">
            <summary>
                Identification holds a joystick's identification
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Identification.Name">
            <summary>Name of the joystick</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Identification.VendorId">
            <summary>Manufacturer identifier</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.Identification.ProductId">
            <summary>Product identifier</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IdentificationMarshalData">
            <summary>
                Internal struct used for marshaling the joystick
                identification struct from unmanaged code.
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IdentificationMarshalData.Name">
            <summary>
                The name
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IdentificationMarshalData.VendorId">
            <summary>
                The vendor id
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Joystick.IdentificationMarshalData.ProductId">
            <summary>
                The product id
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEvent">
            <summary>
                Joystick buttons event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEvent.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEvent.Button">
            <summary>Index of the button</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEventArgs">
            <summary>
                Joystick buttons event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEventArgs.Button">
            <summary>Index of the button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEventArgs.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEvent)">
            <summary>
                Construct the joystick button arguments from a joystick button event
            </summary>
            <param name="e">Joystick button event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickButtonEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEvent">
            <summary>
                Joystick connect event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEvent.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEventArgs">
            <summary>
                Joystick connection/disconnection event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEventArgs.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEvent)">
            <summary>
                Construct the joystick connect arguments from a joystick connect event
            </summary>
            <param name="e">Joystick button event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickConnectEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEvent">
            <summary>
                Joystick axis move event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEvent.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEvent.Axis">
            <summary>Joystick axis (see JoyAxis enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEvent.Position">
            <summary>Current position of the axis</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs">
            <summary>
                Joystick axis move event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs.Axis">
            <summary>Joystick axis (see JoyAxis enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs.JoystickId">
            <summary>Index of the joystick which triggered the event</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs.Position">
            <summary>Current position of the axis</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEvent)">
            <summary>
                Construct the joystick move arguments from a joystick move event
            </summary>
            <param name="e">Joystick move event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.JoystickMoveEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Key">
            <summary>
                Key codes
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Unknown">
            <summary>Unhandled key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.A">
            <summary>The A key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.B">
            <summary>The B key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.C">
            <summary>The C key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.D">
            <summary>The D key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.E">
            <summary>The E key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F">
            <summary>The F key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.G">
            <summary>The G key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.H">
            <summary>The H key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.I">
            <summary>The I key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.J">
            <summary>The J key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.K">
            <summary>The K key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.L">
            <summary>The L key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.M">
            <summary>The M key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.N">
            <summary>The N key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.O">
            <summary>The O key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.P">
            <summary>The P key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Q">
            <summary>The Q key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.R">
            <summary>The R key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.S">
            <summary>The S key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.T">
            <summary>The T key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.U">
            <summary>The U key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.V">
            <summary>The V key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.W">
            <summary>The W key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.X">
            <summary>The X key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Y">
            <summary>The Y key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Z">
            <summary>The Z key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num0">
            <summary>The 0 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num1">
            <summary>The 1 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num2">
            <summary>The 2 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num3">
            <summary>The 3 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num4">
            <summary>The 4 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num5">
            <summary>The 5 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num6">
            <summary>The 6 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num7">
            <summary>The 7 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num8">
            <summary>The 8 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Num9">
            <summary>The 9 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Escape">
            <summary>The Escape key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.LControl">
            <summary>The left Control key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.LShift">
            <summary>The left Shift key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.LAlt">
            <summary>The left Alt key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.LSystem">
            <summary>The left OS specific key: window (Windows and Linux), apple (MacOS X), ...</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.RControl">
            <summary>The right Control key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.RShift">
            <summary>The right Shift key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.RAlt">
            <summary>The right Alt key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.RSystem">
            <summary>The right OS specific key: window (Windows and Linux), apple (MacOS X), ...</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Menu">
            <summary>The Menu key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.LBracket">
            <summary>The [ key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.RBracket">
            <summary>The ] key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Semicolon">
            <summary>The ; key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Comma">
            <summary>The , key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Period">
            <summary>The . key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Quote">
            <summary>The ' key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Slash">
            <summary>The / key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Backslash">
            <summary>The \ key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Tilde">
            <summary>The ~ key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Equal">
            <summary>The = key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Hyphen">
            <summary>The - key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Space">
            <summary>The Space key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Enter">
            <summary>The Return key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Backspace">
            <summary>The Backspace key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Tab">
            <summary>The Tabulation key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.PageUp">
            <summary>The Page up key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.PageDown">
            <summary>The Page down key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.End">
            <summary>The End key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Home">
            <summary>The Home key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Insert">
            <summary>The Insert key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Delete">
            <summary>The Delete key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Add">
            <summary>The + key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Subtract">
            <summary>The - key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Multiply">
            <summary>The * key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Divide">
            <summary>The / key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Left">
            <summary>Left arrow</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Right">
            <summary>Right arrow</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Up">
            <summary>Up arrow</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Down">
            <summary>Down arrow</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad0">
            <summary>The numpad 0 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad1">
            <summary>The numpad 1 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad2">
            <summary>The numpad 2 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad3">
            <summary>The numpad 3 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad4">
            <summary>The numpad 4 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad5">
            <summary>The numpad 5 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad6">
            <summary>The numpad 6 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad7">
            <summary>The numpad 7 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad8">
            <summary>The numpad 8 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Numpad9">
            <summary>The numpad 9 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F1">
            <summary>The F1 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F2">
            <summary>The F2 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F3">
            <summary>The F3 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F4">
            <summary>The F4 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F5">
            <summary>The F5 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F6">
            <summary>The F6 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F7">
            <summary>The F7 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F8">
            <summary>The F8 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F9">
            <summary>The F9 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F10">
            <summary>The F10 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F11">
            <summary>The F11 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F12">
            <summary>The F12 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F13">
            <summary>The F13 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F14">
            <summary>The F14 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.F15">
            <summary>The F15 key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Pause">
            <summary>The Pause key</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.KeyCount">
            <summary>The total number of keyboard keys</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Dash">
            <summary>
                The dash key
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.BackSpace">
            <summary>
                The back space key
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.Return">
            <summary>
                The return key
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.BackSlash">
            <summary>
                The back slash key
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Key.SemiColon">
            <summary>
                The semi colon key
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Keyboard">
            <summary>
                Give access to the real-time state of the keyboard
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Keyboard.IsKeyPressed(Alis.Core.Graphic.D2.SFML.Windows.Key)">
            <summary>
                Check if a key is pressed
            </summary>
            <param name="key">Key to check</param>
            <returns>True if the key is pressed, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Keyboard.SetVirtualKeyboardVisible(System.Boolean)">
            <summary>
                Enable/Disable visibility of the virtual keyboard
            </summary>
            <remarks>Applicable only on Android and iOS</remarks>
            <param name="visible">Whether to make the virtual keyboard visible (true) or not (false)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Keyboard.sfKeyboard_isKeyPressed(Alis.Core.Graphic.D2.SFML.Windows.Key)">
            <summary>
                Describes whether sf keyboard is key pressed
            </summary>
            <param name="key">The key</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Keyboard.sfKeyboard_setVirtualKeyboardVisible(System.Boolean)">
            <summary>
                Sfs the keyboard set virtual keyboard visible using the specified visible
            </summary>
            <param name="visible">The visible</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent">
            <summary>
                Keyboard event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent.Code">
            <summary>Code of the key (see KeyCode enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent.Alt">
            <summary>Is the Alt modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent.Control">
            <summary>Is the Control modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent.Shift">
            <summary>Is the Shift modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEvent.System">
            <summary>Is the System modifier pressed?</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs">
            <summary>
                Keyboard event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.Alt">
            <summary>Is the Alt modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.Code">
            <summary>Code of the key (see KeyCode enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.Control">
            <summary>Is the Control modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.Shift">
            <summary>Is the Shift modifier pressed?</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.System">
            <summary>Is the System modifier pressed?</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.KeyEvent)">
            <summary>
                Construct the key arguments from a key event
            </summary>
            <param name="e">Key event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.KeyEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Mouse">
            <summary>
                Give access to the real-time state of the mouse
            </summary>
            <summary>
                The mouse class
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button">
            <summary>
                Mouse buttons
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.Left">
            <summary>The left mouse button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.Right">
            <summary>The right mouse button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.Middle">
            <summary>The middle (wheel) mouse button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.XButton1">
            <summary>The first extra mouse button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.XButton2">
            <summary>The second extra mouse button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button.ButtonCount">
            <summary>Keep last -- the total number of mouse buttons</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.IsButtonPressed(Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button)">
            <summary>
                Check if a mouse button is pressed
            </summary>
            <param name="button">Button to check</param>
            <returns>True if the button is pressed, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.GetPosition">
            <summary>
                Get the current position of the mouse
            </summary>
            This function returns the current position of the mouse
            cursor in desktop coordinates.
            <returns>Current position of the mouse</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.GetPosition(Alis.Core.Graphic.D2.SFML.Windows.Window)">
            <summary>
                Get the current position of the mouse
            </summary>
            This function returns the current position of the mouse
            cursor relative to a window.
            <param name="relativeTo">Reference window</param>
            <returns>Current position of the mouse</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.SetPosition(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Set the current position of the mouse
            </summary>
            This function sets the current position of the mouse
            cursor in desktop coordinates.
            <param name="position">New position of the mouse</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.SetPosition(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Graphic.D2.SFML.Windows.Window)">
            <summary>
                Set the current position of the mouse
            </summary>
            This function sets the current position of the mouse
            cursor relative to a window.
            <param name="position">New position of the mouse</param>
            <param name="relativeTo">Reference window</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.sfMouse_isButtonPressed(Alis.Core.Graphic.D2.SFML.Windows.Mouse.Button)">
            <summary>
                Describes whether sf mouse is button pressed
            </summary>
            <param name="button">The button</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.sfMouse_getPosition(System.IntPtr)">
            <summary>
                Sfs the mouse get position using the specified relative to
            </summary>
            <param name="relativeTo">The relative to</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Mouse.sfMouse_setPosition(Alis.Core.Aspect.Math.SFML.Vector2I,System.IntPtr)">
            <summary>
                Sfs the mouse set position using the specified position
            </summary>
            <param name="position">The position</param>
            <param name="relativeTo">The relative to</param>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Wheel">
            <summary>
                Mouse wheels
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Wheel.VerticalWheel">
            <summary>The vertical mouse wheel</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Mouse.Wheel.HorizontalWheel">
            <summary>The horizontal mouse wheel</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEvent">
            <summary>
                Mouse buttons event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEvent.Button">
            <summary>Code of the button (see MouseButton enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEvent.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEvent.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs">
            <summary>
                Mouse buttons event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs.Button">
            <summary>Code of the button (see MouseButton enum)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEvent)">
            <summary>
                Construct the mouse button arguments from a mouse button event
            </summary>
            <param name="e">Mouse button event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseButtonEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEvent">
            <summary>
                Mouse move event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEvent.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEvent.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEventArgs">
            <summary>
                Mouse move event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEventArgs.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEventArgs.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEvent)">
            <summary>
                Construct the mouse move arguments from a mouse move event
            </summary>
            <param name="e">Mouse move event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseMoveEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEvent">
            <summary>
                Mouse wheel move event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEvent.Delta">
            <summary>Scroll amount</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEvent.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEvent.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs">
            <summary>
                Mouse wheel event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs.Delta">
            <summary>Scroll amount</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEvent)">
            <summary>
                Construct the mouse wheel arguments from a mouse wheel event
            </summary>
            <param name="e">Mouse wheel event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent">
            <summary>
                Mouse wheel scroll event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent.Wheel">
            <summary>Mouse Wheel which triggered the event</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent.Delta">
            <summary>Scroll amount</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs">
            <summary>
                Mouse wheel scroll event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.Delta">
            <summary>Scroll amount</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.Wheel">
            <summary>Mouse Wheel which triggered the event</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.X">
            <summary>X coordinate of the mouse cursor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.Y">
            <summary>Y coordinate of the mouse cursor</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEvent)">
            <summary>
                Construct the mouse wheel scroll arguments from a mouse wheel scroll event
            </summary>
            <param name="e">Mouse wheel scroll event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.MouseWheelScrollEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Sensor">
            <summary>
                Give access to the real-time state of sensors
            </summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type">
            <summary>
                Sensor types
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.Accelerometer">
            <summary>Measures the raw acceleration (m/s^2)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.Gyroscope">
            <summary>Measures the raw rotation rates (degrees/s)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.Magnetometer">
            <summary>Measures the ambient magnetic field (micro-teslas)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.Gravity">
            <summary>Measures the direction and intensity of gravity, independent of device acceleration (m/s^2)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.UserAcceleration">
            <summary>Measures the direction and intensity of device acceleration, independent of the gravity (m/s^2)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.Orientation">
            <summary>Measures the absolute 3D orientation (degrees)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type.TypeCount">
            <summary>Keep last -- the total number of sensor types</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.IsAvailable(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type)">
            <summary>
                Check if a sensor is available on the underlying platform
            </summary>
            <param name="sensor">Sensor to check</param>
            <returns>True if the sensor is available, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.SetEnabled(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type,System.Boolean)">
            <summary>
                Enable or disable a sensor
            </summary>
            <param name="sensor">Sensor to check</param>
            <param name="enabled">True to enable, false to disable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.GetValue(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type)">
            <summary>
                Get the current sensor value
            </summary>
            <param name="sensor">Sensor to check</param>
            <returns>The current sensor value</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.sfSensor_isAvailable(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type)">
            <summary>
                Describes whether sf sensor is available
            </summary>
            <param name="sensor">The sensor</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.sfSensor_setEnabled(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type,System.Boolean)">
            <summary>
                Sfs the sensor set enabled using the specified sensor
            </summary>
            <param name="sensor">The sensor</param>
            <param name="enabled">The enabled</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Sensor.sfSensor_getValue(Alis.Core.Graphic.D2.SFML.Windows.Sensor.Type)">
            <summary>
                Sfs the sensor get value using the specified sensor
            </summary>
            <param name="sensor">The sensor</param>
            <returns>The vector 3f</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.SensorEvent">
            <summary>
                Sensor event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEvent.Type">
            <summary>Type of the sensor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEvent.X">
            <summary>Current value of the sensor on X axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEvent.Y">
            <summary>Current value of the sensor on Y axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEvent.Z">
            <summary>Current value of the sensor on Z axis</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs">
            <summary>
                Sensor event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.Type">
            <summary>Type of the sensor</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.X">
            <summary>Current value of the sensor on X axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.Y">
            <summary>Current value of the sensor on Y axis</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.Z">
            <summary>Current value of the sensor on Z axis</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.SensorEvent)">
            <summary>
                Construct the sensor arguments from a sensor event
            </summary>
            <param name="e">Sensor event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.SensorEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.SizeEvent">
            <summary>
                Size event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SizeEvent.Width">
            <summary>New width of the window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SizeEvent.Height">
            <summary>New height of the window</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs">
            <summary>
                Size event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs.Height">
            <summary>New height of the window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs.Width">
            <summary>New width of the window</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.SizeEvent)">
            <summary>
                Construct the size arguments from a size event
            </summary>
            <param name="e">Size event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.SizeEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Styles">
            <summary>
                Enumeration of window creation styles
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.None">
            <summary>No border / title bar (this flag and all others are mutually exclusive)</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.Titlebar">
            <summary>Title bar + fixed border</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.Resize">
            <summary>Titlebar + resizable border + maximize button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.Close">
            <summary>Titlebar + close button</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.Fullscreen">
            <summary>Fullscreen mode (this flag and all others are mutually exclusive))</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.Styles.Default">
            <summary>Default window style (titlebar + resize + close)</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.TextEvent">
            <summary>
                Text event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TextEvent.Unicode">
            <summary>UTF-32 value of the character</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.TextEventArgs">
            <summary>
                Text event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TextEventArgs.Unicode">
            <summary>UTF-16 value of the character</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.TextEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.TextEvent)">
            <summary>
                Construct the text arguments from a text event
            </summary>
            <param name="e">Text event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.TextEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Touch">
            <summary>
                Give access to the real-time state of the touches
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Touch.IsDown(System.UInt32)">
            <summary>
                Check if a touch event is currently down
            </summary>
            <param name="finger">Finger index</param>
            <returns>True if the finger is currently touching the screen, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Touch.GetPosition(System.UInt32)">
            <summary>
                This function returns the current touch position
            </summary>
            <param name="finger">Finger index</param>
            <returns>Current position of the finger</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Touch.GetPosition(System.UInt32,Alis.Core.Graphic.D2.SFML.Windows.Window)">
            <summary>
                This function returns the current touch position
                relative to the given window
            </summary>
            <param name="finger">Finger index</param>
            <param name="relativeTo">Reference window</param>
            <returns>Current position of the finger</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Touch.sfTouch_isDown(System.UInt32)">
            <summary>
                Describes whether sf touch is down
            </summary>
            <param name="finger">The finger</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Touch.sfTouch_getPosition(System.UInt32,System.IntPtr)">
            <summary>
                Sfs the touch get position using the specified finger
            </summary>
            <param name="finger">The finger</param>
            <param name="relativeTo">The relative to</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.TouchEvent">
            <summary>
                Touch event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEvent.Finger">
            <summary>Index of the finger in case of multi-touch events</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEvent.X">
            <summary>X position of the touch, relative to the left of the owner window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEvent.Y">
            <summary>Y position of the touch, relative to the top of the owner window</summary>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs">
            <summary>
                Touch event parameters
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs.Finger">
            <summary>Index of the finger in case of multi-touch events</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs.X">
            <summary>X position of the touch, relative to the left of the owner window</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs.Y">
            <summary>Y position of the touch, relative to the top of the owner window</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs.#ctor(Alis.Core.Graphic.D2.SFML.Windows.TouchEvent)">
            <summary>
                Construct the touch arguments from a touch event
            </summary>
            <param name="e">Touch event</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.TouchEventArgs.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.VideoMode">
            <summary>
                VideoMode defines a video mode (width, height, bpp, frequency)
                and provides static functions for getting modes supported
                by the display device
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the video mode with its width and height
            </summary>
            <param name="width">Video mode width</param>
            <param name="height">Video mode height</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Construct the video mode with its width, height and depth
            </summary>
            <param name="width">Video mode width</param>
            <param name="height">Video mode height</param>
            <param name="bpp">Video mode depth (bits per pixel)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.IsValid">
            <summary>
                Tell whether or not the video mode is supported
            </summary>
            <returns>True if the video mode is valid, false otherwise</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.FullscreenModes">
            <summary>
                Get the list of all the supported fullscreen video modes
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.DesktopMode">
            <summary>
                Get the current desktop video mode
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.Width">
            <summary>Video mode width, in pixels</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.Height">
            <summary>Video mode height, in pixels</summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.BitsPerPixel">
            <summary>Video mode depth, in bits per pixel</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.sfVideoMode_getDesktopMode">
            <summary>
                Sfs the video mode get desktop mode
            </summary>
            <returns>The video mode</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.sfVideoMode_getFullscreenModes(System.UInt32@)">
            <summary>
                Sfs the video mode get fullscreen modes using the specified count
            </summary>
            <param name="count">The count</param>
            <returns>The video mode</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.VideoMode.sfVideoMode_isValid(Alis.Core.Graphic.D2.SFML.Windows.VideoMode)">
            <summary>
                Describes whether sf video mode is valid
            </summary>
            <param name="mode">The mode</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SFML.Windows.Window">
            <summary>
                Window is a rendering window ; it can create a new window
                or connect to an existing one
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String)">
            <summary>
                Create the window with default style and creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles)">
            <summary>
                Create the window with default creation settings
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Create the window
            </summary>
            <param name="mode">Video mode to use</param>
            <param name="title">Title of the window</param>
            <param name="style">Window style (Resize | Close by default)</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(System.IntPtr)">
            <summary>
                Create the window from an existing control with default creation settings
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings)">
            <summary>
                Create the window from an existing control
            </summary>
            <param name="handle">Platform-specific handle of the control</param>
            <param name="settings">Creation parameters</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.#ctor(System.IntPtr,System.Int32)">
            <summary>
                Constructor for derived classes
            </summary>
            <param name="cPointer">Pointer to the internal object in the C API</param>
            <param name="dummy">Internal hack :)</param>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Window.IsOpen">
            <summary>
                Tell whether or not the window is opened (ie. has been created).
                Note that a hidden window (Show(false))
                will still return true
            </summary>
            <returns>True if the window is opened</returns>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Window.Settings">
            <summary>
                Creation settings of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Window.Position">
            <summary>
                Position of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Window.Size">
            <summary>
                Size of the rendering region of the window
            </summary>
        </member>
        <member name="P:Alis.Core.Graphic.D2.SFML.Windows.Window.SystemHandle">
            <summary>
                OS-specific handle of the window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.Close">
            <summary>
                Close (destroy) the window.
                The Window instance remains valid and you can call
                Create to recreate the window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.Display">
            <summary>
                Display the window on screen
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetTitle(System.String)">
            <summary>
                Change the title of the window
            </summary>
            <param name="title">New title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetIcon(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
                Change the window's icon
            </summary>
            <param name="width">Icon's width, in pixels</param>
            <param name="height">Icon's height, in pixels</param>
            <param name="pixels">Array of pixels, format must be RGBA 32 bits</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetVisible(System.Boolean)">
            <summary>
                Show or hide the window
            </summary>
            <param name="visible">True to show the window, false to hide it</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetMouseCursorVisible(System.Boolean)">
            <summary>
                Show or hide the mouse cursor
            </summary>
            <param name="show">True to show, false to hide</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetMouseCursorGrabbed(System.Boolean)">
            <summary>
                Grab or release the mouse cursor
            </summary>
            <param name="grabbed">True to grab, false to release</param>
            <remarks>
                If set, grabs the mouse cursor inside this window's client
                area so it may no longer be moved outside its bounds.
                Note that grabbing is only active while the window has
                focus and calling this function for fullscreen windows
                won't have any effect (fullscreen windows always grab the
                cursor).
            </remarks>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetMouseCursor(Alis.Core.Graphic.D2.SFML.Windows.Cursor)">
            <summary>
                Set the displayed cursor to a native system cursor
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetVerticalSyncEnabled(System.Boolean)">
            <summary>
                Enable / disable vertical synchronization
            </summary>
            <param name="enable">True to enable v-sync, false to deactivate</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetKeyRepeatEnabled(System.Boolean)">
            <summary>
                Enable or disable automatic key-repeat.
                Automatic key-repeat is enabled by default
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetActive">
            <summary>
                Activate the window as the current target
                for rendering
            </summary>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetActive(System.Boolean)">
            <summary>
                Activate of deactivate the window as the current target
                for rendering
            </summary>
            <param name="active">True to activate, false to deactivate (true by default)</param>
            <returns>True if operation was successful, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetFramerateLimit(System.UInt32)">
            <summary>
                Limit the framerate to a maximum fixed frequency
            </summary>
            <param name="limit">Framerate limit, in frames per seconds (use 0 to disable limit)</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.SetJoystickThreshold(System.Single)">
            <summary>
                Change the joystick threshold, ie. the value below which
                no move event will be generated
            </summary>
            <param name="threshold">New threshold, in range [0, 100]</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.WaitAndDispatchEvents">
            <summary>
                Wait for a new event and dispatch it to the corresponding
                event handler
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.DispatchEvents">
            <summary>
                Call the event handlers for each pending event
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.RequestFocus">
            <summary>
                Request the current window to be made the active
                foreground window
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.HasFocus">
            <summary>
                Check whether the window has the input focus
            </summary>
            <returns>True if the window has focus, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.PollEvent(Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Internal function to get the next event (non-blocking)
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>True if there was an event, false otherwise</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.WaitEvent(Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Internal function to get the next event (blocking)
            </summary>
            <param name="eventToFill">Variable to fill with the raw pointer to the event structure</param>
            <returns>False if any error occured</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.InternalGetMousePosition">
            <summary>
                Internal function to get the mouse position relative to the window.
                This function is protected because it is called by another class of
                another module, it is not meant to be called by users.
            </summary>
            <returns>Relative mouse position</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.InternalSetMousePosition(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Internal function to set the mouse position relative to the window.
                This function is protected because it is called by another class of
                another module, it is not meant to be called by users.
            </summary>
            <param name="position">Relative mouse position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.InternalGetTouchPosition(System.UInt32)">
            <summary>
                Internal function to get the touch position relative to the window.
                This function is protected because it is called by another class of
                another module, it is not meant to be called by users.
            </summary>
            <param name="finger">Finger index</param>
            <returns>Relative touch position</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.Destroy(System.Boolean)">
            <summary>
                Handle the destruction of the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.CallEventHandler(Alis.Core.Graphic.D2.SFML.Windows.Event)">
            <summary>
                Call the event handler for the given event
            </summary>
            <param name="e">Event to dispatch</param>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.Closed">
            <summary>Event handler for the Closed event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.Resized">
            <summary>Event handler for the Resized event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.LostFocus">
            <summary>Event handler for the LostFocus event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.GainedFocus">
            <summary>Event handler for the GainedFocus event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.TextEntered">
            <summary>Event handler for the TextEntered event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.KeyPressed">
            <summary>Event handler for the KeyPressed event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.KeyReleased">
            <summary>Event handler for the KeyReleased event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseWheelScrolled">
            <summary>Event handler for the MouseWheelScrolled event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseButtonPressed">
            <summary>Event handler for the MouseButtonPressed event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseButtonReleased">
            <summary>Event handler for the MouseButtonReleased event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseMoved">
            <summary>Event handler for the MouseMoved event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseEntered">
            <summary>Event handler for the MouseEntered event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.MouseLeft">
            <summary>Event handler for the MouseLeft event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.JoystickButtonPressed">
            <summary>Event handler for the JoystickButtonPressed event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.JoystickButtonReleased">
            <summary>Event handler for the JoystickButtonReleased event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.JoystickMoved">
            <summary>Event handler for the JoystickMoved event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.JoystickConnected">
            <summary>Event handler for the JoystickConnected event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.JoystickDisconnected">
            <summary>Event handler for the JoystickDisconnected event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.TouchBegan">
            <summary>Event handler for the TouchBegan event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.TouchMoved">
            <summary>Event handler for the TouchMoved event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.TouchEnded">
            <summary>Event handler for the TouchEnded event</summary>
        </member>
        <member name="E:Alis.Core.Graphic.D2.SFML.Windows.Window.SensorChanged">
            <summary>Event handler for the SensorChanged event</summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_create(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.String,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the window create using the specified mode
            </summary>
            <param name="mode">The mode</param>
            <param name="title">The title</param>
            <param name="style">The style</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_createUnicode(Alis.Core.Graphic.D2.SFML.Windows.VideoMode,System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Styles,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the window create unicode using the specified mode
            </summary>
            <param name="mode">The mode</param>
            <param name="title">The title</param>
            <param name="style">The style</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_createFromHandle(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.ContextSettings@)">
            <summary>
                Sfs the window create from handle using the specified handle
            </summary>
            <param name="handle">The handle</param>
            <param name="params">The params</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_destroy(System.IntPtr)">
            <summary>
                Sfs the window destroy using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_isOpen(System.IntPtr)">
            <summary>
                Describes whether sf window is open
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_close(System.IntPtr)">
            <summary>
                Sfs the window close using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_pollEvent(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Describes whether sf window poll event
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="evt">The evt</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_waitEvent(System.IntPtr,Alis.Core.Graphic.D2.SFML.Windows.Event@)">
            <summary>
                Describes whether sf window wait event
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="evt">The evt</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_display(System.IntPtr)">
            <summary>
                Sfs the window display using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_getSettings(System.IntPtr)">
            <summary>
                Sfs the window get settings using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The context settings</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_getPosition(System.IntPtr)">
            <summary>
                Sfs the window get position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setPosition(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Sfs the window set position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_getSize(System.IntPtr)">
            <summary>
                Sfs the window get size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2u</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setSize(System.IntPtr,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Sfs the window set size using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="size">The size</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setTitle(System.IntPtr,System.String)">
            <summary>
                Sfs the window set title using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="title">The title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setUnicodeTitle(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the window set unicode title using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="title">The title</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setIcon(System.IntPtr,System.UInt32,System.UInt32,System.Byte*)">
            <summary>
                Sfs the window set icon using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="pixels">The pixels</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setVisible(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the window set visible using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="visible">The visible</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setMouseCursorVisible(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the window set mouse cursor visible using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="show">The show</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setMouseCursorGrabbed(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the window set mouse cursor grabbed using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="grabbed">The grabbed</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setMouseCursor(System.IntPtr,System.IntPtr)">
            <summary>
                Sfs the window set mouse cursor using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="cursor">The cursor</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setVerticalSyncEnabled(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the window set vertical sync enabled using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="enable">The enable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setKeyRepeatEnabled(System.IntPtr,System.Boolean)">
            <summary>
                Sfs the window set key repeat enabled using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="enable">The enable</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setActive(System.IntPtr,System.Boolean)">
            <summary>
                Describes whether sf window set active
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="active">The active</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setFramerateLimit(System.IntPtr,System.UInt32)">
            <summary>
                Sfs the window set framerate limit using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="limit">The limit</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_getFrameTime(System.IntPtr)">
            <summary>
                Sfs the window get frame time using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The uint</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_setJoystickThreshold(System.IntPtr,System.Single)">
            <summary>
                Sfs the window set joystick threshold using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <param name="threshold">The threshold</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_getSystemHandle(System.IntPtr)">
            <summary>
                Sfs the window get system handle using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_requestFocus(System.IntPtr)">
            <summary>
                Sfs the window request focus using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfWindow_hasFocus(System.IntPtr)">
            <summary>
                Describes whether sf window has focus
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfMouse_getPosition(System.IntPtr)">
            <summary>
                Sfs the mouse get position using the specified c pointer
            </summary>
            <param name="cPointer">The pointer</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfMouse_setPosition(Alis.Core.Aspect.Math.SFML.Vector2I,System.IntPtr)">
            <summary>
                Sfs the mouse set position using the specified position
            </summary>
            <param name="position">The position</param>
            <param name="cPointer">The pointer</param>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SFML.Windows.Window.sfTouch_getPosition(System.UInt32,System.IntPtr)">
            <summary>
                Sfs the touch get position using the specified finger
            </summary>
            <param name="finger">The finger</param>
            <param name="relativeTo">The relative to</param>
            <returns>The vector 2i</returns>
        </member>
        <member name="T:Alis.Core.Graphic.D2.SKIA.CustomRender">
            <summary>
            The custom render class
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SKIA.CustomRender.red">
            <summary>
                The blue
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SKIA.CustomRender.green">
            <summary>
                The blue
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SKIA.CustomRender.blue">
            <summary>
                The blue
            </summary>
        </member>
        <member name="F:Alis.Core.Graphic.D2.SKIA.CustomRender._fillColor">
            <summary>
            The fill color
            </summary>
        </member>
        <member name="M:Alis.Core.Graphic.D2.SKIA.CustomRender.Update(SkiaSharp.SKCanvas)">
            <summary>
            Updates the e surface
            </summary>
            <param name="surfaceCanvas">The surface canvas</param>
        </member>
        <member name="T:Alis.Core.Graphic.D3.Sample">
            <summary>
                The frame base class
            </summary>
        </member>
        <member name="T:Alis.Core.Network.BufferPool">
            <summary>
                This buffer pool is instance thread safe
                Use GetBuffer to get a MemoryStream (with a publically accessible buffer)
                Calling Close on this MemoryStream will clear its internal buffer and return the buffer to the pool for reuse
                MemoryStreams can grow larger than the DEFAULT_BUFFER_SIZE (or whatever you passed in)
                and the underlying buffers will be returned to the pool at their larger sizes
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool._bufferPoolStack">
            <summary>
                The buffer pool stack
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool._bufferSize">
            <summary>
                The buffer size
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.BufferPool" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.BufferPool" /> class
            </summary>
            <param name="bufferSize">The buffer size</param>
        </member>
        <member name="F:Alis.Core.Network.BufferPool.DefaultBufferSize">
            <summary>
                The default buffer size
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.GetBuffer">
            <summary>
                Gets a MemoryStream built from a buffer plucked from a thread safe pool
                The pool grows automatically.
                Closing the memory stream clears the buffer and returns it to the pool
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.ReturnBuffer(System.Byte[])">
            <summary>
                Returns the buffer using the specified buffer
            </summary>
            <param name="buffer">The buffer</param>
        </member>
        <member name="T:Alis.Core.Network.BufferPool.PublicBufferMemoryStream">
            <summary>
                This memory stream is not instance thread safe (not to be confused with the BufferPool which is instance thread
                safe)
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool.PublicBufferMemoryStream._bufferPoolInternal">
            <summary>
                The buffer pool internal
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool.PublicBufferMemoryStream._buffer">
            <summary>
                The buffer
            </summary>
        </member>
        <member name="F:Alis.Core.Network.BufferPool.PublicBufferMemoryStream._ms">
            <summary>
                The ms
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.#ctor(System.Byte[],Alis.Core.Network.BufferPool)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.BufferPool.PublicBufferMemoryStream" /> class
            </summary>
            <param name="buffer">The buffer</param>
            <param name="bufferPool">The buffer pool</param>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Length">
            <summary>
                Gets the value of the length
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.CanRead">
            <summary>
                Gets the value of the can read
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.CanSeek">
            <summary>
                Gets the value of the can seek
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.CanTimeout">
            <summary>
                Gets the value of the can timeout
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.CanWrite">
            <summary>
                Gets the value of the can write
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Capacity">
            <summary>
                Gets or sets the value of the capacity
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Position">
            <summary>
                Gets or sets the value of the position
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.ReadTimeout">
            <summary>
                Gets or sets the value of the read timeout
            </summary>
        </member>
        <member name="P:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.WriteTimeout">
            <summary>
                Gets or sets the value of the write timeout
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
                Begins the read using the specified buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
            <param name="callback">The callback</param>
            <param name="state">The state</param>
            <returns>The async result</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
                Begins the write using the specified buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
            <param name="callback">The callback</param>
            <param name="state">The state</param>
            <returns>The async result</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Close">
            <summary>
                Closes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Copies the to using the specified destination
            </summary>
            <param name="destination">The destination</param>
            <param name="bufferSize">The buffer size</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.EndRead(System.IAsyncResult)">
            <summary>
                Ends the read using the specified async result
            </summary>
            <param name="asyncResult">The async result</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.EndWrite(System.IAsyncResult)">
            <summary>
                Ends the write using the specified async result
            </summary>
            <param name="asyncResult">The async result</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Flush">
            <summary>
                Flushes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>
                Flushes the cancellation token
            </summary>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.GetBuffer">
            <summary>
                Gets the buffer
            </summary>
            <returns>The byte array</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads the buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.EnlargeBufferIfRequired(System.Int32)">
            <summary>
                Enlarges the buffer if required using the specified count
            </summary>
            <param name="count">The count</param>
            <exception cref="T:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException">
                Tried to create a buffer ({requiredSize:#,##0} bytes) that was
                larger than the max allowed size ({int.MaxValue:#,##0})
            </exception>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.WriteByte(System.Byte)">
            <summary>
                Writes the byte using the specified value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes the buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Writes the buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.InitializeLifetimeService">
            <summary>
                Initializes the lifetime service
            </summary>
            <returns>The object</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Reads the buffer
            </summary>
            <param name="buffer">The buffer</param>
            <param name="offset">The offset</param>
            <param name="count">The count</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task containing the int</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.ReadByte">
            <summary>
                Reads the byte
            </summary>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
                Seeks the offset
            </summary>
            <param name="offset">The offset</param>
            <param name="loc">The loc</param>
            <returns>The long</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.SetLength(System.Int64)">
            <summary>
                Note: This will not make the MemoryStream any smaller, only larger
            </summary>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.ToArray">
            <summary>
                Returns the array
            </summary>
            <returns>The byte array</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
            <summary>
                Describes whether this instance try get buffer
            </summary>
            <param name="buffer">The buffer</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Network.BufferPool.PublicBufferMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
                Writes the to using the specified stream
            </summary>
            <param name="stream">The stream</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.EntityTooLargeException">
            <summary>
                The entity too large exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.EntityTooLargeException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.EntityTooLargeException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.EntityTooLargeException.#ctor(System.String)">
            <summary>
                Http header too large to fit in buffer
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.EntityTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.EntityTooLargeException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException">
            <summary>
                The invalid http response code exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException" /> class
            </summary>
            <param name="responseCode">The response code</param>
            <param name="responseDetails">The response details</param>
            <param name="responseHeader">The response header</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="P:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.ResponseCode">
            <summary>
                Gets or sets the value of the response code
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.ResponseHeader">
            <summary>
                Gets or sets the value of the response header
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException.ResponseDetails">
            <summary>
                Gets or sets the value of the response details
            </summary>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException">
            <summary>
                The sec web socket key missing exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.ServerListenerSocketException">
            <summary>
                The server listener socket exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.ServerListenerSocketException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.ServerListenerSocketException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.ServerListenerSocketException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.ServerListenerSocketException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.ServerListenerSocketException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.ServerListenerSocketException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException">
            <summary>
                The web socket buffer overflow exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketBufferOverflowException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException">
            <summary>
                The web socket handshake failed exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException">
            <summary>
                The web socket version not supported exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException" /> class
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner</param>
        </member>
        <member name="T:Alis.Core.Network.HttpHelper">
            <summary>
                The http helper class
            </summary>
        </member>
        <member name="F:Alis.Core.Network.HttpHelper.HttpGetHeaderRegex">
            <summary>
                The http get header regex
            </summary>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.CalculateWebSocketKey">
            <summary>
                Calculates a random WebSocket key that can be used to initiate a WebSocket handshake
            </summary>
            <returns>A random websocket key</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.ComputeSocketAcceptString(System.String)">
            <summary>
                Computes a WebSocket accept string from a given key
            </summary>
            <param name="secWebSocketKey">The web socket key to base the accept string on</param>
            <returns>A web socket accept string</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.ReadHttpHeaderAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Reads an http header as per the HTTP spec
            </summary>
            <param name="stream">The stream to read UTF8 text from</param>
            <param name="token">The cancellation token</param>
            <returns>The HTTP header</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.IsWebSocketUpgradeRequest(System.String)">
            <summary>
                Decodes the header to detect is this is a web socket upgrade response
            </summary>
            <param name="header">The HTTP header</param>
            <returns>True if this is an http WebSocket upgrade response</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.GetPathFromHeader(System.String)">
            <summary>
                Gets the path from the HTTP header
            </summary>
            <param name="httpHeader">The HTTP header to read</param>
            <returns>The path</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.GetSubProtocols(System.String)">
            <summary>
                Gets the sub protocols using the specified http header
            </summary>
            <param name="httpHeader">The http header</param>
            <exception cref="T:Alis.Core.Network.Exceptions.EntityTooLargeException">Sec-WebSocket-Protocol exceeded the maximum of length of {MAX_LEN}</exception>
            <returns>A list of string</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.ReadHttpResponseCode(System.String)">
            <summary>
                Reads the HTTP response code from the http response string
            </summary>
            <param name="response">The response string</param>
            <returns>the response code</returns>
        </member>
        <member name="M:Alis.Core.Network.HttpHelper.WriteHttpHeaderAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Writes an HTTP response string to the stream
            </summary>
            <param name="response">The response (without the new line characters)</param>
            <param name="stream">The stream to write to</param>
            <param name="token">The cancellation token</param>
        </member>
        <member name="T:Alis.Core.Network.IBufferPool">
            <summary>
                The buffer pool interface
            </summary>
        </member>
        <member name="M:Alis.Core.Network.IBufferPool.GetBuffer">
            <summary>
                Gets a MemoryStream built from a buffer plucked from a thread safe pool
                The pool grows automatically.
                Closing the memory stream clears the buffer and returns it to the pool
            </summary>
        </member>
        <member name="T:Alis.Core.Network.Internal.BinaryReaderWriter">
            <summary>
                The binary reader writer class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.ReadExactly(System.Int32,System.IO.Stream,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Reads the exactly using the specified length
            </summary>
            <param name="length">The length</param>
            <param name="stream">The stream</param>
            <param name="buffer">The buffer</param>
            <param name="cancellationToken">The cancellation token</param>
            <exception cref="T:System.IO.EndOfStreamException"></exception>
            <exception cref="T:System.IO.InternalBufferOverflowException">
                Unable to read {length} bytes into buffer (offset: {buffer.Offset}
                size: {buffer.Count}). Use a larger read buffer
            </exception>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.ReadUShortExactly(System.IO.Stream,System.Boolean,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Reads the u short exactly using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
            <param name="buffer">The buffer</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task containing the ushort</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.ReadULongExactly(System.IO.Stream,System.Boolean,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Reads the u long exactly using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
            <param name="buffer">The buffer</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task containing the ulong</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.ReadLongExactly(System.IO.Stream,System.Boolean,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Reads the long exactly using the specified stream
            </summary>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
            <param name="buffer">The buffer</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>A task containing the long</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.WriteInt(System.Int32,System.IO.Stream,System.Boolean)">
            <summary>
                Writes the int using the specified value
            </summary>
            <param name="value">The value</param>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.WriteULong(System.UInt64,System.IO.Stream,System.Boolean)">
            <summary>
                Writes the u long using the specified value
            </summary>
            <param name="value">The value</param>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.WriteLong(System.Int64,System.IO.Stream,System.Boolean)">
            <summary>
                Writes the long using the specified value
            </summary>
            <param name="value">The value</param>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.BinaryReaderWriter.WriteUShort(System.UInt16,System.IO.Stream,System.Boolean)">
            <summary>
                Writes the u short using the specified value
            </summary>
            <param name="value">The value</param>
            <param name="stream">The stream</param>
            <param name="isLittleEndian">The is little endian</param>
        </member>
        <member name="T:Alis.Core.Network.Internal.Events">
            <summary>
                Use the Guid to locate this EventSource in PerfView using the Additional Providers box (without wildcard
                characters)
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.Events.Log">
            <summary>
                The events
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ClientConnectingToIpAddress(System.Guid,System.String,System.Int32)">
            <summary>
                Clients the connecting to ip address using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="ipAddress">The ip address</param>
            <param name="port">The port</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ClientConnectingToHost(System.Guid,System.String,System.Int32)">
            <summary>
                Clients the connecting to host using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="host">The host</param>
            <param name="port">The port</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.AttemtingToSecureSslConnection(System.Guid)">
            <summary>
                Attemtings the to secure ssl connection using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ConnectionSecured(System.Guid)">
            <summary>
                Connections the secured using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ConnectionNotSecure(System.Guid)">
            <summary>
                Connections the not secure using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.SslCertificateError(System.Net.Security.SslPolicyErrors)">
            <summary>
                Ssls the certificate error using the specified ssl policy errors
            </summary>
            <param name="sslPolicyErrors">The ssl policy errors</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.HandshakeSent(System.Guid,System.String)">
            <summary>
                Handshakes the sent using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="httpHeader">The http header</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ReadingHttpResponse(System.Guid)">
            <summary>
                Readings the http response using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ReadHttpResponseError(System.Guid,System.String)">
            <summary>
                Reads the http response error using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.InvalidHttpResponseCode(System.Guid,System.String)">
            <summary>
                Invalids the http response code using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="response">The response</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.HandshakeFailure(System.Guid,System.String)">
            <summary>
                Handshakes the failure using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ClientHandshakeSuccess(System.Guid)">
            <summary>
                Clients the handshake success using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ServerHandshakeSuccess(System.Guid)">
            <summary>
                Servers the handshake success using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.AcceptWebSocketStarted(System.Guid)">
            <summary>
                Accepts the web socket started using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.SendingHandshakeResponse(System.Guid,System.String)">
            <summary>
                Sendings the handshake response using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="response">The response</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.WebSocketVersionNotSupported(System.Guid,System.String)">
            <summary>
                Webs the socket version not supported using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.BadRequest(System.Guid,System.String)">
            <summary>
                Bads the request using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.UsePerMessageDeflate(System.Guid)">
            <summary>
                Uses the per message deflate using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.NoMessageCompression(System.Guid)">
            <summary>
                Noes the message compression using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.KeepAliveIntervalZero(System.Guid)">
            <summary>
                Keeps the alive interval zero using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.PingPongManagerStarted(System.Guid,System.Int32)">
            <summary>
                Pings the pong manager started using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="keepAliveIntervalSeconds">The keep alive interval seconds</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.PingPongManagerEnded(System.Guid)">
            <summary>
                Pings the pong manager ended using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.KeepAliveIntervalExpired(System.Guid,System.Int32)">
            <summary>
                Keeps the alive interval expired using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="keepAliveIntervalSeconds">The keep alive interval seconds</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseOutputAutoTimeout(System.Guid,System.Net.WebSockets.WebSocketCloseStatus,System.String,System.String)">
            <summary>
                Closes the output auto timeout using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseOutputAutoTimeoutCancelled(System.Guid,System.Int32,System.Net.WebSockets.WebSocketCloseStatus,System.String,System.String)">
            <summary>
                Closes the output auto timeout cancelled using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="timeoutSeconds">The timeout seconds</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseOutputAutoTimeoutError(System.Guid,System.String,System.Net.WebSockets.WebSocketCloseStatus,System.String,System.String)">
            <summary>
                Closes the output auto timeout error using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="closeException">The close exception</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.TryGetBufferNotSupported(System.Guid,System.String)">
            <summary>
                Tries the get buffer not supported using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="streamType">The stream type</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.SendingFrame(System.Guid,Alis.Core.Network.Internal.WebSocketOpCode,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Sendings the frame using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketOpCode">The web socket op code</param>
            <param name="isFinBitSet">The is fin bit set</param>
            <param name="numBytes">The num bytes</param>
            <param name="isPayloadCompressed">The is payload compressed</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.ReceivedFrame(System.Guid,Alis.Core.Network.Internal.WebSocketOpCode,System.Boolean,System.Int32)">
            <summary>
                Receiveds the frame using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketOpCode">The web socket op code</param>
            <param name="isFinBitSet">The is fin bit set</param>
            <param name="numBytes">The num bytes</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseOutputNoHandshake(System.Guid,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <summary>
                Closes the output no handshake using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseHandshakeStarted(System.Guid,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <summary>
                Closes the handshake started using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseHandshakeRespond(System.Guid,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <summary>
                Closes the handshake respond using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseHandshakeComplete(System.Guid)">
            <summary>
                Closes the handshake complete using the specified guid
            </summary>
            <param name="guid">The guid</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.CloseFrameReceivedInUnexpectedState(System.Guid,System.Net.WebSockets.WebSocketState,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <summary>
                Closes the frame received in unexpected state using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">The status description</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.WebSocketDispose(System.Guid,System.Net.WebSockets.WebSocketState)">
            <summary>
                Webs the socket dispose using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.WebSocketDisposeCloseTimeout(System.Guid,System.Net.WebSockets.WebSocketState)">
            <summary>
                Webs the socket dispose close timeout using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.WebSocketDisposeError(System.Guid,System.Net.WebSockets.WebSocketState,System.String)">
            <summary>
                Webs the socket dispose error using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.InvalidStateBeforeClose(System.Guid,System.Net.WebSockets.WebSocketState)">
            <summary>
                Invalids the state before close using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.Events.InvalidStateBeforeCloseOutput(System.Guid,System.Net.WebSockets.WebSocketState)">
            <summary>
                Invalids the state before close output using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="webSocketState">The web socket state</param>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketFrame">
            <summary>
                The web socket frame class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrame.#ctor(System.Boolean,Alis.Core.Network.Internal.WebSocketOpCode,System.Int32,System.ArraySegment{System.Byte})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Internal.WebSocketFrame" /> class
            </summary>
            <param name="isFinBitSet">The is fin bit set</param>
            <param name="webSocketOpCode">The web socket op code</param>
            <param name="count">The count</param>
            <param name="maskKey">The mask key</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrame.#ctor(System.Boolean,Alis.Core.Network.Internal.WebSocketOpCode,System.Int32,System.Net.WebSockets.WebSocketCloseStatus,System.String,System.ArraySegment{System.Byte})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Internal.WebSocketFrame" /> class
            </summary>
            <param name="isFinBitSet">The is fin bit set</param>
            <param name="webSocketOpCode">The web socket op code</param>
            <param name="count">The count</param>
            <param name="closeStatus">The close status</param>
            <param name="closeStatusDescription">The close status description</param>
            <param name="maskKey">The mask key</param>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.IsFinBitSet">
            <summary>
                Gets the value of the is fin bit set
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.OpCode">
            <summary>
                Gets the value of the op code
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.Count">
            <summary>
                Gets the value of the count
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.CloseStatus">
            <summary>
                Gets the value of the close status
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.CloseStatusDescription">
            <summary>
                Gets the value of the close status description
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketFrame.MaskKey">
            <summary>
                Gets the value of the mask key
            </summary>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketFrameCommon">
            <summary>
                The web socket frame common class
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketFrameCommon.MaskKeyLength">
            <summary>
                The mask key length
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameCommon.ToggleMask(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
                Mutate payload with the mask key
                This is a reversible process
                If you apply this to masked data it will be unmasked and visa versa
            </summary>
            <param name="maskKey">The 4 byte mask key</param>
            <param name="payload">The payload to mutate</param>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketFrameReader">
            <summary>
                Reads a WebSocket frame
                see http://tools.ietf.org/html/rfc6455 for specification
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameReader.CalculateNumBytesToRead(System.Int32,System.Int32)">
            <summary>
                Calculates the num bytes to read using the specified num bytes letf to read
            </summary>
            <param name="numBytesLetfToRead">The num bytes letf to read</param>
            <param name="bufferSize">The buffer size</param>
            <returns>The num bytes letf to read</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameReader.ReadFromCursorAsync(System.IO.Stream,System.ArraySegment{System.Byte},Alis.Core.Network.Internal.WebSocketReadCursor,System.Threading.CancellationToken)">
            <summary>
                The last read could not be completed because the read buffer was too small.
                We need to continue reading bytes off the stream.
                Not to be confused with a continuation frame
            </summary>
            <param name="fromStream">The stream to read from</param>
            <param name="intoBuffer">The buffer to read into</param>
            <param name="readCursor">The previous partial websocket frame read plus cursor information</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>A websocket frame</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameReader.ReadAsync(System.IO.Stream,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Read a WebSocket frame from the stream
            </summary>
            <param name="fromStream">The stream to read from</param>
            <param name="intoBuffer">The buffer to read into</param>
            <param name="cancellationToken">the cancellation token</param>
            <returns>A websocket frame</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameReader.DecodeCloseFrame(System.Boolean,Alis.Core.Network.Internal.WebSocketOpCode,System.Int32,System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
                Extracts close status and close description information from the web socket frame
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameReader.ReadLength(System.Byte,System.ArraySegment{System.Byte},System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Reads the length of the payload according to the contents of byte2
            </summary>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketFrameWriter">
            <summary>
                The web socket frame writer class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameWriter.#cctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Internal.WebSocketFrameWriter" /> class
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketFrameWriter.Random">
            <summary>
                This is used for data masking so that web proxies don't cache the data
                Therefore, there are no cryptographic concerns
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketFrameWriter.Write(Alis.Core.Network.Internal.WebSocketOpCode,System.ArraySegment{System.Byte},System.IO.MemoryStream,System.Boolean,System.Boolean)">
            <summary>
                No async await stuff here because we are dealing with a memory stream
            </summary>
            <param name="opCode">The web socket opcode</param>
            <param name="fromPayload">Array segment to get payload data from</param>
            <param name="toStream">Stream to write to</param>
            <param name="isLastFrame">True is this is the last frame in this message (usually true)</param>
            <param name="isClient"></param>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketImplementation">
            <summary>
                Main implementation of the WebSocket abstract class
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._guid">
            <summary>
                The guid
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._includeExceptionInCloseResponse">
            <summary>
                The include exception in close response
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._internalReadCts">
            <summary>
                The internal read cts
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._isClient">
            <summary>
                The is client
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._pingPongManager">
            <summary>
                The ping pong manager
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._recycledStreamFactory">
            <summary>
                The recycled stream factory
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._semaphore">
            <summary>
                The semaphore slim
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._stream">
            <summary>
                The stream
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._usePerMessageDeflate">
            <summary>
                The use per message deflate
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._closeStatus">
            <summary>
                The close status
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._closeStatusDescription">
            <summary>
                The close status description
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._continuationFrameMessageType">
            <summary>
                The binary
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._isContinuationFrame">
            <summary>
                The is continuation frame
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._readCursor">
            <summary>
                The read cursor
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._state">
            <summary>
                The state
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation._tryGetBufferFailureLogged">
            <summary>
                The try get buffer failure logged
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.#ctor(System.Guid,System.Func{System.IO.MemoryStream},System.IO.Stream,System.TimeSpan,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Internal.WebSocketImplementation" /> class
            </summary>
            <param name="guid">The guid</param>
            <param name="recycledStreamFactory">The recycled stream factory</param>
            <param name="stream">The stream</param>
            <param name="keepAliveInterval">The keep alive interval</param>
            <param name="secWebSocketExtensions">The sec web socket extensions</param>
            <param name="includeExceptionInCloseResponse">The include exception in close response</param>
            <param name="isClient">The is client</param>
            <param name="subProtocol">The sub protocol</param>
            <exception cref="T:System.InvalidOperationException">KeepAliveInterval must be Zero or positive</exception>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketImplementation.CloseStatus">
            <summary>
                Gets the value of the close status
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketImplementation.CloseStatusDescription">
            <summary>
                Gets the value of the close status description
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketImplementation.State">
            <summary>
                Gets the value of the state
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketImplementation.SubProtocol">
            <summary>
                Gets the value of the sub protocol
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketImplementation.KeepAliveInterval">
            <summary>
                Gets the value of the keep alive interval
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketImplementation.MaxPingPongPayloadLen">
            <summary>
                The max ping pong payload len
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Receive web socket result
            </summary>
            <param name="buffer">The buffer to copy data into</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The web socket result details</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Send data to the web socket
            </summary>
            <param name="buffer">the buffer containing data to send</param>
            <param name="messageType">The message type. Can be Text or Binary</param>
            <param name="endOfMessage">
                True if this message is a standalone message (this is the norm)
                If it is a multi-part message then false (and true for the last message)
            </param>
            <param name="cancellationToken">the cancellation token</param>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.SendPingAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Call this automatically from server side each keepAliveInterval period
                NOTE: ping payload must be 125 bytes or less
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.Abort">
            <summary>
                Aborts the WebSocket without sending a Close frame
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
                Polite close (use the close handshake)
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
                Fire and forget close
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.Dispose">
            <summary>
                Dispose will send a close frame if the connection is still open
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.OnPong(Alis.Core.Network.PongEventArgs)">
            <summary>
                Called when a Pong frame is received
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.BuildClosePayload(System.Net.WebSockets.WebSocketCloseStatus,System.String)">
            <summary>
                As per the spec, write the close status followed by the close reason
            </summary>
            <param name="closeStatus">The close status</param>
            <param name="statusDescription">Optional extra close details</param>
            <returns>The payload to sent in the close frame</returns>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.SendPongAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            NOTE: pong payload must be 125 bytes or less
            Pong should contain the same payload as the ping
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.RespondToCloseFrame(Alis.Core.Network.Internal.WebSocketFrame,System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Called when a Close frame is received
                Send a response close frame if applicable
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.GetBuffer(System.IO.MemoryStream)">
            <summary>
                Note that the way in which the stream buffer is accessed can lead to significant performance problems
                You want to avoid a call to stream.ToArray to avoid extra memory allocation
                MemoryStream can be configured to have its internal buffer accessible.
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.WriteStreamToNetwork(System.IO.MemoryStream,System.Threading.CancellationToken)">
            <summary>
                Puts data on the wire
            </summary>
            <param name="stream">The stream to read data from</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.GetOppCode(System.Net.WebSockets.WebSocketMessageType)">
            <summary>
                Turns a spec websocket frame opcode into a WebSocketMessageType
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketImplementation.CloseOutputAutoTimeoutAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Exception)">
            <summary>
                Automatic WebSocket close in response to some invalid data from the remote websocket host
            </summary>
            <param name="closeStatus">The close status to use</param>
            <param name="statusDescription">A description of why we are closing</param>
            <param name="ex">The exception (for logging)</param>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketOpCode">
            <summary>
                The web socket op code enum
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.ContinuationFrame">
            <summary>
                The continuation frame web socket op code
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.TextFrame">
            <summary>
                The text frame web socket op code
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.BinaryFrame">
            <summary>
                The binary frame web socket op code
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.ConnectionClose">
            <summary>
                The connection close web socket op code
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.Ping">
            <summary>
                The ping web socket op code
            </summary>
        </member>
        <member name="F:Alis.Core.Network.Internal.WebSocketOpCode.Pong">
            <summary>
                The pong web socket op code
            </summary>
        </member>
        <member name="T:Alis.Core.Network.Internal.WebSocketReadCursor">
            <summary>
                The web socket read cursor class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.Internal.WebSocketReadCursor.#ctor(Alis.Core.Network.Internal.WebSocketFrame,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.Internal.WebSocketReadCursor" /> class
            </summary>
            <param name="frame">The frame</param>
            <param name="numBytesRead">The num bytes read</param>
            <param name="numBytesLeftToRead">The num bytes left to read</param>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketReadCursor.WebSocketFrame">
            <summary>
                Gets the value of the web socket frame
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketReadCursor.NumBytesRead">
            <summary>
                Gets the value of the num bytes read
            </summary>
        </member>
        <member name="P:Alis.Core.Network.Internal.WebSocketReadCursor.NumBytesLeftToRead">
            <summary>
                Gets the value of the num bytes left to read
            </summary>
        </member>
        <member name="T:Alis.Core.Network.IPingPongManager">
            <summary>
                Ping Pong Manager used to facilitate ping pong WebSocket messages
            </summary>
        </member>
        <member name="E:Alis.Core.Network.IPingPongManager.Pong">
            <summary>
                Raised when a Pong frame is received
            </summary>
        </member>
        <member name="M:Alis.Core.Network.IPingPongManager.SendPing(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Sends a ping frame
            </summary>
            <param name="payload">The payload (must be 125 bytes of less)</param>
            <param name="cancellation">The cancellation token</param>
        </member>
        <member name="T:Alis.Core.Network.IWebSocketClientFactory">
            <summary>
                Web socket client factory used to open web socket client connections
            </summary>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketClientFactory.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
                Connect with default options
            </summary>
            <param name="uri">The WebSocket uri to connect to (e.g. ws://example.com or wss://example.com for SSL)</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket instance</returns>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketClientFactory.ConnectAsync(System.Uri,Alis.Core.Network.WebSocketClientOptions,System.Threading.CancellationToken)">
            <summary>
                Connect with options specified
            </summary>
            <param name="uri">The WebSocket uri to connect to (e.g. ws://example.com or wss://example.com for SSL)</param>
            <param name="options">The WebSocket client options</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket instance</returns>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketClientFactory.ConnectAsync(System.IO.Stream,System.String,Alis.Core.Network.WebSocketClientOptions,System.Threading.CancellationToken)">
            <summary>
                Connect with a stream that has already been opened and HTTP websocket upgrade request sent
                This function will check the handshake response from the server and proceed if successful
                Use this function if you have specific requirements to open a conenction like using special http headers and
                cookies
                You will have to build your own HTTP websocket upgrade request
                You may not even choose to use TCP/IP and this function will allow you to do that
            </summary>
            <param name="responseStream">The full duplex response stream from the server</param>
            <param name="secWebSocketKey">The secWebSocketKey you used in the handshake request</param>
            <param name="options">The WebSocket client options</param>
            <param name="token">The optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Network.IWebSocketServerFactory">
            <summary>
                Web socket server factory used to open web socket server connections
            </summary>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketServerFactory.ReadHttpHeaderFromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Reads a http header information from a stream and decodes the parts relating to the WebSocket protocot upgrade
            </summary>
            <param name="stream">The network stream</param>
            <param name="token">The optional cancellation token</param>
            <returns>Http data read from the stream</returns>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketServerFactory.AcceptWebSocketAsync(Alis.Core.Network.WebSocketHttpContext,System.Threading.CancellationToken)">
            <summary>
                Accept web socket with default options
                Call ReadHttpHeaderFromStreamAsync first to get WebSocketHttpContext
            </summary>
            <param name="context">The http context used to initiate this web socket request</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket</returns>
        </member>
        <member name="M:Alis.Core.Network.IWebSocketServerFactory.AcceptWebSocketAsync(Alis.Core.Network.WebSocketHttpContext,Alis.Core.Network.WebSocketServerOptions,System.Threading.CancellationToken)">
            <summary>
                Accept web socket with options specified
                Call ReadHttpHeaderFromStreamAsync first to get WebSocketHttpContext
            </summary>
            <param name="context">The http context used to initiate this web socket request</param>
            <param name="options">The web socket options</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket</returns>
        </member>
        <member name="T:Alis.Core.Network.PingPongManager">
            <summary>
                Ping Pong Manager used to facilitate ping pong WebSocket messages
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._cancellationToken">
            <summary>
                The cancellation token
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._guid">
            <summary>
                The guid
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._keepAliveInterval">
            <summary>
                The keep alive interval
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._pingTask">
            <summary>
                The ping task
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._stopwatch">
            <summary>
                The stopwatch
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._webSocket">
            <summary>
                The web socket
            </summary>
        </member>
        <member name="F:Alis.Core.Network.PingPongManager._pingSentTicks">
            <summary>
                The ping sent ticks
            </summary>
        </member>
        <member name="M:Alis.Core.Network.PingPongManager.#ctor(System.Guid,System.Net.WebSockets.WebSocket,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Initialises a new instance of the PingPongManager to facilitate ping pong WebSocket messages.
                If you are manually creating an instance of this class then it is advisable to set keepAliveInterval to
                TimeSpan.Zero when you create the WebSocket instance (using a factory) otherwise you may be automatically
                be sending duplicate Ping messages (see keepAliveInterval below)
            </summary>
            <param name="guid"></param>
            <param name="webSocket">The web socket used to listen to ping messages and send pong messages</param>
            <param name="keepAliveInterval">
                The time between automatically sending ping messages.
                Set this to TimeSpan.Zero if you with to manually control sending ping messages.
            </param>
            <param name="cancellationToken">
                The token used to cancel a pending ping send AND the automatic sending of ping messages
                if keepAliveInterval is positive
            </param>
        </member>
        <member name="E:Alis.Core.Network.PingPongManager.Pong">
            <summary>
                Raised when a Pong frame is received
            </summary>
        </member>
        <member name="M:Alis.Core.Network.PingPongManager.SendPing(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
            <summary>
                Sends a ping frame
            </summary>
            <param name="payload">The payload (must be 125 bytes of less)</param>
            <param name="cancellation">The cancellation token</param>
        </member>
        <member name="M:Alis.Core.Network.PingPongManager.OnPong(Alis.Core.Network.PongEventArgs)">
            <summary>
                Ons the pong using the specified e
            </summary>
            <param name="e">The </param>
        </member>
        <member name="M:Alis.Core.Network.PingPongManager.PingForever">
            <summary>
                Pings the forever
            </summary>
        </member>
        <member name="M:Alis.Core.Network.PingPongManager.WebSocketImpl_Pong(System.Object,Alis.Core.Network.PongEventArgs)">
            <summary>
                Webs the socket impl pong using the specified sender
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The </param>
        </member>
        <member name="T:Alis.Core.Network.PongEventArgs">
            <summary>
                Pong EventArgs
            </summary>
        </member>
        <member name="M:Alis.Core.Network.PongEventArgs.#ctor(System.ArraySegment{System.Byte})">
            <summary>
                Initialises a new instance of the PongEventArgs class
            </summary>
            <param name="payload">The pong payload must be 125 bytes or less (can be zero bytes)</param>
        </member>
        <member name="P:Alis.Core.Network.PongEventArgs.Payload">
            <summary>
                The data extracted from a Pong WebSocket frame
            </summary>
        </member>
        <member name="T:Alis.Core.Network.WebSocketClientFactory">
            <summary>
                Web socket client factory used to open web socket client connections
            </summary>
        </member>
        <member name="F:Alis.Core.Network.WebSocketClientFactory._bufferFactory">
            <summary>
                The buffer factory
            </summary>
        </member>
        <member name="F:Alis.Core.Network.WebSocketClientFactory._bufferPool">
            <summary>
                The buffer pool
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.#ctor">
            <summary>
                Initialises a new instance of the WebSocketClientFactory class without caring about internal buffers
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.#ctor(System.Func{System.IO.MemoryStream})">
            <summary>
                Initialises a new instance of the WebSocketClientFactory class with control over internal buffer creation
            </summary>
            <param name="bufferFactory">
                Used to get a memory stream. Feel free to implement your own buffer pool. MemoryStreams
                will be disposed when no longer needed and can be returned to the pool.
            </param>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
                Connect with default options
            </summary>
            <param name="uri">The WebSocket uri to connect to (e.g. ws://example.com or wss://example.com for SSL)</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket instance</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ConnectAsync(System.Uri,Alis.Core.Network.WebSocketClientOptions,System.Threading.CancellationToken)">
            <summary>
                Connect with options specified
            </summary>
            <param name="uri">The WebSocket uri to connect to (e.g. ws://example.com or wss://example.com for SSL)</param>
            <param name="options">The WebSocket client options</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket instance</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ConnectAsync(System.IO.Stream,System.String,Alis.Core.Network.WebSocketClientOptions,System.Threading.CancellationToken)">
            <summary>
                Connect with a stream that has already been opened and HTTP websocket upgrade request sent
                This function will check the handshake response from the server and proceed if successful
                Use this function if you have specific requirements to open a conenction like using special http headers and
                cookies
                You will have to build your own HTTP websocket upgrade request
                You may not even choose to use TCP/IP and this function will allow you to do that
            </summary>
            <param name="responseStream">The full duplex response stream from the server</param>
            <param name="secWebSocketKey">The secWebSocketKey you used in the handshake request</param>
            <param name="options">The WebSocket client options</param>
            <param name="token">The optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ConnectAsync(System.Guid,System.IO.Stream,System.String,System.TimeSpan,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Connects the guid
            </summary>
            <param name="guid">The guid</param>
            <param name="responseStream">The response stream</param>
            <param name="secWebSocketKey">The sec web socket key</param>
            <param name="keepAliveInterval">The keep alive interval</param>
            <param name="secWebSocketExtensions">The sec web socket extensions</param>
            <param name="includeExceptionInCloseResponse">The include exception in close response</param>
            <param name="token">The token</param>
            <exception cref="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException">Handshake unexpected failure </exception>
            <returns>A task containing the web socket</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.GetSubProtocolFromHeader(System.String)">
            <summary>
                Gets the sub protocol from header using the specified response
            </summary>
            <param name="response">The response</param>
            <returns>The string</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ThrowIfInvalidAcceptString(System.Guid,System.String,System.String)">
            <summary>
                Throws the if invalid accept string using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="response">The response</param>
            <param name="secWebSocketKey">The sec web socket key</param>
            <exception cref="T:Alis.Core.Network.Exceptions.WebSocketHandshakeFailedException"></exception>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ThrowIfInvalidResponseCode(System.String)">
            <summary>
                Throws the if invalid response code using the specified response header
            </summary>
            <param name="responseHeader">The response header</param>
            <exception cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException"></exception>
            <exception cref="T:Alis.Core.Network.Exceptions.InvalidHttpResponseCodeException">null null </exception>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.TlsAuthenticateAsClient(System.Net.Security.SslStream,System.String)">
            <summary>
                Override this if you need more fine grained control over the TLS handshake like setting the SslProtocol or adding a
                client certificate
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.GetStream(System.Guid,System.Boolean,System.Boolean,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
                Override this if you need more control over how the stream used for the websocket is created. It does not event
                need to be a TCP stream
            </summary>
            <param name="loggingGuid">For logging purposes only</param>
            <param name="isSecure">Make a secure connection</param>
            <param name="noDelay">
                Set to true to send a message immediately with the least amount of latency (typical usage for
                chat)
            </param>
            <param name="host">The destination host (can be an IP address)</param>
            <param name="port">The destination port</param>
            <param name="cancellationToken">Used to cancel the request</param>
            <returns>A connected and open stream</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
                Invoked by the RemoteCertificateValidationDelegate
                If you want to ignore certificate errors (for debugging) then return true
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.GetAdditionalHeaders(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Gets the additional headers using the specified additional headers
            </summary>
            <param name="additionalHeaders">The additional headers</param>
            <returns>The string</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientFactory.PerformHandshake(System.Guid,System.Uri,System.IO.Stream,Alis.Core.Network.WebSocketClientOptions,System.Threading.CancellationToken)">
            <summary>
                Performs the handshake using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="uri">The uri</param>
            <param name="stream">The stream</param>
            <param name="options">The options</param>
            <param name="token">The token</param>
            <returns>A task containing the web socket</returns>
        </member>
        <member name="T:Alis.Core.Network.WebSocketClientOptions">
            <summary>
                Client WebSocket init options
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketClientOptions.#ctor">
            <summary>
                Initialises a new instance of the WebSocketClientOptions class
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.KeepAliveInterval">
            <summary>
                How often to send ping requests to the Server
                This is done to prevent proxy servers from closing your connection
                The default is TimeSpan.Zero meaning that it is disabled.
                WebSocket servers usually send ping messages so it is not normally necessary for the client to send them (hence the
                TimeSpan.Zero default)
                You can manually control ping pong messages using the PingPongManager class.
                If you do that it is advisible to set this KeepAliveInterval to zero for the WebSocketClientFactory
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.NoDelay">
            <summary>
                Set to true to send a message immediately with the least amount of latency (typical usage for chat)
                This will disable Nagle's algorithm which can cause high tcp latency for small packets sent infrequently
                However, if you are streaming large packets or sending large numbers of small packets frequently it is advisable to
                set NoDelay to false
                This way data will be bundled into larger packets for better throughput
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.AdditionalHttpHeaders">
            <summary>
                Add any additional http headers to this dictionary
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.IncludeExceptionInCloseResponse">
            <summary>
                Include the full exception (with stack trace) in the close response
                when an exception is encountered and the WebSocket connection is closed
                The default is false
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.SecWebSocketExtensions">
            <summary>
                WebSocket Extensions as an HTTP header value
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketClientOptions.SecWebSocketProtocol">
            <summary>
                A comma separated list of sub protocols in preference order (first one being the most preferred)
                The server will return the first supported sub protocol (or none if none are supported)
                Can be null
            </summary>
        </member>
        <member name="T:Alis.Core.Network.WebSocketHttpContext">
            <summary>
                The WebSocket HTTP Context used to initiate a WebSocket handshake
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketHttpContext.#ctor(System.Boolean,System.Collections.Generic.IList{System.String},System.String,System.String,System.IO.Stream)">
            <summary>
                Initialises a new instance of the WebSocketHttpContext class
            </summary>
            <param name="isWebSocketRequest">True if this is a valid WebSocket request</param>
            <param name="webSocketRequestedProtocols"></param>
            <param name="httpHeader">The raw http header extracted from the stream</param>
            <param name="path">The Path extracted from the http header</param>
            <param name="stream">The stream AFTER the header has already been read</param>
        </member>
        <member name="P:Alis.Core.Network.WebSocketHttpContext.IsWebSocketRequest">
            <summary>
                True if this is a valid WebSocket request
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketHttpContext.WebSocketRequestedProtocols">
            <summary>
                Gets the value of the web socket requested protocols
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketHttpContext.HttpHeader">
            <summary>
                The raw http header extracted from the stream
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketHttpContext.Path">
            <summary>
                The Path extracted from the http header
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketHttpContext.Stream">
            <summary>
                The stream AFTER the header has already been read
            </summary>
        </member>
        <member name="T:Alis.Core.Network.WebSocketServerFactory">
            <summary>
                Web socket server factory used to open web socket server connections
            </summary>
        </member>
        <member name="F:Alis.Core.Network.WebSocketServerFactory._bufferFactory">
            <summary>
                The buffer factory
            </summary>
        </member>
        <member name="F:Alis.Core.Network.WebSocketServerFactory._bufferPool">
            <summary>
                The buffer pool
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.#ctor">
            <summary>
                Initialises a new instance of the WebSocketServerFactory class without caring about internal buffers
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.#ctor(System.Func{System.IO.MemoryStream})">
            <summary>
                Initialises a new instance of the WebSocketClientFactory class with control over internal buffer creation
            </summary>
            <param name="bufferFactory"></param>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.ReadHttpHeaderFromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Reads a http header information from a stream and decodes the parts relating to the WebSocket protocot upgrade
            </summary>
            <param name="stream">The network stream</param>
            <param name="token">The optional cancellation token</param>
            <returns>Http data read from the stream</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.AcceptWebSocketAsync(Alis.Core.Network.WebSocketHttpContext,System.Threading.CancellationToken)">
            <summary>
                Accept web socket with default options
                Call ReadHttpHeaderFromStreamAsync first to get WebSocketHttpContext
            </summary>
            <param name="context">The http context used to initiate this web socket request</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.AcceptWebSocketAsync(Alis.Core.Network.WebSocketHttpContext,Alis.Core.Network.WebSocketServerOptions,System.Threading.CancellationToken)">
            <summary>
                Accept web socket with options specified
                Call ReadHttpHeaderFromStreamAsync first to get WebSocketHttpContext
            </summary>
            <param name="context">The http context used to initiate this web socket request</param>
            <param name="options">The web socket options</param>
            <param name="token">The optional cancellation token</param>
            <returns>A connected web socket</returns>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.CheckWebSocketVersion(System.String)">
            <summary>
                Checks the web socket version using the specified http header
            </summary>
            <param name="httpHeader">The http header</param>
            <exception cref="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException"></exception>
            <exception cref="T:Alis.Core.Network.Exceptions.WebSocketVersionNotSupportedException">Cannot find "Sec-WebSocket-Version" in http header</exception>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerFactory.PerformHandshakeAsync(System.Guid,System.String,System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
                Performs the handshake using the specified guid
            </summary>
            <param name="guid">The guid</param>
            <param name="httpHeader">The http header</param>
            <param name="subProtocol">The sub protocol</param>
            <param name="stream">The stream</param>
            <param name="token">The token</param>
            <exception cref="T:Alis.Core.Network.Exceptions.SecWebSocketKeyMissingException">Unable to read "Sec-WebSocket-Key" from http header</exception>
        </member>
        <member name="T:Alis.Core.Network.WebSocketServerOptions">
            <summary>
                Server WebSocket init options
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerOptions.#ctor">
            <summary>
                Initialises a new instance of the WebSocketServerOptions class
            </summary>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerOptions.#ctor(System.Double,System.Boolean,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.WebSocketServerOptions" /> class
            </summary>
            <param name="keepAliveInterval">The keep alive interval</param>
            <param name="includeExceptionInCloseResponse">The include exception in close response</param>
            <param name="subProtocol">The sub protocol</param>
        </member>
        <member name="M:Alis.Core.Network.WebSocketServerOptions.#ctor(System.TimeSpan,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Network.WebSocketServerOptions" /> class
            </summary>
            <param name="keepAliveInterval">The keep alive interval</param>
            <param name="subProtocol">The sub protocol</param>
        </member>
        <member name="P:Alis.Core.Network.WebSocketServerOptions.KeepAliveInterval">
            <summary>
                How often to send ping requests to the Client
                The default is 60 seconds
                This is done to prevent proxy servers from closing your connection
                A timespan of zero will disable the automatic ping pong mechanism
                You can manually control ping pong messages using the PingPongManager class.
                If you do that it is advisable to set this KeepAliveInterval to zero in the WebSocketServerFactory
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketServerOptions.IncludeExceptionInCloseResponse">
            <summary>
                Include the full exception (with stack trace) in the close response
                when an exception is encountered and the WebSocket connection is closed
                The default is false
            </summary>
        </member>
        <member name="P:Alis.Core.Network.WebSocketServerOptions.SubProtocol">
            <summary>
                Specifies the sub protocol to send back to the client in the opening handshake
                Can be null (the most common use case)
                The client can specify multiple preferred protocols in the opening handshake header
                The server should use the first supported one or set this to null if none of the requested sub protocols are
                supported
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.AabbHelper">
            <summary>
                The aabb helper class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.AabbHelper.ComputeEdgeAabb(System.Numerics.Vector2@,System.Numerics.Vector2@,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the edge aabb using the specified start
            </summary>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <param name="transform">The transform</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.AabbHelper.ComputeCircleAabb(System.Numerics.Vector2@,System.Single,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the circle aabb using the specified pos
            </summary>
            <param name="pos">The pos</param>
            <param name="radius">The radius</param>
            <param name="transform">The transform</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.AabbHelper.ComputePolygonAabb(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the polygon aabb using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="transform">The transform</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1">
            <summary>
                A dynamic tree arranges data in a binary tree to accelerate queries such as volume queries and ray casts.
                Leafs are proxies with an AABB. In the tree we expand the proxy AABB by Settings.b2_fatAABBFactor so that the proxy
                AABB is bigger than the client object. This allows the client object to move by small amounts without triggering a
                tree
                update. Nodes are pooled and relocatable, so we use node indices rather than pointers.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.queryStack">
            <summary>
                The stack
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.raycastStack">
            <summary>
                The stack
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.freeList">
            <summary>
                The free list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.nodeCapacity">
            <summary>
                The node capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.nodeCount">
            <summary>
                The node count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.nodes">
            <summary>
                The nodes
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.root">
            <summary>
                The root
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.#ctor">
            <summary>Constructing the tree initializes the node pool.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.Height">
            <summary>Compute the height of the binary tree in O(N) time. Should not be called often.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.AreaRatio">
            <summary>Get the ratio of the sum of the node areas to the root area.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.MaxBalance">
            <summary>
                Get the maximum balance of an node in the tree. The balance is the difference in height of the two children of
                a node.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.NullNode">
            <summary>
                The null node
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.CreateProxy(Alis.Core.Physic.Shared.Aabb@,`0)">
            <summary>
                Create a proxy in the tree as a leaf node. We return the index of the node instead of a pointer so that we can
                grow the node pool.
            </summary>
            <param name="aabb">The AABB.</param>
            <param name="userData">The user data.</param>
            <returns>Index of the created proxy</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.DestroyProxy(System.Int32)">
            <summary>Destroy a proxy. This asserts if the id is invalid.</summary>
            <param name="proxyId">The proxy id.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.MoveProxy(System.Int32,Alis.Core.Physic.Shared.Aabb@,System.Numerics.Vector2)">
            <summary>
                Move a proxy with a swepted AABB. If the proxy has moved outside of its fattened AABB, then the proxy is
                removed from the tree and re-inserted. Otherwise the function returns immediately.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="aabb">The AABB.</param>
            <param name="displacement">The displacement.</param>
            <returns>true if the proxy was re-inserted.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.WasMoved(System.Int32)">
            <summary>
                Describes whether this instance was moved
            </summary>
            <param name="proxyId">The proxy id</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.ClearMoved(System.Int32)">
            <summary>
                Clears the moved using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.GetUserData(System.Int32)">
            <summary>
            Gets the user data using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <returns>The</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.GetFatAabb(System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Get the fat AABB for a proxy.</summary>
            <param name="proxyId">The proxy id.</param>
            <param name="fatAabb">The fat AABB.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.Query(System.Func{System.Int32,System.Boolean},Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Query an AABB for overlapping proxies. The callback class is called for each proxy that overlaps the supplied
                AABB.
            </summary>
            <param name="callback">The callback.</param>
            <param name="aabb">The AABB.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.RayCast(System.Func{Alis.Core.Physic.Collision.RayCast.RayCastInput,System.Int32,System.Single},Alis.Core.Physic.Collision.RayCast.RayCastInput@)">
            <summary>
                Ray-cast against the proxies in the tree. This relies on the callback to perform a exact ray-cast in the case
                were the proxy contains a Shape. The callback also performs the any collision filtering. This has performance
                roughly
                equal to k * log(n), where k is the number of collisions and n is the number of proxies in the tree.
            </summary>
            <param name="callback">A callback class that is called for each proxy that is hit by the ray.</param>
            <param name="input">The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.AllocateNode">
            <summary>
                Allocates the node
            </summary>
            <returns>The node id</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.FreeNode(System.Int32)">
            <summary>
                Frees the node using the specified node id
            </summary>
            <param name="nodeId">The node id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.InsertLeaf(System.Int32)">
            <summary>
                Inserts the leaf using the specified leaf
            </summary>
            <param name="leaf">The leaf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.RemoveLeaf(System.Int32)">
            <summary>
                Removes the leaf using the specified leaf
            </summary>
            <param name="leaf">The leaf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.Balance(System.Int32)">
            <summary>Perform a left or right rotation if node A is imbalanced.</summary>
            <param name="iA"></param>
            <returns>the new root index.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.ComputeHeight(System.Int32)">
            <summary>Compute the height of a sub-tree.</summary>
            <param name="nodeId">The node id to use as parent.</param>
            <returns>The height of the tree.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.ComputeHeight">
            <summary>Compute the height of the entire tree.</summary>
            <returns>The height of the tree.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.ValidateStructure(System.Int32)">
            <summary>
                Validates the structure using the specified index
            </summary>
            <param name="index">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.ValidateMetrics(System.Int32)">
            <summary>
                Validates the metrics using the specified index
            </summary>
            <param name="index">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.Validate">
            <summary>Validate this tree. For testing.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.RebuildBottomUp">
            <summary>Build an optimal tree. Very expensive. For testing.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTree`1.ShiftOrigin(System.Numerics.Vector2@)">
            <summary>Shift the origin of the nodes</summary>
            <param name="newOrigin">The displacement to use.</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase">
            <summary>
                The broad-phase is used for computing pairs and performing volume queries and ray casts. This broad-phase does
                not persist pairs. Instead, this reports potentially new pairs. It is up to the client to consume the new pairs and
                to
                track subsequent overlap.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.queryCallback">
            <summary>
                The query callback
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.tree">
            <summary>
                The fixture proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.moveBuffer">
            <summary>
                The move buffer
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.moveCapacity">
            <summary>
                The move capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.moveCount">
            <summary>
                The move count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.pairBuffer">
            <summary>
                The pair buffer
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.pairCapacity">
            <summary>
                The pair capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.pairCount">
            <summary>
                The pair count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.proxyCount">
            <summary>
                The proxy count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.queryProxyId">
            <summary>
                The query proxy id
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.#ctor">
            <summary>Constructs a new broad phase based on the dynamic tree implementation</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.TreeQuality">
            <summary>Get the tree quality based on the area of the tree.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.TreeHeight">
            <summary>Gets the height of the tree.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.NullProxy">
            <summary>
                The null proxy
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.ProxyCount">
            <summary>Get the number of proxies.</summary>
            <value>The proxy count.</value>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.AddProxy(Alis.Core.Physic.Dynamics.FixtureProxy@)">
            <summary>Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs is called.</summary>
            <param name="proxy">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.RemoveProxy(System.Int32)">
            <summary>Destroy a proxy. It is up to the client to remove any pairs.</summary>
            <param name="proxyId">The proxy id.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.MoveProxy(System.Int32,Alis.Core.Physic.Shared.Aabb@,System.Numerics.Vector2)">
            <summary>
                Call MoveProxy as many times as you like, then when you are done call UpdatePairs to finalized the proxy pairs
                (for your time step).
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.TouchProxy(System.Int32)">
            <summary>Call to trigger a re-processing of it's pairs on the next call to UpdatePairs.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.GetFatAabb(System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Get the AABB for a proxy.</summary>
            <param name="proxyId">The proxy id.</param>
            <param name="aabb">The AABB.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.GetProxy(System.Int32)">
            <summary>Get user data from a proxy. Returns null if the id is invalid.</summary>
            <param name="proxyId">The proxy id.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.TestOverlap(System.Int32,System.Int32)">
            <summary>Test overlap of fat AABBs.</summary>
            <param name="proxyIdA">The proxy id A.</param>
            <param name="proxyIdB">The proxy id B.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.UpdatePairs(Alis.Core.Physic.Collision.Handlers.BroadphaseHandler)">
            <summary>Update the pairs. This results in pair callbacks. This can only add pairs.</summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.Query(System.Func{System.Int32,System.Boolean},Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Query an AABB for overlapping proxies. The callback class is called for each proxy that overlaps the supplied
                AABB.
            </summary>
            <param name="callback">The callback.</param>
            <param name="aabb">The AABB.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.RayCast(System.Func{Alis.Core.Physic.Collision.RayCast.RayCastInput,System.Int32,System.Single},Alis.Core.Physic.Collision.RayCast.RayCastInput@)">
            <summary>
                Ray-cast against the proxies in the tree. This relies on the callback to perform a exact ray-cast in the case
                were the proxy contains a shape. The callback also performs the any collision filtering. This has performance
                roughly
                equal to k * log(n), where k is the number of collisions and n is the number of proxies in the tree.
            </summary>
            <param name="callback">A callback class that is called for each proxy that is hit by the ray.</param>
            <param name="input">The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.ShiftOrigin(System.Numerics.Vector2@)">
            <summary>Shift the world origin. Useful for large worlds.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.BufferMove(System.Int32)">
            <summary>
                Buffers the move using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.UnBufferMove(System.Int32)">
            <summary>
                Uns the buffer move using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.DynamicTreeBroadPhase.QueryCallback(System.Int32)">
            <summary>This is called from DynamicTree.Query when we are gathering pairs.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Broadphase.IBroadPhase">
            <summary>
                The broad phase interface
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.ProxyCount">
            <summary>
                Gets the value of the proxy count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.UpdatePairs(Alis.Core.Physic.Collision.Handlers.BroadphaseHandler)">
            <summary>
                Updates the pairs using the specified callback
            </summary>
            <param name="callback">The callback</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.TestOverlap(System.Int32,System.Int32)">
            <summary>
                Describes whether this instance test overlap
            </summary>
            <param name="proxyIdA">The proxy id</param>
            <param name="proxyIdB">The proxy id</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.AddProxy(Alis.Core.Physic.Dynamics.FixtureProxy@)">
            <summary>
                Adds the proxy using the specified proxy
            </summary>
            <param name="proxy">The proxy</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.RemoveProxy(System.Int32)">
            <summary>
                Removes the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.MoveProxy(System.Int32,Alis.Core.Physic.Shared.Aabb@,System.Numerics.Vector2)">
            <summary>
                Moves the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <param name="aabb">The aabb</param>
            <param name="displacement">The displacement</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.GetProxy(System.Int32)">
            <summary>
                Gets the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <returns>The fixture proxy</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.TouchProxy(System.Int32)">
            <summary>
                Touches the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.GetFatAabb(System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Gets the fat aabb using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.Query(System.Func{System.Int32,System.Boolean},Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Queries the callback
            </summary>
            <param name="callback">The callback</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.RayCast(System.Func{Alis.Core.Physic.Collision.RayCast.RayCastInput,System.Int32,System.Single},Alis.Core.Physic.Collision.RayCast.RayCastInput@)">
            <summary>
                Rays the cast using the specified callback
            </summary>
            <param name="callback">The callback</param>
            <param name="input">The input</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.IBroadPhase.ShiftOrigin(System.Numerics.Vector2@)">
            <summary>
                Shifts the origin using the specified new origin
            </summary>
            <param name="newOrigin">The new origin</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Broadphase.Pair">
            <summary>
                The pair
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.Pair.ProxyIdA">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.Pair.ProxyIdB">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Broadphase.TreeNode`1">
            <summary>A node in the dynamic tree. The client does not interact with this directly.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.TreeNode`1.Aabb">
            <summary>Enlarged AABB</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.TreeNode`1.Child1">
            <summary>
                The child
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.TreeNode`1.Child2">
            <summary>
                The child
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.TreeNode`1.Height">
            <summary>
                The height
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.TreeNode`1.Moved">
            <summary>
                The moved
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.TreeNode`1.ParentOrNext">
            <summary>
                The parent or next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Broadphase.TreeNode`1.UserData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Broadphase.TreeNode`1.IsLeaf">
            <summary>
                Describes whether this instance is leaf
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.Contact">
            <summary>
                The class manages contact between two shapes. A contact exists for each overlapping AABB in the broad-phase
                (except if filtered). Therefore a contact object may exist that has no contact points.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.fixtureA">
            <summary>
                The fixture
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.fixtureB">
            <summary>
                The fixture
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.friction">
            <summary>
                The friction
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.manifold">
            <summary>
                The manifold
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.restitution">
            <summary>
                The restitution
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.restitutionThreshold">
            <summary>
                The restitution threshold
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.tangentSpeed">
            <summary>
                The tangent speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.#ctor(Alis.Core.Physic.Dynamics.Fixture,System.Int32,Alis.Core.Physic.Dynamics.Fixture,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.ContactSystem.Contact" /> class
            </summary>
            <param name="fA">The </param>
            <param name="indexA">The index</param>
            <param name="fB">The </param>
            <param name="indexB">The index</param>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Flags">
            <summary>
                The flags
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.NodeA">
            <summary>
                The contact edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.NodeB">
            <summary>
                The contact edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Toi">
            <summary>
                The toi
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.ToiCount">
            <summary>
                The toi count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Manifold">
            <summary>Get the contact manifold. Do not modify the manifold unless you understand the internals of Box2D.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Friction">
            <summary>
                Gets or sets the value of the friction
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Restitution">
            <summary>
                Gets or sets the value of the restitution
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.RestitutionThreshold">
            <summary>
                Gets or sets the value of the restitution threshold
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.TangentSpeed">
            <summary>Get or set the desired tangent speed for a conveyor belt behavior. In meters per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.FixtureA">
            <summary>
                Gets the value of the fixture a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.FixtureB">
            <summary>
                Gets the value of the fixture b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.ChildIndexA">
            <summary>Get the child primitive index for fixture A.</summary>
            <value>The child index A.</value>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.ChildIndexB">
            <summary>Get the child primitive index for fixture B.</summary>
            <value>The child index B.</value>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Enabled">
            <summary>
                Enable/disable this contact.The contact is only disabled for the current time step (or sub-step in continuous
                collisions).
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Next">
            <summary>
                Gets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Previous">
            <summary>
                Gets the value of the previous
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.IsTouching">
            <summary>
                Gets the value of the is touching
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.IslandFlag">
            <summary>
                Gets the value of the island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.ToiFlag">
            <summary>
                Gets the value of the toi flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.FilterFlag">
            <summary>
                Gets the value of the filter flag
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.Edge">
            <summary>
                The edge shape
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.Registers">
            <summary>
                The not supported
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.ResetRestitution">
            <summary>
                Resets the restitution
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.ResetRestitutionThreshold">
            <summary>
                Resets the restitution threshold
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.ResetFriction">
            <summary>
                Resets the friction
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.GetWorldManifold(System.Numerics.Vector2@,Alis.Core.Physic.Shared.Optimization.FixedArray2{System.Numerics.Vector2}@)">
            <summary>Gets the world manifold.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.Reset(Alis.Core.Physic.Dynamics.Fixture,System.Int32,Alis.Core.Physic.Dynamics.Fixture,System.Int32)">
            <summary>
                Resets the f a
            </summary>
            <param name="fA">The </param>
            <param name="indexA">The index</param>
            <param name="fB">The </param>
            <param name="indexB">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.Update(Alis.Core.Physic.Collision.ContactSystem.ContactManager)">
            <summary>
                Update the contact manifold and touching status. Note: do not assume the fixture AABBs are overlapping or are
                valid.
            </summary>
            <param name="contactManager">The contact manager.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.Evaluate(Alis.Core.Physic.Collision.Narrowphase.Manifold@,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Shared.Transform@)">
            <summary>Evaluate this contact with your own manifold and transforms.</summary>
            <param name="manifold">The manifold.</param>
            <param name="transformA">The first transform.</param>
            <param name="transformB">The second transform.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.Create(Alis.Core.Physic.Dynamics.Fixture,System.Int32,Alis.Core.Physic.Dynamics.Fixture,System.Int32)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="indexA">The index</param>
            <param name="fixtureB">The fixture</param>
            <param name="indexB">The index</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.Destroy">
            <summary>
                Destroys this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactEdge">
            <summary>
                A contact edge is used to connect bodies and contacts together in a contact graph where each body is a node
                and each contact is an edge. A contact edge belongs to a doubly linked list maintained in each attached body. Each
                contact has two contact nodes, one for each attached body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactEdge.Contact">
            <summary>The contact</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactEdge.Next">
            <summary>The next contact edge in the body's contact list</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactEdge.Other">
            <summary>Provides quick access to the other body attached.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactEdge.Prev">
            <summary>The previous contact edge in the body's contact list</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactFeature">
            <summary>The features that intersect to form the contact point This must be 4 bytes or less.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFeature.IndexA">
            <summary>Feature index on ShapeA</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFeature.IndexB">
            <summary>Feature index on ShapeB</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFeature.TypeA">
            <summary>The feature type on ShapeA</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFeature.TypeB">
            <summary>The feature type on ShapeB</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactFeatureType">
            <summary>
                The contact feature type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFeatureType.Vertex">
            <summary>
                The vertex contact feature type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFeatureType.Face">
            <summary>
                The face contact feature type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactFlags">
            <summary>
                The contact flags enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFlags.Unknown">
            <summary>
                The unknown contact flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFlags.IslandFlag">
            <summary>Used when crawling contact graph when forming islands.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFlags.TouchingFlag">
            <summary>Set when the shapes are touching.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFlags.EnabledFlag">
            <summary>This contact can be disabled (by user)</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFlags.FilterFlag">
            <summary>This contact needs filtering because a fixture filter was changed.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFlags.BulletHitFlag">
            <summary>This bullet contact had a TOI event</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFlags.ToiFlag">
            <summary>This contact has a valid TOI in m_toi</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactId">
            <summary>Contact ids to facilitate warm starting.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactId.ContactFeature">
            <summary>The features that intersect to form the contact point</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactId.Key">
            <summary>Used to quickly compare contact ids.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactManager">
            <summary>
                The contact manager class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.BeginContact">
            <summary>Fires when a contact is created</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ContactCounter">
            <summary>
                The contact count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ContactFilter">
            <summary>The filter used by the contact manager.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ContactList">
            <summary>
                The contact list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.EndContact">
            <summary>Fires when a contact is deleted</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.OnBroadphaseCollision">
            <summary>Fires when the broadphase detects that two Fixtures are close to each other.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.PostSolve">
            <summary>Fires after the solver has run</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.PreSolve">
            <summary>Fires before the solver runs</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.#ctor(Alis.Core.Physic.Collision.Broadphase.IBroadPhase)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.ContactSystem.ContactManager" /> class
            </summary>
            <param name="broadPhase">The broad phase</param>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.BroadPhase">
            <summary>
                Gets the value of the broad phase
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ContactCount">
            <summary>
                Gets the value of the contact count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.AddPair(Alis.Core.Physic.Dynamics.FixtureProxy@,Alis.Core.Physic.Dynamics.FixtureProxy@)">
            <summary>
                Adds the pair using the specified proxy a
            </summary>
            <param name="proxyA">The proxy</param>
            <param name="proxyB">The proxy</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.FindNewContacts">
            <summary>
                Finds the new contacts
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.Remove(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Removes the c
            </summary>
            <param name="c">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.Collide">
            <summary>
                This is the top level collision call for the time step. Here all the narrow phase collision is processed for the
                world contact list.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ShouldCollide(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Describes whether should collide
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The collide</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactType">
            <summary>
                The contact type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.NotSupported">
            <summary>
                The not supported contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.Polygon">
            <summary>
                The polygon contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.PolygonAndCircle">
            <summary>
                The polygon and circle contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.Circle">
            <summary>
                The circle contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.EdgeAndPolygon">
            <summary>
                The edge and polygon contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.EdgeAndCircle">
            <summary>
                The edge and circle contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.ChainAndPolygon">
            <summary>
                The chain and polygon contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.ChainAndCircle">
            <summary>
                The chain and circle contact type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.DistanceGjk">
            <summary>
                The Gilbert–Johnson–Keerthi distance algorithm that provides the distance between shapes. Using Voronoi
                regions (Christer Ericson) and Barycentric coordinates.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceGjk.GjkCalls">
            <summary>
                The number of calls made to the ComputeDistance() function. Note: This is only activated when
                Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceGjk.GjkIters">
            <summary>
                The number of iterations that was made on the last call to ComputeDistance(). Note: This is only activated
                when Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceGjk.GjkMaxIters">
            <summary>
                The maximum number of iterations calls to the CompteDistance() function. Note: This is only activated when
                Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.ComputeDistance(Alis.Core.Physic.Collision.Distance.DistanceInput@,Alis.Core.Physic.Collision.Distance.DistanceOutput@,Alis.Core.Physic.Collision.Narrowphase.SimplexCache@)">
            <summary>
                Computes the distance using the specified input
            </summary>
            <param name="input">The input</param>
            <param name="output">The output</param>
            <param name="cache">The cache</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.ShapeCast(Alis.Core.Physic.Collision.Distance.ShapeCastInput@,Alis.Core.Physic.Collision.Distance.ShapeCastOutput@)">
            <summary>
                Perform a linear shape cast of shape B moving and shape A fixed. Determines the hit point, normal, and
                translation fraction.
            </summary>
            <returns>true if hit, false if there is no hit or an initial overlap</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.DistanceInput">
            <summary>Input for Distance.ComputeDistance(). You have to option to use the shape radii in the computation.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceInput.ProxyA">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceInput.ProxyB">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceInput.TransformA">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceInput.TransformB">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceInput.UseRadii">
            <summary>
                The use radii
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.DistanceOutput">
            <summary>Output for Distance.ComputeDistance().</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceOutput.Distance">
            <summary>
                The distance
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceOutput.Iterations">
            <summary>Number of GJK iterations used</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceOutput.PointA">
            <summary>Closest point on shapeA</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceOutput.PointB">
            <summary>Closest point on shapeB</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.DistanceProxy">
            <summary>A distance proxy is used by the GJK algorithm. It encapsulates any shape.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceProxy.Radius">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceProxy.Vertices">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.#ctor(Alis.Core.Physic.Collision.Shapes.Shape,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Distance.DistanceProxy" /> class
            </summary>
            <param name="shape">The shape</param>
            <param name="index">The index</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.#ctor(System.Numerics.Vector2[],System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Distance.DistanceProxy" /> class
            </summary>
            <param name="vertices">The vertices</param>
            <param name="radius">The radius</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.GetSupport(System.Numerics.Vector2)">
            <summary>Get the supporting vertex index in the given direction.</summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.GetVertex(System.Int32)">
            <summary>
                Gets the vertex using the specified index
            </summary>
            <param name="index">The index</param>
            <returns>The vector</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.ShapeCastInput">
            <summary>Input parameters for b2ShapeCast</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.ShapeCastInput.ProxyA">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.ShapeCastInput.ProxyB">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.ShapeCastInput.TransformA">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.ShapeCastInput.TransformB">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.ShapeCastInput.TranslationB">
            <summary>
                The translation
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.ShapeCastOutput">
            <summary>Output results for b2ShapeCast</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.ShapeCastOutput.Point">
            <summary>
                The point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.ShapeCastOutput.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.ShapeCastOutput.Lambda">
            <summary>
                The lambda
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.ShapeCastOutput.Iterations">
            <summary>
                The iterations
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Filtering.Category">
            <summary>
                The category enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.None">
            <summary>
                The none category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.All">
            <summary>
                The all category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat1">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat2">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat3">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat4">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat5">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat6">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat7">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat8">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat9">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat10">
            <summary>
                The cat 10 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat11">
            <summary>
                The cat 11 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat12">
            <summary>
                The cat 12 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat13">
            <summary>
                The cat 13 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat14">
            <summary>
                The cat 14 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat15">
            <summary>
                The cat 15 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat16">
            <summary>
                The cat 16 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat17">
            <summary>
                The cat 17 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat18">
            <summary>
                The cat 18 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat19">
            <summary>
                The cat 19 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat20">
            <summary>
                The cat 20 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat21">
            <summary>
                The cat 21 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat22">
            <summary>
                The cat 22 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat23">
            <summary>
                The cat 23 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat24">
            <summary>
                The cat 24 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat25">
            <summary>
                The cat 25 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat26">
            <summary>
                The cat 26 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat27">
            <summary>
                The cat 27 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat28">
            <summary>
                The cat 28 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat29">
            <summary>
                The cat 29 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat30">
            <summary>
                The cat 30 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat31">
            <summary>
                The cat 31 category
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Filtering.Filter">
            <summary>
                The filter class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Filtering.Filter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Filtering.Filter" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Filtering.Filter.#ctor(System.Int16,Alis.Core.Physic.Collision.Filtering.Category,Alis.Core.Physic.Collision.Filtering.Category)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Filtering.Filter" /> class
            </summary>
            <param name="group">The group</param>
            <param name="category">The category</param>
            <param name="mask">The mask</param>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Filtering.Filter.Group">
            <summary>
                Collision groups allow a certain group of objects to never collide(negative) or always collide (positive).
                Zero means no collision group. Non-zero group filtering always wins against the mask bits.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Filtering.Filter.Category">
            <summary>The collision category bits. Normally you would just set one bit.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Filtering.Filter.CategoryMask">
            <summary>The collision mask bits. This states the categories that this shape would accept for collision.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.AfterCollisionHandler">
            <summary>
                The after collision handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.BeforeCollisionHandler">
            <summary>
                The before collision handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.BeginContactHandler">
            <summary>This delegate is called when a contact is created</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.BroadphaseHandler">
            <summary>
                The broadphase handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.CollisionFilterHandler">
            <summary>
                The collision filter handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.EndContactHandler">
            <summary>This delegate is called when a contact is deleted</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.OnCollisionHandler">
            <summary>
                The on collision handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.OnSeparationHandler">
            <summary>
                The on separation handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.ClipVertex">
            <summary>Used for computing contact manifolds.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ClipVertex.Id">
            <summary>
                The id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ClipVertex.V">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.CollideCircle">
            <summary>
                The collide circle class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.CollideCircle.CollideCircles(Alis.Core.Physic.Collision.Narrowphase.Manifold@,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Core.Physic.Shared.Transform@)">
            <summary>Compute the collision manifold between two circles.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.CollideCircle.CollidePolygonAndCircle(Alis.Core.Physic.Collision.Narrowphase.Manifold@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Core.Physic.Shared.Transform@)">
            <summary>Compute the collision manifold between a polygon and a circle.</summary>
            <param name="manifold">The manifold.</param>
            <param name="polygonA">The polygon A.</param>
            <param name="xfA">The transform of A.</param>
            <param name="circleB">The circle B.</param>
            <param name="xfB">The transform of B.</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.CollideEdge">
            <summary>
                The collide edge class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.CollideEdge.CollideEdgeAndCircle(Alis.Core.Physic.Collision.Narrowphase.Manifold@,Alis.Core.Physic.Collision.Shapes.EdgeShape,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Core.Physic.Shared.Transform@)">
            <summary>Compute contact points for edge versus circle. This accounts for edge connectivity.</summary>
            <param name="manifold">The manifold.</param>
            <param name="edgeA">The edge A.</param>
            <param name="transformA">The transform A.</param>
            <param name="circleB">The circle B.</param>
            <param name="transformB">The transform B.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.CollideEdge.CollideEdgeAndPolygon(Alis.Core.Physic.Collision.Narrowphase.Manifold@,Alis.Core.Physic.Collision.Shapes.EdgeShape,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Physic.Shared.Transform@)">
            <summary>
                Collides the edge and polygon using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="edgeA">The edge</param>
            <param name="xfA">The xf</param>
            <param name="polygonB">The polygon</param>
            <param name="xfB">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.CollideEdge.ComputeEdgeSeparation(Alis.Core.Physic.Collision.Narrowphase.CollideEdge.TempPolygon@,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Computes the edge separation using the specified polygon b
            </summary>
            <param name="polygonB">The polygon</param>
            <param name="v1">The </param>
            <param name="normal1">The normal</param>
            <returns>The axis</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.CollideEdge.ComputePolygonSeparation(Alis.Core.Physic.Collision.Narrowphase.CollideEdge.TempPolygon@,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Computes the polygon separation using the specified polygon b
            </summary>
            <param name="polygonB">The polygon</param>
            <param name="v1">The </param>
            <param name="v2">The </param>
            <returns>The axis</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.CollideEdge.TempPolygon">
            <summary>
                The temp polygon
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.CollideEdge.TempPolygon.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Narrowphase.CollideEdge.TempPolygon" /> class
            </summary>
            <param name="count">The count</param>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.CollideEdge.TempPolygon.Vertices">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.CollideEdge.TempPolygon.Normals">
            <summary>
                The normals
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.CollideEdge.TempPolygon.Count">
            <summary>
                The count
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.CollidePolygon">
            <summary>
                The collide polygon class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.CollidePolygon.CollidePolygons(Alis.Core.Physic.Collision.Narrowphase.Manifold@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Physic.Shared.Transform@)">
            <summary>Compute the collision manifold between two polygons.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.CollidePolygon.FindMaxSeparation(System.Int32@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Physic.Shared.Transform@)">
            <summary>Find the max separation between poly1 and poly2 using edge normals from poly1.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.CollidePolygon.FindIncidentEdge(Alis.Core.Physic.Shared.Optimization.FixedArray2{Alis.Core.Physic.Collision.Narrowphase.ClipVertex}@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Physic.Shared.Transform@)">
            <summary>
                Finds the incident edge using the specified c
            </summary>
            <param name="c">The </param>
            <param name="poly1">The poly</param>
            <param name="xf1">The xf</param>
            <param name="edge1">The edge</param>
            <param name="poly2">The poly</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.Collision">
            <summary>Collision methods</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Collision.TestOverlap(Alis.Core.Physic.Collision.Shapes.Shape,System.Int32,Alis.Core.Physic.Collision.Shapes.Shape,System.Int32,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Shared.Transform@)">
            <summary>Test overlap between the two shapes.</summary>
            <param name="shapeA">The first shape.</param>
            <param name="indexA">The index for the first shape.</param>
            <param name="shapeB">The second shape.</param>
            <param name="indexB">The index for the second shape.</param>
            <param name="xfA">The transform for the first shape.</param>
            <param name="xfB">The transform for the seconds shape.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Collision.GetPointStates(Alis.Core.Physic.Shared.Optimization.FixedArray2{Alis.Core.Physic.Collision.Narrowphase.PointState}@,Alis.Core.Physic.Shared.Optimization.FixedArray2{Alis.Core.Physic.Collision.Narrowphase.PointState}@,Alis.Core.Physic.Collision.Narrowphase.Manifold@,Alis.Core.Physic.Collision.Narrowphase.Manifold@)">
            <summary>
                Gets the point states using the specified state 1
            </summary>
            <param name="state1">The state</param>
            <param name="state2">The state</param>
            <param name="manifold1">The manifold</param>
            <param name="manifold2">The manifold</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Collision.ClipSegmentToLine(Alis.Core.Physic.Shared.Optimization.FixedArray2{Alis.Core.Physic.Collision.Narrowphase.ClipVertex}@,Alis.Core.Physic.Shared.Optimization.FixedArray2{Alis.Core.Physic.Collision.Narrowphase.ClipVertex}@,System.Numerics.Vector2,System.Single,System.Int32)">
            <summary>Clipping for contact manifolds.</summary>
            <param name="vOut">The v out.</param>
            <param name="vIn">The v in.</param>
            <param name="normal">The normal.</param>
            <param name="offset">The offset.</param>
            <param name="vertexIndexA">The vertex index A.</param>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.EpAxis">
            <summary>This structure is used to keep track of the best separating axis.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.EpAxis.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.EpAxis.Index">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.EpAxis.Separation">
            <summary>
                The separation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.EpAxis.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.EpAxisType">
            <summary>
                The ep axis type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.EpAxisType.Unknown">
            <summary>
                The unknown ep axis type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.EpAxisType.EdgeA">
            <summary>
                The edge ep axis type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.EpAxisType.EdgeB">
            <summary>
                The edge ep axis type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.Manifold">
            <summary>
                A manifold for two touching convex Shapes.
                Box2D supports multiple types of contact:
                - Clip point versus plane with radius
                - Point versus point with radius (circles)
                The local point usage depends on the manifold type:
                - ShapeType.Circles: the local center of circleA
                - SeparationFunction.FaceA: the center of faceA
                - SeparationFunction.FaceB: the center of faceB
                Similarly the local normal usage:
                - ShapeType.Circles: not used
                - SeparationFunction.FaceA: the normal on polygonA
                - SeparationFunction.FaceB: the normal on polygonB
                We store contacts in this way so that position correction can
                account for movement, which is critical for continuous physics.
                All contact scenarios must be expressed in one of these types.
                This structure is stored across time steps, so we keep it small.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.Manifold.LocalNormal">
            <summary>Not use for Type.SeparationFunction.Points</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.Manifold.LocalPoint">
            <summary>Usage depends on manifold type</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.Manifold.PointCount">
            <summary>The number of manifold points</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.Manifold.Points">
            <summary>The points of contact</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.Manifold.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.ManifoldPoint">
            <summary>
                A manifold point is a contact point belonging to a contact
                manifold. It holds details related to the geometry and dynamics
                of the contact points.
                The local point usage depends on the manifold type:
                -ShapeType.Circles: the local center of circleB
                -SeparationFunction.FaceA: the local center of cirlceB or the clip point of polygonB
                -SeparationFunction.FaceB: the clip point of polygonA
                This structure is stored across time steps, so we keep it small.
                Note: the impulses are used for internal caching and may not
                provide reliable contact forces, especially for high speed collisions.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ManifoldPoint.Id">
            <summary>Uniquely identifies a contact point between two Shapes</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ManifoldPoint.LocalPoint">
            <summary>Usage depends on manifold type</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ManifoldPoint.NormalImpulse">
            <summary>The non-penetration impulse</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ManifoldPoint.TangentImpulse">
            <summary>The friction impulse</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.ManifoldType">
            <summary>
                The manifold type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ManifoldType.Circles">
            <summary>
                The circles manifold type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ManifoldType.FaceA">
            <summary>
                The face manifold type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ManifoldType.FaceB">
            <summary>
                The face manifold type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.PointState">
            <summary>This is used for determining the state of contact points.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.PointState.Null">
            <summary>Point does not exist</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.PointState.Add">
            <summary>Point was added in the update</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.PointState.Persist">
            <summary>Point persisted across the update</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.PointState.Remove">
            <summary>Point was removed in the update</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.ReferenceFace">
            <summary>Reference face used for clipping</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ReferenceFace.I1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ReferenceFace.I2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ReferenceFace.V1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ReferenceFace.V2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ReferenceFace.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ReferenceFace.SideNormal1">
            <summary>
                The side normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ReferenceFace.SideOffset1">
            <summary>
                The side offset
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ReferenceFace.SideNormal2">
            <summary>
                The side normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.ReferenceFace.SideOffset2">
            <summary>
                The side offset
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.Simplex">
            <summary>
                The simplex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.Simplex.Count">
            <summary>
                The count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.Simplex.V">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Simplex.ReadCache(Alis.Core.Physic.Collision.Narrowphase.SimplexCache@,Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Physic.Shared.Transform@)">
            <summary>
                Reads the cache using the specified cache
            </summary>
            <param name="cache">The cache</param>
            <param name="proxyA">The proxy</param>
            <param name="transformA">The transform</param>
            <param name="proxyB">The proxy</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Simplex.WriteCache(Alis.Core.Physic.Collision.Narrowphase.SimplexCache@)">
            <summary>
                Writes the cache using the specified cache
            </summary>
            <param name="cache">The cache</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Simplex.GetSearchDirection">
            <summary>
                Gets the search direction
            </summary>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Simplex.GetClosestPoint">
            <summary>
                Gets the closest point
            </summary>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Simplex.GetWitnessPoints(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Gets the witness points using the specified p a
            </summary>
            <param name="pA">The </param>
            <param name="pB">The </param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Simplex.GetMetric">
            <summary>
                Gets the metric
            </summary>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Simplex.Solve2">
            <summary>
                Solves the 2
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.Simplex.Solve3">
            <summary>
                Solves the 3
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.SimplexCache">
            <summary>Used to warm start ComputeDistance. Set count to zero on first call.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.SimplexCache.Count">
            <summary>Length or area</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.SimplexCache.IndexA">
            <summary>Vertices on shape A</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.SimplexCache.IndexB">
            <summary>Vertices on shape B</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.SimplexCache.Metric">
            <summary>
                The metric
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.SimplexVertex">
            <summary>
                The simplex vertex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.SimplexVertex.A">
            <summary>Barycentric coordinate for closest point</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.SimplexVertex.IndexA">
            <summary>wA index</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.SimplexVertex.IndexB">
            <summary>wB index</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.SimplexVertex.W">
            <summary>wB - wA</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.SimplexVertex.Wa">
            <summary>Support point in proxyA</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Narrowphase.SimplexVertex.Wb">
            <summary>Support point in proxyB</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Narrowphase.WorldManifold">
            <summary>
                The world manifold class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Narrowphase.WorldManifold.Initialize(Alis.Core.Physic.Collision.Narrowphase.Manifold@,Alis.Core.Physic.Shared.Transform@,System.Single,Alis.Core.Physic.Shared.Transform@,System.Single,System.Numerics.Vector2@,Alis.Core.Physic.Shared.Optimization.FixedArray2{System.Numerics.Vector2}@,Alis.Core.Physic.Shared.Optimization.FixedArray2{System.Single}@)">
            <summary>
                Evaluate the manifold with supplied transforms. This assumes modest motion from the original state. This does
                not change the point count, impulses, etc. The radii must come from the Shapes that generated the manifold.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.RayCast.RayCastInput">
            <summary>Ray-cast input data.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCast.RayCastInput.MaxFraction">
            <summary>
                The ray extends from p1 to p1 + maxFraction * (p2 - p1). If you supply a max fraction of 1, the ray extends
                from p1 to p2. A max fraction of 0.5 makes the ray go from p1 and half way to p2.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCast.RayCastInput.Point1">
            <summary>The starting point of the ray.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCast.RayCastInput.Point2">
            <summary>The ending point of the ray.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.RayCast.RayCastOutput">
            <summary>Ray-cast output data.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCast.RayCastOutput.Fraction">
            <summary>
                The ray hits at p1 + fraction * (p2 - p1), where p1 and p2 come from RayCastInput. Contains the actual
                fraction of the ray where it has the intersection point.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.RayCast.RayCastOutput.Normal">
            <summary>The normal of the face of the shape the ray has hit.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.RayCastHelper">
            <summary>
                The ray cast helper class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.RayCastHelper.RayCastEdge(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Boolean,Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether ray cast edge
            </summary>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <param name="oneSided">The one sided</param>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.RayCastHelper.RayCastCircle(System.Numerics.Vector2@,System.Single,Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether ray cast circle
            </summary>
            <param name="pos">The pos</param>
            <param name="radius">The radius</param>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.RayCastHelper.RayCastPolygon(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether ray cast polygon
            </summary>
            <param name="vertices">The vertices</param>
            <param name="normals">The normals</param>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.ChainShape">
            <summary>
                A chain shape is a free form sequence of line segments. The chain has one-sided collision, with the surface
                normal pointing to the right of the edge. This provides a counter-clockwise winding like the polygon shape.
                Connectivity information is used to create smooth collisions. Warning: the chain will not collide properly if there
                are
                self-intersections.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ChainShape.nextVertex">
            <summary>
                The next vertex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ChainShape.prevVertex">
            <summary>
                The next vertex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ChainShape.vertices">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.#ctor(Alis.Core.Physic.Shared.Vertices,System.Boolean)">
            <summary>Create a new ChainShape from the vertices.</summary>
            <param name="vertices">The vertices to use. Must contain 2 or more vertices.</param>
            <param name="createLoop">
                Set to true to create a closed loop. It connects the first vertex to the last, and
                automatically adjusts connectivity to create smooth collisions along the chain.
            </param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.ChainShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.ChainShape.Vertices">
            <summary>The vertices. These are not owned/freed by the chain Shape.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.ChainShape.ChildCount">
            <summary>Edge count = vertex count - 1</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.ChainShape.PrevVertex">
            <summary>Establish connectivity to a vertex that precedes the first vertex. Don't call this for loops.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.ChainShape.NextVertex">
            <summary>Establish connectivity to a vertex that follows the last vertex. Don't call this for loops.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.GetChildEdge(Alis.Core.Physic.Collision.Shapes.EdgeShape,System.Int32)">
            <summary>
                Gets the child edge using the specified edge
            </summary>
            <param name="edge">The edge</param>
            <param name="index">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.GetChildEdge(System.Int32)">
            <summary>
                Gets the child edge using the specified index
            </summary>
            <param name="index">The index</param>
            <returns>The edge shape</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.TestPoint(Alis.Core.Physic.Shared.Transform@,System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether this instance ray cast
            </summary>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.ComputeAabb(Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the aabb using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.ComputeProperties">
            <summary>
                Computes the properties
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.CircleShape">
            <summary>A circle shape.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.CircleShape.Positionprivate">
            <summary>
                The position
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.#ctor(System.Single,System.Single,System.Numerics.Vector2)">
            <summary>Create a new circle with the desired radius and density.</summary>
            <param name="radius">The radius of the circle.</param>
            <param name="density">The density of the circle.</param>
            <param name="position">Position of the shape</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.CircleShape" /> class
            </summary>
            <param name="density">The density</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.CircleShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.CircleShape.ChildCount">
            <summary>
                Gets the value of the child count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.CircleShape.Position">
            <summary>Get or set the position of the circle</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.TestPoint(Alis.Core.Physic.Shared.Transform@,System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether this instance ray cast
            </summary>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeAabb(Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the aabb using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeProperties">
            <summary>
                Computes the properties
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeMass">
            <summary>
                Computes the mass
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeInertia">
            <summary>
                Computes the inertia
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.EdgeShape">
            <summary>
                A line segment (edge) shape. These can be connected in chains or loops to other edge shapes. Edges created
                independently are two-sided and do no provide smooth movement across junctions.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.EdgeShape.oneSided">
            <summary>
                The one sided
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.EdgeShape.vertex0">
            <summary>
                The vertex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.EdgeShape.vertex1">
            <summary>
                The vertex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.EdgeShape.vertex2">
            <summary>
                The vertex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.EdgeShape.vertex3">
            <summary>
                The vertex
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Create a new EdgeShape with the specified start and end. This edge supports two-sided collision.</summary>
            <param name="start">The start of the edge.</param>
            <param name="end">The end of the edge.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.#ctor(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Create a new EdgeShape with ghost vertices for smooth collision. This edge only supports one-sided collision.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.EdgeShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.ChildCount">
            <summary>
                Gets the value of the child count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.OneSided">
            <summary>Is true if the edge is connected to an adjacent vertex before vertex 1.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Vertex0">
            <summary>Optional adjacent vertices. These are used for smooth collision.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Vertex3">
            <summary>Optional adjacent vertices. These are used for smooth collision.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Vertex1">
            <summary>These are the edge vertices</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Vertex2">
            <summary>These are the edge vertices</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.SetOneSided(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Sets the one sided using the specified v 0
            </summary>
            <param name="v0">The </param>
            <param name="v1">The </param>
            <param name="v2">The </param>
            <param name="v3">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.SetTwoSided(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Sets the two sided using the specified start
            </summary>
            <param name="start">The start</param>
            <param name="end">The end</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.TestPoint(Alis.Core.Physic.Shared.Transform@,System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether this instance ray cast
            </summary>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.ComputeAabb(Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the aabb using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.ComputeProperties">
            <summary>
                Computes the properties
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.MassData">
            <summary>This holds the mass data computed for a shape.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.MassData" /> class
            </summary>
            <param name="area">The area</param>
            <param name="inertia">The inertia</param>
            <param name="mass">The mass</param>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.MassData.Area">
            <summary>The area of the shape</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.MassData.Centroid">
            <summary>The position of the shape's centroid relative to the shape's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.MassData.Inertia">
            <summary>The rotational inertia of the shape about the local origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.MassData.Mass">
            <summary>The mass of the shape, usually in kilograms.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.op_Equality(Alis.Core.Physic.Collision.Shapes.MassData,Alis.Core.Physic.Collision.Shapes.MassData)">
            <summary>The equal operator</summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.op_Inequality(Alis.Core.Physic.Collision.Shapes.MassData,Alis.Core.Physic.Collision.Shapes.MassData)">
            <summary>The not equal operator</summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.Equals(Alis.Core.Physic.Collision.Shapes.MassData)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="other">The other</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.Equals(System.Object)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="obj">The obj</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.GetHashCode">
            <summary>
                Gets the hash code
            </summary>
            <returns>The int</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.PolygonShape">
            <summary>Represents a simple non-self intersecting convex polygon. Create a convex hull from the given array of points.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.PolygonShape.NormalsPrivate">
            <summary>
                The normals
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.PolygonShape.VerticesPrivate">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.#ctor(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.PolygonShape" /> class.</summary>
            <param name="vertices">The vertices.</param>
            <param name="density">The density.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.#ctor(System.Single)">
            <summary>Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.PolygonShape" /> class.</summary>
            <param name="density">The density.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.PolygonShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.PolygonShape.Vertices">
            <summary>
                Create a convex hull from the given array of local points. The number of vertices must be in the range [3,
                Settings.MaxPolygonVertices]. Warning: the points may be re-ordered, even if they form a convex polygon Warning:
                collinear points are handled but not removed. Collinear points may lead to poor stacking behavior.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.PolygonShape.Normals">
            <summary>
                Gets the value of the normals
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.PolygonShape.ChildCount">
            <summary>
                Gets the value of the child count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.SetVertices(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Sets the vertices using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <exception cref="T:System.InvalidOperationException">Polygon is degenerate</exception>
            <exception cref="T:System.InvalidOperationException">Polygon is degenerate</exception>
            <exception cref="T:System.InvalidOperationException">You can't create a polygon with less than 3 vertices</exception>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.SetAsBox(System.Single,System.Single)">
            <summary>
                Sets the as box using the specified hx
            </summary>
            <param name="hx">The hx</param>
            <param name="hy">The hy</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.SetAsBox(System.Single,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
                Sets the as box using the specified hx
            </summary>
            <param name="hx">The hx</param>
            <param name="hy">The hy</param>
            <param name="center">The center</param>
            <param name="angle">The angle</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeProperties">
            <summary>
                Computes the properties
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.TestPoint(Alis.Core.Physic.Shared.Transform@,System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether this instance ray cast
            </summary>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeAabb(Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Given a transform, compute the associated axis aligned bounding box for a child shape.</summary>
            <param name="transform">The world transform of the shape.</param>
            <param name="childIndex">The child shape index.</param>
            <param name="aabb">The AABB results.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.Shape">
            <summary>
                A shape is used for collision detection. You can create a shape however you like. Shapes used for simulation
                in World are created automatically when a Fixture is created. Shapes may encapsulate a one or more child shapes.
                A shape is 2D geometrical object, such as a circle or polygon.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.Shape.DensityPrivate">
            <summary>
                The density
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.Shape.MassDataPrivate">
            <summary>
                The mass data
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.Shape.RadiusPrivate">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.Shape.ShapeTypePrivate">
            <summary>
                The shape type
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.#ctor(Alis.Core.Physic.Collision.Shapes.ShapeType,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.Shape" /> class
            </summary>
            <param name="type">The type</param>
            <param name="radius">The radius</param>
            <param name="density">The density</param>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.Shape.ShapeType">
            <summary>Get the type of this shape.</summary>
            <value>The type of the shape.</value>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.Shape.ChildCount">
            <summary>Get the number of child primitives.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.Shape.Radius">
            <summary>Radius of the Shape Changing the radius causes a recalculation of shape properties.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.Shape.Density">
            <summary>Gets or sets the density. Changing the density causes a recalculation of shape properties.</summary>
            <value>The density.</value>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.GetMassData(Alis.Core.Physic.Collision.Shapes.MassData@)">
            <summary>
                Contains the properties of the shape such as:
                - Area of the shape
                - Centroid
                - Inertia
                - Mass
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.Clone">
            <summary>Clone the concrete shape</summary>
            <returns>A clone of the shape</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.TestPoint(Alis.Core.Physic.Shared.Transform@,System.Numerics.Vector2@)">
            <summary>Test a point for containment in this shape. Note: This only works for convex shapes.</summary>
            <param name="transform">The shape world transform.</param>
            <param name="point">A point in world coordinates.</param>
            <returns>True if the point is inside the shape</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>Cast a ray against a child shape.</summary>
            <param name="input">The ray-cast input parameters.</param>
            <param name="transform">The transform to be applied to the shape.</param>
            <param name="childIndex">The child shape index.</param>
            <param name="output">The ray-cast results.</param>
            <returns>True if the ray-cast hits the shape</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.ComputeAabb(Alis.Core.Physic.Shared.Transform@,System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Given a transform, compute the associated axis aligned bounding box for a child shape.</summary>
            <param name="transform">The world transform of the shape.</param>
            <param name="childIndex">The child shape index.</param>
            <param name="aabb">The AABB results.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.Shape.ComputeProperties">
            <summary>
                Compute the mass properties of this shape using its dimensions and density. The inertia tensor is computed
                about the local origin, not the centroid.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.ShapeType">
            <summary>
                The shape type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.Unknown">
            <summary>
                The unknown shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.Circle">
            <summary>
                The circle shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.Edge">
            <summary>
                The edge shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.Polygon">
            <summary>
                The polygon shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.Chain">
            <summary>
                The chain shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.TypeCount">
            <summary>
                The type count shape type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TestPointHelper">
            <summary>
                The test point helper class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TestPointHelper.TestPointCircle(System.Numerics.Vector2@,System.Single,System.Numerics.Vector2@,Alis.Core.Physic.Shared.Transform@)">
            <summary>
                Describes whether test point circle
            </summary>
            <param name="pos">The pos</param>
            <param name="radius">The radius</param>
            <param name="point">The point</param>
            <param name="transform">The transform</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TestPointHelper.TestPointPolygon(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices,System.Numerics.Vector2@,Alis.Core.Physic.Shared.Transform@)">
            <summary>
                Describes whether test point polygon
            </summary>
            <param name="vertices">The vertices</param>
            <param name="normals">The normals</param>
            <param name="point">The point</param>
            <param name="transform">The transform</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.SeparationFunction">
            <summary>
                The separation function class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.SeparationFunction.Initialize(Alis.Core.Physic.Collision.Narrowphase.SimplexCache@,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,System.Single,System.Numerics.Vector2@,System.Numerics.Vector2@,Alis.Core.Physic.Collision.TOI.SeparationFunctionType@)">
            <summary>
                Initializes the cache
            </summary>
            <param name="cache">The cache</param>
            <param name="proxyA">The proxy</param>
            <param name="sweepA">The sweep</param>
            <param name="proxyB">The proxy</param>
            <param name="sweepB">The sweep</param>
            <param name="t1">The </param>
            <param name="axis">The axis</param>
            <param name="localPoint">The local point</param>
            <param name="type">The type</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.SeparationFunction.FindMinSeparation(System.Int32@,System.Int32@,System.Single,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,System.Numerics.Vector2@,System.Numerics.Vector2@,Alis.Core.Physic.Collision.TOI.SeparationFunctionType)">
            <summary>
                Finds the min separation using the specified index a
            </summary>
            <param name="indexA">The index</param>
            <param name="indexB">The index</param>
            <param name="t">The </param>
            <param name="proxyA">The proxy</param>
            <param name="sweepA">The sweep</param>
            <param name="proxyB">The proxy</param>
            <param name="sweepB">The sweep</param>
            <param name="axis">The axis</param>
            <param name="localPoint">The local point</param>
            <param name="type">The type</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.SeparationFunction.Evaluate(System.Int32,System.Int32,System.Single,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,System.Numerics.Vector2@,System.Numerics.Vector2@,Alis.Core.Physic.Collision.TOI.SeparationFunctionType)">
            <summary>
                Evaluates the index a
            </summary>
            <param name="indexA">The index</param>
            <param name="indexB">The index</param>
            <param name="t">The </param>
            <param name="proxyA">The proxy</param>
            <param name="sweepA">The sweep</param>
            <param name="proxyB">The proxy</param>
            <param name="sweepB">The sweep</param>
            <param name="axis">The axis</param>
            <param name="localPoint">The local point</param>
            <param name="type">The type</param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.SeparationFunctionType">
            <summary>
                The separation function type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.SeparationFunctionType.Points">
            <summary>
                The points separation function type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.SeparationFunctionType.FaceA">
            <summary>
                The face separation function type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.SeparationFunctionType.FaceB">
            <summary>
                The face separation function type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.Sweep">
            <summary>
                This describes the motion of a body/shape for TOI computation. Shapes are defined with respect to the body
                origin, which may no coincide with the center of mass. However, to support dynamics we must interpolate the center
                of
                mass position.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.A">
            <summary>World angles</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.A0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.Alpha0">
            <summary>Fraction of the current time step in the range [0,1] c0 and a0 are the positions at alpha0.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.C">
            <summary>Center world positions</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.C0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.LocalCenter">
            <summary>Local center of mass position</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.Sweep.GetTransform(Alis.Core.Physic.Shared.Transform@,System.Single)">
            <summary>Get the interpolated transform at a specific time.</summary>
            <param name="xfb">The transform.</param>
            <param name="beta">beta is a factor in [0,1], where 0 indicates alpha0.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.Sweep.Advance(System.Single)">
            <summary>Advance the sweep forward, yielding a new initial state.</summary>
            <param name="alpha">new initial time</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.Sweep.Normalize">
            <summary>Normalize the angles.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.TimeOfImpact">
            <summary>
                The time of impact class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ToiCalls">
            <summary>
                The toi max iters
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ToiIters">
            <summary>
                The toi max iters
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ToiMaxIters">
            <summary>
                The toi max iters
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ToiRootIters">
            <summary>
                The toi max root iters
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ToiMaxRootIters">
            <summary>
                The toi max root iters
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.TimeOfImpact.CalculateTimeOfImpact(Alis.Core.Physic.Collision.TOI.ToiInput@,Alis.Core.Physic.Collision.TOI.ToiOutput@)">
            <summary>
                Compute the upper bound on time before two shapes penetrate. Time is represented as a fraction between
                [0,tMax]. This uses a swept separating axis and may miss some intermediate, non-tunneling collision. If you change
                the
                time interval, you should call this function again. Note: use Distance() to compute the contact point and normal at
                the
                time of impact.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.ToiInput">
            <summary>Input parameters for CalculateTimeOfImpact</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiInput.ProxyA">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiInput.ProxyB">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiInput.SweepA">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiInput.SweepB">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiInput.Max">
            <summary>
                The max
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.ToiOutput">
            <summary>
                The toi output
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutput.State">
            <summary>
                The state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutput.T">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.ToiOutputState">
            <summary>
                The toi output state enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutputState.Unknown">
            <summary>
                The unknown toi output state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutputState.Failed">
            <summary>
                The failed toi output state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutputState.Overlapped">
            <summary>
                The overlapped toi output state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutputState.Touching">
            <summary>
                The touching toi output state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutputState.Seperated">
            <summary>
                The seperated toi output state
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Config.Settings">
            <summary>
                The settings class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MaxManifoldPoints">
            <summary>The maximum number of contact points between two convex shapes. DO NOT CHANGE THIS VALUE!</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.EnableSubStepping">
            <summary>Enable or disable sub stepping. Used for debugging.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.BlockSolve">
            <summary>Enable or disable the block contact solver. Used for debugging.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.SkipSanityChecks">
            <summary>
                Set this to true to skip sanity checks in the engine. This will speed up the tools by removing the overhead of
                the checks, but you will need to handle checks yourself where it is needed.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.UseConvexHullPolygons">
            <summary>
                If true, it will run a GiftWrap convex hull on all polygon inputs. This makes for a more stable engine when
                given random input, but if speed of the creation of polygons are more important, you might want to set this to
                false.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.UseFpeCollisionCategories">
            <summary>
                Velcro Physics has a different way of filtering fixtures than Box2d. We have both FPE and Box2D filtering in
                the engine. If you are upgrading from earlier versions of FPE, set this to true and
                DefaultFixtureCollisionCategories
                to Category.All.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.DefaultFixtureCollisionCategories">
            <summary>
                This is used by the Fixture constructor as the default value for Fixture.CollisionCategories member. Note that
                you may need to change this depending on the setting of UseFPECollisionCategories, above.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.DefaultFixtureCollidesWith">
            <summary>This is used by the Fixture constructor as the default value for Fixture.CollidesWith member.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.DefaultFixtureIgnoreCcdWith">
            <summary>This is used by the Fixture constructor as the default value for Fixture.IgnoreCCDWith member.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.DefaultCollisionGroup">
            <summary>
                Set the default collision group
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MaxGjkIterations">
            <summary>Defines the maximum number of iterations made by the GJK algorithm.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AabbExtension">
            <summary>
                This is used to fatten AABBs in the dynamic tree. This allows proxies to move by a small amount without
                triggering a tree adjustment. This is in meters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AabbMultiplier">
            <summary>
                This is used to fatten AABBs in the dynamic tree. This is used to predict the future position based on the
                current displacement. This is a dimensionless multiplier.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.LinearSlop">
            <summary>
                A small length used as a collision and constraint tolerance. Usually it is chosen to be numerically
                significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AngularSlop">
            <summary>
                A small angle used as a collision and constraint tolerance. Usually it is chosen to be numerically
                significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MaxSubSteps">
            <summary>Maximum number of sub-steps per contact in continuous physics simulation.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MaxToiContacts">
            <summary>Maximum number of contacts to be handled to solve a TOI impact.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MaxLinearCorrection">
            <summary>The maximum linear position correction used when solving constraints. This helps to prevent overshoot.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MaxAngularCorrection">
            <summary>The maximum angular position correction used when solving constraints. This helps to prevent overshoot.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MaxTranslation">
            <summary>
                The maximum linear velocity of a body. This limit is very large and is used to prevent numerical problems. You
                shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MaxRotation">
            <summary>
                The maximum angular velocity of a body. This limit is very large and is used to prevent numerical problems.
                You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.Baumgarte">
            <summary>
                This scale factor controls how fast overlap is resolved. Ideally this would be 1 so that overlap is removed in
                one time step. However using values close to 1 often lead to overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.ToiBaumgarte">
            <summary>
                The toi baumgarte
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.TimeToSleep">
            <summary>The time that a body must be still before it will go to sleep.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.LinearSleepTolerance">
            <summary>A body cannot sleep if its linear velocity is above this tolerance.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AngularSleepTolerance">
            <summary>A body cannot sleep if its angular velocity is above this tolerance.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AutoClearForces">
            <summary>
                By default, forces are cleared automatically after each call to Step. The default behavior is modified with
                this setting. The purpose of this setting is to support sub-stepping. Sub-stepping is often used to maintain a
                fixed
                sized time step under a variable frame-rate. When you perform sub-stepping you should disable auto clearing of
                forces
                and instead call ClearForces after all sub-steps are complete in one pass of your game loop.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MaxPolygonVertices">
            <summary>The maximum number of vertices on a convex polygon.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.PolygonRadius">
            <summary>
                The radius of the polygon/edge shape skin. This should not be modified. Making this smaller means polygons
                will have an insufficient buffer for continuous collision. Making it larger may create artifacts for vertex
                collision.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MixFriction">
            <summary>
                Gets called when there is a collision between 2 fixtures. The first two parameters are the friction values of
                either fixture. The return value should be the desired friction value of the collection.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MixRestitution">
            <summary>
                Gets called when there is a collision between 2 fixtures. The first two parameters are the restitution values
                of either fixture. The return value should be the desired restitution value of the collection.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MixRestitutionThreshold">
            <summary>
                The default mix restitution threshold
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Config.Settings.DefaultMixFriction(System.Single,System.Single)">
            <summary>
                Friction mixing law. The idea is to allow either fixture to drive the friction to zero. For example, anything
                slides on ice.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Config.Settings.DefaultMixRestitution(System.Single,System.Single)">
            <summary>
                Restitution mixing law. The idea is allow for anything to bounce off an inelastic surface. For example, a
                superball bounces on anything.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Config.Settings.DefaultMixRestitutionThreshold(System.Single,System.Single)">
            <summary>Restitution mixing law. This picks the lowest value.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.BodyDef">
            <summary>
                The body def class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Definitions.IDef" />
        </member>
        <member name="M:Alis.Core.Physic.Definitions.BodyDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.BodyDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.Awake">
            <summary>Is this body initially awake or sleeping?</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.Enabled">
            <summary>Does this body start out active?</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.IsBullet">
            <summary>
                Is this a fast moving body that should be prevented from tunneling through other moving bodies? Note that all
                bodies are prevented from tunneling through kinematic and static bodies. This setting is only considered on dynamic
                bodies.
                <remarks>Warning: You should use this flag sparingly since it increases processing time.</remarks>
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.AllowSleep">
            <summary>
                Set this flag to false if this body should never fall asleep.
                <remarks>Note: Setting this to false increases CPU usage.</remarks>
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.Angle">
            <summary>The world angle of the body in radians.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.AngularDamping">
            <summary>
                Angular damping is use to reduce the angular velocity. The damping parameter can be larger than 1.0f but the
                damping effect becomes sensitive to the time step when the damping parameter is large.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.AngularVelocity">
            <summary>The angular velocity of the body.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.GravityScale">
            <summary>Scale the gravity applied to this body.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.LinearDamping">
            <summary>
                Linear damping is use to reduce the linear velocity. The damping parameter can be larger than 1.0f but the
                damping effect becomes sensitive to the time step when the damping parameter is large.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.LinearVelocity">
            <summary>The linear velocity of the body's origin in world co-ordinates.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.Position">
            <summary>The world position of the body.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.Type">
            <summary>
                Set the type of body
                <remarks>Note: if a dynamic body would have zero mass, the mass is set to one.</remarks>
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.UserData">
            <summary>Use this to store application specific body data.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.BodyDef.FixedRotation">
            <summary>Should this body be prevented from rotating? Useful for characters.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.BodyDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.FixtureDef">
            <summary>
                The fixture def class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Definitions.IDef" />
        </member>
        <member name="M:Alis.Core.Physic.Definitions.FixtureDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.FixtureDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.FixtureDef.Filter">
            <summary>Contact filtering data.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.FixtureDef.Friction">
            <summary>The friction coefficient, usually in the range [0,1].</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.FixtureDef.IsSensor">
            <summary>A sensor shape collects contact information but never generates a collision response.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.FixtureDef.Restitution">
            <summary>The restitution (elasticity) usually in the range [0,1].</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.FixtureDef.RestitutionThreshold">
            <summary>
                Restitution velocity threshold, usually in m/s. Collisions above this speed have restitution applied (will bounce).
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.FixtureDef.Shape">
            <summary>The shape, this must be set. The shape will be cloned, so you can create the shape on the stack.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.FixtureDef.UserData">
            <summary>Use this to store application specific fixture data.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.FixtureDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.IDef">
            <summary>
                The def interface
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.IDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.DistanceJointDef">
            <summary>
                Distance joint definition. This requires defining an anchor point on both bodies and the non-zero length of
                the distance joint. The definition uses local anchor points so that the initial configuration can violate the
                constraint slightly. This helps when saving and loading a game.
                <remarks>Do not use a zero or a short length.</remarks>
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.DistanceJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.DistanceJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.DistanceJointDef.Damping">
            <summary>The linear damping in N*s/m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.DistanceJointDef.Stiffness">
            <summary>The linear stiffness in N/m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.DistanceJointDef.Length">
            <summary>The rest length of this joint. Clamped to a stable minimum value.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.DistanceJointDef.MinLength">
            <summary>Minimum length. Clamped to a stable minimum value.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.DistanceJointDef.MaxLength">
            <summary>Maximum length. Must be greater than or equal to the minimum length.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.DistanceJointDef.LocalAnchorA">
            <summary>The local anchor point relative to bodyA's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.DistanceJointDef.LocalAnchorB">
            <summary>The local anchor point relative to bodyB's origin.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.DistanceJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Initializes the b 1
            </summary>
            <param name="b1">The </param>
            <param name="b2">The </param>
            <param name="anchor1">The anchor</param>
            <param name="anchor2">The anchor</param>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.DistanceJointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.FixedMouseJointDef">
            <summary>Mouse joint definition. This requires a world target point, tuning parameters, and the time step.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.FixedMouseJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.FixedMouseJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.FixedMouseJointDef.Damping">
            <summary>The linear damping in N*s/m</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.FixedMouseJointDef.Stiffness">
            <summary>The linear stiffness in N/m</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.FixedMouseJointDef.MaxForce">
            <summary>
                The maximum constraint force that can be exerted to move the candidate body. Usually you will express as some
                multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.FixedMouseJointDef.Target">
            <summary>The initial world target point. This is assumed to coincide with the body anchor initially.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.FixedMouseJointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.FrictionJointDef">
            <summary>
                The friction joint def class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Definitions.Joints.JointDef" />
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.FrictionJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.FrictionJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.FrictionJointDef.LocalAnchorA">
            <summary>The local anchor point relative to bodyA's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.FrictionJointDef.LocalAnchorB">
            <summary>The local anchor point relative to bodyB's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.FrictionJointDef.MaxForce">
            <summary>The maximum friction force in N.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.FrictionJointDef.MaxTorque">
            <summary>The maximum friction torque in N-m.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.FrictionJointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.GearJointDef">
            <summary>
                The gear joint def class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Definitions.Joints.JointDef" />
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.GearJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.GearJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.GearJointDef.JointA">
            <summary>The first revolute/prismatic joint attached to the gear joint.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.GearJointDef.JointB">
            <summary>The second revolute/prismatic joint attached to the gear joint.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.GearJointDef.Ratio">
            <summary>The gear ratio.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.GearJointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.JointDef">
            <summary>
                The joint def class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Definitions.IDef" />
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.JointDef.#ctor(Alis.Core.Physic.Dynamics.Joints.Misc.JointType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.JointDef" /> class
            </summary>
            <param name="type">The type</param>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.JointDef.BodyA">
            <summary>The first attached body.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.JointDef.BodyB">
            <summary>The second attached body.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.JointDef.CollideConnected">
            <summary>Set this flag to true if the attached bodies should collide.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.JointDef.Type">
            <summary>The joint type is set automatically for concrete joint types.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.JointDef.UserData">
            <summary>Use this to attach application specific data.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.JointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.MotorJointDef">
            <summary>
                The motor joint def class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Definitions.Joints.JointDef" />
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.MotorJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.MotorJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.MotorJointDef.AngularOffset">
            <summary>The bodyB angle minus bodyA angle in radians.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.MotorJointDef.CorrectionFactor">
            <summary>Position correction factor in the range [0,1].</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.MotorJointDef.LinearOffset">
            <summary>Position of bodyB minus the position of bodyA, in bodyA's frame, in meters.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.MotorJointDef.MaxForce">
            <summary>The maximum motor force in N.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.MotorJointDef.MaxTorque">
            <summary>The maximum motor torque in N-m.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.MotorJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Initializes the b a
            </summary>
            <param name="bA">The </param>
            <param name="bB">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.MotorJointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef">
            <summary>
                Prismatic joint definition. This requires defining a line of motion using an axis and an anchor point. The
                definition uses local anchor points and a local axis so that the initial configuration can violate the constraint
                slightly. The joint translation is zero when the local anchor points coincide in world space. Using local anchors
                and a
                local axis helps when saving and loading a game.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.EnableLimit">
            <summary>Enable/disable the joint limit.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.EnableMotor">
            <summary>Enable/disable the joint motor.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.LocalAnchorA">
            <summary>The local anchor point relative to bodyA's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.LocalAnchorB">
            <summary>The local anchor point relative to bodyB's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.LocalAxisA">
            <summary>The local translation unit axis in bodyA.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.LowerTranslation">
            <summary>The lower translation limit, usually in meters.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.MaxMotorForce">
            <summary>The maximum motor torque, usually in N-m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.MotorSpeed">
            <summary>The desired motor speed in radians per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.ReferenceAngle">
            <summary>The constrained angle between the bodies: bodyB_angle - bodyA_angle.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.UpperTranslation">
            <summary>The upper translation limit, usually in meters.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Initializes the b a
            </summary>
            <param name="bA">The </param>
            <param name="bB">The </param>
            <param name="anchor">The anchor</param>
            <param name="axis">The axis</param>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.PrismaticJointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.PulleyJointDef">
            <summary>Pulley joint definition. This requires two ground anchors, two dynamic body anchor points, and a pulley ratio.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.PulleyJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.PulleyJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PulleyJointDef.GroundAnchorA">
            <summary>The first ground anchor in world coordinates. This point never moves.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PulleyJointDef.GroundAnchorB">
            <summary>The second ground anchor in world coordinates. This point never moves.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PulleyJointDef.LengthA">
            <summary>The a reference length for the segment attached to bodyA.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PulleyJointDef.LengthB">
            <summary>The a reference length for the segment attached to bodyB.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PulleyJointDef.LocalAnchorA">
            <summary>The local anchor point relative to bodyA's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PulleyJointDef.LocalAnchorB">
            <summary>The local anchor point relative to bodyB's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.PulleyJointDef.Ratio">
            <summary>The pulley ratio, used to simulate a block-and-tackle.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.PulleyJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
                Initializes the b a
            </summary>
            <param name="bA">The </param>
            <param name="bB">The </param>
            <param name="groundA">The ground</param>
            <param name="groundB">The ground</param>
            <param name="anchorA">The anchor</param>
            <param name="anchorB">The anchor</param>
            <param name="r">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.PulleyJointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef">
            <summary>
                Revolute joint definition. This requires defining an anchor point where the bodies are joined. The definition
                uses local anchor points so that the initial configuration can violate the constraint slightly. You also need to
                specify the initial relative angle for joint limits. This helps when saving and loading a game. The local anchor
                points
                are measured from the body's origin rather than the center of mass because: 1. you might not know where the center
                of
                mass will be. 2. if you add/remove shapes from a body and recompute the mass, the joints will be broken.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.EnableLimit">
            <summary>A flag to enable joint limits.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.EnableMotor">
            <summary>A flag to enable the joint motor.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.LocalAnchorA">
            <summary>The local anchor point relative to bodyA's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.LocalAnchorB">
            <summary>The local anchor point relative to bodyB's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.LowerAngle">
            <summary>The lower angle for the joint limit (radians).</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.MaxMotorTorque">
            <summary>The maximum motor torque used to achieve the desired motor speed. Usually in N-m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.MotorSpeed">
            <summary>The desired motor speed. Usually in radians per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.ReferenceAngle">
            <summary>The bodyB angle minus bodyA angle in the reference state (radians).</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.UpperAngle">
            <summary>The upper angle for the joint limit (radians).</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2)">
            <summary>
                Initializes the b a
            </summary>
            <param name="bA">The </param>
            <param name="bB">The </param>
            <param name="anchor">The anchor</param>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.RevoluteJointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.WeldJointDef">
            <summary>
                Weld joint definition. You need to specify local anchor points where they are attached and the relative body
                angle. The position of the anchor points is important for computing the reaction torque.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.WeldJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.WeldJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WeldJointDef.Damping">
            <summary>The rotational damping in N*m*s</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WeldJointDef.Stiffness">
            <summary>The rotational stiffness in N*m. Disable softness with a value of 0</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WeldJointDef.LocalAnchorA">
            <summary>The local anchor point relative to bodyA's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WeldJointDef.LocalAnchorB">
            <summary>The local anchor point relative to bodyB's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WeldJointDef.ReferenceAngle">
            <summary>The bodyB angle minus bodyA angle in the reference state (radians).</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.WeldJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2)">
            <summary>
                Initializes the b a
            </summary>
            <param name="bA">The </param>
            <param name="bB">The </param>
            <param name="anchor">The anchor</param>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.WeldJointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Joints.WheelJointDef">
            <summary>
                Wheel joint definition. This requires defining a line of motion using an axis and an anchor point. The
                definition uses local anchor points and a local axis so that the initial configuration can violate the constraint
                slightly. The joint translation is zero when the local anchor points coincide in world space. Using local anchors
                and a
                local axis helps when saving and loading a game.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.WheelJointDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Joints.WheelJointDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.EnableMotor">
            <summary>Enable/disable the joint motor.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.LocalAnchorA">
            <summary>The local anchor point relative to bodyA's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.LocalAnchorB">
            <summary>The local anchor point relative to bodyB's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.LocalAxisA">
            <summary>The local translation axis in bodyA.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.MaxMotorTorque">
            <summary>The maximum motor torque, usually in N-m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.MotorSpeed">
            <summary>The desired motor speed in radians per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.Damping">
            <summary>Suspension damping. Typically in units of N*s/m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.Stiffness">
            <summary>Suspension stiffness. Typically in units N/m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.EnableLimit">
            <summary>Enable/disable the joint limit.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.UpperTranslation">
            <summary>The upper translation limit, usually in meters.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Joints.WheelJointDef.LowerTranslation">
            <summary>The lower translation limit, usually in meters.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.WheelJointDef.Initialize(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Initializes the b a
            </summary>
            <param name="bA">The </param>
            <param name="bB">The </param>
            <param name="anchor">The anchor</param>
            <param name="axis">The axis</param>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Joints.WheelJointDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Shapes.ChainShapeDef">
            <summary>
                A chain shape is a free form sequence of line segments. The chain has two-sided collision, so you can use
                inside and outside collision. Therefore, you may use any winding order. Connectivity information is used to create
                smooth collisions.
                <remarks>WARNING: The chain will not collide properly if there are self-intersections.</remarks>
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Shapes.ChainShapeDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Shapes.ChainShapeDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.ChainShapeDef.NextVertex">
            <summary>
                Establish connectivity to a vertex that follows the last vertex.
                <remarks>Don't call this for loops.</remarks>
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.ChainShapeDef.PrevVertex">
            <summary>
                Establish connectivity to a vertex that precedes the first vertex.
                <remarks>Don't call this for loops.</remarks>
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.ChainShapeDef.Vertices">
            <summary>The vertices. These are not owned/freed by the chain Shape.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Shapes.ChainShapeDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Shapes.CircleShapeDef">
            <summary>
                The circle shape def class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Definitions.Shapes.ShapeDef" />
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Shapes.CircleShapeDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Shapes.CircleShapeDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.CircleShapeDef.Position">
            <summary>Get or set the position of the circle</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Shapes.CircleShapeDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Shapes.EdgeShapeDef">
            <summary>
                A line segment (edge) shape. These can be connected in chains or loops to other edge shapes. The connectivity
                information is used to ensure correct contact normals.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Shapes.EdgeShapeDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Shapes.EdgeShapeDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.EdgeShapeDef.HasVertex0">
            <summary>Is true if the edge is connected to an adjacent vertex before vertex 1.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.EdgeShapeDef.HasVertex3">
            <summary>Is true if the edge is connected to an adjacent vertex after vertex2.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.EdgeShapeDef.Vertex0">
            <summary>Optional adjacent vertices. These are used for smooth collision.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.EdgeShapeDef.Vertex1">
            <summary>These are the edge vertices</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.EdgeShapeDef.Vertex2">
            <summary>These are the edge vertices</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.EdgeShapeDef.Vertex3">
            <summary>Optional adjacent vertices. These are used for smooth collision.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Shapes.EdgeShapeDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Shapes.PolygonShapeDef">
            <summary>
                The polygon shape def class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Definitions.Shapes.ShapeDef" />
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Shapes.PolygonShapeDef.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Shapes.PolygonShapeDef" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.PolygonShapeDef.Vertices">
            <summary>
                Gets or sets the value of the vertices
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Shapes.PolygonShapeDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Definitions.Shapes.ShapeDef">
            <summary>
                The shape def class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Definitions.IDef" />
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Shapes.ShapeDef.#ctor(Alis.Core.Physic.Collision.Shapes.ShapeType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Definitions.Shapes.ShapeDef" /> class
            </summary>
            <param name="type">The type</param>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.ShapeDef.Density">
            <summary>Gets or sets the density.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.ShapeDef.Radius">
            <summary>Radius of the Shape</summary>
        </member>
        <member name="P:Alis.Core.Physic.Definitions.Shapes.ShapeDef.ShapeType">
            <summary>Get the type of this shape.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Definitions.Shapes.ShapeDef.SetDefaults">
            <summary>
                Sets the defaults
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Body">
            <summary>
                The body class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.angularDamping">
            <summary>
                The angular damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.angularVelocity">
            <summary>
                The angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.inertia">
            <summary>
                The inertia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.linearDamp">
            <summary>
                The linear damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.linearVelc">
            <summary>
                The linear velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.OnCollision">
            <summary>
                Fires when two shapes collide and a contact is created between them. Note that the first fixture argument is
                always the fixture that the delegate is subscribed to.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.OnSeparation">
            <summary>
                Fires when two shapes separate and a contact is removed between them. Note: This can in some cases be called
                multiple times, as a fixture can have multiple contacts. Note The first fixture argument is always the fixture that
                the
                delegate is subscribed to.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.World">
            <summary>
                The world
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Xf">
            <summary>
                The xf
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.#ctor(Alis.Core.Physic.Definitions.BodyDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Body" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Flags">
            <summary>
                The flags
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Force">
            <summary>
                The force
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.InvI">
            <summary>
                The inv
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.InvMass">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Sweep">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Torque">
            <summary>
                The torque
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.ControllerFilter">
            <summary>
                Gets or sets the value of the controller filter
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.PhysicsLogicFilter">
            <summary>
                Gets or sets the value of the physics logic filter
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.SleepTime">
            <summary>
                Gets or sets the value of the sleep time
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IslandIndex">
            <summary>
                Gets or sets the value of the island index
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.GravityScale">
            <summary>
                Scale the gravity applied to this body. Defaults to 1. A value of 2 means double the gravity is applied to
                this body.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.UserData">
            <summary>Set the user data. Use this to store your application specific data.</summary>
            <value>The user data.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Revolutions">
            <summary>Gets the total number revolutions the body has made.</summary>
            <value>The revolutions.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.BodyType">
            <summary>Gets or sets the body type. Warning: Calling this mid-update might cause a crash.</summary>
            <value>The type of body.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.LinearVelocity">
            <summary>Get or sets the linear velocity of the center of mass.</summary>
            <value>The linear velocity.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.AngularVelocity">
            <summary>Gets or sets the angular velocity. Radians/second.</summary>
            <value>The angular velocity.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.LinearDamping">
            <summary>Gets or sets the linear damping.</summary>
            <value>The linear damping.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.AngularDamping">
            <summary>Gets or sets the angular damping.</summary>
            <value>The angular damping.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsBullet">
            <summary>Gets or sets a value indicating whether this body should be included in the CCD solver.</summary>
            <value><c>true</c> if this instance is included in CCD; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.SleepingAllowed">
            <summary>You can disable sleeping on this body. If you disable sleeping, the body will be woken.</summary>
            <value><c>true</c> if sleeping is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Awake">
            <summary>Set the sleep state of the body. A sleeping body has very low CPU cost.</summary>
            <value><c>true</c> if awake; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Enabled">
            <summary>
                Set the active state of the body. An inactive body is not simulated and cannot be collided with or woken up.
                If you pass a flag of true, all fixtures will be added to the broad-phase. If you pass a flag of false, all
                fixtures
                will be removed from the broad-phase and all contacts will be destroyed. Fixtures and joints are otherwise
                unaffected.
                You may continue to create/destroy fixtures and joints on inactive bodies. Fixtures on an inactive body are
                implicitly
                inactive and will not participate in collisions, ray-casts, or queries. Joints connected to an inactive body are
                implicitly inactive. An inactive body is still owned by a b2World object and remains in the body list.
            </summary>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.FixedRotation">
            <summary>Set this body to have fixed rotation. This causes the mass to be reset.</summary>
            <value><c>true</c> if it has fixed rotation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.FixtureList">
            <summary>Gets all the fixtures attached to this body.</summary>
            <value>The fixture list.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.JointList">
            <summary>Get the list of all joints attached to this body.</summary>
            <value>The joint list.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.ContactList">
            <summary>
                Get the list of all contacts attached to this body. Warning: this list changes during the time step and you
                may miss some collisions if you don't use ContactListener.
            </summary>
            <value>The contact list.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Position">
            <summary>Get the world body origin position.</summary>
            <returns>Return the world position of the body's origin.</returns>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Rotation">
            <summary>Get the angle in radians.</summary>
            <returns>Return the current world rotation angle in radians.</returns>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsIsland">
            <summary>
                Gets the value of the is island
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsStatic">
            <summary>
                Gets the value of the is static
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsKinematic">
            <summary>
                Gets the value of the is kinematic
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsDynamic">
            <summary>
                Gets the value of the is dynamic
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.WorldCenter">
            <summary>Get the world position of the center of mass.</summary>
            <value>The world position.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.LocalCenter">
            <summary>Get the local position of the center of mass.</summary>
            <value>The local position.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Mass">
            <summary>Gets or sets the mass. Usually in kilograms (kg).</summary>
            <value>The mass.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Inertia">
            <summary>Get or set the rotational inertia of the body about the local origin. usually in kg-m^2.</summary>
            <value>The inertia.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Restitution">
            <summary>
                Sets the value of the restitution
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Friction">
            <summary>
                Sets the value of the friction
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.CollisionCategories">
            <summary>
                Sets the value of the collision categories
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.CollidesWith">
            <summary>
                Sets the value of the collides with
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IgnoreCcdWith">
            <summary>
                Body objects can define which categories of bodies they wish to ignore CCD with. This allows certain bodies to
                be configured to ignore CCD with objects that aren't a penetration problem due to the way content has been
                prepared.
                This is compared against the other Body's fixture CollisionCategories within World.SolveTOI().
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.CollisionGroup">
            <summary>
                Sets the value of the collision group
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsSensor">
            <summary>
                Sets the value of the is sensor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IgnoreCcd">
            <summary>
                Gets or sets the value of the ignore ccd
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetMassData(Alis.Core.Physic.Collision.Shapes.MassData@)">
            <summary>
                Gets the mass data using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ResetDynamics">
            <summary>Resets the dynamics of this body. Sets torque, force and linear/angular velocity to 0</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.AddFixture(Alis.Core.Physic.Definitions.FixtureDef)">
            <summary>
                Creates a fixture and attach it to this body. If the density is non-zero, this function automatically updates
                the mass of the body. Contacts are not created until the next time step. Warning: This function is locked during
                callbacks.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.AddFixture(Alis.Core.Physic.Collision.Shapes.Shape)">
            <summary>
                Creates a fixture and attach it to this body. If the density is non-zero, this function automatically updates
                the mass of the body. Contacts are not created until the next time step. Warning: This function is locked during
                callbacks.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.RemoveFixture(Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Destroy a fixture. This removes the fixture from the broad-phase and destroys all contacts associated with
                this fixture. This will automatically adjust the mass of the body if the body is dynamic and the fixture has
                positive
                density. All fixtures attached to a body are implicitly destroyed when the body is destroyed. Warning: This
                function is
                locked during callbacks.
            </summary>
            <param name="fixture">The fixture to be removed.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetTransform(System.Numerics.Vector2,System.Single)">
            <summary>
                Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies.
                Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="position">The world position of the body's local origin.</param>
            <param name="rotation">The world rotation in radians.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetTransform(System.Numerics.Vector2@,System.Single)">
            <summary>
                Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies.
                Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="position">The world position of the body's local origin.</param>
            <param name="rotation">The world rotation in radians.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetTransform(Alis.Core.Physic.Shared.Transform@)">
            <summary>Get the body transform for the body's origin.</summary>
            <param name="transform">The transform of the body's origin.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyForce(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque
                and affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyForce(System.Numerics.Vector2@)">
            <summary>Applies a force at the center of mass.</summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyForce(System.Numerics.Vector2)">
            <summary>Applies a force at the center of mass.</summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyForce(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque
                and affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyTorque(System.Single)">
            <summary>Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass.</summary>
            <param name="torque">The torque about the z-axis (out of the screen), usually in N-m.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyLinearImpulse(System.Numerics.Vector2)">
            <summary>Apply an impulse at a point. This immediately modifies the velocity. This wakes up the body.</summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyLinearImpulse(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if
                the point of application is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyLinearImpulse(System.Numerics.Vector2@)">
            <summary>Apply an impulse at a point. This immediately modifies the velocity. This wakes up the body.</summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyLinearImpulse(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if
                the point of application is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyAngularImpulse(System.Single)">
            <summary>Apply an angular impulse.</summary>
            <param name="impulse">The angular impulse in units of kg*m*m/s.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ResetMassData">
            <summary>
                This resets the mass properties to the sum of the mass properties of the fixtures. This normally does not need
                to be called unless you called SetMassData to override the mass and you later want to reset the mass.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldPoint(System.Numerics.Vector2@)">
            <summary>Get the world coordinates of a point given the local coordinates.</summary>
            <param name="localPoint">A point on the body measured relative the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldPoint(System.Numerics.Vector2)">
            <summary>Get the world coordinates of a point given the local coordinates.</summary>
            <param name="localPoint">A point on the body measured relative the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldVector(System.Numerics.Vector2@)">
            <summary>
                Get the world coordinates of a vector given the local coordinates. Note that the vector only takes the
                rotation into account, not the position.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldVector(System.Numerics.Vector2)">
            <summary>Get the world coordinates of a vector given the local coordinates.</summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalPoint(System.Numerics.Vector2@)">
            <summary>
                Gets a local point relative to the body's origin given a world point. Note that the vector only takes the
                rotation into account, not the position.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalPoint(System.Numerics.Vector2)">
            <summary>Gets a local point relative to the body's origin given a world point.</summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalVector(System.Numerics.Vector2@)">
            <summary>
                Gets a local vector given a world vector. Note that the vector only takes the rotation into account, not the
                position.
            </summary>
            <param name="worldVector">A vector in world coordinates.</param>
            <returns>The corresponding local vector.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalVector(System.Numerics.Vector2)">
            <summary>
                Gets a local vector given a world vector. Note that the vector only takes the rotation into account, not the
                position.
            </summary>
            <param name="worldVector">A vector in world coordinates.</param>
            <returns>The corresponding local vector.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocityFromWorldPoint(System.Numerics.Vector2)">
            <summary>Get the world linear velocity of a world point attached to this body.</summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocityFromWorldPoint(System.Numerics.Vector2@)">
            <summary>Get the world linear velocity of a world point attached to this body.</summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocityFromLocalPoint(System.Numerics.Vector2)">
            <summary>Get the world velocity of a local point.</summary>
            <param name="localPoint">A point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocityFromLocalPoint(System.Numerics.Vector2@)">
            <summary>Get the world velocity of a local point.</summary>
            <param name="localPoint">A point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.RemoveFromWorld">
            <summary> Calling this will remove the body from its associated world.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SynchronizeFixtures">
            <summary>
                Synchronizes the fixtures
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SynchronizeTransform">
            <summary>
                Synchronizes the transform
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ShouldCollide(Alis.Core.Physic.Dynamics.Body)">
            <summary>This is used to prevent connected bodies from colliding. It may lie, depending on the collideConnected flag.</summary>
            <param name="other">The other body.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.Advance(System.Single)">
            <summary>
                Advances the alpha
            </summary>
            <param name="alpha">The alpha</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BodyFlags">
            <summary>
                The body flags enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.Unknown">
            <summary>
                The unknown body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.IslandFlag">
            <summary>
                The island flag body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.AwakeFlag">
            <summary>
                The awake flag body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.AutoSleepFlag">
            <summary>
                The auto sleep flag body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.BulletFlag">
            <summary>
                The bullet flag body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.FixedRotationFlag">
            <summary>
                The fixed rotation flag body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.Enabled">
            <summary>
                The enabled body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyFlags.IgnoreCcd">
            <summary>
                The ignore ccd body flags
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BodyType">
            <summary>The body type.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyType.Static">
            <summary>Zero velocity, may be manually moved. Note: even static bodies have mass.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyType.Kinematic">
            <summary>Zero mass, non-zero velocity set by user, moved by solver</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyType.Dynamic">
            <summary>Positive mass, non-zero velocity determined by forces, moved by solver</summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BreakableBody">
            <summary>A type of body that supports multiple fixtures that can break apart.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BreakableBody.world">
            <summary>
                The world
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BreakableBody.angularVelocitiesCache">
            <summary>
                The angular velocities cache
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BreakableBody.break">
            <summary>
                The break
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BreakableBody.velocitiesCache">
            <summary>
                The vector
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.#ctor(Alis.Core.Physic.World,System.Collections.Generic.ICollection{Alis.Core.Physic.Shared.Vertices},System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.BreakableBody" /> class
            </summary>
            <param name="world">The world</param>
            <param name="parts">The parts</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.#ctor(Alis.Core.Physic.World,System.Collections.Generic.IEnumerable{Alis.Core.Physic.Collision.Shapes.Shape},System.Numerics.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.BreakableBody" /> class
            </summary>
            <param name="world">The world</param>
            <param name="shapes">The shapes</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.BreakableBody.Strength">
            <summary>The force needed to break the body apart. Default: 500</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.BreakableBody.Broken">
            <summary>
                Gets or sets the value of the broken
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.BreakableBody.MainBody">
            <summary>
                Gets the value of the main body
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.BreakableBody.Parts">
            <summary>
                Gets the value of the parts
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.PostSolve(Alis.Core.Physic.Collision.ContactSystem.Contact,Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint)">
            <summary>
                Posts the solve using the specified contact
            </summary>
            <param name="contact">The contact</param>
            <param name="impulse">The impulse</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.Decompose">
            <summary>
                Decomposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.Break">
            <summary>
                Breaks this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Fixture">
            <summary>
                A fixture is used to attach a Shape to a body for collision detection. A fixture inherits its transform from
                its parent. Fixtures hold additional non-geometric data such as friction, collision filters, etc. Fixtures are
                created
                via Body.CreateFixture. Warning: You cannot reuse fixtures.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.AfterCollision">
            <summary>Fires after two shapes has collided and are solved. This gives you a chance to get the impact force.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.BeforeCollision">
            <summary>
                Fires when two fixtures are close to each other. Due to how the broadphase works, this can be quite inaccurate
                as shapes are approximated using AABBs.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.Bodyprivate">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.CollidesWithprivate">
            <summary>
                The collides with
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.CollisionCategoriesprivate">
            <summary>
                The collision categories
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.CollisionGroupPrivate">
            <summary>
                The collision group
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.Frictionprivate">
            <summary>
                The friction
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.ignoreCcdWith">
            <summary>
                The ignore ccd with
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.IsSensorPrivate">
            <summary>
                The is sensor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.OnCollision">
            <summary>
                Fires when two shapes collide and a contact is created between them. Note that the first fixture argument is
                always the fixture that the delegate is subscribed to.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.OnSeparation">
            <summary>
                Fires when two shapes separate and a contact is removed between them. Note: This can in some cases be called
                multiple times, as a fixture can have multiple contacts. Note The first fixture argument is always the fixture that
                the
                delegate is subscribed to.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.proxies">
            <summary>
                The proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.proxyCount">
            <summary>
                The proxy count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.Restitutionprivate">
            <summary>
                The restitution
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.RestitutionThresholdPrivate">
            <summary>
                The restitution threshold
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.ShapePrivate">
            <summary>
                The shape
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.#ctor(Alis.Core.Physic.Definitions.FixtureDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Fixture" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.IgnoreCcdWith">
            <summary>
                Gets or sets the value of the ignore ccd with
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Proxies">
            <summary>
                Gets the value of the proxies
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.ProxyCount">
            <summary>
                Gets the value of the proxy count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.RestitutionThreshold">
            <summary>Get or set the restitution threshold. This will _not_ change the restitution threshold of existing contacts.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.CollisionGroup">
            <summary>
                Defaults to 0 If Settings.UseFPECollisionCategories is set to false: Collision groups allow a certain group of
                objects to never collide (negative) or always collide (positive). Zero means no collision group. Non-zero group
                filtering always wins against the mask bits. If Settings.UseFPECollisionCategories is set to true: If 2 fixtures
                are in
                the same collision group, they will not collide.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.CollidesWith">
            <summary>
                Defaults to Category.All The collision mask bits. This states the categories that this fixture would accept
                for collision. Use Settings.UseFPECollisionCategories to change the behavior.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.CollisionCategories">
            <summary>
                The collision categories this fixture is a part of. If Settings.UseFPECollisionCategories is set to false:
                Defaults to Category.Cat1 If Settings.UseFPECollisionCategories is set to true: Defaults to Category.All
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Shape">
            <summary>
                Get the child Shape. You can modify the child Shape, however you should not change the number of vertices
                because this will crash some collision caching mechanisms.
            </summary>
            <value>The shape.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.IsSensor">
            <summary>Gets or sets a value indicating whether this fixture is a sensor.</summary>
            <value><c>true</c> if this instance is a sensor; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Body">
            <summary>Get the parent body of this fixture. This is null if the fixture is not attached.</summary>
            <value>The body.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.UserData">
            <summary>Set the user data. Use this to store your application specific data.</summary>
            <value>The user data.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Friction">
            <summary>Set the coefficient of friction. This will _not_ change the friction of existing contacts.</summary>
            <value>The friction.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Restitution">
            <summary>Set the coefficient of restitution. This will not change the restitution of existing contacts.</summary>
            <value>The restitution.</value>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.Refilter">
            <summary>
                Contacts are persistent and will keep being persistent unless they are flagged for filtering. This methods
                flags all contacts associated with the body for filtering.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.TestPoint(System.Numerics.Vector2@)">
            <summary>Test a point for containment in this fixture.</summary>
            <param name="point">A point in world coordinates.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastOutput@,Alis.Core.Physic.Collision.RayCast.RayCastInput@,System.Int32)">
            <summary>Cast a ray against this Shape.</summary>
            <param name="output">The ray-cast results.</param>
            <param name="input">The ray-cast input parameters.</param>
            <param name="childIndex">Index of the child.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.GetAabb(Alis.Core.Physic.Shared.Aabb@,System.Int32)">
            <summary>
                Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a more accurate AABB, compute it
                using the Shape and the body transform.
            </summary>
            <param name="aabb">The AABB.</param>
            <param name="childIndex">Index of the child.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.Destroy">
            <summary>
                Destroys this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.CreateProxies(Alis.Core.Physic.Collision.Broadphase.IBroadPhase,Alis.Core.Physic.Shared.Transform@)">
            <summary>
                Creates the proxies using the specified broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="xf">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.DestroyProxies(Alis.Core.Physic.Collision.Broadphase.IBroadPhase)">
            <summary>
                Destroys the proxies using the specified broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.Synchronize(Alis.Core.Physic.Collision.Broadphase.IBroadPhase,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Shared.Transform@)">
            <summary>
                Synchronizes the broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="transform1">The transform</param>
            <param name="transform2">The transform</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.FixtureProxy">
            <summary>This proxy is used internally to connect fixtures to the broad-phase.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureProxy.Aabb">
            <summary>
                The aabb
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureProxy.ChildIndex">
            <summary>
                The child index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureProxy.Fixture">
            <summary>
                The fixture
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureProxy.ProxyId">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.BodyHandler">
            <summary>
                The body handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.ControllerHandler">
            <summary>
                The controller handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.FixtureHandler">
            <summary>
                The fixture handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.JointHandler">
            <summary>
                The joint handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.PostSolveHandler">
            <summary>
                The post solve handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.PreSolveHandler">
            <summary>
                The pre solve handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.AngleJoint">
            <summary>Maintains a fixed angle between two bodies</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.bias">
            <summary>
                The bias
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.biasFactor">
            <summary>
                The bias factor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.jointError">
            <summary>
                The joint error
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.massFactor">
            <summary>
                The mass factor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.maxImpulse">
            <summary>
                The max impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.softness">
            <summary>
                The softness
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.targetAngle">
            <summary>
                The target angle
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.AngleJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.TargetAngle">
            <summary>The desired angle between BodyA and BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.BiasFactor">
            <summary>Gets or sets the bias factor. Defaults to 0.2</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.MaxImpulse">
            <summary>Gets or sets the maximum impulse. Defaults to float.MaxValue</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.Softness">
            <summary>Gets or sets the softness of the joint. Defaults to 0</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.DistanceJoint">
            <summary>
                A distance joint constrains two points on two bodies to remain at a fixed distance from each other. You can
                view this as a massless, rigid rod.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.bias">
            <summary>
                The bias
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.currentLength">
            <summary>
                The current length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.damping">
            <summary>
                The damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.length">
            <summary>
                The length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.lowerImpulse">
            <summary>
                The lower impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.maxLength">
            <summary>
                The max length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.minLength">
            <summary>
                The min length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.softMass">
            <summary>
                The soft mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.stiffness">
            <summary>
                The stiffness
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.u">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.upperImpulse">
            <summary>
                The upper impulse
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.#ctor(Alis.Core.Physic.Definitions.Joints.DistanceJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.DistanceJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
                This requires defining an anchor point on both bodies and the non-zero length of the distance joint. If you
                don't supply a length, the local anchor points is used so that the initial configuration can violate the constraint
                slightly. This helps when saving and loading a game. Warning Do not use a zero or short length.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchorA">The first body anchor</param>
            <param name="anchorB">The second body anchor</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.LocalAnchorA">
            <summary>The local anchor point relative to bodyA's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.LocalAnchorB">
            <summary>The local anchor point relative to bodyB's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.WorldAnchorA">
            <summary>The anchor on <see cref="P:Alis.Core.Physic.Dynamics.Joints.Joint.BodyA" /> in world coordinates</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.WorldAnchorB">
            <summary>The anchor on <see cref="P:Alis.Core.Physic.Dynamics.Joints.Joint.BodyB" /> in world coordinates</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Length">
            <summary>The rest length of this joint. Clamped to a stable minimum value.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Stiffness">
            <summary>Set/get the linear stiffness in N/m</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Damping">
            <summary>Set/get linear damping in N*s/m</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.MinLength">
            <summary>Minimum length. Clamped to a stable minimum value.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.MaxLength">
            <summary>Maximum length. Must be greater than or equal to the minimum length.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.GetReactionForce(System.Single)">
            <summary>Get the reaction force given the inverse time step. Unit is N.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.GetReactionTorque(System.Single)">
            <summary>Get the reaction torque given the inverse time step. Unit is N*m. This is always zero for a distance joint.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint">
            <summary>
                A mouse joint is used to make a point on a body track a specified world point. This a soft constraint with a
                maximum force. This allows the constraint to stretch and without applying huge forces. NOTE: this joint is not
                documented in the manual because it was developed to be used in the testbed. If you want to learn how to use the
                mouse
                joint, look at the testbed.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.beta">
            <summary>
                The beta
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.c">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.damping">
            <summary>
                The damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.maxForce">
            <summary>
                The max force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.stiffness">
            <summary>
                The stiffness
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.targetB">
            <summary>
                The target
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.#ctor(Alis.Core.Physic.Definitions.Joints.FixedMouseJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.#ctor(Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2)">
            <summary>This requires a world target point, tuning parameters, and the time step.</summary>
            <param name="body">The body.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.LocalAnchorA">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.WorldAnchorA">
            <summary>Use this to update the target point.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.MaxForce">
            <summary>
                The maximum constraint force that can be exerted to move the candidate body. Usually you will express as some
                multiple of the weight (multiplier * mass * gravity). Set/get the maximum force in Newtons.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.Stiffness">
            <summary>Set/get the linear stiffness in N/m</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.Damping">
            <summary>Set/get linear damping in N*s/m</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.ShiftOrigin(System.Numerics.Vector2@)">
            <summary>
                Shifts the origin using the specified new origin
            </summary>
            <param name="newOrigin">The new origin</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.FrictionJoint">
            <summary>
                Friction joint. This is used for top-down friction. It provides 2D translational friction and angular
                friction.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.angularImpulse">
            <summary>
                The angular impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.angularMass">
            <summary>
                The angular mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.linearImpulse">
            <summary>
                The linear impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.linearMass">
            <summary>
                The linear mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.maxForce">
            <summary>
                The max force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.maxTorque">
            <summary>
                The max torque
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.#ctor(Alis.Core.Physic.Definitions.Joints.FrictionJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.FrictionJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Boolean)">
            <summary>Constructor for FrictionJoint.</summary>
            <param name="bodyA"></param>
            <param name="bodyB"></param>
            <param name="anchor"></param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.MaxForce">
            <summary>The maximum friction force in N.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.MaxTorque">
            <summary>The maximum friction torque in N-m.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.GearJoint">
            <summary>
                A gear joint is used to connect two joints together. Either joint can be a revolute or prismatic joint. You specify
                a
                gear ratio to bind the motions together:
                <![CDATA[coordinate1 + ratio * coordinate2 = ant]]>
                The ratio can be negative or positive. If one joint is a revolute joint and the other joint is a prismatic joint,
                then
                the ratio will have units of length or units of 1/length. Warning: You have to manually destroy the gear joint if
                jointA or jointB is destroyed.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.bodyC">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.bodyD">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.constant">
            <summary>
                The constant
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jointA">
            <summary>
                The joint
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jointB">
            <summary>
                The joint
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAnchorC">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAnchorD">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAxisC">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAxisD">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.referenceAngleA">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.referenceAngleB">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.typeA">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.typeB">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.iA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.iB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.iC">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.iD">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.indexC">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.indexD">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jvAc">
            <summary>
                The jv bd
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jvBd">
            <summary>
                The jv bd
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jwA">
            <summary>
                The jw
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jwB">
            <summary>
                The jw
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jwC">
            <summary>
                The jw
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jwD">
            <summary>
                The jw
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.lcA">
            <summary>
                The lc
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.lcB">
            <summary>
                The lc
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.lcC">
            <summary>
                The lc
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.lcD">
            <summary>
                The lc
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.mA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.mB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.mC">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.mD">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.ratio">
            <summary>
                The ratio
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.#ctor(Alis.Core.Physic.Definitions.Joints.GearJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.GearJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.Joint,Alis.Core.Physic.Dynamics.Joints.Joint,System.Single)">
            <summary>
                Requires two existing revolute or prismatic joints (any combination will work). The provided joints must
                attach a dynamic body to a static body.
            </summary>
            <param name="jointA">The first joint.</param>
            <param name="jointB">The second joint.</param>
            <param name="ratio">The ratio.</param>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Ratio">
            <summary>The gear ratio.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.JointA">
            <summary>The first revolute/prismatic joint attached to the gear joint.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.JointB">
            <summary>The second revolute/prismatic joint attached to the gear joint.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.Joint">
            <summary>
                The joint class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Joint.jointType">
            <summary>
                The joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Joint.bodyA">
            <summary>Indicate if this join is enabled or not. Disabling a joint means it is still in the simulation, but inactive.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Joint.bodyB">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Joint.breakpoint">
            <summary>
                The breakpoint
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Joint.collideConnected">
            <summary>
                The collide connected
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Joint.enabled">
            <summary>
                The enabled
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Joint.userData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.#ctor(Alis.Core.Physic.Dynamics.Joints.Misc.JointType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.Joint" /> class
            </summary>
            <param name="jointType">The joint type</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.Misc.JointType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.Joint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The joint type</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.Misc.JointType)">
            <summary>Constructor for fixed joint</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.#ctor(Alis.Core.Physic.Definitions.Joints.JointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.Joint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.EdgeA">
            <summary>
                The joint edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.EdgeB">
            <summary>
                The joint edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.IslandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.JointType">
            <summary>Gets or sets the type of the joint.</summary>
            <value>The type of the joint.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Enabled">
            <summary>
                Gets or sets the value of the enabled
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.BodyA">
            <summary>Get the first body attached to this joint.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.BodyB">
            <summary>Get the second body attached to this joint.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.WorldAnchorA">
            <summary>
                Get the anchor point on bodyA in world coordinates. On some joints, this value indicate the anchor point
                within the world.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.WorldAnchorB">
            <summary>
                Get the anchor point on bodyB in world coordinates. On some joints, this value indicate the anchor point
                within the world.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.UserData">
            <summary>Set the user data pointer.</summary>
            <value>The data.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.CollideConnected">
            <summary>Set this flag to true if the attached bodies should collide.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Breakpoint">
            <summary>
                The Breakpoint simply indicates the maximum Value the JointError can be before it breaks. The default value is
                float.MaxValue, which means it never breaks.
            </summary>
        </member>
        <member name="E:Alis.Core.Physic.Dynamics.Joints.Joint.Broke">
            <summary>Fires when the joint is broken.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.GetReactionForce(System.Single)">
            <summary>Get the reaction force on body at the joint anchor in Newtons.</summary>
            <param name="invDt">The inverse delta time.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.GetReactionTorque(System.Single)">
            <summary>Get the reaction torque on the body at the joint anchor in N*m.</summary>
            <param name="invDt">The inverse delta time.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.ShiftOrigin(System.Numerics.Vector2@)">
            <summary>
                Shift the origin for any points stored in world coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.WakeBodies">
            <summary>
                Wakes the bodies
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.IsFixedType">
            <summary>Return true if the joint is a fixed type.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.Validate(System.Single)">
            <summary>
                Validates the inv dt
            </summary>
            <param name="invDt">The inv dt</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>Solves the position constraints.</summary>
            <param name="data"></param>
            <returns>returns true if the position errors are within tolerance.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.Create(Alis.Core.Physic.Definitions.Joints.JointDef)">
            <summary>
                Creates the def
            </summary>
            <param name="def">The def</param>
            <returns>The joint</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.Misc.JointEdge">
            <summary>
                A joint edge is used to connect bodies and joints together in a joint graph where each body is a node and each
                joint is an edge. A joint edge belongs to a doubly linked list maintained in each attached body. Each joint has two
                joint nodes, one for each attached body.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointEdge.Joint">
            <summary>The joint.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointEdge.Next">
            <summary>The next joint edge in the body's joint list.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointEdge.Other">
            <summary>Provides quick access to the other body attached.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointEdge.Prev">
            <summary>The previous joint edge in the body's joint list.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.Misc.JointType">
            <summary>
                The joint type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Unknown">
            <summary>
                The unknown joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Revolute">
            <summary>
                The revolute joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Prismatic">
            <summary>
                The prismatic joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Distance">
            <summary>
                The distance joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Pulley">
            <summary>
                The pulley joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Gear">
            <summary>
                The gear joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Wheel">
            <summary>
                The wheel joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Weld">
            <summary>
                The weld joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Friction">
            <summary>
                The friction joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Motor">
            <summary>
                The motor joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.Angle">
            <summary>
                The angle joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.FixedMouse">
            <summary>
                The fixed mouse joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.FixedRevolute">
            <summary>
                The fixed revolute joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.FixedDistance">
            <summary>
                The fixed distance joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.FixedLine">
            <summary>
                The fixed line joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.FixedPrismatic">
            <summary>
                The fixed prismatic joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.FixedAngle">
            <summary>
                The fixed angle joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.JointType.FixedFriction">
            <summary>
                The fixed friction joint type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.Misc.LimitState">
            <summary>
                The limit state enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.LimitState.Inactive">
            <summary>
                The inactive limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.LimitState.AtLower">
            <summary>
                The at lower limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.LimitState.AtUpper">
            <summary>
                The at upper limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Misc.LimitState.Equal">
            <summary>
                The equal limit state
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.MotorJoint">
            <summary>
                A motor joint is used to control the relative motion between two bodies. A typical usage is to control the
                movement of a dynamic body with respect to the ground.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.angularError">
            <summary>
                The angular error
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.angularImpulse">
            <summary>
                The angular impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.angularMass">
            <summary>
                The angular mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.angularOffset">
            <summary>
                The angular offset
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.correctionFactor">
            <summary>
                The correction factor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.linearError">
            <summary>
                The linear error
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.linearImpulse">
            <summary>
                The linear impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.linearMass">
            <summary>
                The linear mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.linearOffset">
            <summary>
                The linear offset
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.maxForce">
            <summary>
                The max force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.maxTorque">
            <summary>
                The max torque
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.#ctor(Alis.Core.Physic.Definitions.Joints.MotorJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.MotorJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Boolean)">
            <summary>Constructor for MotorJoint.</summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.MaxForce">
            <summary>Get/set the maximum friction force in N.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.MaxTorque">
            <summary>Get/set the maximum friction torque in N*m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.CorrectionFactor">
            <summary>
                Get/set the position correction factor in the range [0,1].
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.LinearOffset">
            <summary>The linear (translation) offset.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.AngularOffset">
            <summary>Get or set the angular offset.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint">
            <summary>
                A prismatic joint. This joint provides one degree of freedom: translation along an axis fixed in bodyA.
                Relative rotation is prevented. You can use a joint limit to restrict the range of motion and a joint motor to
                drive
                the motion or to model joint friction.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.a1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.a2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.axialMass">
            <summary>
                The axial mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.axis">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.perp">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.enableLimit">
            <summary>
                The enable limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.enableMotor">
            <summary>
                The enable motor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.k">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.localXAxisA">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.localYAxisA">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.lowerImpulse">
            <summary>
                The lower impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.lowerTranslation">
            <summary>
                The lower translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.maxMotorForce">
            <summary>
                The max motor force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.motorImpulse">
            <summary>
                The motor impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.motorSpeed">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.referenceAngle">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.s1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.s2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.translation">
            <summary>
                The translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.upperImpulse">
            <summary>
                The upper impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.upperTranslation">
            <summary>
                The upper translation
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
                This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor
                points and a local axis so that the initial configuration can violate the constraint slightly. The joint
                translation is
                zero when the local anchor points coincide in world space. Using local anchors and a local axis helps when saving
                and
                loading a game.
            </summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second body anchor.</param>
            <param name="axis">The axis.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="anchor">The anchor</param>
            <param name="axis">The axis</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.#ctor(Alis.Core.Physic.Definitions.Joints.PrismaticJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.JointTranslation">
            <summary>Get the current joint translation, usually in meters.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.JointSpeed">
            <summary>Get the current joint translation speed, usually in meters per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LimitEnabled">
            <summary>Is the joint limit enabled?</summary>
            <value><c>true</c> if [limit enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LowerLimit">
            <summary>Get the lower joint limit, usually in meters.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.UpperLimit">
            <summary>Get the upper joint limit, usually in meters.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.MotorEnabled">
            <summary>Is the joint motor enabled?</summary>
            <value><c>true</c> if [motor enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.MotorSpeed">
            <summary>Set the motor speed, usually in meters per second.</summary>
            <value>The speed.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.MaxMotorForce">
            <summary>Set the maximum motor force, usually in N.</summary>
            <value>The force.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalXAxisA">
            <summary>The local joint axis relative to bodyA.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalYAxisA">
            <summary>
                Gets the value of the local y axis a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.ReferenceAngle">
            <summary>Get the reference angle.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.GetMotorForce(System.Single)">
            <summary>Get the current motor force given the inverse time step, usually in N.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.SetLimits(System.Single,System.Single)">
            <summary>Set the joint limits, usually in meters.</summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.Initialize(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
                Initializes the local anchor a
            </summary>
            <param name="localAnchorA">The local anchor</param>
            <param name="localAnchorB">The local anchor</param>
            <param name="axis">The axis</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.PulleyJoint">
            <summary>
                The pulley joint is connected to two bodies and two fixed world points. The pulley supports a ratio such that:
                <![CDATA[length1 + ratio * length2 <= constant]]>
                Yes, the force transmitted is scaled by the ratio. Warning: the pulley joint can get a bit squirrelly by itself.
                They
                often work better when combined with prismatic joints. You should also cover the the anchor points with static
                shapes
                to prevent one side from going to zero length.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.constant">
            <summary>
                The constant
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.lengthA">
            <summary>
                The length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.lengthB">
            <summary>
                The length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.ratio">
            <summary>
                The ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.uA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.uB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.worldAnchorA">
            <summary>
                The world anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.worldAnchorB">
            <summary>
                The world anchor
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.#ctor(Alis.Core.Physic.Definitions.Joints.PulleyJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.PulleyJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Boolean)">
            <summary>Constructor for PulleyJoint.</summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The anchor on the first body.</param>
            <param name="anchorB">The anchor on the second body.</param>
            <param name="worldAnchorA">The world anchor for the first body.</param>
            <param name="worldAnchorB">The world anchor for the second body.</param>
            <param name="ratio">The ratio.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.WorldAnchorA">
            <summary>Get the first world anchor.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.WorldAnchorB">
            <summary>Get the second world anchor.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LengthA">
            <summary>Get the current length of the segment attached to BodyA.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LengthB">
            <summary>Get the current length of the segment attached to BodyB.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.CurrentLengthA">
            <summary>The current length between the anchor point on BodyA and WorldAnchorA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.CurrentLengthB">
            <summary>The current length between the anchor point on BodyB and WorldAnchorB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.Ratio">
            <summary>Get the pulley ratio.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.ShiftOrigin(System.Numerics.Vector2@)">
            <summary>
                Shifts the origin using the specified new origin
            </summary>
            <param name="newOrigin">The new origin</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint">
            <summary>
                A revolute joint constrains to bodies to share a common point while they are free to rotate about the point.
                The relative rotation about the shared point is the joint angle. You can limit the relative rotation with a joint
                limit
                that specifies a lower and upper angle. You can use a motor to drive the relative rotation about the shared point.
                A
                maximum motor torque is provided so that infinite forces are not generated.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.angle">
            <summary>
                The angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.axialMass">
            <summary>
                The axial mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.enableLimit">
            <summary>
                The enable limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.enableMotor">
            <summary>
                The enable motor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.k">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.lowerAngle">
            <summary>
                The lower angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.lowerImpulse">
            <summary>
                The lower impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.maxMotorTorque">
            <summary>
                The max motor torque
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.motorImpulse">
            <summary>
                The motor impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.motorSpeed">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.referenceAngle">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.upperAngle">
            <summary>
                The upper angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.upperImpulse">
            <summary>
                The upper impulse
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.#ctor(Alis.Core.Physic.Definitions.Joints.RevoluteJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>Constructor of RevoluteJoint.</summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second anchor.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Boolean)">
            <summary>Constructor of RevoluteJoint.</summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchor">The shared anchor.</param>
            <param name="useWorldCoordinates"></param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.ReferenceAngle">
            <summary>The referance angle computed as BodyB angle minus BodyA angle.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.JointAngle">
            <summary>Get the current joint angle in radians.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.JointSpeed">
            <summary>Get the current joint angle speed in radians per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LimitEnabled">
            <summary>Is the joint limit enabled?</summary>
            <value><c>true</c> if [limit enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LowerLimit">
            <summary>Get the lower joint limit in radians.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.UpperLimit">
            <summary>Get the upper joint limit in radians.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.MotorEnabled">
            <summary>Is the joint motor enabled?</summary>
            <value><c>true</c> if [motor enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.MotorSpeed">
            <summary>Get or set the motor speed in radians per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.MaxMotorTorque">
            <summary>Get or set the maximum motor torque, usually in N-m.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.SetLimits(System.Single,System.Single)">
            <summary>Set the joint limits, usually in meters.</summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.GetMotorTorque(System.Single)">
            <summary>Gets the motor torque in N-m.</summary>
            <param name="invDt">The inverse delta time</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.WeldJoint">
            <summary>
                A weld joint essentially glues two bodies together. A weld joint may distort somewhat because the island
                constraint solver is approximate. The joint is soft constraint based, which means the two bodies will move relative
                to
                each other, when a force is applied. To combine two bodies in a rigid fashion, combine the fixtures to a single
                body
                instead.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.referenceAngle">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.bias">
            <summary>
                The bias
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.damping">
            <summary>
                The damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.stiffness">
            <summary>
                The stiffness
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.#ctor(Alis.Core.Physic.Definitions.Joints.WeldJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.WeldJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
                You need to specify an anchor point where they are attached. The position of the anchor point is important for
                computing the reaction torque.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second body anchor.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.ReferenceAngle">
            <summary>The bodyB angle minus bodyA angle in the reference state (radians).</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.Stiffness">
            <summary>
                The frequency of the joint. A higher frequency means a stiffer joint, but a too high value can cause the joint
                to oscillate. Default is 0, which means the joint does no spring calculations.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.Damping">
            <summary>
                The damping on the joint. The damping is only used when the joint has a frequency (> 0). A higher value means
                more damping.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.WheelJoint">
            <summary>
                A wheel joint. This joint provides two degrees of freedom: translation along an axis fixed in bodyA and
                rotation in the plane. In other words, it is a point to line constraint with a rotational motor and a linear
                spring/damper. The spring/damper is initialized upon creation. This joint is designed for vehicle suspensions.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localXAxisA">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localYAxisA">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.ax">
            <summary>
                The ay
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.ay">
            <summary>
                The ay
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.axialMass">
            <summary>
                The axial mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.bias">
            <summary>
                The bias
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.damping">
            <summary>
                The damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.enableLimit">
            <summary>
                The enable limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.enableMotor">
            <summary>
                The enable motor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.lowerImpulse">
            <summary>
                The lower impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.lowerTranslation">
            <summary>
                The lower translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.maxMotorTorque">
            <summary>
                The max motor torque
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.motorImpulse">
            <summary>
                The motor impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.motorMass">
            <summary>
                The motor mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.motorSpeed">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.sAx">
            <summary>
                The bx
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.sBx">
            <summary>
                The bx
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.sAy">
            <summary>
                The by
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.sBy">
            <summary>
                The by
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.springImpulse">
            <summary>
                The spring impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.springMass">
            <summary>
                The spring mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.stiffness">
            <summary>
                The stiffness
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.translation">
            <summary>
                The translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.upperImpulse">
            <summary>
                The upper impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.upperTranslation">
            <summary>
                The upper translation
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>Constructor for WheelJoint</summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchor">The anchor point</param>
            <param name="axis">The axis</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.#ctor(Alis.Core.Physic.Definitions.Joints.WheelJointDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.WheelJoint" /> class
            </summary>
            <param name="def">The def</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LocalXAxisA">
            <summary>
                Gets the value of the local x axis a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LocalYAxisA">
            <summary>
                Gets the value of the local y axis a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LocalXAxis">
            <summary>The axis in local coordinates relative to BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.MotorSpeed">
            <summary>The desired motor speed in radians per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.MaxMotorTorque">
            <summary>The maximum motor torque, usually in N-m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.JointTranslation">
            <summary>Gets the translation along the axis</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.JointLinearSpeed">
            <summary>
                Gets the value of the joint linear speed
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.JointAngle">
            <summary>
                Gets the value of the joint angle
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.JointAngularSpeed">
            <summary>Gets the angular velocity of the joint</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.MotorEnabled">
            <summary>Enable/disable the joint motor.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.UpperLimit">
            <summary>
                Gets or sets the value of the upper limit
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LowerLimit">
            <summary>
                Gets or sets the value of the lower limit
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.EnableLimit">
            <summary>
                Gets or sets the value of the enable limit
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.Damping">
            <summary>
                Gets or sets the value of the damping
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.Stiffness">
            <summary>
                Gets or sets the value of the stiffness
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.SetLimits(System.Single,System.Single)">
            <summary>
                Sets the limits using the specified lower
            </summary>
            <param name="lower">The lower</param>
            <param name="upper">The upper</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.GetMotorTorque(System.Single)">
            <summary>Gets the torque of the motor</summary>
            <param name="invDt">inverse delta time</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Profile">
            <summary>
                The profile
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.Step">
            <summary>
                The time it takes to complete the full World.Step()
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.Collide">
            <summary>
                The time it takes to find collisions in the CollisionManager
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.Solve">
            <summary>
                The time it takes to solve integration of velocities, constraints and integrate positions
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.SolveInit">
            <summary>
                Timings from the island solver. The time it takes to initialize velocity constraints.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.SolveVelocity">
            <summary>
                Timings from the island solver. It includes the time it takes to solve joint velocity constraints.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.SolvePosition">
            <summary>
                Timings from the island solver. In includes the time it takes to solve join positions.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.Broadphase">
            <summary>
                The time it takes for the broad-phase to update
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.SolveToi">
            <summary>
                The time it takes for the time-of-impact solver
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.AddRemoveTime">
            <summary>
                Time it takes to process newly added and removed bodies/joints/controllers from the world
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.NewContactsTime">
            <summary>
                The time it takes for the contact manager to find new contacts in the world
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.ControllersUpdateTime">
            <summary>
                The time it takes to update controller logic
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Profile.BreakableBodies">
            <summary>
                The time it takes to update breakable bodies
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint">
            <summary>
                The contact position constraint class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.IndexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.IndexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.InvIa">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.InvIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.InvMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.InvMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.LocalCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.LocalCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.LocalNormal">
            <summary>
                The local normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.LocalPoint">
            <summary>
                The local point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.LocalPoints">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.PointCount">
            <summary>
                The point count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.RadiusA">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.RadiusB">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.ContactSolver">
            <summary>
                The contact solver class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.contacts">
            <summary>
                The contacts
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.count">
            <summary>
                The count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.positionConstraints">
            <summary>
                The position constraints
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.positions">
            <summary>
                The positions
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.step">
            <summary>
                The step
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.velocities">
            <summary>
                The velocities
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.VelocityConstraints">
            <summary>
                The velocity constraints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.Reset(Alis.Core.Physic.Dynamics.TimeStep,System.Int32,Alis.Core.Physic.Collision.ContactSystem.Contact[],Alis.Core.Physic.Dynamics.Solver.Position[],Alis.Core.Physic.Dynamics.Solver.Velocity[])">
            <summary>
                Resets the step
            </summary>
            <param name="step">The step</param>
            <param name="count">The count</param>
            <param name="contacts">The contacts</param>
            <param name="positions">The positions</param>
            <param name="velocities">The velocities</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.InitializeVelocityConstraints">
            <summary>Initialize position dependent portions of the velocity constraints.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.WarmStart">
            <summary>
                Warms the start
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.SolveVelocityConstraints">
            <summary>
                Solves the velocity constraints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.StoreImpulses">
            <summary>
                Stores the impulses
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.SolvePositionConstraints">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.SolveToiPositionConstraints(System.Int32,System.Int32)">
            <summary>
                Describes whether this instance solve toi position constraints
            </summary>
            <param name="toiIndexA">The toi index</param>
            <param name="toiIndexB">The toi index</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint">
            <summary>
                The contact velocity constraint class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.ContactIndex">
            <summary>
                The contact index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.Friction">
            <summary>
                The friction
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.IndexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.IndexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.InvIa">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.InvIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.InvMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.InvMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.K">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.NormalMass">
            <summary>
                The normal mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.PointCount">
            <summary>
                The point count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.Points">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.Restitution">
            <summary>
                The restitution
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.TangentSpeed">
            <summary>
                The tangent speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.Threshold">
            <summary>
                The threshold
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.Island">
            <summary>This is an internal class.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.angTolSqr">
            <summary>
                The angular sleep tolerance
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.contactSolver">
            <summary>
                The contact solver
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.linTolSqr">
            <summary>
                The linear sleep tolerance
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.timer">
            <summary>
                The stopwatch
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.Bodies">
            <summary>
                The bodies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.BodyCapacity">
            <summary>
                The body capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.BodyCount">
            <summary>
                The body count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.ContactCapacity">
            <summary>
                The contact capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.ContactCount">
            <summary>
                The contact count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.contactManager">
            <summary>
                The contact manager
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.contacts">
            <summary>
                The contacts
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.jointCapacity">
            <summary>
                The joint capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.jointCount">
            <summary>
                The joint count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.joints">
            <summary>
                The joints
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.positions">
            <summary>
                The positions
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.velocities">
            <summary>
                The velocities
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Reset(System.Int32,System.Int32,System.Int32,Alis.Core.Physic.Collision.ContactSystem.ContactManager)">
            <summary>
                Resets the body capacity
            </summary>
            <param name="bodyCapacity">The body capacity</param>
            <param name="contactCapacity">The contact capacity</param>
            <param name="jointCapacity">The joint capacity</param>
            <param name="contactManager">The contact manager</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Solve(Alis.Core.Physic.Dynamics.Profile@,Alis.Core.Physic.Dynamics.TimeStep@,System.Numerics.Vector2@,System.Boolean)">
            <summary>
                Solves the profile
            </summary>
            <param name="profile">The profile</param>
            <param name="step">The step</param>
            <param name="gravity">The gravity</param>
            <param name="allowSleep">The allow sleep</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.SolveToi(Alis.Core.Physic.Dynamics.TimeStep@,System.Int32,System.Int32)">
            <summary>
                Solves the toi using the specified sub step
            </summary>
            <param name="subStep">The sub step</param>
            <param name="toiIndexA">The toi index</param>
            <param name="toiIndexB">The toi index</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Add(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Adds the body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Add(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Adds the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Add(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Adds the joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Report(Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint[])">
            <summary>
                Reports the constraints
            </summary>
            <param name="constraints">The constraints</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.Position">
            This is an internal structure.
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Position.C">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Position.A">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.PositionSolverManifold">
            <summary>
                The position solver manifold class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.PositionSolverManifold.Initialize(Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Shared.Transform@,System.Int32,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Single@)">
            <summary>
                Initializes the pc
            </summary>
            <param name="pc">The pc</param>
            <param name="xfA">The xf</param>
            <param name="xfB">The xf</param>
            <param name="index">The index</param>
            <param name="normal">The normal</param>
            <param name="point">The point</param>
            <param name="separation">The separation</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.SolverData">
            <summary>
                The solver data
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.SolverData.Step">
            <summary>
                The step
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.SolverData.Positions">
            <summary>
                The positions
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.SolverData.Velocities">
            <summary>
                The velocities
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.Velocity">
            This is an internal structure.
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Velocity.V">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Velocity.W">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint">
            <summary>
                The velocity constraint point class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.NormalImpulse">
            <summary>
                The normal impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.NormalMass">
            <summary>
                The normal mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.RA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.RB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.TangentImpulse">
            <summary>
                The tangent impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.TangentMass">
            <summary>
                The tangent mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.VelocityBias">
            <summary>
                The velocity bias
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.TimeStep">
            <summary>This is an internal class.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.DeltaTime">
            <summary>Time step (Delta time)</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.DeltaTimeRatio">
            <summary>dt * inv_dt0</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.InvertedDeltaTime">
            <summary>Inverse time step (0 if dt == 0).</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.PositionIterations">
            <summary>
                The position iterations
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.VelocityIterations">
            <summary>
                The velocity iterations
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.TimeStep.WarmStarting">
            <summary>
                The warm starting
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController">
            <summary>
                The buoyancy controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller" />
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.gravity">
            <summary>
                The gravity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.uniqueBodies">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.AngularDragCoefficient">
            <summary>
                Controls the rotational drag that the fluid exerts on the bodies within it. Use higher values will simulate
                thick fluid, like honey, lower values to simulate water-like fluids.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.container">
            <summary>
                The container
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.Density">
            <summary>Density of the fluid. Higher values will make things more buoyant, lower values will cause things to sink.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.LinearDragCoefficient">
            <summary>
                Controls the linear drag that the fluid exerts on the bodies within it.  Use higher values will simulate thick
                fluid, like honey, lower values to simulate water-like fluids.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.offset">
            <summary>
                The offset
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.Velocity">
            <summary>Acts like waterflow. Defaults to 0,0.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.#ctor(Alis.Core.Physic.Shared.Aabb,System.Single,System.Single,System.Single,System.Numerics.Vector2)">
            <summary>Initializes a new instance of the <see cref="T:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController" /> class.</summary>
            <param name="container">Only bodies inside this AABB will be influenced by the controller</param>
            <param name="density">Density of the fluid</param>
            <param name="linearDragCoefficient">Linear drag coefficient of the fluid</param>
            <param name="rotationalDragCoefficient">Rotational drag coefficient of the fluid</param>
            <param name="gravity">The direction gravity acts. Buoyancy force will act in opposite direction of gravity.</param>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.Container">
            <summary>
                Gets or sets the value of the container
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.Update(System.Single)">
            <summary>
                Updates the dt
            </summary>
            <param name="dt">The dt</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Buoyancy.BuoyancyController.ComputeSubmergedArea(Alis.Core.Physic.Collision.Shapes.Shape,System.Numerics.Vector2@,System.Single,Alis.Core.Physic.Shared.Transform@,System.Numerics.Vector2@)">
            <summary>
                Computes the submerged area using the specified shape
            </summary>
            <param name="shape">The shape</param>
            <param name="normal">The normal</param>
            <param name="offset">The offset</param>
            <param name="xf">The xf</param>
            <param name="sc">The sc</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller">
            <summary>
                The controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData" />
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller.Enabled">
            <summary>
                The enabled
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller.World">
            <summary>
                The world
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller.#ctor(Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller" /> class
            </summary>
            <param name="controllerType">The controller type</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller.IsActiveOn(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Describes whether this instance is active on
            </summary>
            <param name="body">The body</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller.Update(System.Single)">
            <summary>
                Updates the dt
            </summary>
            <param name="dt">The dt</param>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerFilter">
            <summary>
                The controller filter
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerFilter.ControllerFlags">
            <summary>
                The controller flags
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerFilter.IgnoreController(Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerType)">
            <summary>Ignores the controller. The controller has no effect on this body.</summary>
            <param name="controller">The controller type.</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerFilter.RestoreController(Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerType)">
            <summary>Restore the controller. The controller affects this body.</summary>
            <param name="controller">The controller type.</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerFilter.IsControllerIgnored(Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerType)">
            <summary>Determines whether this body ignores the specified controller.</summary>
            <param name="controller">The controller type.</param>
            <returns><c>true</c> if the body has the specified flag; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerType">
            <summary>
                The controller type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerType.GravityController">
            <summary>
                The gravity controller controller type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerType.VelocityLimitController">
            <summary>
                The velocity limit controller controller type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerType.AbstractForceController">
            <summary>
                The abstract force controller controller type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.ControllerBase.ControllerType.BuoyancyController">
            <summary>
                The buoyancy controller controller type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController">
            <summary>
                The gravity controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller" />
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController" /> class
            </summary>
            <param name="strength">The strength</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController" /> class
            </summary>
            <param name="strength">The strength</param>
            <param name="maxRadius">The max radius</param>
            <param name="minRadius">The min radius</param>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.MinRadius">
            <summary>
                Gets or sets the value of the min radius
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.MaxRadius">
            <summary>
                Gets or sets the value of the max radius
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.Strength">
            <summary>
                Gets or sets the value of the strength
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.GravityType">
            <summary>
                Gets or sets the value of the gravity type
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.Bodies">
            <summary>
                Gets or sets the value of the bodies
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.Points">
            <summary>
                Gets or sets the value of the points
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.Update(System.Single)">
            <summary>
                Updates the dt
            </summary>
            <param name="dt">The dt</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.AddBody(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Adds the body using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityController.AddPoint(System.Numerics.Vector2)">
            <summary>
                Adds the point using the specified point
            </summary>
            <param name="point">The point</param>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityType">
            <summary>
                The gravity type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityType.Linear">
            <summary>
                The linear gravity type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Gravity.GravityType.DistanceSquared">
            <summary>
                The distance squared gravity type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController">
            <summary>
                Put a limit on the linear (translation - the move speed) and angular (rotation) velocity of bodies added to
                this controller.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.bodies">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.LimitAngularVelocity">
            <summary>
                The limit angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.LimitLinearVelocity">
            <summary>
                The limit linear velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.maxAngularSqared">
            <summary>
                The max angular sqared
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.maxAngularVelocity">
            <summary>
                The max angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.maxLinearSqared">
            <summary>
                The max linear sqared
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.maxLinearVelocity">
            <summary>
                The max linear velocity
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController" /> class. Sets the max linear velocity
                to Settings.MaxTranslation Sets the max angular velocity to Settings.MaxRotation
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.#ctor(System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController" /> class. Pass in 0 or float.MaxValue to
                disable the limit. maxAngularVelocity = 0 will disable the angular velocity limit.
            </summary>
            <param name="maxLinearVelocity">The max linear velocity.</param>
            <param name="maxAngularVelocity">The max angular velocity.</param>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.MaxAngularVelocity">
            <summary>Gets or sets the max angular velocity.</summary>
            <value>The max angular velocity.</value>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.MaxLinearVelocity">
            <summary>Gets or sets the max linear velocity.</summary>
            <value>The max linear velocity.</value>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.Update(System.Single)">
            <summary>
                Updates the dt
            </summary>
            <param name="dt">The dt</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.AddBody(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Adds the body using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Velocity.VelocityLimitController.RemoveBody(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Removes the body using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController">
            <summary>
                The abstract force controller class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller" />
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.DecayCurve">
            <summary>Curve to be used for Decay in Curve mode</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.ForceType">
            <summary>The Forcetype of the instance</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.Randomize">
            <summary>Provided for reuse to provide Variation functionality in inheriting classes</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.StrengthCurve">
            <summary>
                Curve used by Curve Mode as an animated multiplier for the force strength. Only positions between 0 and 1 are
                considered as that range is stretched to have ImpulseLength.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.#ctor(Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.TimingModes)">
            <summary>Overloaded Contstructor with supplying Timing Mode</summary>
            <param name="mode"></param>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.Strength">
            <summary>Global Strength of the force to be applied</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.Position">
            <summary>Position of the Force. Can be ignored (left at (0,0) for forces that are not position-dependent</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.MaximumSpeed">
            <summary>Maximum speed of the bodies. Bodies that are travelling faster are supposed to be ignored</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.TimingMode">
            <summary>Timing Mode of the force instance</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.ImpulseTime">
            <summary>Time of the current impulse. Incremented in update till ImpulseLength is reached</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.ImpulseLength">
            <summary>Length of a triggered impulse. Used in both Triggered and Curve Mode</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.Triggered">
            <summary>Indicating if we are currently during an Impulse (Triggered and Curve Mode)</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.Variation">
            <summary>Variation of the force applied to each body affected !! Must be used in inheriting classes properly !!</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.DecayMode">
            <summary>See DecayModes</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.DecayStart">
            <summary>Start of the distance based Decay. To set a non decaying area</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.DecayEnd">
            <summary>Maximum distance a force should be applied</summary>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.DecayModes">
            <summary>Modes for Decay. Actual Decay must be implemented in inheriting classes</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.DecayModes.None">
            <summary>
                The none decay modes
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.DecayModes.Step">
            <summary>
                The step decay modes
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.DecayModes.Linear">
            <summary>
                The linear decay modes
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.DecayModes.InverseSquare">
            <summary>
                The inverse square decay modes
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.DecayModes.Curve">
            <summary>
                The curve decay modes
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.ForceTypes">
            <summary>
                Forcetypes are used in the decay math to properly get the distance. They are also used to draw a
                representation in DebugView
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.ForceTypes.Point">
            <summary>
                The point force types
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.ForceTypes.Line">
            <summary>
                The line force types
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.ForceTypes.Area">
            <summary>
                The area force types
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.TimingModes">
            <summary>
                Timing Modes Switched: Standard on/off mode using the baseclass enabled property Triggered: When the Trigger()
                method is called the force is active for a specified Impulse Length Curve: Still to be defined. The basic idea is
                having a Trigger combined with a curve for the strength
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.TimingModes.Switched">
            <summary>
                The switched timing modes
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.TimingModes.Triggered">
            <summary>
                The triggered timing modes
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.TimingModes.Curve">
            <summary>
                The curve timing modes
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.GetDecayMultiplier(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Calculate the Decay for a given body. Meant to ease force development and stick to the DRY principle and
                provide unified and predictable decay math.
            </summary>
            <param name="body">The body to calculate decay for</param>
            <returns>A multiplier to multiply the force with to add decay support in inheriting classes</returns>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.Trigger">
            <summary>Triggers the trigger modes (Trigger and Curve)</summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.Update(System.Single)">
            <summary>Inherited from Controller Depending on the TimingMode perform timing logic and call ApplyForce()</summary>
            <param name="dt"></param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Wind.AbstractForceController.ApplyForce(System.Single,System.Single)">
            <summary>Apply the force supplying strength which is modified in Update() according to the TimingMode</summary>
            <param name="dt"></param>
            <param name="strength">The strength</param>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveLoopType">
            <summary>
                Defines how the <see cref="N:Alis.Core.Physic.Extensions.Controllers.Wind.Curve" /> value is determined for position before first point or after the end
                point on the <see cref="N:Alis.Core.Physic.Extensions.Controllers.Wind.Curve" />.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveLoopType.Constant">
            <summary>
                The value of <see cref="N:Alis.Core.Physic.Extensions.Controllers.Wind.Curve" /> will be evaluated as first point for positions before the beginning and end
                point for positions after the end.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveLoopType.Cycle">
            <summary>The positions will wrap around from the end to beginning of the <see cref="N:Alis.Core.Physic.Extensions.Controllers.Wind.Curve" /> for determined the value.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveLoopType.CycleOffset">
            <summary>
                The positions will wrap around from the end to beginning of the <see cref="N:Alis.Core.Physic.Extensions.Controllers.Wind.Curve" />. The value will be offset
                by the difference between the values of first and end <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> multiplied by the wrap amount. If the
                position is before the beginning of the <see cref="N:Alis.Core.Physic.Extensions.Controllers.Wind.Curve" /> the difference will be subtracted from its value;
                otherwise the difference will be added.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveLoopType.Oscillate">
            <summary>
                The value at the end of the <see cref="N:Alis.Core.Physic.Extensions.Controllers.Wind.Curve" /> act as an offset from the same side of the
                <see cref="N:Alis.Core.Physic.Extensions.Controllers.Wind.Curve" /> toward the opposite side.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveLoopType.Linear">
            <summary>The linear interpolation will be performed for determined the value.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveTangent">
            <summary>
                Defines the different tangent types to be calculated for <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> points in a
                <see cref="N:Alis.Core.Physic.Extensions.Controllers.Wind.Curve" />.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveTangent.Flat">
            <summary>The tangent which always has a value equal to zero.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveTangent.Linear">
            <summary>
                The tangent which contains a difference between current tangent value and the tangent value from the previous
                <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" />.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveTangent.Smooth">
            <summary>
                The smoouth tangent which contains the inflection between <see cref="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.TangentIn" /> and
                <see cref="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.TangentOut" /> by taking into account the values of both neighbors of the
                <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" />.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.Controllers.Wind.SimpleWindForce">
            <summary>
                Reference implementation for forces based on AbstractForceController It supports all features provided by the
                base class and illustrates proper usage as an easy to understand example. As a side-effect it is a nice and easy to
                use
                wind force for your projects
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.SimpleWindForce.Direction">
            <summary>Direction of the windforce</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.SimpleWindForce.Divergence">
            <summary>The amount of Direction randomization. Allowed range is 0-1.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.Controllers.Wind.SimpleWindForce.IgnorePosition">
            <summary>
                Ignore the position and apply the force. If off only in the "front" (relative to position and direction) will
                be affected
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.Controllers.Wind.SimpleWindForce.ApplyForce(System.Single,System.Single)">
            <summary>
                Applies the force using the specified dt
            </summary>
            <param name="dt">The dt</param>
            <param name="strength">The strength</param>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RayDataComparer">
            <summary>This is a comparer used for detecting angle difference between rays</summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RayDataComparer.System#Collections#Generic#IComparer{System#Single}#Compare(System.Single,System.Single)">
            <summary>
                Compares the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The int</returns>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion">
            <summary>
                Creates a realistic explosion based on raycasting. Objects in the open will be affected, but objects behind
                static bodies will not. A body that is half in cover, half in the open will get half the force applied to the end
                in
                the open.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion.data">
            <summary>
                The shape data
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion.rdc">
            <summary>
                The rdc
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion.EdgeRatio">
            <summary>Ratio of arc length to angle from edges to first ray tested. Defaults to 1/40.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion.IgnoreWhenInsideShape">
            <summary>Ignore Explosion if it happens inside a shape. Default value is false.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion.MaxAngle">
            <summary>Max angle between rays (used when segment is large). Defaults to 15 degrees</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion.MaxShapes">
            <summary>Maximum number of shapes involved in the explosion. Defaults to 100</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion.MinRays">
            <summary>How many rays per shape/body/segment. Defaults to 5</summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion.#ctor(Alis.Core.Physic.World)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion" /> class
            </summary>
            <param name="world">The world</param>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion.MaxEdgeOffset">
            <summary>Two degrees: maximum angle from edges to first ray tested</summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.RealExplosion.Activate(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>Activate the explosion at the specified position.</summary>
            <param name="pos">The position where the explosion happens </param>
            <param name="radius">The explosion radius </param>
            <param name="maxForce">
                The explosion force at the explosion point (then is inversely proportional to the square of the
                distance)
            </param>
            <returns>A list of bodies and the amount of force that was applied to them.</returns>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.SimpleExplosion">
            <summary>Creates a simple explosion that ignores other bodies hiding behind static bodies.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.SimpleExplosion.#ctor(Alis.Core.Physic.World)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.SimpleExplosion" /> class
            </summary>
            <param name="world">The world</param>
        </member>
        <member name="P:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.SimpleExplosion.Power">
            <summary>
                This is the power used in the power function. A value of 1 means the force applied to bodies in the explosion
                is linear. A value of 2 means it is exponential.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.SimpleExplosion.Activate(System.Numerics.Vector2,System.Single,System.Single,System.Single)">
            <summary>Activate the explosion at the specified position.</summary>
            <param name="pos">The position (center) of the explosion.</param>
            <param name="radius">The radius of the explosion.</param>
            <param name="force">The force applied</param>
            <param name="maxForce">A maximum amount of force. When force gets over this value, it will be equal to maxForce</param>
            <returns>A list of bodies and the amount of force that was applied to them.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.SimpleExplosion.ApplyImpulse(System.Numerics.Vector2,System.Single,System.Single,System.Single,System.Collections.Generic.HashSet{Alis.Core.Physic.Dynamics.Body})">
            <summary>
                Applies the impulse using the specified pos
            </summary>
            <param name="pos">The pos</param>
            <param name="radius">The radius</param>
            <param name="force">The force</param>
            <param name="maxForce">The max force</param>
            <param name="overlappingBodies">The overlapping bodies</param>
            <returns>The forces</returns>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.Explosion.SimpleExplosion.GetPercent(System.Single,System.Single)">
            <summary>
                Gets the percent using the specified distance
            </summary>
            <param name="distance">The distance</param>
            <param name="radius">The radius</param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData">
            <summary>Contains filter data that can determine whether an object should be processed or not.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.DisabledOnCategories">
            <summary>Disable the logic on specific categories. Category.None by default.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.DisabledOnGroup">
            <summary>Disable the logic on specific groups</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.EnabledOnCategories">
            <summary>Enable the logic on specific categories Category.All by default.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.EnabledOnGroup">
            <summary>Enable the logic on specific groups.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.IsActiveOn(Alis.Core.Physic.Dynamics.Body)">
            <summary></summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.AddDisabledCategory(Alis.Core.Physic.Collision.Filtering.Category)">
            <summary>Adds the category.</summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.RemoveDisabledCategory(Alis.Core.Physic.Collision.Filtering.Category)">
            <summary>Removes the category.</summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.IsInDisabledCategory(Alis.Core.Physic.Collision.Filtering.Category)">
            <summary>Determines whether this body ignores the the specified controller.</summary>
            <param name="category">The category.</param>
            <returns><c>true</c> if the object has the specified category; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.AddEnabledCategory(Alis.Core.Physic.Collision.Filtering.Category)">
            <summary>Adds the category.</summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.RemoveEnabledCategory(Alis.Core.Physic.Collision.Filtering.Category)">
            <summary>Removes the category.</summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData.IsInEnabledInCategory(Alis.Core.Physic.Collision.Filtering.Category)">
            <summary>Determines whether this body ignores the the specified controller.</summary>
            <param name="category">The category.</param>
            <returns><c>true</c> if the object has the specified category; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogic">
            <summary>
                The physics logic class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.FilterData" />
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogic.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogic.World">
            <summary>
                The world
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogic.#ctor(Alis.Core.Physic.World,Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogic" /> class
            </summary>
            <param name="world">The world</param>
            <param name="type">The type</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogic.IsActiveOn(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Describes whether this instance is active on
            </summary>
            <param name="body">The body</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicFilter">
            <summary>
                The physics logic filter
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicFilter.ControllerIgnores">
            <summary>
                The controller ignores
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicFilter.IgnorePhysicsLogic(Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicType)">
            <summary>Ignores the controller. The controller has no effect on this body.</summary>
            <param name="type">The logic type.</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicFilter.RestorePhysicsLogic(Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicType)">
            <summary>Restore the controller. The controller affects this body.</summary>
            <param name="type">The logic type.</param>
        </member>
        <member name="M:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicFilter.IsPhysicsLogicIgnored(Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicType)">
            <summary>Determines whether this body ignores the specified controller.</summary>
            <param name="type">The logic type.</param>
            <returns><c>true</c> if the body has the specified flag; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicType">
            <summary>
                The physics logic type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.PhysicsLogicType.Explosion">
            <summary>
                The explosion physics logic type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.ShapeData">
            <summary>
                The shape data
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.ShapeData.Body">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.ShapeData.Max">
            <summary>
                The max
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Extensions.PhysicsLogics.PhysicsLogicBase.ShapeData.Min">
            <summary>
                The min
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Factories.BodyFactory">
            <summary>
                The body factory class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateBody(Alis.Core.Physic.World,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the body using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateEdge(Alis.Core.Physic.World,System.Numerics.Vector2,System.Numerics.Vector2,System.Object)">
            <summary>
                Creates the edge using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateChainShape(Alis.Core.Physic.World,Alis.Core.Physic.Shared.Vertices,System.Numerics.Vector2,System.Object)">
            <summary>
                Creates the chain shape using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="vertices">The vertices</param>
            <param name="position">The position</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateLoopShape(Alis.Core.Physic.World,Alis.Core.Physic.Shared.Vertices,System.Numerics.Vector2,System.Object)">
            <summary>
                Creates the loop shape using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="vertices">The vertices</param>
            <param name="position">The position</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateRectangle(Alis.Core.Physic.World,System.Single,System.Single,System.Single,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the rectangle using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Height must be more than 0 meters</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Width must be more than 0 meters</exception>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateCircle(Alis.Core.Physic.World,System.Single,System.Single,System.Numerics.Vector2,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the circle using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="radius">The radius</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateEllipse(Alis.Core.Physic.World,System.Single,System.Single,System.Int32,System.Single,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the ellipse using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="xRadius">The radius</param>
            <param name="yRadius">The radius</param>
            <param name="edges">The edges</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreatePolygon(Alis.Core.Physic.World,Alis.Core.Physic.Shared.Vertices,System.Single,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the polygon using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="vertices">The vertices</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateCompoundPolygon(Alis.Core.Physic.World,System.Collections.Generic.List{Alis.Core.Physic.Shared.Vertices},System.Single,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the compound polygon using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="list">The list</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateGear(Alis.Core.Physic.World,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the gear using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="radius">The radius</param>
            <param name="numberOfTeeth">The number of teeth</param>
            <param name="tipPercentage">The tip percentage</param>
            <param name="toothHeight">The tooth height</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateCapsule(Alis.Core.Physic.World,System.Single,System.Single,System.Int32,System.Single,System.Int32,System.Single,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the capsule using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="height">The height</param>
            <param name="topRadius">The top radius</param>
            <param name="topEdges">The top edges</param>
            <param name="bottomRadius">The bottom radius</param>
            <param name="bottomEdges">The bottom edges</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateCapsule(Alis.Core.Physic.World,System.Single,System.Single,System.Single,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the capsule using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="height">The height</param>
            <param name="endRadius">The end radius</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateRoundedRectangle(Alis.Core.Physic.World,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the rounded rectangle using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="xRadius">The radius</param>
            <param name="yRadius">The radius</param>
            <param name="segments">The segments</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateLineArc(Alis.Core.Physic.World,System.Single,System.Int32,System.Single,System.Boolean,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the line arc using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="radians">The radians</param>
            <param name="sides">The sides</param>
            <param name="radius">The radius</param>
            <param name="closed">The closed</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateSolidArc(Alis.Core.Physic.World,System.Single,System.Single,System.Int32,System.Single,System.Numerics.Vector2,System.Single,Alis.Core.Physic.Dynamics.BodyType,System.Object)">
            <summary>
                Creates the solid arc using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="density">The density</param>
            <param name="radians">The radians</param>
            <param name="sides">The sides</param>
            <param name="radius">The radius</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <param name="bodyType">The body type</param>
            <param name="userData">The user data</param>
            <returns>The body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateBreakableBody(Alis.Core.Physic.World,Alis.Core.Physic.Shared.Vertices,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>
                Creates the breakable body using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="vertices">The vertices</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <returns>The breakable body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateBreakableBody(Alis.Core.Physic.World,System.Collections.Generic.IEnumerable{Alis.Core.Physic.Collision.Shapes.Shape},System.Numerics.Vector2,System.Single)">
            <summary>
                Creates the breakable body using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="shapes">The shapes</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
            <returns>The breakable body</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.BodyFactory.CreateFromDef(Alis.Core.Physic.World,Alis.Core.Physic.Definitions.BodyDef)">
            <summary>
                Creates the from def using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="def">The def</param>
            <returns>The body</returns>
        </member>
        <member name="T:Alis.Core.Physic.Factories.FixtureFactory">
            <summary>An easy to use factory for creating bodies</summary>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachEdge(System.Numerics.Vector2,System.Numerics.Vector2,Alis.Core.Physic.Dynamics.Body,System.Object)">
            <summary>
                Attaches the edge using the specified start
            </summary>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <param name="body">The body</param>
            <param name="userData">The user data</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachChainShape(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Dynamics.Body,System.Object)">
            <summary>
                Attaches the chain shape using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="body">The body</param>
            <param name="userData">The user data</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachLoopShape(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Dynamics.Body,System.Object)">
            <summary>
                Attaches the loop shape using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="body">The body</param>
            <param name="userData">The user data</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachRectangle(System.Single,System.Single,System.Single,System.Numerics.Vector2,Alis.Core.Physic.Dynamics.Body,System.Object)">
            <summary>
                Attaches the rectangle using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="density">The density</param>
            <param name="offset">The offset</param>
            <param name="body">The body</param>
            <param name="userData">The user data</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachCircle(System.Single,System.Single,Alis.Core.Physic.Dynamics.Body,System.Object)">
            <summary>
                Attaches the circle using the specified radius
            </summary>
            <param name="radius">The radius</param>
            <param name="density">The density</param>
            <param name="body">The body</param>
            <param name="userData">The user data</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Radius must be more than 0 meters</exception>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachCircle(System.Single,System.Single,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Object)">
            <summary>
                Attaches the circle using the specified radius
            </summary>
            <param name="radius">The radius</param>
            <param name="density">The density</param>
            <param name="body">The body</param>
            <param name="offset">The offset</param>
            <param name="userData">The user data</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Radius must be more than 0 meters</exception>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachPolygon(Alis.Core.Physic.Shared.Vertices,System.Single,Alis.Core.Physic.Dynamics.Body,System.Object)">
            <summary>
                Attaches the polygon using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="density">The density</param>
            <param name="body">The body</param>
            <param name="userData">The user data</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Too few points to be a polygon</exception>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachEllipse(System.Single,System.Single,System.Int32,System.Single,Alis.Core.Physic.Dynamics.Body,System.Object)">
            <summary>
                Attaches the ellipse using the specified x radius
            </summary>
            <param name="xRadius">The radius</param>
            <param name="yRadius">The radius</param>
            <param name="edges">The edges</param>
            <param name="density">The density</param>
            <param name="body">The body</param>
            <param name="userData">The user data</param>
            <exception cref="T:System.ArgumentOutOfRangeException">X-radius must be more than 0</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Y-radius must be more than 0</exception>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachCompoundPolygon(System.Collections.Generic.List{Alis.Core.Physic.Shared.Vertices},System.Single,Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Attaches the compound polygon using the specified list
            </summary>
            <param name="list">The list</param>
            <param name="density">The density</param>
            <param name="body">The body</param>
            <returns>The res</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachLineArc(System.Single,System.Int32,System.Single,System.Boolean,Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Attaches the line arc using the specified radians
            </summary>
            <param name="radians">The radians</param>
            <param name="sides">The sides</param>
            <param name="radius">The radius</param>
            <param name="closed">The closed</param>
            <param name="body">The body</param>
            <returns>The fixture</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.AttachSolidArc(System.Single,System.Single,System.Int32,System.Single,Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Attaches the solid arc using the specified density
            </summary>
            <param name="density">The density</param>
            <param name="radians">The radians</param>
            <param name="sides">The sides</param>
            <param name="radius">The radius</param>
            <param name="body">The body</param>
            <returns>A list of fixture</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.FixtureFactory.CreateFromDef(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Definitions.FixtureDef)">
            <summary>
                Creates the from def using the specified body
            </summary>
            <param name="body">The body</param>
            <param name="fixtureDef">The fixture def</param>
            <returns>The fixture</returns>
        </member>
        <member name="T:Alis.Core.Physic.Factories.JointFactory">
            <summary>An easy to use factory for using joints.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateMotorJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Boolean)">
            <summary>
                Creates the motor joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
            <returns>The joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateWeldJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
                Creates the weld joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="anchorA">The anchor</param>
            <param name="anchorB">The anchor</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
            <returns>The weld joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreatePrismaticJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
                Creates the prismatic joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="anchor">The anchor</param>
            <param name="axis">The axis</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
            <returns>The joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateAngleJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Creates the angle joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <returns>The angle joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateGearJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.Joint,Alis.Core.Physic.Dynamics.Joints.Joint,System.Single)">
            <summary>
                Creates the gear joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointA">The joint</param>
            <param name="jointB">The joint</param>
            <param name="ratio">The ratio</param>
            <returns>The gear joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreatePulleyJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Boolean)">
            <summary>
                Creates the pulley joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="anchorA">The anchor</param>
            <param name="anchorB">The anchor</param>
            <param name="worldAnchorA">The world anchor</param>
            <param name="worldAnchorB">The world anchor</param>
            <param name="ratio">The ratio</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
            <returns>The pulley joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateFixedMouseJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2)">
            <summary>
                Creates the fixed mouse joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="body">The body</param>
            <param name="worldAnchor">The world anchor</param>
            <returns>The joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateRevoluteJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
                Creates the revolute joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="anchorA">The anchor</param>
            <param name="anchorB">The anchor</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
            <returns>The joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateRevoluteJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2)">
            <summary>
                Creates the revolute joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="anchor">The anchor</param>
            <returns>The joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateWheelJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
                Creates the wheel joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="anchor">The anchor</param>
            <param name="axis">The axis</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
            <returns>The joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateWheelJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2)">
            <summary>
                Creates the wheel joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="axis">The axis</param>
            <returns>The wheel joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateDistanceJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
                Creates the distance joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="anchorA">The anchor</param>
            <param name="anchorB">The anchor</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
            <returns>The distance joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateDistanceJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Creates the distance joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <returns>The distance joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateFrictionJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Numerics.Vector2,System.Boolean)">
            <summary>
                Creates the friction joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="anchor">The anchor</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
            <returns>The friction joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateFrictionJoint(Alis.Core.Physic.World,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Creates the friction joint using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <returns>The friction joint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Factories.JointFactory.CreateFromDef(Alis.Core.Physic.World,Alis.Core.Physic.Definitions.Joints.JointDef)">
            <summary>
                Creates the from def using the specified world
            </summary>
            <param name="world">The world</param>
            <param name="def">The def</param>
            <returns>The joint</returns>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Aabb">
            <summary>An axis aligned bounding box.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Aabb.LowerBound">
            <summary>The lower vertex</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Aabb.UpperBound">
            <summary>The upper vertex</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Aabb" /> class
            </summary>
            <param name="min">The min</param>
            <param name="max">The max</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Aabb" /> class
            </summary>
            <param name="center">The center</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.#ctor(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Aabb" /> class
            </summary>
            <param name="min">The min</param>
            <param name="max">The max</param>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Width">
            <summary>
                Gets the value of the width
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Height">
            <summary>
                Gets the value of the height
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Center">
            <summary>Get the center of the AABB.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Extents">
            <summary>Get the extents of the AABB (half-widths).</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Perimeter">
            <summary>Get the perimeter length</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Vertices">
            <summary>Gets the vertices of the AABB.</summary>
            <value>The corners of the AABB</value>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Q1">
            <summary>First quadrant</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Q2">
            <summary>Second quadrant</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Q3">
            <summary>Third quadrant</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Q4">
            <summary>Forth quadrant</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.IsValid">
            <summary>Verify that the bounds are sorted. And the bounds are valid numbers (not NaN).</summary>
            <returns><c>true</c> if this instance is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.Combine(Alis.Core.Physic.Shared.Aabb@)">
            <summary>Combine an AABB into this one.</summary>
            <param name="aabb">The AABB.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.Combine(Alis.Core.Physic.Shared.Aabb@,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Combine two AABBs into this one.</summary>
            <param name="aabb1">The aabb1.</param>
            <param name="aabb2">The aabb2.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.Contains(Alis.Core.Physic.Shared.Aabb@)">
            <summary>Does this AABB contain the provided AABB.</summary>
            <param name="aabb">The AABB.</param>
            <returns><c>true</c> if it contains the specified AABB; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.Contains(System.Numerics.Vector2@)">
            <summary>Determines whether the AABB contains the specified point.</summary>
            <param name="point">The point.</param>
            <returns><c>true</c> if it contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.TestOverlap(Alis.Core.Physic.Shared.Aabb@,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Test if the two AABBs overlap.</summary>
            <param name="a">The first AABB.</param>
            <param name="b">The second AABB.</param>
            <returns>True if they are overlapping.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Physic.Collision.RayCast.RayCastOutput@,System.Boolean)">
            <summary>Raycast against this AABB using the specified points and maxfraction (found in input)</summary>
            <param name="input">The parameters for the raycast.</param>
            <param name="output">The results of the raycast.</param>
            <param name="doInteriorCheck"></param>
            <returns>True if the ray intersects the AABB</returns>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Contracts.Contract">
            <summary>
                The contract class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Contracts.Contract.RequireNotNull(System.Object,System.String)">
            <summary>
                Requires the not null using the specified obj
            </summary>
            <param name="obj">The obj</param>
            <param name="message">The message</param>
            <exception cref="T:Alis.Core.Physic.Shared.Contracts.RequiredException"></exception>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Contracts.Contract.Requires(System.Boolean,System.String)">
            <summary>
                Requireses the condition
            </summary>
            <param name="condition">The condition</param>
            <param name="message">The message</param>
            <exception cref="T:Alis.Core.Physic.Shared.Contracts.RequiredException"></exception>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Contracts.Contract.Warn(System.Boolean,System.String)">
            <summary>
                Warns the condition
            </summary>
            <param name="condition">The condition</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Contracts.Contract.Ensures(System.Boolean,System.String)">
            <summary>
                Ensureses the condition
            </summary>
            <param name="condition">The condition</param>
            <param name="message">The message</param>
            <exception cref="T:Alis.Core.Physic.Shared.Contracts.EnsuresException"></exception>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Contracts.Contract.RequireForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
                Requires the for all using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <param name="check">The check</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Contracts.Contract.Fail(System.String)">
            <summary>
                Fails the message
            </summary>
            <param name="message">The message</param>
            <exception cref="T:Alis.Core.Physic.Shared.Contracts.RequiredException"></exception>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Contracts.Contract.BuildMessage(System.String,System.String)">
            <summary>
                Builds the message using the specified type
            </summary>
            <param name="type">The type</param>
            <param name="message">The message</param>
            <returns>The string</returns>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Contracts.EnsuresException">
            <summary>
                The ensures exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Physic.Shared.Contracts.EnsuresException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Contracts.EnsuresException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Contracts.RequiredException">
            <summary>
                The required exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Alis.Core.Physic.Shared.Contracts.RequiredException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Contracts.RequiredException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Graph`1">
            <summary>This graph is a doubly linked circular list. It is circular to avoid branches in Add/Remove methods.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Graph`1.comparer">
            <summary>
                The comparer
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Graph`1" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.#ctor(System.Collections.Generic.EqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Graph`1" /> class
            </summary>
            <param name="comparer">The comparer</param>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Graph`1.Count">
            <summary>The number of items in the graph</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Graph`1.First">
            <summary>The first node in the graph</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.GetEnumerator">
            <summary>
                Gets the enumerator
            </summary>
            <returns>An enumerator of t</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.Add(`0)">
            <summary>Add a value to the graph</summary>
            <remarks>Note that this method is O(n) in worst case.</remarks>
            <returns>The node that represents the value</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.Add(Alis.Core.Physic.Shared.GraphNode{`0})">
            <summary>Add a node to the graph</summary>
            <remarks>Note that this method is O(1) in worst case.</remarks>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.Contains(`0)">
            <summary>Check if the specified value is contained within the graph.</summary>
            <remarks>Note that this method is O(n) in worst case.</remarks>
            <returns>True if it found the value, otherwise false.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.Find(`0)">
            <summary>Finds the specified value</summary>
            <remarks>Note that this method is O(n) in worst case.</remarks>
            <returns>The graph node that was found if any. Otherwise it returns null.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.Remove(`0)">
            <summary>Remove the specified value</summary>
            <remarks>Note that this method is O(n) in worst case.</remarks>
            <returns>True if the value was removed, otherwise false.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.Remove(Alis.Core.Physic.Shared.GraphNode{`0})">
            <summary>Remove the specified node from the graph.</summary>
            <remarks>Note that this method is O(1) in worst case.</remarks>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Graph`1.GetNodes">
            <summary>
                Gets the nodes
            </summary>
            <returns>An enumerable of graph node t</returns>
        </member>
        <member name="T:Alis.Core.Physic.Shared.GraphNode`1">
            <summary>
                The graph node class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.GraphNode`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.GraphNode`1" /> class
            </summary>
            <param name="item">The item</param>
        </member>
        <member name="P:Alis.Core.Physic.Shared.GraphNode`1.Item">
            <summary>The item.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.GraphNode`1.Next">
            <summary>The next item in the list.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.GraphNode`1.Prev">
            <summary>The previous item in the list.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.GraphNode`1.Invalidate">
            <summary>
                Invalidates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.GraphNode`1.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Mat22">
            <summary>A 2-by-2 matrix. Stored in column-major order.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Mat22.Ex">
            <summary>
                The ey
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Mat22.Ey">
            <summary>
                The ey
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat22.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Construct this matrix using columns.</summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat22.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Construct this matrix using scalars.</summary>
            <param name="a11">The a11.</param>
            <param name="a12">The a12.</param>
            <param name="a21">The a21.</param>
            <param name="a22">The a22.</param>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Mat22.Inverse">
            <summary>
                Gets the value of the inverse
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat22.Set(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Initialize this matrix using columns.</summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat22.SetIdentity">
            <summary>Set this to the identity matrix.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat22.SetZero">
            <summary>Set this matrix to all zeros.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat22.Solve(System.Numerics.Vector2)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot
                cases.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat22.Add(Alis.Core.Physic.Shared.Mat22@,Alis.Core.Physic.Shared.Mat22@,Alis.Core.Physic.Shared.Mat22@)">
            <summary>
                Adds the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <param name="r">The </param>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Mat33">
            <summary>A 3-by-3 matrix. Stored in column-major order.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Mat33.Ex">
            <summary>
                The ez
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Mat33.Ey">
            <summary>
                The ez
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Mat33.Ez">
            <summary>
                The ez
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat33.#ctor(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>Construct this matrix using columns.</summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
            <param name="c3">The c3.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat33.SetZero">
            <summary>Set this matrix to all zeros.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat33.Solve33(System.Numerics.Vector3)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot
                cases.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat33.Solve22(System.Numerics.Vector2)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse in one-shot
                cases. Solve only the upper 2-by-2 matrix equation.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat33.GetInverse22(Alis.Core.Physic.Shared.Mat33@)">
            Get the inverse of this matrix as a 2-by-2.
            Returns the zero matrix if singular.
        </member>
        <member name="M:Alis.Core.Physic.Shared.Mat33.GetSymInverse33(Alis.Core.Physic.Shared.Mat33@)">
            Get the symmetric inverse of this matrix as a 3-by-3.
            Returns the zero matrix if singular.
        </member>
        <member name="T:Alis.Core.Physic.Shared.Optimization.FixedArray2`1">
            <summary>
                The fixed array
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Optimization.FixedArray2`1.Value0">
            <summary>
                The value
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Optimization.FixedArray2`1.Value1">
            <summary>
                The value
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Optimization.FixedArray2`1.Item(System.Int32)">
            <summary>
                The index
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.FixedArray2`1.GetEnumerator">
            <summary>
                Gets the enumerator
            </summary>
            <returns>An enumerator of t</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.FixedArray2`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.FixedArray2`1.IndexOf(`0)">
            <summary>
                Indexes the of using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.FixedArray2`1.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.FixedArray2`1.Enumerate">
            <summary>
                Enumerates this instance
            </summary>
            <returns>An enumerable of t</returns>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Optimization.FixedArray3`1">
            <summary>
                The fixed array
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Optimization.FixedArray3`1.Value0">
            <summary>
                The value
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Optimization.FixedArray3`1.Value1">
            <summary>
                The value
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Optimization.FixedArray3`1.Value2">
            <summary>
                The value
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Optimization.FixedArray3`1.Item(System.Int32)">
            <summary>
                The index
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.FixedArray3`1.GetEnumerator">
            <summary>
                Gets the enumerator
            </summary>
            <returns>An enumerator of t</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.FixedArray3`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.FixedArray3`1.IndexOf(`0)">
            <summary>
                Indexes the of using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.FixedArray3`1.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.FixedArray3`1.Enumerate">
            <summary>
                Enumerates this instance
            </summary>
            <returns>An enumerable of t</returns>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Optimization.IPoolable`1">
            <summary>
                The poolable interface
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Alis.Core.Physic.Shared.Optimization.IPoolable`1.Reset">
            <summary>
                Resets this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Shared.PolygonError">
            <summary>
                The polygon error enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.NoError">
            <summary>There were no errors in the polygon</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.InvalidAmountOfVertices">
            <summary>Polygon must have between 3 and Settings.MaxPolygonVertices vertices.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.NotSimple">
            <summary>Polygon must be simple. This means no overlapping edges.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.NotCounterClockWise">
            <summary>Polygon must have a counter clockwise winding.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.NotConvex">
            <summary>The polygon is concave, it needs to be convex.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.AreaTooSmall">
            <summary>Polygon area is too small.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.SideTooSmall">
            <summary>The polygon has a side that is too short.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Pool`1">
            <summary>
                The pool class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Pool`1.objectCreator">
            <summary>
                The object creator
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Pool`1.objectReset">
            <summary>
                The object reset
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Pool`1.queue">
            <summary>
                The queue
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Pool`1.#ctor(System.Func{`0},System.Action{`0},System.Int32,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Pool`1" /> class
            </summary>
            <param name="objectCreator">The object creator</param>
            <param name="objectReset">The object reset</param>
            <param name="capacity">The capacity</param>
            <param name="preCreateInstances">The pre create instances</param>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Pool`1.LeftInPool">
            <summary>
                Gets the value of the left in pool
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Pool`1.GetFromPool(System.Boolean)">
            <summary>
                Gets the from pool using the specified reset
            </summary>
            <param name="reset">The reset</param>
            <returns>The obj</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Pool`1.GetManyFromPool(System.Int32)">
            <summary>
                Gets the many from pool using the specified count
            </summary>
            <param name="count">The count</param>
            <returns>An enumerable of t</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Pool`1.ReturnToPool(`0,System.Boolean)">
            <summary>
                Returns the to pool using the specified obj
            </summary>
            <param name="obj">The obj</param>
            <param name="reset">The reset</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Pool`1.ReturnToPool(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
                Returns the to pool using the specified objs
            </summary>
            <param name="objs">The objs</param>
            <param name="reset">The reset</param>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Rot">
            <summary>Rotation</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Rot.S">
            Sine and cosine
        </member>
        <member name="F:Alis.Core.Physic.Shared.Rot.C">
            Sine and cosine
        </member>
        <member name="M:Alis.Core.Physic.Shared.Rot.#ctor(System.Single)">
            <summary>Initialize from an angle in radians</summary>
            <param name="angle">Angle in radians</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Rot.Set(System.Single)">
            <summary>Set using an angle in radians.</summary>
            <param name="angle"></param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Rot.SetIdentity">
            <summary>Set to the identity rotation</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Rot.GetAngle">
            <summary>Get the angle in radians</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Rot.GetXAxis">
            <summary>Get the x-axis</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Rot.GetYAxis">
            <summary>Get the y-axis</summary>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Transform">
            <summary>
                A transform contains translation and rotation. It is used to represent the position and orientation of rigid
                frames.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Transform.P">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Transform.Q">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Transform.#ctor(System.Numerics.Vector2@,Alis.Core.Physic.Shared.Rot@)">
            <summary>Initialize using a position vector and a rotation matrix.</summary>
            <param name="position">The position.</param>
            <param name="rotation">The r.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Transform.SetIdentity">
            <summary>Set this to the identity transform.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Transform.Set(System.Numerics.Vector2,System.Single)">
            <summary>Set this based on the position and angle.</summary>
            <param name="position">The position.</param>
            <param name="angle">The angle.</param>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Vertices">
            <summary>
                The vertices class
            </summary>
            <seealso cref="T:System.Collections.Generic.List`1" />
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Vertices" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Vertices" /> class
            </summary>
            <param name="capacity">The capacity</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.#ctor(System.Collections.Generic.IEnumerable{System.Numerics.Vector2})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Vertices" /> class
            </summary>
            <param name="vertices">The vertices</param>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Vertices.AttachedToBody">
            <summary>
                Gets or sets the value of the attached to body
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Vertices.Holes">
            <summary>
                You can add holes to this collection. It will get respected by some of the triangulation algoithms, but
                otherwise not used.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.NextIndex(System.Int32)">
            <summary>Gets the next index. Used for iterating all the edges with wrap-around.</summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.NextVertex(System.Int32)">
            <summary>Gets the next vertex. Used for iterating all the edges with wrap-around.</summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.PreviousIndex(System.Int32)">
            <summary>Gets the previous index. Used for iterating all the edges with wrap-around.</summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.PreviousVertex(System.Int32)">
            <summary>Gets the previous vertex. Used for iterating all the edges with wrap-around.</summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.GetSignedArea">
            <summary>Gets the signed area. If the area is less than 0, it indicates that the polygon is clockwise winded.</summary>
            <returns>The signed area</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.GetArea">
            <summary>Gets the area.</summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.GetCentroid">
            <summary>Gets the centroid.</summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.GetAabb">
            <summary>Returns an AABB that fully contains this polygon.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Translate(System.Numerics.Vector2)">
            <summary>Translates the vertices with the specified vector.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Translate(System.Numerics.Vector2@)">
            <summary>Translates the vertices with the specified vector.</summary>
            <param name="value">The vector.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Scale(System.Numerics.Vector2)">
            <summary>Scales the vertices with the specified vector.</summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Scale(System.Numerics.Vector2@)">
            <summary>Scales the vertices with the specified vector.</summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Rotate(System.Single)">
            <summary>
                Rotate the vertices with the defined value in radians. Warning: Using this method on an active set of vertices
                of a Body, will cause problems with collisions. Use Body.Rotation instead.
            </summary>
            <param name="value">The amount to rotate by in radians.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.IsConvex">
            <summary>
                Determines whether the polygon is convex. O(n^2) running time. Assumptions: - The polygon is in counter
                clockwise order - The polygon has no overlapping edges
            </summary>
            <returns><c>true</c> if it is convex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.IsCounterClockWise">
            <summary>
                Indicates if the vertices are in counter clockwise order. Warning: If the area of the polygon is 0, it is
                unable to determine the winding.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.ForceCounterClockWise">
            <summary>Forces the vertices to be counter clock wise order.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.IsSimple">
            <summary>Checks if the vertices forms an simple polygon by checking for edge crossings.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.CheckPolygon">
            <summary>
                Checks if the polygon is valid for use in the engine. Performs a full check, for simplicity, convexity,
                orientation, minimum angle, and volume. From Eric Jordan's convex decomposition library
            </summary>
            <returns>PolygonError.NoError if there were no error.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.ProjectToAxis(System.Numerics.Vector2@,System.Single@,System.Single@)">
            <summary>Projects to axis.</summary>
            <param name="axis">The axis.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.PointInPolygon(System.Numerics.Vector2@)">
            <summary>Winding number test for a point in a polygon.</summary>
            See more info about the algorithm here: http://softsurfer.com/Archive/algorithm_0103/algorithm_0103.htm
            <param name="point">The point to be tested.</param>
            <returns>
                -1 if the winding number is zero and the point is outside the polygon, 1 if the point is inside the polygon,
                and 0 if the point is on the polygons edge.
            </returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.PointInPolygonAngle(System.Numerics.Vector2@)">
            <summary>
                Compute the sum of the angles made between the test point and each pair of points making up the polygon. If
                this sum is 2pi then the point is an interior point, if 0 then the point is an exterior point. ref:
                http://ozviz.wasp.uwa.edu.au/~pbourke/geometry/insidepoly/  - Solution 2
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Transform(System.Numerics.Matrix4x4@)">
            <summary>Transforms the polygon using the defined matrix.</summary>
            <param name="transform">The matrix to use as transformation.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Transform(System.Numerics.Vector2[],System.Numerics.Matrix4x4@,System.Numerics.Vector2[])">
            <summary>
                Transforms the source array
            </summary>
            <param name="sourceArray">The source array</param>
            <param name="matrix">The matrix</param>
            <param name="destinationArray">The destination array</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Transform(System.Numerics.Vector2[],System.Int32,System.Numerics.Matrix4x4@,System.Numerics.Vector2[],System.Int32,System.Int32)">
            <summary>
                Transforms the source array
            </summary>
            <param name="sourceArray">The source array</param>
            <param name="sourceIndex">The source index</param>
            <param name="matrix">The matrix</param>
            <param name="destinationArray">The destination array</param>
            <param name="destinationIndex">The destination index</param>
            <param name="length">The length</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Destination array length is lesser than destinationIndex + length</exception>
            <exception cref="T:System.ArgumentException">Source array length is lesser than sourceIndex + length</exception>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.FlipHorizontally">
            <summary>
                Flips the horizontally
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.FlipVertically">
            <summary>
                Flips the vertically
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.ToString">
            <summary>
                Returns the string
            </summary>
            <returns>The string</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.ConvexHull.ChainHull">
            <summary>
                Andrew's Monotone Chain Convex Hull algorithm. Used to get the convex hull of a point cloud.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.ConvexHull.ChainHull.PointComparerPrivate">
            <summary>
                The point comparer
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.ConvexHull.ChainHull.GetConvexHull(Alis.Core.Physic.Shared.Vertices)">
            <summary>Returns the convex hull from the given vertices..</summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.ConvexHull.GiftWrap">
            <summary>
                Giftwrap convex hull algorithm. O(n * h) time complexity, where n is the number of points and h is the number
                of points on the convex hull. See http://en.wikipedia.org/wiki/Gift_wrapping_algorithm for more details.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.ConvexHull.GiftWrap.GetConvexHull(Alis.Core.Physic.Shared.Vertices)">
            <summary>Returns the convex hull from the given vertices.</summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.ConvexHull.Melkman">
            <summary>
                Creates a convex hull.
                Note:
                1. Vertices must be of a simple polygon, i.e. edges do not overlap.
                2. Melkman does not work on point clouds
            </summary>
            <remarks>
                Implemented using Melkman's Convex Hull Algorithm - O(n) time complexity.
                Reference: http://www.ams.sunysb.edu/~jsbm/courses/345/melkman.pdf
            </remarks>
        </member>
        <member name="M:Alis.Core.Physic.Tools.ConvexHull.Melkman.GetConvexHull(Alis.Core.Physic.Shared.Vertices)">
            <summary>Returns a convex hull from the given vertices.</summary>
            <returns>A convex hull in counter clockwise winding order.</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.ConvexHull.PointComparer">
            <summary>
                The point comparer class
            </summary>
            <seealso cref="T:System.Collections.Generic.Comparer`1" />
        </member>
        <member name="M:Alis.Core.Physic.Tools.ConvexHull.PointComparer.Compare(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Compares the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The int</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Cutting.Simple.CuttingTools">
            <summary>
                The cutting tools class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.Simple.CuttingTools.SplitShape(Alis.Core.Physic.Dynamics.Fixture,System.Numerics.Vector2,System.Numerics.Vector2,Alis.Core.Physic.Shared.Vertices@,Alis.Core.Physic.Shared.Vertices@)">
            <summary>Split a fixture into 2 vertices collections using the given entry and exit-point.</summary>
            <param name="fixture">The Fixture to split</param>
            <param name="entryPoint">The entry point - The start point</param>
            <param name="exitPoint">The exit point - The end point</param>
            <param name="first">The first collection of vertexes</param>
            <param name="second">The second collection of vertexes</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.Simple.CuttingTools.Cut(Alis.Core.Physic.World,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                This is a high-level function to cuts fixtures inside the given world, using the start and end points. Note:
                We don't support cutting when the start or end is inside a shape.
            </summary>
            <param name="world">The world.</param>
            <param name="start">The startpoint.</param>
            <param name="end">The endpoint.</param>
            <returns>True if the cut was performed.</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Cutting.Simple.PolyClipError">
            <summary>
                The poly clip error enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Cutting.Simple.PolyClipError.None">
            <summary>
                The none poly clip error
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Cutting.Simple.PolyClipError.DegeneratedOutput">
            <summary>
                The degenerated output poly clip error
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Cutting.Simple.PolyClipError.NonSimpleInput">
            <summary>
                The non simple input poly clip error
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Cutting.Simple.PolyClipError.BrokenResult">
            <summary>
                The broken result poly clip error
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Cutting.Simple.PolyClipType">
            <summary>
                The poly clip type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Cutting.Simple.PolyClipType.Intersect">
            <summary>
                The intersect poly clip type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Cutting.Simple.PolyClipType.Union">
            <summary>
                The union poly clip type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Cutting.Simple.PolyClipType.Difference">
            <summary>
                The difference poly clip type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Cutting.YuPengClipper">
            <summary>
                The yu peng clipper class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Cutting.YuPengClipper.ClipperEpsilonSquared">
            <summary>
                The clipper epsilon squared
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Union(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Tools.Cutting.Simple.PolyClipError@)">
            <summary>
                Unions the polygon 1
            </summary>
            <param name="polygon1">The polygon</param>
            <param name="polygon2">The polygon</param>
            <param name="error">The error</param>
            <returns>A list of vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Difference(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Tools.Cutting.Simple.PolyClipError@)">
            <summary>
                Differences the polygon 1
            </summary>
            <param name="polygon1">The polygon</param>
            <param name="polygon2">The polygon</param>
            <param name="error">The error</param>
            <returns>A list of vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Intersect(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Tools.Cutting.Simple.PolyClipError@)">
            <summary>
                Intersects the polygon 1
            </summary>
            <param name="polygon1">The polygon</param>
            <param name="polygon2">The polygon</param>
            <param name="error">The error</param>
            <returns>A list of vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Execute(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Tools.Cutting.Simple.PolyClipType,Alis.Core.Physic.Tools.Cutting.Simple.PolyClipError@)">
            <summary>
                Implements "A new algorithm for Boolean operations on general polygons" available here:
                http://liama.ia.ac.cn/wiki/_media/user:dong:dong_cg_05.pdf Merges two polygons, a subject and a clip with the
                specified
                operation. Polygons may not be self-intersecting. Warning: May yield incorrect results or even crash if polygons
                contain collinear points.
            </summary>
            <param name="subject">The subject polygon.</param>
            <param name="clip">The clip polygon, which is added, substracted or intersected with the subject</param>
            <param name="clipType">The operation to be performed. Either Union, Difference or Intersection.</param>
            <param name="error">The error generated (if any)</param>
            <returns>
                A list of closed polygons, which make up the result of the clipping operation. Outer contours are ordered
                counter clockwise, holes are ordered clockwise.
            </returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.CalculateIntersections(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices@,Alis.Core.Physic.Shared.Vertices@)">
            <summary>Calculates all intersections between two polygons.</summary>
            <param name="polygon1">The first polygon.</param>
            <param name="polygon2">The second polygon.</param>
            <param name="slicedPoly1">Returns the first polygon with added intersection points.</param>
            <param name="slicedPoly2">Returns the second polygon with added intersection points.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.CalculateSimplicalChain(Alis.Core.Physic.Shared.Vertices,System.Collections.Generic.List{System.Single}@,System.Collections.Generic.List{Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge}@)">
            <summary>Calculates the simplical chain corresponding to the input polygon.</summary>
            <remarks>Used by method <c>Execute()</c>.</remarks>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.CalculateResultChain(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge},Alis.Core.Physic.Tools.Cutting.Simple.PolyClipType,System.Collections.Generic.List{Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge}@)">
            <summary>
                Calculates the characteristics function for all edges of the given simplical chains and builds the result
                chain.
            </summary>
            <remarks>Used by method <c>Execute()</c>.</remarks>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.BuildPolygonsFromChain(System.Collections.Generic.List{Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge},System.Collections.Generic.List{Alis.Core.Physic.Shared.Vertices}@)">
            <summary>Calculates the polygon(s) from the result simplical chain.</summary>
            <remarks>Used by method <c>Execute()</c>.</remarks>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.CalculateBeta(System.Numerics.Vector2,Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge,System.Single)">
            <summary>Needed to calculate the characteristics function of a simplex.</summary>
            <remarks>Used by method <c>CalculateEdgeCharacter()</c>.</remarks>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.GetAlpha(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Needed for sorting multiple intersections points on the same edge.</summary>
            <remarks>Used by method <c>CalculateIntersections()</c>.</remarks>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.CalculateSimplexCoefficient(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Returns the coefficient of a simplex.</summary>
            <remarks>Used by method <c>CalculateSimplicalChain()</c>.</remarks>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.PointInSimplex(System.Numerics.Vector2,Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge)">
            <summary>Winding number test for a point in a simplex.</summary>
            <param name="point">The point to be tested.</param>
            <param name="edge">The edge that the point is tested against.</param>
            <returns>False if the winding number is even and the point is outside the simplex and True otherwise.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.PointOnLineSegment(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Tests if a point lies on a line segment.</summary>
            <remarks>Used by method <c>CalculateBeta()</c>.</remarks>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.VectorEqual(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Describes whether vector equal
            </summary>
            <param name="vec1">The vec</param>
            <param name="vec2">The vec</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge">
            <summary>Specifies an Edge. Edges are used to represent simplicies in simplical chains</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge" /> class
            </summary>
            <param name="edgeStart">The edge start</param>
            <param name="edgeEnd">The edge end</param>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge.EdgeStart">
            <summary>
                Gets or sets the value of the edge start
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge.EdgeEnd">
            <summary>
                Gets or sets the value of the edge end
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge.GetCenter">
            <summary>
                Gets the center
            </summary>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge.Equals(System.Object)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="obj">The obj</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge.Equals(Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="e">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Cutting.YuPengClipper.Edge.GetHashCode">
            <summary>
                Gets the hash code
            </summary>
            <returns>The int</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.PathGenerator.LinkFactory">
            <summary>
                The link factory class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.LinkFactory.CreateChain(Alis.Core.Physic.World,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>Creates a chain.</summary>
            <param name="world">The world.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="linkWidth">The width.</param>
            <param name="linkHeight">The height.</param>
            <param name="numberOfLinks">The number of links.</param>
            <param name="linkDensity">The link density.</param>
            <param name="attachRopeJoint">
                Creates a rope joint between start and end. This enforces the length of the rope. Said in
                another way: it makes the rope less bouncy.
            </param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.PathGenerator.Path">
            <summary>
                Path: Very similar to Vertices, but this class contains vectors describing control points on a Catmull-Rom
                curve.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.PathGenerator.Path.ControlPoints">
            <summary>All the points that makes up the curve</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.PathGenerator.Path.deltaT">
            <summary>
                The delta
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.PathGenerator.Path" /> class.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.#ctor(System.Numerics.Vector2[])">
            <summary>Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.PathGenerator.Path" /> class.</summary>
            <param name="vertices">The vertices to created the path from.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.#ctor(System.Collections.Generic.IList{System.Numerics.Vector2})">
            <summary>Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.PathGenerator.Path" /> class.</summary>
            <param name="vertices">The vertices to created the path from.</param>
        </member>
        <member name="P:Alis.Core.Physic.Tools.PathGenerator.Path.Closed">
            <summary>True if the curve is closed.</summary>
            <value><c>true</c> if closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.NextIndex(System.Int32)">
            <summary>Gets the next index of a controlpoint</summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.PreviousIndex(System.Int32)">
            <summary>Gets the previous index of a controlpoint</summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.Translate(System.Numerics.Vector2@)">
            <summary>Translates the control points by the specified vector.</summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.Scale(System.Numerics.Vector2@)">
            <summary>Scales the control points by the specified vector.</summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.Rotate(System.Single)">
            <summary>Rotate the control points by the defined value in radians.</summary>
            <param name="value">The amount to rotate by in radians.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.ToString">
            <summary>
                Returns the string
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.GetVertices(System.Int32)">
            <summary>Returns a set of points defining the curve with the specifed number of divisions between each control point.</summary>
            <param name="divisions">Number of divisions between each control point.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.GetPosition(System.Single)">
            <summary>
                Gets the position using the specified time
            </summary>
            <param name="time">The time</param>
            <exception cref="T:System.Exception">You need at least 2 control points to calculate a position.</exception>
            <returns>The temp</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.CatmullRom(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
                Catmulls the rom using the specified value 1
            </summary>
            <param name="value1">The value</param>
            <param name="value2">The value</param>
            <param name="value3">The value</param>
            <param name="value4">The value</param>
            <param name="amount">The amount</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.GetPositionNormal(System.Single)">
            <summary>Gets the normal for the given time.</summary>
            <param name="time">The time</param>
            <returns>The normal.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.Add(System.Numerics.Vector2)">
            <summary>
                Adds the point
            </summary>
            <param name="point">The point</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.Remove(System.Numerics.Vector2)">
            <summary>
                Removes the point
            </summary>
            <param name="point">The point</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.RemoveAt(System.Int32)">
            <summary>
                Removes the at using the specified index
            </summary>
            <param name="index">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.GetLength">
            <summary>
                Gets the length
            </summary>
            <returns>The length</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.Path.SubdivideEvenly(System.Int32)">
            <summary>
                Subdivides the evenly using the specified divisions
            </summary>
            <param name="divisions">The divisions</param>
            <returns>The verts</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.PathGenerator.PathManager">
            <summary>An easy to use manager for creating paths.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.PathManager.ConvertPathToEdges(Alis.Core.Physic.Tools.PathGenerator.Path,Alis.Core.Physic.Dynamics.Body,System.Int32)">
            <summary>Convert a path into a set of edges and attaches them to the specified body. Note: use only for static edges.</summary>
            <param name="path">The path.</param>
            <param name="body">The body.</param>
            <param name="subdivisions">The subdivisions.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.PathManager.ConvertPathToPolygon(Alis.Core.Physic.Tools.PathGenerator.Path,Alis.Core.Physic.Dynamics.Body,System.Single,System.Int32)">
            <summary>Convert a closed path into a polygon. Convex decomposition is automatically performed.</summary>
            <param name="path">The path.</param>
            <param name="body">The body.</param>
            <param name="density">The density.</param>
            <param name="subdivisions">The subdivisions.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.PathManager.EvenlyDistributeShapesAlongPath(Alis.Core.Physic.World,Alis.Core.Physic.Tools.PathGenerator.Path,System.Collections.Generic.IEnumerable{Alis.Core.Physic.Collision.Shapes.Shape},Alis.Core.Physic.Dynamics.BodyType,System.Int32,System.Object)">
            <summary>Duplicates the given Body along the given path for approximately the given copies.</summary>
            <param name="world">The world.</param>
            <param name="path">The path.</param>
            <param name="shapes">The shapes.</param>
            <param name="type">The type.</param>
            <param name="copies">The copies.</param>
            <param name="userData"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.PathManager.EvenlyDistributeShapesAlongPath(Alis.Core.Physic.World,Alis.Core.Physic.Tools.PathGenerator.Path,Alis.Core.Physic.Collision.Shapes.Shape,Alis.Core.Physic.Dynamics.BodyType,System.Int32,System.Object)">
            <summary>Duplicates the given Body along the given path for approximately the given copies.</summary>
            <param name="world">The world.</param>
            <param name="path">The path.</param>
            <param name="shape">The shape.</param>
            <param name="type">The type.</param>
            <param name="copies">The copies.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.PathManager.MoveBodyOnPath(Alis.Core.Physic.Tools.PathGenerator.Path,Alis.Core.Physic.Dynamics.Body,System.Single,System.Single,System.Single)">
            <summary>Moves the given body along the defined path.</summary>
            <param name="path">The path.</param>
            <param name="body">The body.</param>
            <param name="time">The time.</param>
            <param name="strength">The strength.</param>
            <param name="timeStep">The time step.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PathGenerator.PathManager.AttachBodiesWithRevoluteJoint(Alis.Core.Physic.World,System.Collections.Generic.List{Alis.Core.Physic.Dynamics.Body},System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean,System.Boolean)">
            <summary>Attaches the bodies with revolute joints.</summary>
            <param name="world">The world.</param>
            <param name="bodies">The bodies.</param>
            <param name="localAnchorA">The local anchor A.</param>
            <param name="localAnchorB">The local anchor B.</param>
            <param name="connectFirstAndLast">if set to <c>true</c> [connect first and last].</param>
            <param name="collideConnected">if set to <c>true</c> [collide connected].</param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.PolygonManipulation.SimpleCombiner">
            <summary>
                Combines a list of triangles into a list of convex polygons. Starts with a seed triangle, keep adding
                triangles to it until you can't add any more without making the polygon non-convex.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PolygonManipulation.SimpleCombiner.PolygonizeTriangles(System.Collections.Generic.List{Alis.Core.Physic.Shared.Vertices},System.Int32,System.Single)">
            <summary>Combine a list of triangles into a list of convex polygons. Note: This only works on triangles.</summary>
            <param name="triangles">The triangles.</param>
            <param name="maxPolys">The maximun number of polygons to return.</param>
            <param name="tolerance">The tolerance</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PolygonManipulation.SimpleCombiner.AddTriangle(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Adds the triangle using the specified t
            </summary>
            <param name="t">The </param>
            <param name="vertices">The vertices</param>
            <returns>The result</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.PolygonManipulation.SimplifyTools">
            <summary>Provides a set of tools to simplify polygons in various ways.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PolygonManipulation.SimplifyTools.CollinearSimplify(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>Removes all collinear points on the polygon.</summary>
            <param name="vertices">The polygon that needs simplification.</param>
            <param name="collinearityTolerance">The collinearity tolerance.</param>
            <returns>A simplified polygon.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PolygonManipulation.SimplifyTools.DouglasPeuckerSimplify(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>
                Ramer-Douglas-Peucker polygon simplification algorithm. This is the general recursive version that does not
                use the speed-up technique by using the Melkman convex hull. If you pass in 0, it will remove all collinear points.
            </summary>
            <returns>The simplified polygon</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PolygonManipulation.SimplifyTools.SimplifySection(Alis.Core.Physic.Shared.Vertices,System.Int32,System.Int32,System.Boolean[],System.Single)">
            <summary>
                Simplifies the section using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="i">The </param>
            <param name="j">The </param>
            <param name="usePoint">The use point</param>
            <param name="distanceTolerance">The distance tolerance</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PolygonManipulation.SimplifyTools.MergeParallelEdges(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>Merges all parallel edges in the list of vertices</summary>
            <param name="vertices">The vertices.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PolygonManipulation.SimplifyTools.MergeIdenticalPoints(Alis.Core.Physic.Shared.Vertices)">
            <summary>Merges the identical points in the polygon.</summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PolygonManipulation.SimplifyTools.ReduceByDistance(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>Reduces the polygon by distance.</summary>
            <param name="vertices">The vertices.</param>
            <param name="distance">The distance between points. Points closer than this will be removed.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PolygonManipulation.SimplifyTools.ReduceByNth(Alis.Core.Physic.Shared.Vertices,System.Int32)">
            <summary>Reduces the polygon by removing the Nth vertex in the vertices list.</summary>
            <param name="vertices">The vertices.</param>
            <param name="nth">The Nth point to remove. Example: 5.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.PolygonManipulation.SimplifyTools.ReduceByArea(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>
                Simplify the polygon by removing all points that in pairs of 3 have an area less than the tolerance. Pass in 0
                as tolerance, and it will only remove collinear points.
            </summary>
            <param name="vertices"></param>
            <param name="areaTolerance"></param>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.TextureTools.MarchingSquares">
            <summary>
                The marching squares class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.LookMarch">
            <summary>
                Linearly interpolate between (x0 to x1) given a value at these coordinates (v0 and v1) such as to approximate
                value(return) = 0
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.DetectSquares(Alis.Core.Physic.Shared.Aabb,System.Single,System.Single,System.SByte[0:,0:],System.Int32,System.Boolean)">
            <summary>
                Marching squares over the given domain using the mesh defined via the dimensions (wid,hei) to build a set of
                polygons such that f(x,y) less than 0, using the given number 'bin' for recursive linear inteprolation along cell
                boundaries. if 'comb' is true, then the polygons will also be composited into larger possible concave polygons.
            </summary>
            <param name="domain"></param>
            <param name="cellWidth"></param>
            <param name="cellHeight"></param>
            <param name="f"></param>
            <param name="lerpCount"></param>
            <param name="combine"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.Lerp(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Lerps the x 0
            </summary>
            <param name="x0">The </param>
            <param name="x1">The </param>
            <param name="v0">The </param>
            <param name="v1">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.Xlerp(System.Single,System.Single,System.Single,System.Single,System.Single,System.SByte[0:,0:],System.Int32)">
            <summary>Recursive linear interpolation for use in marching squares</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.Ylerp(System.Single,System.Single,System.Single,System.Single,System.Single,System.SByte[0:,0:],System.Int32)">
            <summary>Recursive linear interpolation for use in marching squares</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.Square(System.Single)">
            <summary>Square value for use in marching squares</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.VecDsq(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Vecs the dsq using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.VecCross(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Vecs the cross using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.MarchSquare(System.SByte[0:,0:],System.SByte[0:,0:],Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPoly@,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Look-up table to relate polygon key with the vertices that should be used for the sub polygon in marching
                squares Perform a single celled marching square for for the given cell defined by (x0,y0) (x1,y1) using the
                function f
                for recursive interpolation, given the look-up table 'fs' of the values of 'f' at cell vertices with the result to
                be
                stored in 'poly' given the actual coordinates of 'ax' 'ay' in the marching squares mesh.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CombLeft(Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPoly@,Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPoly@)">
            <summary>
                Used in polygon composition to composit polygons into scan lines Combining polya and polyb into one
                super-polygon stored in polya.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1">
            <summary>Designed as a complete port of CxFastList from CxStd.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.head">
            <summary>
                The head
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Begin">
            <summary>Iterator to start of list (O(1))</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.End">
            <summary>Iterator to end of list (O(1))</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Front">
            <summary>Returns first element of list (O(1))</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Add(`0)">
            <summary>add object to list (O(1))</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Remove(`0)">
            <summary>remove object from list, returns true if an element was removed (O(n))</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Pop">
            <summary>
                pop element from head of list (O(1)) Note: this does not return the object popped! There is good reason to
                this, and it regards the Alloc list variants which guarantee objects are released to the object pool. You do not
                want
                to retrieve an element through pop or else that object may suddenly be used by another piece of code which
                retrieves it
                from the object pool.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Insert(Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastListNode{`0},`0)">
            <summary>insert object after 'node' returning an iterator to the inserted object.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Erase(Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastListNode{`0},Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastListNode{`0})">
            <summary>
                removes the element pointed to by 'node' with 'prev' being the previous iterator, returning an iterator to the
                element following that of 'node' (O(1))
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Empty">
            <summary>whether the list is empty (O(1))</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Size">
            <summary>computes size of list (O(n))</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Clear">
            <summary>empty the list (O(1) if CxMixList, O(n) otherwise)</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Has(`0)">
            <summary>returns true if 'value' is an element of the list (O(n))</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.Find(`0)">
            <summary>
                Finds the value
            </summary>
            <param name="value">The value</param>
            <returns>A cx fast list node of t</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastList`1.GetListOfElements">
            <summary>
                Gets the list of elements
            </summary>
            <returns>The list</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastListNode`1">
            <summary>
                The cx fast list node class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastListNode`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastListNode`1" /> class
            </summary>
            <param name="obj">The obj</param>
        </member>
        <member name="P:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastListNode`1.Elt">
            <summary>
                The elt
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastListNode`1.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastListNode`1.GetElem">
            <summary>
                Elems this instance
            </summary>
            <returns>The elt</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.CxFastListNode`1.GetNext">
            <summary>
                Nexts this instance
            </summary>
            <returns>The next</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPoly">
            <summary>
                The geom poly class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPoly.Length">
            <summary>
                The length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPoly.Points">
            <summary>
                The points
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPoly.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPoly" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPolyVal">
            <summary>
                The geom poly val class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPolyVal.Key">
            Associated polygon at coordinate *
            Key of original sub-polygon *
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPolyVal.GeomP">
            <summary>
                The geom
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPolyVal.#ctor(Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPoly,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.TextureTools.MarchingSquares.GeomPolyVal" /> class
            </summary>
            <param name="geomP">The geom</param>
            <param name="k">The </param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.TextureTools.Terrain">
            <summary>Simple class to maintain a terrain. It can keep track</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.bodyMap">
            <summary>Generated bodies.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.CellSize">
            <summary>Points per cell.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.Center">
            <summary>Center of terrain in world units.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.Decomposer">
            <summary>
                Decomposer to use when regenerating terrain. Can be changed on the fly without consequence. Note: Some
                decomposerers are unstable.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.dirtyArea">
            <summary>
                The dirty area
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.Height">
            <summary>Height of terrain in world units.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.Iterations">
            <summary>
                Number of iterations to perform in the Marching Squares algorithm. Note: More then 3 has almost no effect on
                quality.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.localHeight">
            <summary>
                The local height
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.localWidth">
            <summary>
                The local width
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.PointsPerUnit">
            <summary>Points per each world unit used to define the terrain in the point cloud.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.SubCellSize">
            <summary>Points per sub cell.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.terrainMap">
            <summary>Point cloud defining the terrain.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.topLeft">
            <summary>
                The top left
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.Width">
            <summary>Width of terrain in world units.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.World">
            <summary>World to manage terrain in.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.xnum">
            <summary>
                The xnum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.Terrain.ynum">
            <summary>
                The ynum
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.Terrain.#ctor(Alis.Core.Physic.World,Alis.Core.Physic.Shared.Aabb)">
            <summary>Creates a new terrain.</summary>
            <param name="world">The World</param>
            <param name="area">The area of the terrain.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.Terrain.#ctor(Alis.Core.Physic.World,System.Numerics.Vector2,System.Single,System.Single)">
            <summary>Creates a new terrain</summary>
            <param name="world">The World</param>
            <param name="position">The position (center) of the terrain.</param>
            <param name="width">The width of the terrain.</param>
            <param name="height">The height of the terrain.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.Terrain.Initialize">
            <summary>Initialize the terrain for use.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.Terrain.ApplyData(System.SByte[0:,0:],System.Numerics.Vector2)">
            <summary>Apply the specified texture data to the terrain.</summary>
            <param name="data"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.Terrain.ModifyTerrain(System.Numerics.Vector2,System.SByte)">
            <summary>Modify a single point in the terrain.</summary>
            <param name="location">World location to modify. Automatically clipped.</param>
            <param name="value">-1 = inside terrain, 1 = outside terrain</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.Terrain.RegenerateTerrain">
            <summary>Regenerate the terrain.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.Terrain.RemoveOldData(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Removes the old data using the specified x start
            </summary>
            <param name="xStart">The start</param>
            <param name="xEnd">The end</param>
            <param name="yStart">The start</param>
            <param name="yEnd">The end</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.Terrain.GenerateTerrain(System.Int32,System.Int32)">
            <summary>
                Generates the terrain using the specified gx
            </summary>
            <param name="gx">The gx</param>
            <param name="gy">The gy</param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.TextureTools.TextureConverter">
            <summary>
                The texture converter class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.alphaTolerance">
            <summary>
                The alpha tolerance
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.data">
            <summary>
                The data
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.dataLength">
            <summary>
                The data length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.height">
            <summary>
                The height
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.holeDetection">
            <summary>
                The hole detection
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.hullTolerance">
            <summary>
                The hull tolerance
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.multipartDetection">
            <summary>
                The multipart detection
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.pixelOffsetOptimization">
            <summary>
                The pixel offset optimization
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.polygonDetectionType">
            <summary>
                The polygon detection type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.tempIsSolidX">
            <summary>
                The temp is solid
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.tempIsSolidY">
            <summary>
                The temp is solid
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.transform">
            <summary>
                The identity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.width">
            <summary>
                The width
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.TextureTools.TextureConverter" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.#ctor(System.Nullable{System.Byte},System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Numerics.Matrix4x4})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.TextureTools.TextureConverter" /> class
            </summary>
            <param name="alphaTolerance">The alpha tolerance</param>
            <param name="hullTolerance">The hull tolerance</param>
            <param name="holeDetection">The hole detection</param>
            <param name="multipartDetection">The multipart detection</param>
            <param name="pixelOffsetOptimization">The pixel offset optimization</param>
            <param name="transform">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.#ctor(System.UInt32[],System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.TextureTools.TextureConverter" /> class
            </summary>
            <param name="data">The data</param>
            <param name="width">The width</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.#ctor(System.UInt32[],System.Int32,System.Nullable{System.Byte},System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Numerics.Matrix4x4})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.TextureTools.TextureConverter" /> class
            </summary>
            <param name="data">The data</param>
            <param name="width">The width</param>
            <param name="alphaTolerance">The alpha tolerance</param>
            <param name="hullTolerance">The hull tolerance</param>
            <param name="holeDetection">The hole detection</param>
            <param name="multipartDetection">The multipart detection</param>
            <param name="pixelOffsetOptimization">The pixel offset optimization</param>
            <param name="transform">The transform</param>
        </member>
        <member name="P:Alis.Core.Physic.Tools.TextureTools.TextureConverter.PolygonDetectionType">
            <summary>Get or set the polygon detection type.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.TextureTools.TextureConverter.HoleDetection">
            <summary>Will detect texture 'holes' if set to true. Slows down the detection. Default is false.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.TextureTools.TextureConverter.MultipartDetection">
            <summary>Will detect texture multiple 'solid' isles if set to true. Slows down the detection. Default is false.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.TextureTools.TextureConverter.PixelOffsetOptimization">
            <summary>
                Will optimize the vertex positions along the interpolated normal between two edges about a half pixel (post
                processing). Default is false.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.TextureTools.TextureConverter.Transform">
            <summary>Can be used for scaling.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.TextureTools.TextureConverter.AlphaTolerance">
            <summary>
                Alpha (coverage) tolerance. Default is 20: Every pixel with a coverage value equal or greater to 20 will be
                counts as solid.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.TextureTools.TextureConverter.HullTolerance">
            <summary>Default is 1.5f.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.ClosepixelsLength">
            <summary>
                The closepixels length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.TextureConverter.ClosePixels">
            <summary>This array is meant to be read-only. It's not because it is accessed very frequently.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.Initialize(System.UInt32[],System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Single},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Numerics.Matrix4x4})">
            <summary>
                Initializes the data
            </summary>
            <param name="data">The data</param>
            <param name="width">The width</param>
            <param name="alphaTolerance">The alpha tolerance</param>
            <param name="hullTolerance">The hull tolerance</param>
            <param name="holeDetection">The hole detection</param>
            <param name="multipartDetection">The multipart detection</param>
            <param name="pixelOffsetOptimization">The pixel offset optimization</param>
            <param name="transform">The transform</param>
            <exception cref="T:System.ArgumentNullException">'data' can't be null if 'width' is set.</exception>
            <exception cref="T:System.ArgumentNullException">'width' can't be null if 'data' is set.</exception>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.SetTextureData(System.UInt32[],System.Int32)">
            <summary>
                Sets the texture data using the specified data
            </summary>
            <param name="data">The data</param>
            <param name="width">The width</param>
            <exception cref="T:System.ArgumentNullException">'data' can't be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                'data' length can't be less then 4. Your texture must be at least 2 x 2
                pixels in size.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                'width' can't be less then 2. Your texture must be at least 2 x 2 pixels
                in size.
            </exception>
            <exception cref="T:System.ArgumentException">'width' has an invalid value.</exception>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.DetectVertices(System.UInt32[],System.Int32)">
            <summary>Detects the vertices of the supplied texture data. (PolygonDetectionType.Integrated)</summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.DetectVertices(System.UInt32[],System.Int32,System.Boolean)">
            <summary>Detects the vertices of the supplied texture data.</summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <param name="holeDetection">if set to <c>true</c> it will perform hole detection.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.DetectVertices(System.UInt32[],System.Int32,System.Single,System.Byte,System.Boolean,System.Boolean)">
            <summary>Detects the vertices of the supplied texture data.</summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <param name="holeDetection">if set to <c>true</c> it will perform hole detection.</param>
            <param name="hullTolerance">The hull tolerance.</param>
            <param name="alphaTolerance">The alpha tolerance.</param>
            <param name="multiPartDetection">if set to <c>true</c> it will perform multi part detection.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.DetectVertices">
            <summary>
                Detects the vertices
            </summary>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.Exception">
                '_data' can't be null. You have to use SetTextureData(uint[] data, int width) before
                calling this method.
            </exception>
            <exception cref="T:System.Exception">
                '_width' has an invalid value. You have to use SetTextureData(uint[] data, int width)
                before calling this method.
            </exception>
            <exception cref="T:System.Exception">Couldn't detect any vertices.</exception>
            <returns>The detected polygons</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.ApplyTriangulationCompatibleWinding(System.Collections.Generic.List{Alis.Core.Physic.Shared.Vertices}@)">
            <summary>
                Applies the triangulation compatible winding using the specified detected polygons
            </summary>
            <param name="detectedPolygons">The detected polygons</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.ApplyTransform(System.Collections.Generic.List{Alis.Core.Physic.Shared.Vertices}@)">
            <summary>
                Applies the transform using the specified detected polygons
            </summary>
            <param name="detectedPolygons">The detected polygons</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.SearchHoleEntrance(Alis.Core.Physic.Shared.Vertices,System.Nullable{System.Numerics.Vector2})">
            <summary>
                Function to search for an entrance point of a hole in a polygon. It searches the polygon from top to bottom
                between the polygon edges.
            </summary>
            <param name="polygon">The polygon to search in.</param>
            <param name="lastHoleEntrance">The last entrance point.</param>
            <returns>The next holes entrance point. Null if there are no holes.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.DistanceToHullAcceptableHoles(Alis.Core.Physic.Shared.Vertices,System.Numerics.Vector2,System.Boolean)">
            <summary>
                Describes whether this instance distance to hull acceptable holes
            </summary>
            <param name="polygon">The polygon</param>
            <param name="point">The point</param>
            <param name="higherDetail">The higher detail</param>
            <exception cref="T:System.ArgumentNullException">'polygon' can't be null.</exception>
            <exception cref="T:System.ArgumentException">'polygon.MainPolygon.Count' can't be less then 3.</exception>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.DistanceToHullAcceptable(Alis.Core.Physic.Shared.Vertices,System.Numerics.Vector2,System.Boolean)">
            <summary>
                Describes whether this instance distance to hull acceptable
            </summary>
            <param name="polygon">The polygon</param>
            <param name="point">The point</param>
            <param name="higherDetail">The higher detail</param>
            <exception cref="T:System.ArgumentNullException">'polygon' can't be null.</exception>
            <exception cref="T:System.ArgumentException">'polygon.Count' can't be less then 3.</exception>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.InPolygon(Alis.Core.Physic.Shared.Vertices,System.Numerics.Vector2)">
            <summary>
                Describes whether this instance in polygon
            </summary>
            <param name="polygon">The polygon</param>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.GetTopMostVertex(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Gets the top most vertex using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <returns>The top most</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.GetTopMostCoord(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Gets the top most coord using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <returns>The return value</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.GetBottomMostCoord(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Gets the bottom most coord using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <returns>The return value</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.SearchCrossingEdgesHoles(Alis.Core.Physic.Shared.Vertices,System.Int32)">
            <summary>
                Searches the crossing edges holes using the specified polygon
            </summary>
            <param name="polygon">The polygon</param>
            <param name="y">The </param>
            <exception cref="T:System.ArgumentNullException">'polygon' can't be null.</exception>
            <exception cref="T:System.ArgumentException">'polygon.MainPolygon.Count' can't be less then 3.</exception>
            <returns>The result</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.SearchCrossingEdges(Alis.Core.Physic.Shared.Vertices,System.Int32)">
            <summary>Searches the polygon for the x coordinates of the edges that cross the specified y coordinate.</summary>
            <param name="polygon">Polygon to search in.</param>
            <param name="y">Y coordinate to check for edges.</param>
            <returns>Descending sorted list of x coordinates of edges that cross the specified y coordinate.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.SplitPolygonEdge(Alis.Core.Physic.Shared.Vertices,System.Numerics.Vector2,System.Int32@,System.Int32@)">
            <summary>
                Describes whether this instance split polygon edge
            </summary>
            <param name="polygon">The polygon</param>
            <param name="coordInsideThePolygon">The coord inside the polygon</param>
            <param name="vertex1Index">The vertex index</param>
            <param name="vertex2Index">The vertex index</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.CreateSimplePolygon(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary></summary>
            <param name="entrance"></param>
            <param name="last"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.SearchNearPixels(System.Boolean,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance search near pixels
            </summary>
            <param name="searchingForSolidPixel">The searching for solid pixel</param>
            <param name="current">The current</param>
            <param name="foundPixel">The found pixel</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.IsNearPixel(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance is near pixel
            </summary>
            <param name="current">The current</param>
            <param name="near">The near</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.SearchHullEntrance(System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance search hull entrance
            </summary>
            <param name="entrance">The entrance</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.SearchNextHullEntrance(System.Collections.Generic.List{Alis.Core.Physic.Shared.Vertices},System.Numerics.Vector2,System.Nullable{System.Numerics.Vector2}@)">
            <summary>Searches for the next shape.</summary>
            <param name="detectedPolygons">Already detected polygons.</param>
            <param name="start">Search start coordinate.</param>
            <param name="entrance">Returns the found entrance coordinate. Null if no other shapes found.</param>
            <returns>True if a new shape was found.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.GetNextHullPoint(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance get next hull point
            </summary>
            <param name="last">The last</param>
            <param name="current">The current</param>
            <param name="next">The next</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.SearchForOutstandingVertex(Alis.Core.Physic.Shared.Vertices,System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance search for outstanding vertex
            </summary>
            <param name="hullArea">The hull area</param>
            <param name="outstanding">The outstanding</param>
            <returns>The found</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.GetIndexOfFirstPixelToCheck(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Gets the index of first pixel to check using the specified last
            </summary>
            <param name="last">The last</param>
            <param name="current">The current</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.IsSolid(System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance is solid
            </summary>
            <param name="v">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.IsSolid(System.Int32@,System.Int32@)">
            <summary>
                Describes whether this instance is solid
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.IsSolid(System.Int32@)">
            <summary>
                Describes whether this instance is solid
            </summary>
            <param name="index">The index</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.TextureTools.TextureConverter.InBounds(System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance in bounds
            </summary>
            <param name="coord">The coord</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.TextureTools.VerticesDetectionType">
            <summary>The detection type affects the resulting polygon data.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.VerticesDetectionType.Integrated">
            <summary>Holes are integrated into the main polygon.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.TextureTools.VerticesDetectionType.Separated">
            <summary>The data of the main polygon and hole polygons is returned separately.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer">
            <summary>
                Convex decomposition algorithm created by Mark Bayazit (http://mnbayazit.com/)
                Properties:
                - Tries to decompose using polygons instead of triangles.
                - Tends to produce optimal results with low processing time.
                - Running time is O(nr), n = number of vertices, r = reflex vertices.
                - Does not support holes.
                For more information about this algorithm, see http://mnbayazit.com/406/bayazit
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.ConvexPartition(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Decompose the polygon into several smaller non-concave polygon. If the polygon is already convex, it will
                return the original polygon, unless it is over Settings.MaxPolygonVertices.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.TriangulatePolygon(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Triangulates the polygon using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <returns>The list</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.At(System.Int32,Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Ats the i
            </summary>
            <param name="i">The </param>
            <param name="vertices">The vertices</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.Copy(System.Int32,System.Int32,Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Copies the i
            </summary>
            <param name="i">The </param>
            <param name="j">The </param>
            <param name="vertices">The vertices</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.CanSee(System.Int32,System.Int32,Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Describes whether can see
            </summary>
            <param name="i">The </param>
            <param name="j">The </param>
            <param name="vertices">The vertices</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.Reflex(System.Int32,Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Describes whether reflex
            </summary>
            <param name="i">The </param>
            <param name="vertices">The vertices</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.Right(System.Int32,Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Describes whether right
            </summary>
            <param name="i">The </param>
            <param name="vertices">The vertices</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.Left(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Describes whether left
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <param name="c">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.LeftOn(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Describes whether left on
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <param name="c">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.Right(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Describes whether right
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <param name="c">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.RightOn(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Describes whether right on
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <param name="c">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Bayazit.BayazitDecomposer.SquareDist(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Squares the dist using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.CdtDecomposer">
            <summary>
                2D constrained Delaunay triangulation algorithm.
                Based on the paper "Sweep-line algorithm for constrained Delaunay triangulation" by V. Domiter and and B. Zalik
                Properties:
                - Creates triangles with a large interior angle.
                - Supports holes
                - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
                - Running time is O(n^2), n = number of vertices.
                - Does not care about winding order.
                Source: http://code.google.com/p/poly2tri/
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.CdtDecomposer.ConvexPartition(Alis.Core.Physic.Shared.Vertices)">
            <summary>Decompose the polygon into several smaller non-concave polygon.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle">
            <summary>
                The delaunay triangle class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.EdgeIsConstrained">
            <summary>Neighbor pointers. Flags to determine if an edge is a Delauney edge</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.EdgeIsDelaunay">
            <summary>Flags to determine if an edge is a Constrained edge</summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.Neighbors">
            <summary>
                The neighbors
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.Points">
            <summary>Has this triangle been marked as an interior triangle?</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.#ctor(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle" /> class
            </summary>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <param name="p3">The </param>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.IsInterior">
            <summary>
                Gets or sets the value of the is interior
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.IndexOf(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Indexes the of using the specified p
            </summary>
            <param name="p">The </param>
            <exception cref="T:System.Exception">Calling index with a point that doesn't exist in triangle</exception>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.IndexCw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Indexes the cw using the specified p
            </summary>
            <param name="p">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.IndexCcw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Indexes the ccw using the specified p
            </summary>
            <param name="p">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.Contains(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether this instance contains
            </summary>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.Contains(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint)">
            <summary>
                Describes whether this instance contains
            </summary>
            <param name="e">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.Contains(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether this instance contains
            </summary>
            <param name="p">The </param>
            <param name="q">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.MarkNeighbor(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>Update neighbor pointers</summary>
            <param name="p1">Point 1 of the shared edge</param>
            <param name="p2">Point 2 of the shared edge</param>
            <param name="t">This triangle's new neighbor</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.MarkNeighbor(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>Exhaustive search to update neighbor pointers</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.ClearNeighbors">
            <summary>
                Clears the neighbors
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.ClearNeighbor(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>
                Clears the neighbor using the specified triangle
            </summary>
            <param name="triangle">The triangle</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.Clear">
            <summary>Clears all references to all other triangles and points</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.OppositePoint(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <param name="t">Opposite triangle</param>
            <param name="p">The point in t that isn't shared between the triangles</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.NeighborCw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Neighbors the cw using the specified point
            </summary>
            <param name="point">The point</param>
            <returns>The delaunay triangle</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.NeighborCcw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Neighbors the ccw using the specified point
            </summary>
            <param name="point">The point</param>
            <returns>The delaunay triangle</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.NeighborAcross(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Neighbors the across using the specified point
            </summary>
            <param name="point">The point</param>
            <returns>The delaunay triangle</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.PointCcw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Points the ccw using the specified point
            </summary>
            <param name="point">The point</param>
            <returns>The triangulation point</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.PointCw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Points the cw using the specified point
            </summary>
            <param name="point">The point</param>
            <returns>The triangulation point</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.RotateCw">
            <summary>
                Rotates the cw
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.Legalize(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>Legalize triangle by rotating clockwise around oPoint</summary>
            <param name="oPoint">The origin point to rotate around</param>
            <param name="nPoint">???</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.ToString">
            <summary>
                Returns the string
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.MarkNeighborEdges">
            <summary>Finalize edge marking</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.MarkEdge(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>
                Marks the edge using the specified triangle
            </summary>
            <param name="triangle">The triangle</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.MarkEdge(System.Collections.Generic.List{Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle})">
            <summary>
                Marks the edge using the specified t list
            </summary>
            <param name="tList">The list</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.MarkConstrainedEdge(System.Int32)">
            <summary>
                Marks the constrained edge using the specified index
            </summary>
            <param name="index">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.MarkConstrainedEdge(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint)">
            <summary>
                Marks the constrained edge using the specified edge
            </summary>
            <param name="edge">The edge</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.MarkConstrainedEdge(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>Mark edge as constrained</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.Area">
            <summary>
                Areas this instance
            </summary>
            <returns>The double</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.Centroid">
            <summary>
                Centroids this instance
            </summary>
            <returns>The triangulation point</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.EdgeIndex(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>Get the index of the neighbor that shares this edge (or -1 if it isn't shared)</summary>
            <returns>index of the shared edge or -1 if edge isn't shared</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.GetConstrainedEdgeCcw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether this instance get constrained edge ccw
            </summary>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.GetConstrainedEdgeCw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether this instance get constrained edge cw
            </summary>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.GetConstrainedEdgeAcross(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether this instance get constrained edge across
            </summary>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.SetConstrainedEdgeCcw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,System.Boolean)">
            <summary>
                Sets the constrained edge ccw using the specified p
            </summary>
            <param name="p">The </param>
            <param name="ce">The ce</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.SetConstrainedEdgeCw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,System.Boolean)">
            <summary>
                Sets the constrained edge cw using the specified p
            </summary>
            <param name="p">The </param>
            <param name="ce">The ce</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.SetConstrainedEdgeAcross(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,System.Boolean)">
            <summary>
                Sets the constrained edge across using the specified p
            </summary>
            <param name="p">The </param>
            <param name="ce">The ce</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.GetDelaunayEdgeCcw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether this instance get delaunay edge ccw
            </summary>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.GetDelaunayEdgeCw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether this instance get delaunay edge cw
            </summary>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.GetDelaunayEdgeAcross(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether this instance get delaunay edge across
            </summary>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.SetDelaunayEdgeCcw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,System.Boolean)">
            <summary>
                Sets the delaunay edge ccw using the specified p
            </summary>
            <param name="p">The </param>
            <param name="ce">The ce</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.SetDelaunayEdgeCw(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,System.Boolean)">
            <summary>
                Sets the delaunay edge cw using the specified p
            </summary>
            <param name="p">The </param>
            <param name="ce">The ce</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle.SetDelaunayEdgeAcross(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,System.Boolean)">
            <summary>
                Sets the delaunay edge across using the specified p
            </summary>
            <param name="p">The </param>
            <param name="ce">The ce</param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront">
            @author Thomas Åhlen (thahlen@gmail.com)
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.Head">
            <summary>
                The head
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.Search">
            <summary>
                The search
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.Tail">
            <summary>
                The tail
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.#ctor(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront" /> class
            </summary>
            <param name="head">The head</param>
            <param name="tail">The tail</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.AddNode(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Adds the node using the specified node
            </summary>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.RemoveNode(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Removes the node using the specified node
            </summary>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.ToString">
            <summary>
                Returns the string
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.FindSearchNode(System.Double)">
            <summary>
                MM:  This seems to be used by LocateNode to guess a position in the implicit linked list of
                AdvancingFrontNodes near x Removed an overload that depended on this being exact
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.LocateNode(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>We use a balancing tree to locate a node smaller or equal to given key value</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.LocateNode(System.Double)">
            <summary>
                Locates the node using the specified x
            </summary>
            <param name="x">The </param>
            <returns>The advancing front node</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFront.LocatePoint(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>This implementation will use simple node traversal algorithm to find a point on the front</summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode">
            <summary>
                The advancing front node class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode.Next">
            <summary>
                The next
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode.Point">
            <summary>
                The point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode.Prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode.Triangle">
            <summary>
                The triangle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode.Value">
            <summary>
                The value
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode.#ctor(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode" /> class
            </summary>
            <param name="point">The point</param>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode.HasNext">
            <summary>
                Gets the value of the has next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode.HasPrev">
            <summary>
                Gets the value of the has prev
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep">
            <summary>
                The dt sweep class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.PiDiv2">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.Pi3Div4">
            <summary>
                The pi
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.Triangulate(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext)">
            <summary>Triangulate simple polygon with holes</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.Sweep(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext)">
            <summary>Start sweeping the Y-sorted point set from bottom to top</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FinalizationConvexHull(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext)">
            <summary>If this is a Delaunay Triangulation of a pointset we need to fill so the triangle mesh gets a ConvexHull</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.TurnAdvancingFrontConvex(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>We will traverse the entire advancing front and fill it to form a convex hull.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FinalizationPolygon(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext)">
            <summary>
                Finalizations the polygon using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.PointEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Find closes node to the left of the new point and create a new triangle. If needed new holes and basins will
                be filled to.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.NewFrontTriangle(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>Creates a new front triangle and legalize it</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.EdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Edges the event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="edge">The edge</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Fills the edge event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="edge">The edge</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillRightConcaveEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Fills the right concave edge event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="edge">The edge</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillRightConvexEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Fills the right convex edge event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="edge">The edge</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillRightBelowEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Fills the right below edge event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="edge">The edge</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillRightAboveEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Fills the right above edge event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="edge">The edge</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillLeftConvexEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Fills the left convex edge event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="edge">The edge</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillLeftConcaveEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Fills the left concave edge event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="edge">The edge</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillLeftBelowEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Fills the left below edge event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="edge">The edge</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillLeftAboveEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Fills the left above edge event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="edge">The edge</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.IsEdgeSideOfTriangle(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether is edge side of triangle
            </summary>
            <param name="triangle">The triangle</param>
            <param name="ep">The ep</param>
            <param name="eq">The eq</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.EdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Edges the event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="ep">The ep</param>
            <param name="eq">The eq</param>
            <param name="triangle">The triangle</param>
            <param name="point">The point</param>
            <exception cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.PointOnEdgeException">EdgeEvent - Point on constrained edge not supported yet</exception>
            <exception cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.PointOnEdgeException">EdgeEvent - Point on constrained edge not supported yet</exception>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FlipEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Flips the edge event using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
            <param name="ep">The ep</param>
            <param name="eq">The eq</param>
            <param name="t">The </param>
            <param name="p">The </param>
            <exception cref="T:System.Exception">Intersecting Constraints</exception>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.NextFlipPoint(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                When we need to traverse from one triangle to the next we need the point in current triangle that is the
                opposite point to the next triangle.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.NextFlipTriangle(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Orientation,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                After a flip we have two triangles and know that only one will still be intersecting the edge. So decide which
                to contiune with and legalize the other
            </summary>
            <param name="tcx"></param>
            <param name="o">should be the result of an TriangulationUtil.orient2d( eq, op, ep )</param>
            <param name="t">triangle 1</param>
            <param name="ot">triangle 2</param>
            <param name="p">a point shared by both triangles</param>
            <param name="op">another point shared by both triangles</param>
            <returns>returns the triangle still intersecting the edge</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FlipScanEdgeEvent(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Scan part of the FlipScan algorithm When a triangle pair isn't flippable we will scan for the next point that
                is inside the flip triangle scan area. When found we generate a new flipEdgeEvent
            </summary>
            <param name="tcx"></param>
            <param name="ep">last point on the edge we are traversing</param>
            <param name="eq">first point on the edge we are traversing</param>
            <param name="flipTriangle">the current triangle sharing the point eq with edge</param>
            <param name="t"></param>
            <param name="p"></param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillAdvancingFront(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>Fills holes in the Advancing Front</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.LargeHole_DontFill(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Describes whether large hole dont fill
            </summary>
            <param name="node">The node</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.AngleExceeds90Degrees(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether angle exceeds 90 degrees
            </summary>
            <param name="origin">The origin</param>
            <param name="pa">The pa</param>
            <param name="pb">The pb</param>
            <returns>The exceeds 90 degrees</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.AngleExceedsPlus90DegreesOrIsNegative(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether angle exceeds plus 90 degrees or is negative
            </summary>
            <param name="origin">The origin</param>
            <param name="pa">The pa</param>
            <param name="pb">The pb</param>
            <returns>The exceeds plus 90 degrees or is negative</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.Angle(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Angles the origin
            </summary>
            <param name="origin">The origin</param>
            <param name="pa">The pa</param>
            <param name="pb">The pb</param>
            <returns>The angle</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillBasin(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Fills a basin that has formed on the Advancing Front to the right of given node. First we decide a left,bottom
                and right node that forms the boundaries of the basin. Then we do a reqursive fill.
            </summary>
            <param name="tcx"></param>
            <param name="node">starting node, this or next node will be left node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.FillBasinReq(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>Recursive algorithm to fill a Basin with triangles</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.IsShallow(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Describes whether is shallow
            </summary>
            <param name="tcx">The tcx</param>
            <param name="node">The node</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.HoleAngle(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>???</summary>
            <param name="node">middle node</param>
            <returns>the angle between 3 front nodes</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.BasinAngle(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>The basin angle is decided against the horizontal line [1,0]</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.Fill(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>Adds a triangle to the advancing front to fill a hole.</summary>
            <param name="tcx"></param>
            <param name="node">middle node, that is the bottom of the hole</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.Legalize(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>Returns true if triangle was legalized</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweep.RotateTrianglePair(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Rotates a triangle pair one vertex CW
                n2                    n2
                P +-----+             P +-----+
                | t  /|               |\  t |
                |   / |               | \   |
                n1|  /  |n3           n1|  \  |n3
                | /   |    after CW   |   \ |
                |/ oT |               | oT \|
                +-----+ oP            +-----+
                n4                    n4
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint">
            <summary>
                The dt sweep constraint class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationConstraint" />
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint.#ctor(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>Give two points in any order. Will always be ordered so that q.y > p.y and q.x > p.x if same y value</summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext">
            @author Thomas Åhlén, thahlen@gmail.com
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.comparator">
            <summary>
                The dt sweep point comparator
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.AFront">
            <summary>
                The front
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.Basin">
            <summary>
                The dt sweep basin
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.EdgeEvent">
            <summary>
                The dt sweep edge event
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.Head">
            <summary>
                Gets or sets the value of the head
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.Tail">
            <summary>
                Gets or sets the value of the tail
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.Alpha">
            <summary>
                The alpha
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.RemoveFromList(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>
                Removes the from list using the specified triangle
            </summary>
            <param name="triangle">The triangle</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.MeshClean(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>
                Meshes the clean using the specified triangle
            </summary>
            <param name="triangle">The triangle</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.MeshCleanReq(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>
                Meshes the clean req using the specified triangle
            </summary>
            <param name="triangle">The triangle</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.AddNode(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Adds the node using the specified node
            </summary>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.RemoveNode(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
                Removes the node using the specified node
            </summary>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.LocateNode(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Locates the node using the specified point
            </summary>
            <param name="point">The point</param>
            <returns>The advancing front node</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.CreateAdvancingFront">
            <summary>
                Creates the advancing front
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.MapTriangleToNodes(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>Try to map a node to all sides of this triangle that don't have a neighbor.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.PrepareTriangulation(Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable)">
            <summary>
                Prepares the triangulation using the specified t
            </summary>
            <param name="t">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.FinalizeTriangulation">
            <summary>
                Finalizes the triangulation
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.NewConstraint(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                News the constraint using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The triangulation constraint</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.DtSweepBasin">
            <summary>
                The dt sweep basin class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.DtSweepBasin.BottomNode">
            <summary>
                The bottom node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.DtSweepBasin.LeftHighest">
            <summary>
                The left highest
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.DtSweepBasin.LeftNode">
            <summary>
                The left node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.DtSweepBasin.RightNode">
            <summary>
                The right node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.DtSweepBasin.Width">
            <summary>
                The width
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.DtSweepEdgeEvent">
            <summary>
                The dt sweep edge event class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.DtSweepEdgeEvent.ConstrainedEdge">
            <summary>
                The constrained edge
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepContext.DtSweepEdgeEvent.Right">
            <summary>
                The right
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepPointComparator">
            <summary>
                The dt sweep point comparator class
            </summary>
            <seealso cref="T:System.Collections.Generic.IComparer`1" />
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepPointComparator.Compare(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Compares the p 1
            </summary>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <returns>The int</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.PointOnEdgeException">
            <summary>
                The point on edge exception class
            </summary>
            <seealso cref="T:System.NotImplementedException" />
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.PointOnEdgeException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.PointOnEdgeException" /> class
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Orientation">
            <summary>
                The orientation enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Orientation.Cw">
            <summary>
                The cw orientation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Orientation.Ccw">
            <summary>
                The ccw orientation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Orientation.Collinear">
            <summary>
                The collinear orientation
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon">
            <summary>
                The polygon class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable" />
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.HolesPrivate">
            <summary>
                The holes
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.LastPrivate">
            <summary>
                The last
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.PointsPrivate">
            <summary>
                The triangulation point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.SteinerPointsPrivate">
            <summary>
                The steiner points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.TrianglesPrivate">
            <summary>
                The triangles
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.#ctor(System.Collections.Generic.IList{Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint})">
            <summary>Create a polygon from a list of at least 3 points with no duplicates.</summary>
            <param name="points">A list of unique points</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.#ctor(System.Collections.Generic.IEnumerable{Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint})">
            <summary>Create a polygon from a list of at least 3 points with no duplicates.</summary>
            <param name="points">A list of unique points.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.Holes">
            <summary>
                Gets the value of the holes
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.TriangulationMode">
            <summary>
                Gets the value of the triangulation mode
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.Points">
            <summary>
                Gets the value of the points
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.Triangles">
            <summary>
                Gets the value of the triangles
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.AddTriangle(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>
                Adds the triangle using the specified t
            </summary>
            <param name="t">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.AddTriangles(System.Collections.Generic.IEnumerable{Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle})">
            <summary>
                Adds the triangles using the specified list
            </summary>
            <param name="list">The list</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.ClearTriangles">
            <summary>
                Clears the triangles
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.PrepareTriangulation(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext)">
            <summary>Creates constraints and populates the context with points</summary>
            <param name="tcx">The context</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.AddSteinerPoint(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Adds the steiner point using the specified point
            </summary>
            <param name="point">The point</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.AddSteinerPoints(System.Collections.Generic.List{Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint})">
            <summary>
                Adds the steiner points using the specified points
            </summary>
            <param name="points">The points</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.ClearSteinerPoints">
            <summary>
                Clears the steiner points
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.AddHole(Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon)">
            <summary>Add a hole to the polygon.</summary>
            <param name="poly">A subtraction polygon fully contained inside this polygon.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.InsertPointAfter(Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint)">
            <summary>Inserts newPoint after point.</summary>
            <param name="point">The point to insert after in the polygon</param>
            <param name="newPoint">The point to insert into the polygon</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.AddPoints(System.Collections.Generic.IEnumerable{Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint})">
            <summary>Inserts list (after last point in polygon?)</summary>
            <param name="list"></param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.AddPoint(Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint)">
            <summary>Adds a point after the last in the polygon.</summary>
            <param name="p">The point to add</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon.RemovePoint(Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint)">
            <summary>Removes a point from the polygon.</summary>
            <param name="p"></param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint">
            <summary>
                The polygon point class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint" />
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint" /> class
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint.Next">
            <summary>
                Gets or sets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonPoint.Previous">
            <summary>
                Gets or sets the value of the previous
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonSet">
            <summary>
                The polygon set class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonSet.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonSet" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonSet.#ctor(Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonSet" /> class
            </summary>
            <param name="poly">The poly</param>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonSet.PolygonsList">
            <summary>
                The polygon
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonSet.Polygons">
            <summary>
                Gets the value of the polygons
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.PolygonSet.Add(Alis.Core.Physic.Tools.Triangulation.Delaunay.Polygon.Polygon)">
            <summary>
                Adds the p
            </summary>
            <param name="p">The </param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.ConstrainedPointSet">
            <summary>
                The constrained point set class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet" />
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.ConstrainedPointSet.constrainedPointList">
            <summary>
                The constrained point list
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.ConstrainedPointSet.#ctor(System.Collections.Generic.List{Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint},System.Int32[])">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.ConstrainedPointSet" /> class
            </summary>
            <param name="points">The points</param>
            <param name="index">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.ConstrainedPointSet.#ctor(System.Collections.Generic.List{Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint},System.Collections.Generic.IEnumerable{Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint})">
            @param points - A list of all points in PointSet
            @param constraints - Pairs of two points defining a constraint, all points
            <b>must</b>
            be part of given PointSet!
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.ConstrainedPointSet.EdgeIndex">
            <summary>
                Gets or sets the value of the edge index
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.ConstrainedPointSet.TriangulationMode">
            <summary>
                Gets the value of the triangulation mode
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.ConstrainedPointSet.PrepareTriangulation(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext)">
            <summary>
                Prepares the triangulation using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet">
            <summary>
                The point set class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable" />
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet.#ctor(System.Collections.Generic.List{Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet" /> class
            </summary>
            <param name="points">The points</param>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet.Points">
            <summary>
                Gets or sets the value of the points
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet.Triangles">
            <summary>
                Gets or sets the value of the triangles
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet.TriangulationMode">
            <summary>
                Gets the value of the triangulation mode
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet.AddTriangle(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>
                Adds the triangle using the specified t
            </summary>
            <param name="t">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet.AddTriangles(System.Collections.Generic.IEnumerable{Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle})">
            <summary>
                Adds the triangles using the specified list
            </summary>
            <param name="list">The list</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet.ClearTriangles">
            <summary>
                Clears the triangles
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Sets.PointSet.PrepareTriangulation(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext)">
            <summary>
                Prepares the triangulation using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable">
            <summary>
                The triangulatable interface
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable.Points">
            <summary>
                Gets the value of the points
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable.Triangles">
            <summary>
                Gets the value of the triangles
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable.TriangulationMode">
            <summary>
                Gets the value of the triangulation mode
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable.PrepareTriangulation(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext)">
            <summary>
                Prepares the triangulation using the specified tcx
            </summary>
            <param name="tcx">The tcx</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable.AddTriangle(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle)">
            <summary>
                Adds the triangle using the specified t
            </summary>
            <param name="t">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable.AddTriangles(System.Collections.Generic.IEnumerable{Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.DelaunayTriangle})">
            <summary>
                Adds the triangles using the specified list
            </summary>
            <param name="list">The list</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable.ClearTriangles">
            <summary>
                Clears the triangles
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationConstraint">
            <summary>
                The triangulation constraint class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationConstraint.P">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationConstraint.Q">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext">
            <summary>
                The triangulation context class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.Points">
            <summary>
                The triangulation point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.Triangles">
            <summary>
                The delaunay triangle
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.TriangulationMode">
            <summary>
                Gets or sets the value of the triangulation mode
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.Triangulatable">
            <summary>
                Gets or sets the value of the triangulatable
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.Terminated">
            <summary>
                Gets or sets the value of the terminated
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.StepCount">
            <summary>
                Gets or sets the value of the step count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.IsDebugEnabled">
            <summary>
                Gets or sets the value of the is debug enabled
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.Done">
            <summary>
                Dones this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.PrepareTriangulation(Alis.Core.Physic.Tools.Triangulation.Delaunay.ITriangulatable)">
            <summary>
                Prepares the triangulation using the specified t
            </summary>
            <param name="t">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.NewConstraint(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                News the constraint using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The triangulation constraint</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.Update(System.String)">
            <summary>
                Updates the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationContext.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationMode">
            <summary>
                The triangulation mode enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationMode.Unconstrained">
            <summary>
                The unconstrained triangulation mode
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationMode.Constrained">
            <summary>
                The constrained triangulation mode
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationMode.Polygon">
            <summary>
                The polygon triangulation mode
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint">
            <summary>
                The triangulation point class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint.Y">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint.#ctor(System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint" /> class
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint.Edges">
            <summary>
                Gets or sets the value of the edges
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint.Xf">
            <summary>
                Gets or sets the value of the xf
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint.Yf">
            <summary>
                Gets or sets the value of the yf
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint.HasEdges">
            <summary>
                Gets the value of the has edges
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint.ToString">
            <summary>
                Returns the string
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint.AddEdge(Alis.Core.Physic.Tools.Triangulation.Delaunay.Delaunay.Sweep.DtSweepConstraint)">
            <summary>
                Adds the edge using the specified e
            </summary>
            <param name="e">The </param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationUtil">
            @author Thomas Åhlén, thahlen@gmail.com
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationUtil.Epsilon">
            <summary>
                The epsilon
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationUtil.SmartIncircle(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Requirements:
                1. a,b and c form a triangle.
                2. a and d is know to be on opposite side of bc
                <code>
                           a
                           +
                          / \
                         /   \
                       b/     \c
                       +-------+ 
                      /    B    \  
                     /           \ 
            </code>
                Facts:
                d has to be in area B to have a chance to be inside the circle formed by a,b and c
                d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW
                This preknowledge gives us a way to optimize the incircle test
            </summary>
            <param name="pa">triangle point, opposite d</param>
            <param name="pb">triangle point</param>
            <param name="pc">triangle point</param>
            <param name="pd">point opposite a</param>
            <returns>true if d is inside circle, false if on circle edge</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationUtil.InScanArea(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            <summary>
                Describes whether in scan area
            </summary>
            <param name="pa">The pa</param>
            <param name="pb">The pb</param>
            <param name="pc">The pc</param>
            <param name="pd">The pd</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationUtil.Orient2d(Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint,Alis.Core.Physic.Tools.Triangulation.Delaunay.TriangulationPoint)">
            Forumla to calculate signed area
            Positive if CCW
            Negative if CW
            0 if collinear
            A[P1,P2,P3]  =  (x1*y2 - y1*x2) + (x2*y3 - y2*x3) + (x3*y1 - y3*x1)
            =  (x1-x3)*(y2-y3) - (y1-y3)*(x2-x3)
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Util.PointGenerator">
            <summary>
                The point generator class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Util.PointGenerator.Rng">
            <summary>
                The random
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Util.PointGenerator.UniformDistribution(System.Int32,System.Double)">
            <summary>
                Uniforms the distribution using the specified n
            </summary>
            <param name="n">The </param>
            <param name="scale">The scale</param>
            <returns>The points</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Util.PointGenerator.UniformGrid(System.Int32,System.Double)">
            <summary>
                Uniforms the grid using the specified n
            </summary>
            <param name="n">The </param>
            <param name="scale">The scale</param>
            <returns>The points</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Delaunay.Util.PolygonGenerator">
            <summary>
                The polygon generator class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Delaunay.Util.PolygonGenerator.Rng">
            <summary>
                The random
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Util.PolygonGenerator.RandomCircleSweep(System.Double,System.Int32)">
            <summary>
                Randoms the circle sweep using the specified scale
            </summary>
            <param name="scale">The scale</param>
            <param name="vertexCount">The vertex count</param>
            <returns>The polygon polygon</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Delaunay.Util.PolygonGenerator.RandomCircleSweep2(System.Double,System.Int32)">
            <summary>
                Randoms the circle sweep 2 using the specified scale
            </summary>
            <param name="scale">The scale</param>
            <param name="vertexCount">The vertex count</param>
            <returns>The polygon polygon</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Earclip.EarclipDecomposer">
            <summary>
                Convex decomposition algorithm using ear clipping
                Properties:
                - Only works on simple polygons.
                - Does not support holes.
                - Running time is O(n^2), n = number of vertices.
                Source: http://www.ewjordan.com/earClip/
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Earclip.EarclipDecomposer.ConvexPartition(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>
                Decompose the polygon into several smaller non-concave polygon. Each resulting polygon will have no more than
                Settings.MaxPolygonVertices vertices.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Earclip.EarclipDecomposer.TriangulatePolygon(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>
                Triangulates a polygon using simple ear-clipping algorithm. Returns size of Triangle array unless the polygon
                can't be triangulated. This should only happen if the polygon self-intersects, though it will not _always_ return
                null
                for a bad polygon - it is the caller's responsibility to check for self-intersection, and if it doesn't, it should
                at
                least check that the return value is non-null before using. You're warned! Triangles may be degenerate, especially
                if
                you have identical points in the input to the algorithm.  Check this before you use them. This is totally
                unoptimized,
                so for large polygons it should not be part of the simulation loop.
            </summary>
            <remarks>Only works on simple polygons.</remarks>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Earclip.EarclipDecomposer.ResolvePinchPoint(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices@,Alis.Core.Physic.Shared.Vertices@,System.Single)">
            <summary>
                Finds and fixes "pinch points," points where two polygon vertices are at the same point. If a pinch point is
                found, pin is broken up into poutA and poutB and true is returned; otherwise, returns false. Mostly for internal
                use.
                O(N^2) time, which sucks...
            </summary>
            <param name="pin">The pin.</param>
            <param name="poutA">The pout A.</param>
            <param name="poutB">The pout B.</param>
            <param name="tolerance"></param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Earclip.EarclipDecomposer.Remainder(System.Int32,System.Int32)">
            <summary>Fix for obnoxious behavior for the % operator for negative numbers...</summary>
            <param name="x">The x.</param>
            <param name="modulus">The modulus.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Earclip.EarclipDecomposer.IsEar(System.Int32,System.Single[],System.Single[],System.Int32)">
            <summary>Checks if vertex i is the tip of an ear in polygon defined by xv[] and  yv[].</summary>
            <param name="i">The i.</param>
            <param name="xv">The xv.</param>
            <param name="yv">The yv.</param>
            <param name="xvLength">Length of the xv.</param>
            <remarks>Assumes clockwise orientation of polygon.</remarks>
            <returns><c>true</c> if the specified i is ear; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Earclip.Triangle">
            <summary>
                The triangle class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Shared.Vertices" />
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Earclip.Triangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Earclip.Triangle" /> class
            </summary>
            <param name="x1">The </param>
            <param name="y1">The </param>
            <param name="x2">The </param>
            <param name="y2">The </param>
            <param name="x3">The </param>
            <param name="y3">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Earclip.Triangle.IsInside(System.Single,System.Single)">
            <summary>
                Describes whether this instance is inside
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.FlipCode.FlipcodeDecomposer">
            <summary>
                Convex decomposition algorithm created by unknown
                Properties:
                - No support for holes
                - Very fast
                - Only works on simple polygons
                - Only works on counter clockwise polygons
                More information: http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.FlipCode.FlipcodeDecomposer._tmpA">
            <summary>
                The tmp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.FlipCode.FlipcodeDecomposer._tmpB">
            <summary>
                The tmp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.FlipCode.FlipcodeDecomposer._tmpC">
            <summary>
                The tmp
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.FlipCode.FlipcodeDecomposer.ConvexPartition(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Decompose the polygon into triangles.
                Properties:
                - Only works on counter clockwise polygons
            </summary>
            <param name="vertices">The list of points describing the polygon</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.FlipCode.FlipcodeDecomposer.InsideTriangle(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>Check if the point P is inside the triangle defined by the points A, B, C</summary>
            <param name="a">The A point.</param>
            <param name="b">The B point.</param>
            <param name="c">The C point.</param>
            <param name="p">The point to be tested.</param>
            <returns>True if the point is inside the triangle</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.FlipCode.FlipcodeDecomposer.Snip(Alis.Core.Physic.Shared.Vertices,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>Cut a the contour and add a triangle into V to describe the location of the cut</summary>
            <param name="contour">The list of points defining the polygon</param>
            <param name="u">The index of the first point</param>
            <param name="v">The index of the second point</param>
            <param name="w">The index of the third point</param>
            <param name="n">The number of elements in the array.</param>
            <param name="vv">The array to populate with indicies of triangles.</param>
            <returns>True if a triangle was found</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge">
            <summary>
                The edge class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.Above">
            <summary>
                The above
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.B">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.Below">
            <summary>
                The below
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.MPoints">
            <summary>
                The points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.P">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.Q">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.Slope">
            <summary>
                The slope
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.#ctor(Alis.Core.Physic.Tools.Triangulation.Seidel.Point,Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge" /> class
            </summary>
            <param name="p">The </param>
            <param name="q">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.IsAbove(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Describes whether this instance is above
            </summary>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.IsBelow(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Describes whether this instance is below
            </summary>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Edge.AddMpoint(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Adds the mpoint using the specified point
            </summary>
            <param name="point">The point</param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain">
            <summary>
                The monotone mountain class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.convexPoints">
            <summary>
                The convex points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.monoPoly">
            <summary>
                The mono poly
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.head">
            <summary>
                The head
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.positive">
            <summary>
                The positive
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.size">
            <summary>
                The size
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.tail">
            <summary>
                The tail
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.Triangles">
            <summary>
                The triangles
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain" /> class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.PiSlop">
            <summary>
                The pi slop
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.Add(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Adds the point
            </summary>
            <param name="point">The point</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.Remove(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Removes the point
            </summary>
            <param name="point">The point</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.Process">
            <summary>
                Processes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.Triangulate">
            <summary>
                Triangulates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.Valid(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Describes whether this instance valid
            </summary>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.GenMonoPoly">
            <summary>
                Gens the mono poly
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.Angle(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Angles the p
            </summary>
            <param name="p">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.AngleSign">
            <summary>
                Describes whether this instance angle sign
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.MonotoneMountain.IsConvex(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Describes whether this instance is convex
            </summary>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Node">
            <summary>
                The node class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Node.LeftChild">
            <summary>
                The left child
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Node.ParentList">
            <summary>
                The parent list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Node.RightChild">
            <summary>
                The right child
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Node.#ctor(Alis.Core.Physic.Tools.Triangulation.Seidel.Node,Alis.Core.Physic.Tools.Triangulation.Seidel.Node)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Node" /> class
            </summary>
            <param name="left">The left</param>
            <param name="right">The right</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Node.Locate(Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Locates the s
            </summary>
            <param name="s">The </param>
            <returns>The sink</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Node.Replace(Alis.Core.Physic.Tools.Triangulation.Seidel.Node)">
            <summary>
                Replaces the node
            </summary>
            <param name="node">The node</param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Point">
            <summary>
                The point class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Point.Next">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Point.Prev">
            <summary>
                The prev
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Point.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Point.Y">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Point.#ctor(System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Point" /> class
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Point.Cross(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Crosses the p
            </summary>
            <param name="p">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Point.Dot(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Dots the p
            </summary>
            <param name="p">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Point.Neq(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Describes whether this instance neq
            </summary>
            <param name="p">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Point.Orient2D(Alis.Core.Physic.Tools.Triangulation.Seidel.Point,Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Orients the 2 d using the specified pb
            </summary>
            <param name="pb">The pb</param>
            <param name="pc">The pc</param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph">
            <summary>
                The query graph class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph.head">
            <summary>
                The head
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph.#ctor(Alis.Core.Physic.Tools.Triangulation.Seidel.Node)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph" /> class
            </summary>
            <param name="head">The head</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph.Locate(Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Locates the edge
            </summary>
            <param name="edge">The edge</param>
            <returns>The trapezoid</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph.FollowEdge(Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Follows the edge using the specified edge
            </summary>
            <param name="edge">The edge</param>
            <returns>The trapezoids</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph.Replace(Alis.Core.Physic.Tools.Triangulation.Seidel.Sink,Alis.Core.Physic.Tools.Triangulation.Seidel.Node)">
            <summary>
                Replaces the sink
            </summary>
            <param name="sink">The sink</param>
            <param name="node">The node</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph.Case1(Alis.Core.Physic.Tools.Triangulation.Seidel.Sink,Alis.Core.Physic.Tools.Triangulation.Seidel.Edge,Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid[])">
            <summary>
                Cases the 1 using the specified sink
            </summary>
            <param name="sink">The sink</param>
            <param name="edge">The edge</param>
            <param name="tList">The list</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph.Case2(Alis.Core.Physic.Tools.Triangulation.Seidel.Sink,Alis.Core.Physic.Tools.Triangulation.Seidel.Edge,Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid[])">
            <summary>
                Cases the 2 using the specified sink
            </summary>
            <param name="sink">The sink</param>
            <param name="edge">The edge</param>
            <param name="tList">The list</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph.Case3(Alis.Core.Physic.Tools.Triangulation.Seidel.Sink,Alis.Core.Physic.Tools.Triangulation.Seidel.Edge,Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid[])">
            <summary>
                Cases the 3 using the specified sink
            </summary>
            <param name="sink">The sink</param>
            <param name="edge">The edge</param>
            <param name="tList">The list</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.QueryGraph.Case4(Alis.Core.Physic.Tools.Triangulation.Seidel.Sink,Alis.Core.Physic.Tools.Triangulation.Seidel.Edge,Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid[])">
            <summary>
                Cases the 4 using the specified sink
            </summary>
            <param name="sink">The sink</param>
            <param name="edge">The edge</param>
            <param name="tList">The list</param>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.SeidelDecomposer">
            <summary>
                Convex decomposition algorithm created by Raimund Seidel
                Properties:
                - Decompose the polygon into trapezoids, then triangulate.
                - To use the trapezoid data, use ConvexPartitionTrapezoid()
                - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
                - Running time is O(n log n), n = number of vertices.
                - Running time is almost linear for most simple polygons.
                - Does not care about winding order.
                For more information, see Raimund Seidel's paper "A simple and fast incremental randomized
                algorithm for computing trapezoidal decompositions and for triangulating polygons"
                See also: "Computational Geometry", 3rd edition, by Mark de Berg et al, Chapter 6.2
                "Computational Geometry in C", 2nd edition, by Joseph O'Rourke
                Original code from the Poly2Tri project by Mason Green.
                http://code.google.com/p/poly2tri/source/browse?repo=archive#hg/scala/src/org/poly2tri/seidel
                This implementation is from Dec 14, 2010
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.SeidelDecomposer.ConvexPartition(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>Decompose the polygon into several smaller non-concave polygons.</summary>
            <param name="vertices">The polygon to decompose.</param>
            <param name="sheer">The sheer to use if you get bad results, try using a higher value.</param>
            <returns>A list of triangles</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.SeidelDecomposer.ConvexPartitionTrapezoid(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>Decompose the polygon into several smaller non-concave polygons.</summary>
            <param name="vertices">The polygon to decompose.</param>
            <param name="sheer">The sheer to use if you get bad results, try using a higher value.</param>
            <returns>A list of trapezoids</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Sink">
            <summary>
                The sink class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Node" />
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Sink.Trapezoid">
            <summary>
                The trapezoid
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Sink.#ctor(Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Sink" /> class
            </summary>
            <param name="trapezoid">The trapezoid</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Sink.Isink(Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid)">
            <summary>
                Isinks the trapezoid
            </summary>
            <param name="trapezoid">The trapezoid</param>
            <returns>The sink</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Sink.Locate(Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Locates the edge
            </summary>
            <param name="edge">The edge</param>
            <returns>The sink</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid">
            <summary>
                The trapezoid class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.Bottom">
            <summary>
                The bottom
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.Inside">
            <summary>
                The inside
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.LeftPoint">
            <summary>
                The left point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.LowerLeft">
            <summary>
                The lower left
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.LowerRight">
            <summary>
                The lower right
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.RightPoint">
            <summary>
                The right point
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.Sink">
            <summary>
                The sink
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.Top">
            <summary>
                The top
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.UpperLeft">
            <summary>
                The upper left
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.UpperRight">
            <summary>
                The upper right
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.#ctor(Alis.Core.Physic.Tools.Triangulation.Seidel.Point,Alis.Core.Physic.Tools.Triangulation.Seidel.Point,Alis.Core.Physic.Tools.Triangulation.Seidel.Edge,Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid" /> class
            </summary>
            <param name="leftPoint">The left point</param>
            <param name="rightPoint">The right point</param>
            <param name="top">The top</param>
            <param name="bottom">The bottom</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.UpdateLeft(Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid,Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid)">
            <summary>
                Updates the left using the specified ul
            </summary>
            <param name="ul">The ul</param>
            <param name="ll">The ll</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.UpdateRight(Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid,Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid)">
            <summary>
                Updates the right using the specified ur
            </summary>
            <param name="ur">The ur</param>
            <param name="lr">The lr</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.UpdateLeftRight(Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid,Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid,Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid,Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid)">
            <summary>
                Updates the left right using the specified ul
            </summary>
            <param name="ul">The ul</param>
            <param name="ll">The ll</param>
            <param name="ur">The ur</param>
            <param name="lr">The lr</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.TrimNeighbors">
            <summary>
                Trims the neighbors
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.Contains(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Describes whether this instance contains
            </summary>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.GetVertices">
            <summary>
                Gets the vertices
            </summary>
            <returns>The verts</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.LineIntersect(Alis.Core.Physic.Tools.Triangulation.Seidel.Edge,System.Single)">
            <summary>
                Lines the intersect using the specified edge
            </summary>
            <param name="edge">The edge</param>
            <param name="x">The </param>
            <returns>The point</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid.AddPoints">
            <summary>
                Adds the points
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap">
            <summary>
                The trapezoidal map class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.margin">
            <summary>
                The margin
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.bCross">
            <summary>
                The cross
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.cross">
            <summary>
                The cross
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.Map">
            <summary>
                The map
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.Case1(Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid,Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Cases the 1 using the specified t
            </summary>
            <param name="t">The </param>
            <param name="e">The </param>
            <returns>The trapezoids</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.Case2(Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid,Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Cases the 2 using the specified t
            </summary>
            <param name="t">The </param>
            <param name="e">The </param>
            <returns>The trapezoids</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.Case3(Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid,Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Cases the 3 using the specified t
            </summary>
            <param name="t">The </param>
            <param name="e">The </param>
            <returns>The trapezoids</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.Case4(Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid,Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Cases the 4 using the specified t
            </summary>
            <param name="t">The </param>
            <param name="e">The </param>
            <returns>The trapezoids</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.TrapezoidalMap.BoundingBox(System.Collections.Generic.List{Alis.Core.Physic.Tools.Triangulation.Seidel.Edge})">
            <summary>
                Boundings the box using the specified edges
            </summary>
            <param name="edges">The edges</param>
            <returns>The trapezoid</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator">
            <summary>
                The triangulator class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.boundingBox">
            <summary>
                The bounding box
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.edgeList">
            <summary>
                The edge list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.queryGraph">
            <summary>
                The query graph
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.sheer">
            <summary>
                The sheer
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.trapezoidalMap">
            <summary>
                The trapezoidal map
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.xMonoPoly">
            <summary>
                The mono poly
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.Trapezoids">
            <summary>
                The trapezoids
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.Triangles">
            <summary>
                The triangles
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.#ctor(System.Collections.Generic.List{Alis.Core.Physic.Tools.Triangulation.Seidel.Point},System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator" /> class
            </summary>
            <param name="polyLine">The poly line</param>
            <param name="sheer">The sheer</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.Process">
            <summary>
                Processes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.CreateMountains">
            <summary>
                Creates the mountains
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.MarkOutside(Alis.Core.Physic.Tools.Triangulation.Seidel.Trapezoid)">
            <summary>
                Marks the outside using the specified t
            </summary>
            <param name="t">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.InitEdges(System.Collections.Generic.List{Alis.Core.Physic.Tools.Triangulation.Seidel.Point})">
            <summary>
                Inits the edges using the specified points
            </summary>
            <param name="points">The points</param>
            <returns>A list of edge</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.OrderSegments(System.Collections.Generic.List{Alis.Core.Physic.Tools.Triangulation.Seidel.Edge})">
            <summary>
                Orders the segments using the specified edge input
            </summary>
            <param name="edgeInput">The edge input</param>
            <returns>The edges</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
                Shuffles the list
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="list">The list</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.Triangulator.ShearTransform(Alis.Core.Physic.Tools.Triangulation.Seidel.Point)">
            <summary>
                Shears the transform using the specified point
            </summary>
            <param name="point">The point</param>
            <returns>The point</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.XNode">
            <summary>
                The node class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Node" />
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.XNode.point">
            <summary>
                The point
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.XNode.#ctor(Alis.Core.Physic.Tools.Triangulation.Seidel.Point,Alis.Core.Physic.Tools.Triangulation.Seidel.Node,Alis.Core.Physic.Tools.Triangulation.Seidel.Node)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.XNode" /> class
            </summary>
            <param name="point">The point</param>
            <param name="lChild">The child</param>
            <param name="rChild">The child</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.XNode.Locate(Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Locates the edge
            </summary>
            <param name="edge">The edge</param>
            <returns>The sink</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.Seidel.YNode">
            <summary>
                The node class
            </summary>
            <seealso cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.Node" />
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.Seidel.YNode.edge">
            <summary>
                The edge
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.YNode.#ctor(Alis.Core.Physic.Tools.Triangulation.Seidel.Edge,Alis.Core.Physic.Tools.Triangulation.Seidel.Node,Alis.Core.Physic.Tools.Triangulation.Seidel.Node)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Tools.Triangulation.Seidel.YNode" /> class
            </summary>
            <param name="edge">The edge</param>
            <param name="lChild">The child</param>
            <param name="rChild">The child</param>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.Seidel.YNode.Locate(Alis.Core.Physic.Tools.Triangulation.Seidel.Edge)">
            <summary>
                Locates the edge
            </summary>
            <param name="edge">The edge</param>
            <returns>The sink</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.TriangulationBase.Triangulate">
            <summary>
                The triangulate class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.TriangulationBase.Triangulate.ConvexPartition(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Tools.Triangulation.TriangulationBase.TriangulationAlgorithm,System.Boolean,System.Single)">
            <summary>
                Convexes the partition using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="algorithm">The algorithm</param>
            <param name="discardAndFixInvalid">The discard and fix invalid</param>
            <param name="tolerance">The tolerance</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns>The results</returns>
        </member>
        <member name="M:Alis.Core.Physic.Tools.Triangulation.TriangulationBase.Triangulate.ValidatePolygon(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Describes whether validate polygon
            </summary>
            <param name="polygon">The polygon</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Tools.Triangulation.TriangulationBase.TriangulationAlgorithm">
            <summary>
                The triangulation algorithm enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.TriangulationBase.TriangulationAlgorithm.Earclip">
            <summary>
                Convex decomposition algorithm using ear clipping
                Properties:
                - Only works on simple polygons.
                - Does not support holes.
                - Running time is O(n^2), n = number of vertices.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.TriangulationBase.TriangulationAlgorithm.Bayazit">
            <summary>
                Convex decomposition algorithm created by Mark Bayazit (http://mnbayazit.com/)
                Properties:
                - Tries to decompose using polygons instead of triangles.
                - Tends to produce optimal results with low processing time.
                - Running time is O(nr), n = number of vertices, r = reflex vertices.
                - Does not support holes.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.TriangulationBase.TriangulationAlgorithm.Flipcode">
            <summary>
                Convex decomposition algorithm created by unknown
                Properties:
                - No support for holes
                - Very fast
                - Only works on simple polygons
                - Only works on counter clockwise polygons
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.TriangulationBase.TriangulationAlgorithm.Seidel">
            <summary>
                Convex decomposition algorithm created by Raimund Seidel
                Properties:
                - Decompose the polygon into trapezoids, then triangulate.
                - To use the trapezoid data, use ConvexPartitionTrapezoid()
                - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
                - Running time is O(n log n), n = number of vertices.
                - Running time is almost linear for most simple polygons.
                - Does not care about winding order.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.TriangulationBase.TriangulationAlgorithm.SeidelTrapezoids">
            <summary>
                The seidel trapezoids triangulation algorithm
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Tools.Triangulation.TriangulationBase.TriangulationAlgorithm.Delauny">
            <summary>
                2D constrained Delaunay triangulation algorithm.
                Based on the paper "Sweep-line algorithm for constrained Delaunay triangulation" by V. Domiter and and B. Zalik
                Properties:
                - Creates triangles with a large interior angle.
                - Supports holes
                - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
                - Running time is O(n^2), n = number of vertices.
                - Does not care about winding order.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Utilities.LineUtils">
            <summary>
                Collection of helper methods for misc collisions. Does float tolerance and line collisions with lines and
                AABBs.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.LineUtils.DistanceBetweenPointAndLineSegment(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Distances the between point and line segment using the specified point
            </summary>
            <param name="point">The point</param>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.LineUtils.LineIntersect2(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Check if the lines a0->a1 and b0->b1 cross. If they do, intersectionPoint will be filled with the point of
                crossing. Grazing lines should not return true.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.LineUtils.LineIntersect(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Lines the intersect using the specified p 1
            </summary>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <param name="q1">The </param>
            <param name="q2">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.LineUtils.LineIntersect(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Boolean,System.Boolean,System.Numerics.Vector2@)">
            <summary>
                This method detects if two line segments (or lines) intersect, and, if so, the point of intersection. Use the
                <paramref name="firstIsSegment" /> and <paramref name="secondIsSegment" /> parameters to set whether the
                intersection
                point must be on the first and second line segments. Setting these both to true means you are doing a line-segment
                to
                line-segment intersection. Setting one of them to true means you are doing a line to line-segment intersection
                test,
                and so on. Note: If two line segments are coincident, then no intersection is detected (there are actually infinite
                intersection points). Author: Jeremy Bell
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="point">This is set to the intersection point if an intersection is detected.</param>
            <param name="firstIsSegment">Set this to true to require that the intersection point be on the first line segment.</param>
            <param name="secondIsSegment">Set this to true to require that the intersection point be on the second line segment.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.LineUtils.LineIntersect(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean,System.Boolean,System.Numerics.Vector2@)">
            <summary>
                This method detects if two line segments (or lines) intersect, and, if so, the point of intersection. Use the
                <paramref name="firstIsSegment" /> and <paramref name="secondIsSegment" /> parameters to set whether the
                intersection
                point must be on the first and second line segments. Setting these both to true means you are doing a line-segment
                to
                line-segment intersection. Setting one of them to true means you are doing a line to line-segment intersection
                test,
                and so on. Note: If two line segments are coincident, then no intersection is detected (there are actually infinite
                intersection points). Author: Jeremy Bell
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection point if an intersection is detected.</param>
            <param name="firstIsSegment">Set this to true to require that the intersection point be on the first line segment.</param>
            <param name="secondIsSegment">Set this to true to require that the intersection point be on the second line segment.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.LineUtils.LineIntersect(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                This method detects if two line segments intersect, and, if so, the point of intersection. Note: If two line
                segments are coincident, then no intersection is detected (there are actually infinite intersection points).
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection point if an intersection is detected.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.LineUtils.LineIntersect(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2@)">
            <summary>
                This method detects if two line segments intersect, and, if so, the point of intersection. Note: If two line
                segments are coincident, then no intersection is detected (there are actually infinite intersection points).
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection point if an intersection is detected.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.LineUtils.LineSegmentVerticesIntersect(System.Numerics.Vector2@,System.Numerics.Vector2@,Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Get all intersections between a line segment and a list of vertices representing a polygon. The vertices reuse
                adjacent points, so for example edges one and two are between the first and second vertices and between the second
                and
                third vertices. The last edge is between vertex vertices.Count - 1 and verts0. (ie, vertices from a Geometry or
                AABB)
            </summary>
            <param name="point1">The first point of the line segment to test</param>
            <param name="point2">The second point of the line segment to test.</param>
            <param name="vertices">The vertices, as described above</param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.LineUtils.LineSegmentAabbIntersect(System.Numerics.Vector2@,System.Numerics.Vector2@,Alis.Core.Physic.Shared.Aabb)">
            <summary>Get all intersections between a line segment and an AABB.</summary>
            <param name="point1">The first point of the line segment to test</param>
            <param name="point2">The second point of the line segment to test.</param>
            <param name="aabb">The AABB that is used for testing intersection.</param>
        </member>
        <member name="T:Alis.Core.Physic.Utilities.MathConstants">
            <summary>
                The math constants class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Utilities.MathConstants.Pi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Utilities.MathConstants.TwoPi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Utilities.MathConstants.MaxFloat">
            <summary>
                The max value
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Utilities.MathConstants.Epsilon">
            <summary>
                The epsilon
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Utilities.MathConstants.Euler">
            <summary>
                The euler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Utilities.MathUtils">
            <summary>
                The math utils class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Cross(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>Perform the cross product on two vectors.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Cross(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Perform the cross product on two vectors.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>Perform the cross product on two vectors.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Cross(System.Numerics.Vector2,System.Single)">
            <summary>Perform the cross product on two vectors.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Cross(System.Single,System.Numerics.Vector2)">
            <summary>Perform the cross product on two vectors.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Abs(System.Numerics.Vector2)">
            <summary>
                Abses the v
            </summary>
            <param name="v">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Abs(System.Single)">
            <summary>
                Abses the value
            </summary>
            <param name="value">The value</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Mul(Alis.Core.Physic.Shared.Mat22@,System.Numerics.Vector2)">
            <summary>
                Muls the a
            </summary>
            <param name="a">The </param>
            <param name="v">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Mul(Alis.Core.Physic.Shared.Mat22@,System.Numerics.Vector2@)">
            <summary>
                Muls the a
            </summary>
            <param name="a">The </param>
            <param name="v">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Mul(Alis.Core.Physic.Shared.Transform@,System.Numerics.Vector2)">
            <summary>
                Muls the t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Mul(Alis.Core.Physic.Shared.Transform@,System.Numerics.Vector2@)">
            <summary>
                Muls the t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Mat22@,System.Numerics.Vector2)">
            <summary>
                Muls the t using the specified a
            </summary>
            <param name="a">The </param>
            <param name="v">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Mat22@,System.Numerics.Vector2@)">
            <summary>
                Muls the t using the specified a
            </summary>
            <param name="a">The </param>
            <param name="v">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Transform@,System.Numerics.Vector2)">
            <summary>
                Muls the t using the specified t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Transform@,System.Numerics.Vector2@)">
            <summary>
                Muls the t using the specified t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Mat22@,Alis.Core.Physic.Shared.Mat22@,Alis.Core.Physic.Shared.Mat22@)">
            <summary>
                Muls the t using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <param name="c">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Mul(Alis.Core.Physic.Shared.Mat33,System.Numerics.Vector3)">
            <summary>Multiply a matrix times a vector.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Mul(Alis.Core.Physic.Shared.Transform,Alis.Core.Physic.Shared.Transform)">
            <summary>
                Muls the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Shared.Transform@,Alis.Core.Physic.Shared.Transform@)">
            <summary>
                Muls the t using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <param name="c">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Swap``1(``0@,``0@)">
            <summary>
                Swaps the a
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="a">The </param>
            <param name="b">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Mul22(Alis.Core.Physic.Shared.Mat33,System.Numerics.Vector2)">
            <summary>Multiply a matrix times a vector.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Mul(Alis.Core.Physic.Shared.Rot,Alis.Core.Physic.Shared.Rot)">
            <summary>Multiply two rotations: q * r</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Transform,System.Numerics.Vector2)">
            <summary>
                Muls the t using the specified t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Rot,Alis.Core.Physic.Shared.Rot)">
            <summary>Transpose multiply two rotations: qT * r</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Transform,Alis.Core.Physic.Shared.Transform)">
            <summary>
                Muls the t using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Mul(Alis.Core.Physic.Shared.Rot,System.Numerics.Vector2)">
            <summary>Rotate a vector</summary>
            <param name="q">The rotation matrix</param>
            <param name="v">The value</param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Rot,System.Numerics.Vector2)">
            <summary>Inverse rotate a vector</summary>
            <param name="q">The rotation matrix</param>
            <param name="v">The value</param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Skew(System.Numerics.Vector2)">
            <summary>Get the skew vector such that dot(skew_vec, other) == cross(vec, other)</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.IsValid(System.Single)">
            <summary>This function is used to ensure that a floating point number is not a NaN or infinity.</summary>
            <param name="x">The x.</param>
            <returns><c>true</c> if the specified x is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.IsValid(System.Numerics.Vector2)">
            <summary>
                Describes whether is valid
            </summary>
            <param name="x">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Clamp(System.Single,System.Single,System.Single)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Cross(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Single@)">
            <summary>
                Crosses the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <param name="c">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.VectorAngle(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Return the angle between two vectors on a plane The angle is from vector 1 to vector 2, positive anticlockwise
                The result is between -pi -> pi
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>Perform the dot product on two vectors.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Dot(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>Perform the dot product on two vectors.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Perform the dot product on two vectors.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.VectorAngle(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Vectors the angle using the specified p 1
            </summary>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <returns>The double</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Area(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Returns a positive number if c is to the left of the line going from a to b.</summary>
            <returns>Positive number if point is left, negative if point is right, and 0 if points are collinear.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Area(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>Returns a positive number if c is to the left of the line going from a to b.</summary>
            <returns>Positive number if point is left, negative if point is right, and 0 if points are collinear.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.IsCollinear(System.Numerics.Vector2@,System.Numerics.Vector2@,System.Numerics.Vector2@,System.Single)">
            <summary>Determines if three vertices are collinear (ie. on a straight line)</summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Cross(System.Single,System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Crosses the s
            </summary>
            <param name="s">The </param>
            <param name="a">The </param>
            <param name="b">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.FloatEquals(System.Single,System.Single)">
            <summary>
                Describes whether float equals
            </summary>
            <param name="value1">The value</param>
            <param name="value2">The value</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.FloatEquals(System.Single,System.Single,System.Single)">
            <summary>Checks if a floating point Value is equal to another, within a certain tolerance.</summary>
            <returns>True if the values are "equal", false otherwise.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.FloatInRange(System.Single,System.Single,System.Single)">
            <summary>Checks if a floating point Value is within a specified range of values (inclusive).</summary>
            <param name="value">The Value to check.</param>
            <param name="min">The minimum Value.</param>
            <param name="max">The maximum Value.</param>
            <returns>True if the Value is within the range specified, false otherwise.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Mul(Alis.Core.Physic.Shared.Rot@,System.Numerics.Vector2)">
            <summary>
                Muls the rot
            </summary>
            <param name="rot">The rot</param>
            <param name="axis">The axis</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.MulT(Alis.Core.Physic.Shared.Rot@,System.Numerics.Vector2)">
            <summary>
                Muls the t using the specified rot
            </summary>
            <param name="rot">The rot</param>
            <param name="axis">The axis</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Distances the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Distance(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Distances the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.DistanceSquared(System.Numerics.Vector2@,System.Numerics.Vector2@)">
            <summary>
                Distances the squared using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Max(System.Single,System.Single)">
            <summary>
                Maxes the value a
            </summary>
            <param name="valueA">The value</param>
            <param name="valueB">The value</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Max(System.Int32,System.Int32)">
            <summary>
                Maxes the value a
            </summary>
            <param name="valueA">The value</param>
            <param name="valueB">The value</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Min(System.Single,System.Single)">
            <summary>
                Mins the value a
            </summary>
            <param name="valueA">The value</param>
            <param name="valueB">The value</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Min(System.Int32,System.Int32)">
            <summary>
                Mins the value a
            </summary>
            <param name="valueA">The value</param>
            <param name="valueB">The value</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Sign(System.Single)">
            <summary>
                Signs the value
            </summary>
            <param name="value">The value</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Normalize(System.Numerics.Vector2@)">
            <summary>
                Convert this vector into a unit vector. Returns the length.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Sqrt(System.Single)">
            <summary>
                Sqrts the value
            </summary>
            <param name="value">The value</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Cosf(System.Single)">
            <summary>
                Cosfs the value
            </summary>
            <param name="value">The value</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Sinf(System.Single)">
            <summary>
                Sinfs the value
            </summary>
            <param name="value">The value</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Ceil(System.Single)">
            <summary>
                Ceils the log
            </summary>
            <param name="log">The log</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.MathUtils.Log(System.Single)">
            <summary>
                Logs the log
            </summary>
            <param name="log">The log</param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Utilities.PolygonUtils">
            <summary>
                The polygon utils class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreateRectangle(System.Single,System.Single)">
            <summary>Build vertices to represent an axis-aligned box.</summary>
            <param name="hx">the half-width.</param>
            <param name="hy">the half-height.</param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreateRectangle(System.Single,System.Single,System.Numerics.Vector2,System.Single)">
            <summary>Build vertices to represent an oriented box.</summary>
            <param name="hx">the half-width.</param>
            <param name="hy">the half-height.</param>
            <param name="center">the center of the box in local coordinates.</param>
            <param name="angle">the rotation of the box in local coordinates.</param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreateRoundedRectangle(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>Creates a rounded rectangle with the specified width and height.</summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="xRadius">The rounding X radius.</param>
            <param name="yRadius">The rounding Y radius.</param>
            <param name="segments">The number of segments to subdivide the edges.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreateLine(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>Set this as a single edge.</summary>
            <param name="start">The first point.</param>
            <param name="end">The second point.</param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreateCircle(System.Single,System.Int32)">
            <summary>Creates a circle with the specified radius and number of edges.</summary>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges. The more edges, the more it resembles a circle</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreateEllipse(System.Single,System.Single,System.Int32)">
            <summary>Creates a ellipse with the specified width, height and number of edges.</summary>
            <param name="xRadius">Width of the ellipse.</param>
            <param name="yRadius">Height of the ellipse.</param>
            <param name="numberOfEdges">The number of edges. The more edges, the more it resembles an ellipse</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreateArc(System.Single,System.Int32,System.Single)">
            <summary>
                Creates the arc using the specified radians
            </summary>
            <param name="radians">The radians</param>
            <param name="sides">The sides</param>
            <param name="radius">The radius</param>
            <returns>The vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreateCapsule(System.Single,System.Single,System.Int32)">
            <summary>
                Creates an capsule with the specified height, radius and number of edges. A capsule has the same form as a
                pill capsule.
            </summary>
            <param name="height">Height (inner height + 2 * radius) of the capsule.</param>
            <param name="endRadius">Radius of the capsule ends.</param>
            <param name="edges">The number of edges of the capsule ends. The more edges, the more it resembles an capsule</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreateCapsule(System.Single,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
                Creates an capsule with the specified  height, radius and number of edges. A capsule has the same form as a
                pill capsule.
            </summary>
            <param name="height">Height (inner height + radii) of the capsule.</param>
            <param name="topRadius">Radius of the top.</param>
            <param name="topEdges">The number of edges of the top. The more edges, the more it resembles an capsule</param>
            <param name="bottomRadius">Radius of bottom.</param>
            <param name="bottomEdges">The number of edges of the bottom. The more edges, the more it resembles an capsule</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreateGear(System.Single,System.Int32,System.Single,System.Single)">
            <summary>Creates a gear shape with the specified radius and number of teeth.</summary>
            <param name="radius">The radius.</param>
            <param name="numberOfTeeth">The number of teeth.</param>
            <param name="tipPercentage">The tip percentage.</param>
            <param name="toothHeight">Height of the tooth.</param>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreatePolygon(System.UInt32[],System.Int32)">
            <summary>Detects the vertices by analyzing the texture data.</summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreatePolygon(System.UInt32[],System.Int32,System.Boolean)">
            <summary>Detects the vertices by analyzing the texture data.</summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <param name="holeDetection">if set to <c>true</c> it will perform hole detection.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Utilities.PolygonUtils.CreatePolygon(System.UInt32[],System.Int32,System.Single,System.Byte,System.Boolean,System.Boolean)">
            <summary>Detects the vertices by analyzing the texture data.</summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <param name="hullTolerance">The hull tolerance.</param>
            <param name="alphaTolerance">The alpha tolerance.</param>
            <param name="multiPartDetection">if set to <c>true</c> it will perform multi part detection.</param>
            <param name="holeDetection">if set to <c>true</c> it will perform hole detection.</param>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Physic.World">
            <summary>The world class manages all physics entities, dynamic simulation, and asynchronous queries.</summary>
        </member>
        <member name="F:Alis.Core.Physic.World.bodyAddList">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.bodyRemoveList">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.jointAddList">
            <summary>
                The joint
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.jointRemoveList">
            <summary>
                The joint
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.rayCastCallbackWrapper">
            <summary>
                The ray cast callback wrapper
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.timerPool">
            <summary>
                The restart
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.gravity">
            <summary>
                The gravity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.invDt0">
            <summary>
                The inv dt
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.profile">
            <summary>
                The profile
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.rayCastCallback">
            <summary>
                The ray cast callback
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.stack">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.World.stepComplete">
            <summary>
                The step complete
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.#ctor(System.Numerics.Vector2)">
            <summary>Initializes a new instance of the <see cref="T:Alis.Core.Physic.World" /> class.</summary>
        </member>
        <member name="P:Alis.Core.Physic.World.TestPointAllFixtures">
            <summary>
                The test point all fixtures
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.ContactPool">
            <summary>
                The contact
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.Island">
            <summary>
                The island
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.NewContacts">
            <summary>
                The new contacts
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.ContinuousPhysicsEnabled">
            <summary>
                Gets or sets the value of the continuous physics enabled
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.SleepingAllowed">
            <summary>
                Gets or sets the value of the sleeping allowed
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.WarmStartingEnabled">
            <summary>
                Gets or sets the value of the warm starting enabled
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.EnableDiagnostics">
            <summary>
                Enabling diagnostics causes the engine to gather timing information. You can see how much time it took to
                solve the contacts, solve CCD and update the controllers.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.Profile">
            <summary>
                Gets the value of the profile
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.ControllerList">
            <summary>
                Gets the value of the controller list
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.BreakableBodyList">
            <summary>
                Gets the value of the breakable body list
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.ProxyCount">
            <summary>Get the number of broad-phase proxies.</summary>
            <value>The proxy count.</value>
        </member>
        <member name="P:Alis.Core.Physic.World.ContactManager">
            <summary>Get the contact manager for testing.</summary>
            <value>The contact manager.</value>
        </member>
        <member name="P:Alis.Core.Physic.World.BodyList">
            <summary>Get the world body list.</summary>
            <value>The head of the world body list.</value>
        </member>
        <member name="P:Alis.Core.Physic.World.JointList">
            <summary>Get the world joint list.</summary>
            <value>The joint list.</value>
        </member>
        <member name="P:Alis.Core.Physic.World.Enabled">
            <summary>If false, the whole simulation stops. It still processes added and removed geometries.</summary>
        </member>
        <member name="P:Alis.Core.Physic.World.IsLocked">
            <summary>
                Gets or sets the value of the is locked
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.RayCastCallback(Alis.Core.Physic.Dynamics.Fixture,System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
                Rays the cast callback using the specified arg 1
            </summary>
            <param name="arg1">The arg</param>
            <param name="arg2">The arg</param>
            <param name="arg3">The arg</param>
            <param name="arg4">The arg</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.World.OnBodyAdded(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Ons the body added using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.World.OnBodyRemoved(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Ons the body removed using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.World.OnJointRemoved(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Ons the joint removed using the specified joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.World.OnJointAdded(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Ons the joint added using the specified joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.World.OnFixtureRemoved(Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Ons the fixture removed using the specified fixture
            </summary>
            <param name="fixture">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.World.OnFixtureAdded(Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Ons the fixture added using the specified fixture
            </summary>
            <param name="fixture">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.World.OnControllerRemoved(Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller)">
            <summary>
                Ons the controller removed using the specified controller
            </summary>
            <param name="controller">The controller</param>
        </member>
        <member name="M:Alis.Core.Physic.World.OnControllerAdded(Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller)">
            <summary>
                Ons the controller added using the specified controller
            </summary>
            <param name="controller">The controller</param>
        </member>
        <member name="E:Alis.Core.Physic.World.BodyAdded">
            <summary>Fires whenever a body has been added</summary>
        </member>
        <member name="E:Alis.Core.Physic.World.BodyRemoved">
            <summary>Fires whenever a body has been removed</summary>
        </member>
        <member name="E:Alis.Core.Physic.World.ControllerAdded">
            <summary>Fires every time a controller is added to the World.</summary>
        </member>
        <member name="E:Alis.Core.Physic.World.ControllerRemoved">
            <summary>Fires every time a controller is removed form the World.</summary>
        </member>
        <member name="E:Alis.Core.Physic.World.FixtureAdded">
            <summary>Fires whenever a fixture has been added</summary>
        </member>
        <member name="E:Alis.Core.Physic.World.FixtureRemoved">
            <summary>Fires whenever a fixture has been removed</summary>
        </member>
        <member name="E:Alis.Core.Physic.World.JointAdded">
            <summary>Fires whenever a joint has been added</summary>
        </member>
        <member name="E:Alis.Core.Physic.World.JointRemoved">
            <summary>Fires whenever a joint has been removed</summary>
        </member>
        <member name="M:Alis.Core.Physic.World.AddBody(Alis.Core.Physic.Dynamics.Body,System.Boolean)">
            <summary>Add a rigid body.</summary>
            <param name="body">The body.</param>
            <param name="delayUntilNextStep">If true, the body is added at next time step</param>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveBody(Alis.Core.Physic.Dynamics.Body,System.Boolean)">
            <summary>Destroy a rigid body. Warning: This automatically deletes all associated shapes and joints.</summary>
            <param name="body">The body.</param>
            <param name="delayUntilNextStep">If true, the body is removed at next time step</param>
        </member>
        <member name="M:Alis.Core.Physic.World.AddJoint(Alis.Core.Physic.Dynamics.Joints.Joint,System.Boolean)">
            <summary>Create a joint to constrain bodies together. This may cause the connected bodies to cease colliding.</summary>
            <param name="joint">The joint.</param>
            <param name="delayUntilNextStep">If true, the joint is added at next time step</param>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveJoint(Alis.Core.Physic.Dynamics.Joints.Joint,System.Boolean)">
            <summary>Destroy a joint. This may cause the connected bodies to begin colliding.</summary>
            <param name="joint">The joint.</param>
            <param name="delayUntilNextStep">If true, the joint is removed at next time step</param>
        </member>
        <member name="M:Alis.Core.Physic.World.AddController(Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller)">
            <summary>
                Adds the controller using the specified controller
            </summary>
            <param name="controller">The controller</param>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveController(Alis.Core.Physic.Extensions.Controllers.ControllerBase.Controller)">
            <summary>
                Removes the controller using the specified controller
            </summary>
            <param name="controller">The controller</param>
        </member>
        <member name="M:Alis.Core.Physic.World.AddBreakableBody(Alis.Core.Physic.Dynamics.BreakableBody)">
            <summary>
                Adds the breakable body using the specified breakable body
            </summary>
            <param name="breakableBody">The breakable body</param>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveBreakableBody(Alis.Core.Physic.Dynamics.BreakableBody)">
            <summary>
                Removes the breakable body using the specified breakable body
            </summary>
            <param name="breakableBody">The breakable body</param>
        </member>
        <member name="M:Alis.Core.Physic.World.Step(System.Single,System.Int32,System.Int32)">
            <summary>Take a time step. This performs collision detection, integration, and constraint solution.</summary>
            <param name="dt">The amount of time to simulate, this should not vary.</param>
            <param name="velocityIterations">
                The number of velocity iterations to do in this step. Lesser means more performance
                but more inaccurate velocity calculations.
            </param>
            <param name="positionIterations">
                The number of position iterations to do in this step. Lesser means more performance,
                but also more inaccurate position calculations.
            </param>
        </member>
        <member name="M:Alis.Core.Physic.World.ClearForces">
            <summary>
                Call this after you are done with time steps to clear the forces. You normally call this after each call to
                Step, unless you are performing sub-steps. By default, forces will be automatically cleared, so you don't need to
                call
                this function.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.QueryAabb(Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Query the world for all fixtures that potentially overlap the provided AABB. Use the overload with a callback
                for filtering and better performance.
            </summary>
            <param name="aabb">The AABB query box.</param>
            <returns>A list of fixtures that were in the affected area.</returns>
        </member>
        <member name="M:Alis.Core.Physic.World.RayCast(System.Func{Alis.Core.Physic.Dynamics.Fixture,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single},System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Ray-cast the world for all fixtures in the path of the ray. Your callback controls whether you get the closest
                point, any point, or n-points. The ray-cast ignores shapes that contain the starting point. Inside the callback:
                return
                -1: ignore this fixture and continue return 0: terminate the ray cast return fraction: clip the ray to this point
                return 1: don't clip the ray and continue
            </summary>
            <param name="callback">A user implemented callback class.</param>
            <param name="point1">The ray starting point.</param>
            <param name="point2">The ray ending point.</param>
        </member>
        <member name="M:Alis.Core.Physic.World.RayCast(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
                Rays the cast using the specified point 1
            </summary>
            <param name="point1">The point</param>
            <param name="point2">The point</param>
            <returns>The affected</returns>
        </member>
        <member name="M:Alis.Core.Physic.World.TestPointAll(System.Numerics.Vector2)">
            <summary>Returns a list of fixtures that are at the specified point.</summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:Alis.Core.Physic.World.ShiftOrigin(System.Numerics.Vector2)">
            <summary>
                Shift the world origin.
                Useful for large worlds.
                The body shift formula is: position -= newOrigin
            </summary>
            <param name="newOrigin">
                the newOrigin the new origin with respect to the old origin
                Warning: Calling this method mid-update might cause a crash.
            </param>
        </member>
        <member name="M:Alis.Core.Physic.World.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.RaiseNewFixtureEvent(Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Raises the new fixture event using the specified fixture
            </summary>
            <param name="fixture">The fixture</param>
        </member>
        <member name="M:Alis.Core.Physic.World.ProcessRemovedJoints">
            <summary>
                Processes the removed joints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.ProcessAddedJoints">
            <summary>
                Processes the added joints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.ProcessAddedBodies">
            <summary>
                Processes the added bodies
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.ProcessRemovedBodies">
            <summary>
                Processes the removed bodies
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.RayCastCallbackWrapper(Alis.Core.Physic.Collision.RayCast.RayCastInput,System.Int32)">
            <summary>
                Rays the cast callback wrapper using the specified ray cast input
            </summary>
            <param name="rayCastInput">The ray cast input</param>
            <param name="proxyId">The proxy id</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.World.Solve(Alis.Core.Physic.Dynamics.TimeStep@)">
            <summary>
                Solves the step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.World.SolveToi(Alis.Core.Physic.Dynamics.TimeStep@)">
            <summary>
                Solves the toi using the specified step
            </summary>
            <param name="step">The step</param>
        </member>
        <member name="M:Alis.Core.Physic.World.TestPointCallback(Alis.Core.Physic.Dynamics.Fixture,System.Numerics.Vector2@)">
            <summary>
                Describes whether this instance test point callback
            </summary>
            <param name="fixture">The fixture</param>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.World.AddJointInternal(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Adds the joint internal using the specified joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveJointInternal(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Removes the joint internal using the specified joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.World.AddBodyInternal(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Adds the body internal using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveBodyInternal(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Removes the body internal using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.World.ProcessChanges">
            <summary>
                Processes the changes
            </summary>
        </member>
        <member name="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve">
            <summary>
                Contains a collection of <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> points in 2D space and provides methods for evaluating
                features of the curve they define.
            </summary>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.#ctor">
            <summary>Constructs a curve.</summary>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.IsConstant">
            <summary>Returns <c>true</c> if this curve is constant (has zero or one points); <c>false</c> otherwise.</summary>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.PreLoop">
            <summary>Defines how to handle weighting values that are less than the first control point in the curve.</summary>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.PostLoop">
            <summary>Defines how to handle weighting values that are greater than the last control point in the curve.</summary>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.Keys">
            <summary>The collection of curve keys.</summary>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.Clone">
            <summary>Creates a copy of this curve.</summary>
            <returns>A copy of this curve.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.Evaluate(System.Single)">
            <summary>Evaluate the value at a position of this <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve" />.</summary>
            <param name="position">The position on this <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve" />.</param>
            <returns>Value at the position on this <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve" />.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.ComputeTangents(Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveTangent)">
            <summary>Computes tangents for all keys in the collection.</summary>
            <param name="tangentType">The tangent type for both in and out.</param>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.ComputeTangents(Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveTangent,Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveTangent)">
            <summary>Computes tangents for all keys in the collection.</summary>
            <param name="tangentInType">The tangent in-type. <see cref="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.TangentIn" /> for more details.</param>
            <param name="tangentOutType">The tangent out-type. <see cref="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.TangentOut" /> for more details.</param>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.ComputeTangent(System.Int32,Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveTangent)">
            <summary>Computes tangent for the specific key in the collection.</summary>
            <param name="keyIndex">The index of a key in the collection.</param>
            <param name="tangentType">The tangent type for both in and out.</param>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.ComputeTangent(System.Int32,Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveTangent,Alis.Core.Physic.Extensions.Controllers.Wind.Curve.CurveTangent)">
            <summary>Computes tangent for the specific key in the collection.</summary>
            <param name="keyIndex">The index of key in the collection.</param>
            <param name="tangentInType">The tangent in-type. <see cref="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.TangentIn" /> for more details.</param>
            <param name="tangentOutType">The tangent out-type. <see cref="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.TangentOut" /> for more details.</param>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.GetNumberOfCycle(System.Single)">
            <summary>
                Gets the number of cycle using the specified position
            </summary>
            <param name="position">The position</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve.GetCurvePosition(System.Single)">
            <summary>
                Gets the curve position using the specified position
            </summary>
            <param name="position">The position</param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveContinuity">
            <summary>Defines the continuity of keys on a <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve" />.</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveContinuity.Smooth">
            <summary>Interpolation can be used between this key and the next.</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveContinuity.Step">
            <summary>Interpolation cannot be used. A position between the two points returns this point.</summary>
        </member>
        <member name="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey">
            <summary>Key point on the <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve" />.</summary>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.#ctor">
            <summary>Creates a new instance of <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> class with position: 0 and value: 0.</summary>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.#ctor(System.Single,System.Single)">
            <summary>Creates a new instance of <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> class.</summary>
            <param name="position">Position on the curve.</param>
            <param name="value">Value of the control point.</param>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates a new instance of <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> class.</summary>
            <param name="position">Position on the curve.</param>
            <param name="value">Value of the control point.</param>
            <param name="tangentIn">Tangent approaching point from the previous point on the curve.</param>
            <param name="tangentOut">Tangent leaving point toward next point on the curve.</param>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveContinuity)">
            <summary>Creates a new instance of <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> class.</summary>
            <param name="position">Position on the curve.</param>
            <param name="value">Value of the control point.</param>
            <param name="tangentIn">Tangent approaching point from the previous point on the curve.</param>
            <param name="tangentOut">Tangent leaving point toward next point on the curve.</param>
            <param name="continuity">Indicates whether the curve is discrete or continuous.</param>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.Continuity">
            <summary>
                Gets or sets the indicator whether the segment between this point and the next point on the curve is discrete
                or continuous.
            </summary>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.Position">
            <summary>Gets a position of the key on the curve.</summary>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.TangentIn">
            <summary>Gets or sets a tangent when approaching this point from the previous point on the curve.</summary>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.TangentOut">
            <summary>Gets or sets a tangent when leaving this point to the next point on the curve.</summary>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.Value">
            <summary>Gets a value of this point.</summary>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.CompareTo(Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey)">
            <summary>
                Compares the to using the specified other
            </summary>
            <param name="other">The other</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.Equals(Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="other">The other</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.op_Inequality(Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey,Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey)">
            <summary>Compares whether two <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> instances are not equal.</summary>
            <param name="value1"><see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> instance on the left of the not equal sign.</param>
            <param name="value2"><see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.op_Equality(Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey,Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey)">
            <summary>Compares whether two <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> instances are equal.</summary>
            <param name="value1"><see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> instance on the left of the equal sign.</param>
            <param name="value2"><see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.Clone">
            <summary>Creates a copy of this key.</summary>
            <returns>A copy of this key.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.Equals(System.Object)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="obj">The obj</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey.GetHashCode">
            <summary>
                Gets the hash code
            </summary>
            <returns>The int</returns>
        </member>
        <member name="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection">
            <summary>The collection of the <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> elements and a part of the <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.Curve" /> class.</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.keys">
            <summary>
                The keys
            </summary>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.#ctor">
            <summary>Creates a new instance of <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection" /> class.</summary>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.Item(System.Int32)">
            <summary>Indexer.</summary>
            <param name="index">The index of key in this collection.</param>
            <returns><see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey" /> at <paramref name="index" /> position.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.Add(Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey)">
            <summary>Adds a key to this collection.</summary>
            <param name="item">New key for the collection.</param>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="item" /> is null.</exception>
            <remarks>The new key would be added respectively to a position of that key and the position of other keys.</remarks>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.Clear">
            <summary>Removes all keys from this collection.</summary>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.Contains(Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey)">
            <summary>Determines whether this collection contains a specific key.</summary>
            <param name="item">The key to locate in this collection.</param>
            <returns><c>true</c> if the key is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.CopyTo(Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey[],System.Int32)">
            <summary>Copies the keys of this collection to an array, starting at the array index provided.</summary>
            <param name="array">Destination array where elements will be copied.</param>
            <param name="arrayIndex">The zero-based index in the array to start copying from.</param>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator for the <see cref="T:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection" />.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.Remove(Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey)">
            <summary>Removes specific element.</summary>
            <param name="item">The element</param>
            <returns>
                <c>true</c> if item is successfully removed; <c>false</c> otherwise. This method also returns <c>false</c> if
                item was not found.
            </returns>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.Count">
            <summary>Returns the count of keys in this collection.</summary>
        </member>
        <member name="P:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.IsReadOnly">
            <summary>Returns false because it is not a read-only collection.</summary>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.Clone">
            <summary>Creates a copy of this collection.</summary>
            <returns>A copy of this collection.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.IndexOf(Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKey)">
            <summary>Finds element in the collection and returns its index.</summary>
            <param name="item">Element for the search.</param>
            <returns>Index of the element; or -1 if item is not found.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Config.Extensions.Controllers.Wind.Curve.CurveKeyCollection.RemoveAt(System.Int32)">
            <summary>Removes element at the specified index.</summary>
            <param name="index">The index which element will be removed.</param>
        </member>
        <member name="T:Alis.Core.Systems.Physics2D.Utilities.MathHelper">
            <summary>Contains commonly used precalculated values and mathematical operations.</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Utilities.MathHelper.E">
            <summary>Represents the mathematical constant e(2.71828175).</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Log10E">
            <summary>Represents the log base ten of e(0.4342945).</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Log2E">
            <summary>Represents the log base two of e(1.442695).</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Pi">
            <summary>Represents the value of pi(3.14159274).</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Utilities.MathHelper.PiOver2">
            <summary>Represents the value of pi divided by two(1.57079637).</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Utilities.MathHelper.PiOver4">
            <summary>Represents the value of pi divided by four(0.7853982).</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Utilities.MathHelper.TwoPi">
            <summary>Represents the value of pi times two(6.28318548).</summary>
        </member>
        <member name="F:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Tau">
            <summary>Represents the value of pi times two(6.28318548). This is an alias of TwoPi.</summary>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two
                normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
            <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
            <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
            <param name="amount1">
                The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the
                coordinate of which is specified in value2.
            </param>
            <param name="amount2">
                The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the
                coordinate of which is specified in value3.
            </param>
            <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>Restricts a value to be within a specified range.</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
            <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>Restricts a value to be within a specified range.</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
            <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Distance(System.Single,System.Single)">
            <summary>Calculates the absolute value of the difference of two values.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>Distance between the two values.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Performs a Hermite spline interpolation.</summary>
            <param name="value1">Source position.</param>
            <param name="tangent1">Source tangent.</param>
            <param name="value2">Source position.</param>
            <param name="tangent2">Source tangent.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>Linearly interpolates between two values.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Destination value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
            <remarks>
                This method performs the linear interpolation based on the following formula:
                <code>value1 + (value2 - value1) * amount</code>. Passing amount a value of 0 will cause value1 to be returned, a
                value
                of 1 will cause value2 to be returned. See <see cref="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)" /> for a less efficient version with
                more
                precision around edge cases.
            </remarks>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.LerpPrecise(System.Single,System.Single,System.Single)">
            <summary>
                Linearly interpolates between two values. This method is a less efficient, more precise version of
                <see cref="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Lerp(System.Single,System.Single,System.Single)" />. See remarks for more info.
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Destination value.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <returns>Interpolated value.</returns>
            <remarks>
                This method performs the linear interpolation based on the following formula:
                <code>((1 - amount) * value1) + (value2 * amount)</code>. Passing amount a value of 0 will cause value1 to be
                returned,
                a value of 1 will cause value2 to be returned. This method does not have the floating point precision issue that
                <see cref="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Lerp(System.Single,System.Single,System.Single)" /> has. i.e. If there is a big gap between value1 and value2 in magnitude (e.g.
                value1=10000000000000000, value2=1), right at the edge of the interpolation range (amount=1),
                <see cref="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Lerp(System.Single,System.Single,System.Single)" /> will return 0 (whereas it should return 1). This also holds for value1=10^17,
                value2=10;
                value1=10^18,value2=10^2... so on. For an in depth explanation of the issue, see below references: Relevant
                Wikipedia
                Article: https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support Relevant StackOverflow
                Answer:
                http://stackoverflow.com/questions/4353525/floating-point-linear-interpolation#answer-23716956
            </remarks>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Max(System.Single,System.Single)">
            <summary>Returns the greater of two values.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Max(System.Int32,System.Int32)">
            <summary>Returns the greater of two values.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Min(System.Single,System.Single)">
            <summary>Returns the lesser of two values.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.Min(System.Int32,System.Int32)">
            <summary>Returns the lesser of two values.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>Interpolates between two values using a cubic equation.</summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <param name="amount">Weighting value.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.ToDegrees(System.Single)">
            <summary>Converts radians to degrees.</summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
            <remarks>This method uses double precission internally, though it returns single float Factor = 180 / pi</remarks>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.ToRadians(System.Single)">
            <summary>Converts degrees to radians.</summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
            <remarks>This method uses double precission internally, though it returns single float Factor = pi / 180</remarks>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.WrapAngle(System.Single)">
            <summary>Reduces a given angle to a value between π and -π.</summary>
            <param name="angle">The angle to reduce, in radians.</param>
            <returns>The new angle, in radians.</returns>
        </member>
        <member name="M:Alis.Core.Systems.Physics2D.Utilities.MathHelper.IsPowerOfTwo(System.Int32)">
            <summary>Determines if value is powered by two.</summary>
            <param name="value">A value.</param>
            <returns><c>true</c> if <c>value</c> is powered by two; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Base.AlisObject">
            <summary>
                The object base class
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Base.AlisObject.Name">
            <summary>
                The name
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Base.AlisObject.Tag">
            <summary>
                The tag
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Base.AlisObject.IsActive">
            <summary>
                Gets or sets the value of the is active
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.GetHashCode(System.Object)">
            <summary>
                The object base class
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.Equals(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.GetHashCode">
            <summary>
                Get hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.AlisObject.ToString">
            <summary>
                To string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Attributes.SuppressUnmanagedCodeSecurityAttribute">
            <summary>Allows managed code to call into unmanaged code without a stack walk. This class cannot be inherited.</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Dll.EmbeddedDllClass">
             <summary>
             A class used by managed classes to managed unmanaged DLLs.
             This will extract and load DLLs from embedded binary resources.
             
             This can be used with pinvoke, as well as manually loading DLLs your own way. If you use pinvoke, you don't need to load the DLLs, just
             extract them. When the DLLs are extracted, the %PATH% environment variable is updated to point to the temporary folder.
            
             To Use
             <list type="">
             <item>Add all of the DLLs as binary file resources to the project Propeties. Double click Properties/Resources.resx,
             Add Resource, Add Existing File. The resource name will be similar but not exactly the same as the DLL file name.</item>
             <item>In a static constructor of your application, call EmbeddedDllClass.ExtractEmbeddedDlls() for each DLL that is needed</item>
             <example>
                           EmbeddedDllClass.ExtractEmbeddedDlls("libFrontPanel-pinv.dll", Properties.Resources.libFrontPanel_pinv);
             </example>
             <item>Optional: In a static constructor of your application, call EmbeddedDllClass.LoadDll() to load the DLLs you have extracted. This is not necessary for pinvoke</item>
             <example>
                           EmbeddedDllClass.LoadDll("myscrewball.dll");
             </example>
             <item>Continue using standard Pinvoke methods for the desired functions in the DLL</item>
             </list>
             </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Dll.EmbeddedDllClass.tempFolder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Dll.EmbeddedDllClass.dirName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Dll.EmbeddedDllClass.ExtractEmbeddedDlls(System.String,System.Byte[])">
            <summary>
            Extract DLLs from resources to temporary folder
            </summary>
            <param name="dllName">name of DLL file to create (including dll suffix)</param>
            <param name="resourceBytes">The resource name (fully qualified)</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Dll.EmbeddedDllClass.LoadLibrary(System.String)">
            <summary>
            Loads the library using the specified lp file name
            </summary>
            <param name="lpFileName">The lp file name</param>
            <returns>The int ptr</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Dll.EmbeddedDllClass.LoadDll(System.String)">
            <summary>
            managed wrapper around LoadLibrary
            </summary>
            <param name="dllName"></param>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.ComponentDontExits">
            <summary>
                The component dont exits class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.ComponentInstancieIsTheSame">
            <summary>
                The component instancie is the same class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.ComponentTypeAlredyExist">
            <summary>
                The component type alredy exist class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.GameObjectIsFull">
            <summary>
                The game object is full class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.IndexOutOfBounds">
            <summary>
                The index out of bounds class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.LimitOfComponents">
            <summary>
                The limit of components class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException">
            <summary>
                Exception thrown by SFML whenever loading a resource fails
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor">
            <summary>
                Default constructor (unknown error)
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String)">
            <summary>
                Failure to load a resource from memory
            </summary>
            <param name="resourceName">Name of the resource</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String,System.Exception)">
            <summary>
                Failure to load a resource from memory
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="innerException">Exception which is the cause ofthe current exception</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String,System.String)">
            <summary>
                Failure to load a resource from a file
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="filename">Path of the file</param>
        </member>
        <member name="M:Alis.Core.Aspect.Base.Exceptions.LoadingFailedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Failure to load a resource from a file
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="filename">Path of the file</param>
            <param name="innerException">Exception which is the cause ofthe current exception</param>
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.MaxSceneGame">
            <summary>
                The max scene game class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Exceptions.NullArgumentException">
            <summary>
                The null argument exception class
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Alis.Core.Aspect.Base.Settings.Csfml">
            <summary>
                The csfml class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.Audio">
            <summary>
                The audio
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.Graphics">
            <summary>
                The graphics
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.System">
            <summary>
                The system
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Base.Settings.Csfml.Window">
            <summary>
                The window
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Data.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.IBuild`1">
            <summary>
                The build interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.IBuild`1.Build">
            <summary>
                Builds this instance
            </summary>
            <returns>The origin</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.IBuilder`1">
            <summary>
                The builder interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.IBuilder`1.Builder">
            <summary>
                Builders
            </summary>
            <returns>The</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.IBuilder`1.Builder``1">
            <summary>
                Builder static
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAdd`3">
            <summary>
                The add interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAdd`3.Add``1(`2)">
            <summary>
                Adds the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAddAnimation`2">
            <summary>
                The add animation interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAddAnimation`2.AddAnimation(`1)">
            <summary>
                Adds the animation using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAddComponent`2">
            <summary>
                The add component class
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAddComponent`2.AddComponent``1(System.Func{``0,`1})">
            <summary>
                Adds the component using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAddComponent`2.AddComponent``1(``0)">
            <summary>
                Adds the component using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAddFrame`2">
            <summary>
                The add frame interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAddFrame`2.AddFrame(`1)">
            <summary>
                Adds the frame using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAudio`2">
            <summary>
                The audio interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAudio`2.Audio(`1)">
            <summary>
                Audioes the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAuthor`2">
            <summary>
                The author interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAuthor`2.Author(`1)">
            <summary>
                Authors the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IAutoTilling`2">
            <summary>
            The auto tilling interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IAutoTilling`2.AutoTilling(`1)">
            <summary>
            Autoes the tilling using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IBackground`2">
            <summary>
                The background interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IBackground`2.Background(`1)">
            <summary>
                Backgrounds the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IBodyType`2">
            <summary>
            The body type interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IBodyType`2.BodyType(`1)">
            <summary>
            Bodies the type using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IConfiguration`2">
            <summary>
                The configuration interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IConfiguration`2.Configuration(`1)">
            <summary>
                Configurations the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ICreate`2">
            <summary>
                The create interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ICreate`2.Create(`1)">
            <summary>
                Creates the obj
            </summary>
            <param name="obj">The obj</param>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDebug`2">
            <summary>
                The debug interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDebug`2.Debug(`1)">
            <summary>
                Debugs the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDelete`1">
            <summary>
                The delete interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDelete`1.Delete">
            <summary>
                Deletes this instance
            </summary>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDensity`2">
            <summary>
            The density interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDensity`2.Density(`1)">
            <summary>
            Densities the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDepth`2">
            <summary>
                The depth interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDepth`2.Depth(`1)">
            <summary>
                Depths the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IDescription`2">
            <summary>
                The description interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IDescription`2.Description(`1)">
            <summary>
                Descriptions the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IFile`2">
            <summary>
                The file interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IFile`2.File(`1)">
            <summary>
                Files the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IFilePath`2">
            <summary>
                The file path interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IFilePath`2.FilePath(`1)">
            <summary>
                Files the path using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IFixedRotation`2">
            <summary>
            The fixed rotation interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IFixedRotation`2.FixedRotation(`1)">
            <summary>
            Fixeds the rotation using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IFriction`2">
            <summary>
            The friction interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IFriction`2.Friction(`1)">
            <summary>
            Frictions the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IGeneral`2">
            <summary>
                The general interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IGeneral`2.General(`1)">
            <summary>
                Generals the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IGraphic`2">
            <summary>
                The graphic interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IGraphic`2.Graphic(`1)">
            <summary>
                Graphics the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IGravityScale`2">
            <summary>
            The gravity scale interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IGravityScale`2.GravityScale(`1)">
            <summary>
            Gravities the scale using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IHas`2">
            <summary>
                The has interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IHas`2.Has(`1)">
            <summary>
                Hases the obj
            </summary>
            <param name="obj">The obj</param>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIcon`2">
            <summary>
                The icon interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIcon`2.Icon(`1)">
            <summary>
                Icons the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIs`3">
            <summary>
                The is interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIs`3.Is``1(`2)">
            <summary>
                Ises the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsActive`2">
            <summary>
                The is active interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsActive`2.IsActive(`1)">
            <summary>
                Ises the active using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsDynamic`2">
            <summary>
                The is dynamic interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsDynamic`2.IsDynamic">
            <summary>
                Ises the dynamic
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsDynamic`2.IsDynamic(`1)">
            <summary>
                Ises the dynamic using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsStatic`2">
            <summary>
                The is static interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsStatic`2.IsStatic">
            <summary>
                Ises the static
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsStatic`2.IsStatic(`1)">
            <summary>
                Ises the static using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IIsTrigger`2">
            <summary>
                The is trigger interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsTrigger`2.IsTrigger">
            <summary>
                Ises the trigger
            </summary>
            <returns>The builder</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IIsTrigger`2.IsTrigger(`1)">
            <summary>
                Ises the trigger using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ILinearVelocity`3">
            <summary>
            The linear velocity interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ILinearVelocity`3.LinearVelocity(`1,`2)">
            <summary>
            Linears the velocity using the specified x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IManager`3">
            <summary>
                The manager interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IManager`3.Manager``1(`2)">
            <summary>Withes the specified value.</summary>
            <param name="value">The value.</param>
            <returns>Return that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IManagerOf`3">
            <summary>
                The manager of interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IManagerOf`3.ManagerOf``1(`2)">
            <summary>
                Managers the of using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IMass`2">
            <summary>
            The mass interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IMass`2.Mass(`1)">
            <summary>
            Masses the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IMute`2">
            <summary>
                The mute interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IMute`2.Mute(`1)">
            <summary>
                Mutes the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IName`2">
            <summary>
                The name interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IName`2.Name(`1)">
            <summary>
                Names the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IOrder`2">
            <summary>
                The order interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IOrder`2.Order(`1)">
            <summary>
                Orders the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IPlayOnAwake`2">
            <summary>
                The play on awake interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IPlayOnAwake`2.PlayOnAwake(`1)">
            <summary>
                Plays the on awake using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IPosition2D`3">
            <summary>
                The position interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IPosition2D`3.Position(`1,`2)">
            <summary>
                Positions the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IRelativePosition`3">
            <summary>
            The relative position interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IRelativePosition`3.RelativePosition(`1,`2)">
            <summary>
            Relatives the position using the specified x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IResolution`3">
            <summary>
                The resolution interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IResolution`3.Resolution(`1,`2)">
            <summary>
                Resolutions the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IRestitution`2">
            <summary>
            The restitution interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IRestitution`2.Restitution(`1)">
            <summary>
            Restitutions the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IRotation`2">
            <summary>
                The rotation interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IRotation`2.Rotation(`1)">
            <summary>
                Rotations the angle
            </summary>
            <param name="angle">The angle</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IRun">
            <summary>
                The run interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IRun.Run">
            <summary>
                Runs this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IScale2D`3">
            <summary>
                The scale interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IScale2D`3.Scale(`1,`2)">
            <summary>
                Scales the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IScreenMode`2">
            <summary>
                The screen mode interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IScreenMode`2.ScreenMode(`1)">
            <summary>
                Screens the mode using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISet`3">
            <summary>
                The set interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISet`3.Set``1(`2)">
            <summary>
                Sets the value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISetAudioClip`2">
            <summary>
                The set audio clip interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISetAudioClip`2.SetAudioClip(`1)">
            <summary>
                Sets the audio clip using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISetMax`3">
            <summary>
                The set max interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISetMax`3.SetMax``1(`2)">
            <summary>
                Sets the max using the specified value
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISetTexture`2">
            <summary>
                The texture interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISetTexture`2.SetTexture(`1)">
            <summary>
                Textures the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISettings`2">
            <summary>
                The settings interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISettings`2.Settings(`1)">
            <summary>
                Settingses the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISize`3">
            <summary>
                The size interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISize`3.Size(`1,`2)">
            <summary>
                Sizes the x
            </summary>
            <param name="x">The </param>
            <param name="y">The </param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISpeed`2">
            <summary>
                The speed interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISpeed`2.Speed(`1)">
            <summary>
                Speeds the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ISplashScreen`2">
            <summary>
                The splash screen interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ISplashScreen`2.SplashScreen(`1)">
            <summary>
                Splashes the screen using the specified value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IStyle`2">
            <summary>
                The style interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IStyle`2.Style(`1)">
            <summary>
                Styles the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ITime`2">
            <summary>
                The time interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ITime`2.Time(`1)">
            <summary>
                Times the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.ITransform`2">
            <summary>
                The transform interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.ITransform`2.Transform(`1)">
            <summary>
                Transforms the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IUpdate`2">
            <summary>
                The update interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IUpdate`2.Update(`1)">
            <summary>
                Updates the obj
            </summary>
            <param name="obj">The obj</param>
            <returns>The</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IVolume`2">
            <summary>
                The volume interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IVolume`2.Volume(`1)">
            <summary>
                Volumes the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWhere`2">
            <summary>
                The where interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWhere`2.Where(`1)">
            <summary>Wheres the specified value.</summary>
            <param name="value">The value.</param>
            <returns>
                <br />
            </returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWindow`2">
            <summary>
                The window interface
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWindow`2.Window(`1)">
            <summary>
                Windows the value
            </summary>
            <param name="value">The value</param>
            <returns>The builder</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWith`3">
            <summary>
                Simple comment
            </summary>
            <typeparam name="TBuilder">the builder</typeparam>
            <typeparam name="TArgument">the argument</typeparam>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWith`3.With``1(`2)">
            <summary>Withes the specified value.</summary>
            <param name="value">The value.</param>
            <returns>Return that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWithName`2">
            <summary>Define the word "Name" </summary>
            <typeparam name="TBuilder">The type of the uilder.</typeparam>
            <typeparam name="TArgument">The type of the rgument.</typeparam>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWithName`2.WithName(`1)">
            <summary>Withes the name.</summary>
            <param name="value">The value.</param>
            <returns>Return the value that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Fluent.Words.IWithTag`2">
            <summary>
                Define the word "Tag"
            </summary>
            <typeparam name="TBuilder">The type of the uilder.</typeparam>
            <typeparam name="TArgument">The type of the rgument.</typeparam>
        </member>
        <member name="M:Alis.Core.Aspect.Fluent.Words.IWithTag`2.WithTag(`1)">
            <summary>Withes the tag.</summary>
            <param name="value">The value.</param>
            <returns>return the object that you want.</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.Color">
            <summary>
                Color for debug drawing. Each value has the range [0,1].
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.Color.r">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.Color.g">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.Color.b">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Aspect.Logging.Color" /> class
            </summary>
            <param name="r">The </param>
            <param name="g">The </param>
            <param name="b">The </param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Color.Set(System.Single,System.Single,System.Single)">
            <summary>
                Sets the r
            </summary>
            <param name="r">The </param>
            <param name="g">The </param>
            <param name="b">The </param>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.ConsoleController">
            <summary>
            The console controller class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.ConsoleController.messages">
            <summary>
            The message
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.ConsoleController.filePath">
            <summary>
            The file path
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.ConsoleController.dirPath">
            <summary>
            The dir path
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.ConsoleController.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alis.Core.Aspect.Logging.ConsoleController"/> class
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.ConsoleController.Print(Alis.Core.Aspect.Logging.Message)">
            <summary>
            Prints the to console using the specified message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.ConsoleController.SaveToFile(Alis.Core.Aspect.Logging.Message)">
            <summary>
            Saves the to file using the specified message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.DateTimeConverter">
            <summary>
            The date time converter class
            </summary>
            <seealso cref="T:System.Text.Json.Serialization.JsonConverter`1"/>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.DateTimeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads the reader
            </summary>
            <param name="reader">The reader</param>
            <param name="typeToConvert">The type to convert</param>
            <param name="options">The options</param>
            <returns>The date time</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.DateTimeConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes the writer
            </summary>
            <param name="writer">The writer</param>
            <param name="value">The value</param>
            <param name="options">The options</param>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.ConsoleLogConfig">
            <summary>
            The console log config class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.ConsoleLogConfig.InfoMessageColor">
            <summary>
            Info text color
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.ConsoleLogConfig.LogMessageColor">
            <summary>
            Log text color
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.ConsoleLogConfig.TraceMessageColor">
            <summary>
            Trace text color
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.ConsoleLogConfig.WarningMessageColor">
            <summary>
            Warning text color
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.ConsoleLogConfig.ErrorMessageColor">
            <summary>
            Error text color
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.ConsoleLogConfig.ExceptionMessageColor">
            <summary>
            Exception text color
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.ConsoleLogConfig.EventMessageColor">
            <summary>
            Event text color
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.ConsoleLogConfig.GetColorMessageByType(Alis.Core.Aspect.Logging.MessageType)">
            <summary>
            Gets the color message by type using the specified message type
            </summary>
            <param name="messageType">The message type</param>
            <exception cref="T:System.ArgumentOutOfRangeException">null</exception>
            <returns>The console color</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.FileController">
            <summary>
            The file controller class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.Logger">
            <summary>
                The logger class
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Trace">
            <summary>
            Traces the message
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Trace(System.String)">
            <summary>
            Traces the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Info(System.String)">
            <summary>
            Infoes the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Log(System.String)">
            <summary>
            Logs the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Event(System.String)">
            <summary>
            Events the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Warning(System.String)">
            <summary>
            Warnings the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Error(System.String)">
            <summary>
            Errors the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Exception(System.String)">
            <summary>
            Exceptions the message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Logger.Exception(System.Exception)">
            <summary>
            Exceptions the exception
            </summary>
            <param name="exception">The exception</param>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.LogLevel">
            <summary>
                The log level enum
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Info">
            <summary>
                The info log level
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Log">
            <summary>
                The log log level
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Normal">
            <summary>
                The normal log level
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.LogLevel.Critical">
            <summary>
                The critical log level
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.Message">
            <summary>
            The message class
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Logging.Message.#ctor(Alis.Core.Aspect.Logging.MessageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alis.Core.Aspect.Logging.Message"/> class
            </summary>
            <param name="messageType">The message type</param>
            <param name="content">The content</param>
        </member>
        <member name="P:Alis.Core.Aspect.Logging.Message.DateTime">
            <summary>
            Gets or sets the value of the date time
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Logging.Message.MessageType">
            <summary>
            Gets or sets the value of the message type
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Logging.Message.Level">
            <summary>
            Gets or sets the value of the level
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Logging.Message.Content">
            <summary>
            Gets or sets the value of the content
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Logging.Message.StackTrace">
            <summary>
            Gets or sets the value of the stack trace
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Logging.Message.Method">
            <summary>
            Gets or sets the value of the method
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Logging.Message.File">
            <summary>
            Gets or sets the value of the file
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Logging.Message.Line">
            <summary>
            Gets or sets the value of the line
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Logging.MessageType">
            <summary>
            The message type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.MessageType.Trace">
            <summary>
            The trace message type
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.MessageType.Info">
            <summary>
            The info message type
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.MessageType.Log">
            <summary>
            The log message type
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.MessageType.Event">
            <summary>
            The event message type
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.MessageType.Warning">
            <summary>
            The warning message type
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.MessageType.Error">
            <summary>
            The error message type
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Logging.MessageType.Exception">
            <summary>
            The exception message type
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Constant">
            <summary>
                The math constants class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Pi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.TwoPi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.MaxFloat">
            <summary>
                The max value
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Epsilon">
            <summary>
                The epsilon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Euler">
            <summary>
                The euler
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.E">
            <summary>Represents the mathematical constant e(2.71828175).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Log10E">
            <summary>Represents the log base ten of e(0.4342945).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Log2E">
            <summary>Represents the log base two of e(1.442695).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.PiOver2">
            <summary>Represents the value of pi divided by two(1.57079637).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.PiOver4">
            <summary>Represents the value of pi divided by four(0.7853982).</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Constant.Tau">
            <summary>Represents the value of pi times two(6.28318548). This is an alias of TwoPi.</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Helper">
            <summary>
                The math class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.UshrtMax">
            <summary>
                The ushrt max
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.UcharMax">
            <summary>
                The uchar max
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.RandLimit">
            <summary>
                The rand limit
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.SRnd">
            <summary>
                The random
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.IsValid(System.Single)">
            <summary>
                This function is used to ensure that a floating point number is
                not a NaN or infinity.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.InvSqrt(System.Single)">
            <summary>
                This is a approximate yet fast inverse square-root.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Sqrt(System.Single)">
            <summary>
                Sqrts the x
            </summary>
            <param name="x">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Random">
            <summary>
                Random number in range [-1,1]
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Random(System.Single,System.Single)">
            <summary>
                Random floating point number in range [lo, hi]
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.NextPowerOfTwo(System.UInt32)">
            <summary>
                "Next Largest Power of 2
                Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm
                that recursively "folds" the upper bits into the lower bits. This process yields a bit vector with
                the same most significant 1 as x, but all 1's below it. Adding 1 to that value yields the next
                largest power of 2. For a 32-bit value:"
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.IsPowerOfTwo(System.UInt32)">
            <summary>
                Describes whether is power of two
            </summary>
            <param name="x">The </param>
            <returns>The result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Abs(System.Single)">
            <summary>
                Abses the a
            </summary>
            <param name="a">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Abs(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Abses the a
            </summary>
            <param name="a">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Abs(Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                Abses the a
            </summary>
            <param name="a">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Min(System.Single,System.Single)">
            <summary>
                Mins the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Min(System.Int32,System.Int32)">
            <summary>
                Mins the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Min(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Mins the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Max(System.Single,System.Single)">
            <summary>
                Maxes the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Max(System.Int32,System.Int32)">
            <summary>
                Maxes the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Max(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Maxes the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Clamp(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Clamps the a
            </summary>
            <param name="a">The </param>
            <param name="low">The low</param>
            <param name="high">The high</param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Swap``1(``0@,``0@)">
            <summary>
                Swaps the a
            </summary>
            <typeparam name="T">The </typeparam>
            <param name="a">The </param>
            <param name="b">The </param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Multiply a matrix times a vector. If a rotation matrix is provided,
                then this transforms the vector from one frame to another.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.MulT(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Multiply a matrix transpose times a vector. If a rotation matrix is provided,
                then this transforms the vector from one frame to another (inverse transform).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                A * B
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.MulT(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                A^T * B
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Muls the t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.MulT(Alis.Core.Aspect.Math.XForm,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Muls the t using the specified t
            </summary>
            <param name="T">The </param>
            <param name="v">The </param>
            <returns>The vec</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Mul(Alis.Core.Aspect.Math.Matrix33,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Multiply a matrix times a vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Helper.Atan2(System.Single,System.Single)">
            <summary>
                Atans the 2 using the specified y
            </summary>
            <param name="y">The </param>
            <param name="x">The </param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Helper.Convert">
            <summary>
                The convert
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.Convert.x">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Helper.Convert.i">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Matrix22">
            <summary>
                A 2-by-2 matrix. Stored in column-major order.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Matrix22.Col1">
            <summary>
                The col
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Matrix22.Col2">
            <summary>
                The col
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.#ctor(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Construct this matrix using columns.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct this matrix using scalars.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.#ctor(System.Single)">
            <summary>
                Construct this matrix using an angle.
                This matrix becomes an orthonormal rotation matrix.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.Set(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Initialize this matrix using columns.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.Set(System.Single)">
            <summary>
                Initialize this matrix using an angle.
                This matrix becomes an orthonormal rotation matrix.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.SetIdentity">
            <summary>
                Set this to the identity matrix.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.SetZero">
            <summary>
                Set this matrix to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.GetAngle">
            <summary>
                Extract the angle from this matrix (assumed to be a rotation matrix).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.GetInverse">
            <summary>
                Compute the inverse of this matrix, such that inv(A) * A = identity.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.Solve(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient
                than computing the inverse in one-shot cases.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix22.Identity">
            <summary>
                Gets the value of the identity
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix22.op_Addition(Alis.Core.Aspect.Math.Matrix22,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Matrix33">
            <summary>
                A 3-by-3 matrix. Stored in column-major order.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.#ctor(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Construct this matrix using columns.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.SetZero">
            <summary>
                Set this matrix to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.Solve33(Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient
                than computing the inverse in one-shot cases.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Matrix33.Solve22(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Solve A * x = b, where b is a column vector. This is more efficient
                than computing the inverse in one-shot cases. Solve only the upper
                2-by-2 matrix equation.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix33.Col1">
            <summary>
                The col
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix33.Col2">
            <summary>
                The col
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Matrix33.Col3">
            <summary>
                The col
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Position.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Position.A">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Settings">
            <summary>
                The settings class
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.FltEpsilon">
            <summary>
                The flt epsilon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.FltEpsilonSquared">
            <summary>
                The flt epsilon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.FltMax">
            <summary>
                The flt max
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.FORCE_SCALE(System.Single)">
            <summary>
                Forces the scale using the specified x
            </summary>
            <param name="x">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.FORCE_INV_SCALE(System.Single)">
            <summary>
                Forces the inv scale using the specified x
            </summary>
            <param name="x">The </param>
            <returns>The </returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.Pi">
            <summary>
                The pi
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxManifoldPoints">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxPolygonVertices">
            <summary>
                The max polygon vertices
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxProxies">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxPairs">
            <summary>
                The max proxies
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.LinearSlop">
            <summary>
                A small length used as a collision and constraint tolerance. Usually it is
                chosen to be numerically significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.AngularSlop">
            <summary>
                A small angle used as a collision and constraint tolerance. Usually it is
                chosen to be numerically significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.PolygonRadius">
            <summary>
                The radius of the polygon/edge shape skin. This should not be modified. Making
                this smaller means polygons will have and insufficient for continuous collision.
                Making it larger may create artifacts for vertex collision.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.ToiSlop">
            <summary>
                Continuous collision detection (CCD) works with core, shrunken shapes. This is amount
                by which shapes are automatically shrunk to work with CCD.
                This must be larger than LinearSlop.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxToiContactsPerIsland">
            <summary>
                Maximum number of contacts to be handled to solve a TOI island.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxToiJointsPerIsland">
            <summary>
                Maximum number of joints to be handled to solve a TOI island.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.VelocityThreshold">
            <summary>
                A velocity threshold for elastic collisions. Any collision with a relative linear
                velocity below this threshold will be treated as inelastic.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxLinearCorrection">
            <summary>
                The maximum linear position correction used when solving constraints.
                This helps to prevent overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxAngularCorrection">
            <summary>
                The maximum angular position correction used when solving constraints.
                This helps to prevent overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxLinearVelocity">
            <summary>
                The maximum linear velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxLinearVelocitySquared">
            <summary>
                The max linear velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxAngularVelocity">
            <summary>
                The maximum angular velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxAngularVelocitySquared">
            <summary>
                The max angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxTranslation">
            <summary>
                The maximum linear velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxTranslationSquared">
            <summary>
                The max translation
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxRotation">
            <summary>
                The maximum angular velocity of a body. This limit is very large and is used
                to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.MaxRotationSquared">
            <summary>
                The max rotation
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.ContactBaumgarte">
            <summary>
                This scale factor controls how fast overlap is resolved. Ideally this would be 1 so
                that overlap is removed in one time step. However using values close to 1 often lead to overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.TimeToSleep">
            <summary>
                The time that a body must be still before it will go to sleep.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.LinearSleepTolerance">
            <summary>
                A body cannot sleep if its linear velocity is above this tolerance.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Settings.AngularSleepTolerance">
            <summary>
                A body cannot sleep if its angular velocity is above this tolerance.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.MixFriction(System.Single,System.Single)">
            <summary>
                Friction mixing law. Feel free to customize this.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Settings.MixRestitution(System.Single,System.Single)">
            <summary>
                Restitution mixing law. Feel free to customize this.
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Bvec2">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec2" /> is a struct represent a glsl bvec2 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Bvec2.#ctor(System.Boolean,System.Boolean)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec2" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec2.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec2.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Bvec3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec3" /> is a struct represent a glsl bvec3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Bvec3.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec3" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec3.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec3.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec3.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Bvec4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec4" /> is a struct represent a glsl bvec4 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Bvec4.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Bvec4" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="w">W coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Bvec4.W">
            <summary>Projective/Homogenous component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.FloatRect">
            <summary>
                IntRect is an utility class for manipulating 2D rectangles
                with float coordinates
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the rectangle from its coordinates
            </summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the rectangle from position and size
            </summary>
            <param name="position">Position of the top-left corner of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Contains(System.Single,System.Single)">
            <summary>
                Check if a point is inside the rectangle's area
            </summary>
            <param name="x">X coordinate of the point to test</param>
            <param name="y">Y coordinate of the point to test</param>
            <returns>True if the point is inside</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Intersects(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Intersects(Alis.Core.Aspect.Math.SFML.FloatRect,Alis.Core.Aspect.Math.SFML.FloatRect@)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <param name="overlap">Rectangle to be filled with overlapping rect</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Equals(System.Object)">
            <summary>
                Compare rectangle and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and rectangle are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.Equals(Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Compare two rectangles and checks if they are equal
            </summary>
            <param name="other">Rectangle to check</param>
            <returns>Rectangles are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.op_Equality(Alis.Core.Aspect.Math.SFML.FloatRect,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Operator == overload ; check rect equality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 == r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.op_Inequality(Alis.Core.Aspect.Math.SFML.FloatRect,Alis.Core.Aspect.Math.SFML.FloatRect)">
            <summary>
                Operator != overload ; check rect inequality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 != r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.FloatRect.op_Explicit(Alis.Core.Aspect.Math.SFML.FloatRect)~Alis.Core.Aspect.Math.SFML.IntRect">
            <summary>
                Explicit casting to another rectangle type
            </summary>
            <param name="r">Rectangle being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Left">
            <summary>Left coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Top">
            <summary>Top coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Width">
            <summary>Width of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.FloatRect.Height">
            <summary>Height of the rectangle</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.IntRect">
            <summary>
                IntRect is an utility class for manipulating 2D rectangles
                with integer coordinates
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Construct the rectangle from its coordinates
            </summary>
            <param name="left">Left coordinate of the rectangle</param>
            <param name="top">Top coordinate of the rectangle</param>
            <param name="width">Width of the rectangle</param>
            <param name="height">Height of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.#ctor(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Construct the rectangle from position and size
            </summary>
            <param name="position">Position of the top-left corner of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Contains(System.Int32,System.Int32)">
            <summary>
                Check if a point is inside the rectangle's area
            </summary>
            <param name="x">X coordinate of the point to test</param>
            <param name="y">Y coordinate of the point to test</param>
            <returns>True if the point is inside</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Intersects(Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Intersects(Alis.Core.Aspect.Math.SFML.IntRect,Alis.Core.Aspect.Math.SFML.IntRect@)">
            <summary>
                Check intersection between two rectangles
            </summary>
            <param name="rect"> Rectangle to test</param>
            <param name="overlap">Rectangle to be filled with overlapping rect</param>
            <returns>True if rectangles overlap</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Equals(System.Object)">
            <summary>
                Compare rectangle and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and rectangle are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.Equals(Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Compare two rectangles and checks if they are equal
            </summary>
            <param name="other">Rectangle to check</param>
            <returns>Rectangles are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.op_Equality(Alis.Core.Aspect.Math.SFML.IntRect,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Operator == overload ; check rect equality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 == r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.op_Inequality(Alis.Core.Aspect.Math.SFML.IntRect,Alis.Core.Aspect.Math.SFML.IntRect)">
            <summary>
                Operator != overload ; check rect inequality
            </summary>
            <param name="r1">First rect</param>
            <param name="r2">Second rect</param>
            <returns>r1 != r2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.IntRect.op_Explicit(Alis.Core.Aspect.Math.SFML.IntRect)~Alis.Core.Aspect.Math.SFML.FloatRect">
            <summary>
                Explicit casting to another rectangle type
            </summary>
            <param name="r">Rectangle being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Left">
            <summary>Left coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Top">
            <summary>Top coordinate of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Width">
            <summary>Width of the rectangle</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.IntRect.Height">
            <summary>Height of the rectangle</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Ivec2">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" /> is a struct represent a glsl ivec2 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec2.op_Implicit(Alis.Core.Aspect.Math.SFML.Vector2I)~Alis.Core.Aspect.Math.SFML.Ivec2">
            <summary>
                Implicit cast from <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2I" /> to <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" />
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec2.#ctor(System.Int32,System.Int32)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec2.#ctor(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec2" /> from a standard SFML <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2I" />
            </summary>
            <param name="vec">A standard SFML 2D integer vector</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec2.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec2.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Ivec3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec3" /> is a struct represent a glsl ivec3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec3" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec3.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec3.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec3.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Ivec4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec4" /> is a struct represent a glsl ivec4 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Ivec4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Ivec4" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="w">W coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Ivec4.W">
            <summary>Projective/Homogenous component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Mat3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Mat3" /> is a struct representing a glsl mat3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Mat3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Mat3" /> from its components
            </summary>
            <remarks>
                Arguments are in row-major order
            </remarks>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Mat3.array">
            <summary>
                The array
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Mat4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Mat4" /> is a struct representing a glsl mat4 value
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.SFML.Mat4.Identity">
            <summary>
                Provides easy-access to an identity matrix
            </summary>
            <remarks>
                Keep in mind that a Mat4 cannot be modified after construction
            </remarks>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Mat4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Mat4" /> from its components
            </summary>
            <remarks>
                Arguments are in row-major order
            </remarks>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Mat4.array">
            <summary>
                The array
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vec2">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" /> is a struct represent a glsl vec2 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec2.op_Implicit(Alis.Core.Aspect.Math.SFML.Vector2F)~Alis.Core.Aspect.Math.SFML.Vec2">
            <summary>
                Implicit cast from <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2F" /> to <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" />
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec2.#ctor(System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec2.#ctor(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec2" /> from a standard SFML <see cref="T:Alis.Core.Aspect.Math.SFML.Vector2F" />
            </summary>
            <param name="vec">A standard SFML 2D vector</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec2.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec2.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vec3">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" /> is a struct represent a glsl vec3 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec3.op_Implicit(Alis.Core.Aspect.Math.SFML.Vector3F)~Alis.Core.Aspect.Math.SFML.Vec3">
            <summary>
                Implicit cast from <see cref="T:Alis.Core.Aspect.Math.SFML.Vector3F" /> to <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" />
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec3.#ctor(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec3" /> from a standard SFML <see cref="T:Alis.Core.Aspect.Math.SFML.Vector3F" />
            </summary>
            <param name="vec">A standard SFML 3D vector</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec3.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec3.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec3.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vec4">
            <summary>
                <see cref="T:Alis.Core.Aspect.Math.SFML.Vec4" /> is a struct represent a glsl vec4 value
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vec4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Construct the <see cref="T:Alis.Core.Aspect.Math.SFML.Vec4" /> from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="w">W coordinate</param>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.X">
            <summary>Horizontal component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.Y">
            <summary>Vertical component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.Z">
            <summary>Depth component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vec4.W">
            <summary>Projective/Homogenous component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector2F">
            <summary>
                Vector2f is an utility class for manipulating 2 dimensional
                vectors with float components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.#ctor(System.Single,System.Single)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_UnaryNegation(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Addition(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector2F,System.Single)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Multiply(System.Single,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Division(Alis.Core.Aspect.Math.SFML.Vector2F,System.Single)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Equality(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector2F,Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.Equals(Alis.Core.Aspect.Math.SFML.Vector2F)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2F)~Alis.Core.Aspect.Math.SFML.Vector2I">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2F.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2F)~Alis.Core.Aspect.Math.SFML.Vector2U">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2F.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2F.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector2I">
            <summary>
                Vector2i is an utility class for manipulating 2 dimensional
                vectors with integer components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.#ctor(System.Int32,System.Int32)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_UnaryNegation(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Addition(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector2I,System.Int32)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Multiply(System.Int32,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Division(Alis.Core.Aspect.Math.SFML.Vector2I,System.Int32)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Equality(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector2I,Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.Equals(Alis.Core.Aspect.Math.SFML.Vector2I)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2I)~Alis.Core.Aspect.Math.SFML.Vector2F">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2I.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2I)~Alis.Core.Aspect.Math.SFML.Vector2U">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2I.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2I.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector2U">
            <summary>
                Vector2u is an utility class for manipulating 2 dimensional
                vectors with unsigned integer components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.#ctor(System.UInt32,System.UInt32)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Addition(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector2U,System.UInt32)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Multiply(System.UInt32,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Division(Alis.Core.Aspect.Math.SFML.Vector2U,System.UInt32)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Equality(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector2U,Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.Equals(Alis.Core.Aspect.Math.SFML.Vector2U)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2U)~Alis.Core.Aspect.Math.SFML.Vector2I">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector2U.op_Explicit(Alis.Core.Aspect.Math.SFML.Vector2U)~Alis.Core.Aspect.Math.SFML.Vector2F">
            <summary>
                Explicit casting to another vector type
            </summary>
            <param name="v">Vector being casted</param>
            <returns>Casting result</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2U.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector2U.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.SFML.Vector3F">
            <summary>
                Vector3f is an utility class for manipulating 3 dimensional
                vectors with float components
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Construct the vector from its coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_UnaryNegation(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator - overload ; returns the opposite of a vector
            </summary>
            <param name="v">Vector to negate</param>
            <returns>-v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Subtraction(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator - overload ; subtracts two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Addition(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator + overload ; add two vectors
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Multiply(Alis.Core.Aspect.Math.SFML.Vector3F,System.Single)">
            <summary>
                Operator * overload ; multiply a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v * x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Multiply(System.Single,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator * overload ; multiply a scalar value by a vector
            </summary>
            <param name="x">Scalar value</param>
            <param name="v">Vector</param>
            <returns>x * v</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Division(Alis.Core.Aspect.Math.SFML.Vector3F,System.Single)">
            <summary>
                Operator / overload ; divide a vector by a scalar value
            </summary>
            <param name="v">Vector</param>
            <param name="x">Scalar value</param>
            <returns>v / x</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Equality(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator == overload ; check vector equality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 == v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.op_Inequality(Alis.Core.Aspect.Math.SFML.Vector3F,Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Operator != overload ; check vector inequality
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>v1 != v2</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.ToString">
            <summary>
                Provide a string describing the object
            </summary>
            <returns>String description of the object</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.Equals(System.Object)">
            <summary>
                Compare vector and object and checks if they are equal
            </summary>
            <param name="obj">Object to check</param>
            <returns>Object and vector are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.Equals(Alis.Core.Aspect.Math.SFML.Vector3F)">
            <summary>
                Compare two vectors and checks if they are equal
            </summary>
            <param name="other">Vector to check</param>
            <returns>Vectors are equal</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.SFML.Vector3F.GetHashCode">
            <summary>
                Provide a integer describing the object
            </summary>
            <returns>Integer description of the object</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector3F.X">
            <summary>X (horizontal) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector3F.Y">
            <summary>Y (vertical) component of the vector</summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.SFML.Vector3F.Z">
            <summary>Z (depth) component of the vector</summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Sweep">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.LocalCenter">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.C0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.C">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.A0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.A">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Sweep.T0">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Sweep.GetTransform(Alis.Core.Aspect.Math.XForm@,System.Single)">
            <summary>
                Get the interpolated transform at a specific time.
            </summary>
            <param name="xf">The xf.</param>
            <param name="alpha">Alpha is a factor in [0,1], where 0 indicates t0.</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Sweep.Advance(System.Single)">
            <summary>
                Advance the sweep forward, yielding a new initial state.
            </summary>
            <param name="t">The new initial time.</param>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Vector2">
            <summary>
                A 2D column vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Equals(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="other">The other</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Equals(System.Object)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="obj">The obj</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.GetHashCode">
            <summary>
                Gets the hash code
            </summary>
            <returns>The int</returns>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector2.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector2.Y">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Vector2.Item(System.Int32)">
            <summary>
                The assert
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.#ctor(System.Single)">
            <summary>
                Construct using coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
                Construct using coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.SetZero">
            <summary>
                Set this vector to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Set(System.Single,System.Single)">
            <summary>
                Set this vector to some specified coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Set(System.Single)">
            <summary>
                Sets the xy
            </summary>
            <param name="xy">The xy</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Length">
            <summary>
                Get the length of this vector (the norm).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.LengthSquared">
            <summary>
                Get the length squared. For performance, use this instead of
                Length (if possible).
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Normalize">
            <summary>
                Convert this vector into a unit vector. Returns the length.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Vector2.IsValid">
            <summary>
                Does this vector contain finite coordinates?
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_UnaryNegation(Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Negate this vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Addition(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Hello
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Subtraction(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Hello
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Multiply(Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                operator
            </summary>
            <param name="v1"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Multiply(System.Single,Alis.Core.Aspect.Math.Vector2)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Equality(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.op_Inequality(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Alis.Core.Aspect.Math.Vector2.Zero">
            <summary>
                Gets the value of the zero
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Dot(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Peform the dot product on two vectors.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Cross(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Perform the cross product on two vectors. In 2D this produces a scalar.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Cross(Alis.Core.Aspect.Math.Vector2,System.Single)">
            <summary>
                Perform the cross product on a vector and a scalar.
                In 2D this produces a vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Cross(System.Single,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Perform the cross product on a scalar and a vector.
                In 2D this produces a vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.Distance(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Distances the a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector2.DistanceSquared(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Vector2)">
            <summary>
                Distances the squared using the specified a
            </summary>
            <param name="a">The </param>
            <param name="b">The </param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Vector3">
            <summary>
                A 2D column vector with 3 elements.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Construct using coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.SetZero">
            <summary>
                Set this vector to all zeros.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.Set(System.Single,System.Single,System.Single)">
            <summary>
                Set this vector to some specified coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.Dot(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Perform the dot product on two vectors.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.Cross(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Perform the cross product on two vectors.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_UnaryNegation(Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Negate this vector.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Addition(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Add two vectors component-wise.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Subtraction(Alis.Core.Aspect.Math.Vector3,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Subtract two vectors component-wise.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Multiply(Alis.Core.Aspect.Math.Vector3,System.Single)">
            <summary>
                Multiply this vector by a scalar.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.Vector3.op_Multiply(System.Single,Alis.Core.Aspect.Math.Vector3)">
            <summary>
                Multiply this vector by a scalar.
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector3.X">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector3.Y">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Vector3.Z">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.Velocity">
            <summary>
                The velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Velocity.V">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Math.Velocity.W">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Math.XForm">
            <summary>
                A transform contains translation and rotation.
                It is used to represent the position and orientation of rigid frames.
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.XForm.Position">
            <summary>
                The position
            </summary>
        </member>
        <member name="P:Alis.Core.Aspect.Math.XForm.R">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.#ctor(Alis.Core.Aspect.Math.Vector2,Alis.Core.Aspect.Math.Matrix22)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Aspect.Math.XForm" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.SetIdentity">
            <summary>
                Set this to the identity transform.
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.Set(Alis.Core.Aspect.Math.Vector2,System.Single)">
            Set this based on the position and angle.
        </member>
        <member name="M:Alis.Core.Aspect.Math.XForm.GetAngle">
            Calculate the angle that the rotation matrix represents.
        </member>
        <member name="P:Alis.Core.Aspect.Math.XForm.Identity">
            <summary>
                Gets the value of the identity
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream">
            <summary>
                Structure that contains InputStream callbacks
                (directly maps to a CSFML sfInputStream)
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.ReadCallbackType">
            <summary>
                Type of callback to read data from the current stream
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.SeekCallbackType">
            <summary>
                Type of callback to seek the current stream's position
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.TellCallbackType">
            <summary>
                Type of callback to return the current stream's position
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.GetSizeCallbackType">
            <summary>
                Type of callback to return the current stream's size
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.Read">
            <summary>
                Function that is called to read data from the stream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.Seek">
            <summary>
                Function that is called to seek the stream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.Tell">
            <summary>
                Function that is called to return the positon
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.InputStream.GetSize">
            <summary>
                Function that is called to return the size
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor">
            <summary>
                Adapts a System.IO.Stream to be usable as a SFML InputStream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.myInputStream">
            <summary>
                The my input stream
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.myInputStreamPtr">
            <summary>
                The my input stream ptr
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.myStream">
            <summary>
                The my stream
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.#ctor(System.IO.Stream)">
            <summary>
                Construct from a System.IO.Stream
            </summary>
            <param name="stream">Stream to adapt</param>
        </member>
        <member name="P:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.InputStreamPtr">
            <summary>
                The pointer to the CSFML InputStream structure
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Dispose">
            <summary>
                Explicitly dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Finalize">
            <summary>
                Dispose the object
            </summary>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Dispose(System.Boolean)">
            <summary>
                Destroy the object
            </summary>
            <param name="disposing">Is the GC disposing the object, or is it an explicit call ?</param>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Read(System.IntPtr,System.Int64,System.IntPtr)">
            <summary>
                Called to read from the stream
            </summary>
            <param name="data">Where to copy the read bytes</param>
            <param name="size">Size to read, in bytes</param>
            <param name="userData">User data -- unused</param>
            <returns>Number of bytes read</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Seek(System.Int64,System.IntPtr)">
            <summary>
                Called to set the read position in the stream
            </summary>
            <param name="position">New read position</param>
            <param name="userData">User data -- unused</param>
            <returns>Actual position</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.Tell(System.IntPtr)">
            <summary>
                Get the current read position in the stream
            </summary>
            <param name="userData">User data -- unused</param>
            <returns>Current position in the stream</returns>
        </member>
        <member name="M:Alis.Core.Aspect.Memory.Streams.SFML.StreamAdaptor.GetSize(System.IntPtr)">
            <summary>
                Called to get the total size of the stream
            </summary>
            <param name="userData">User data -- unused</param>
            <returns>Number of bytes in the stream</returns>
        </member>
        <member name="T:Alis.Core.Aspect.Security.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Thread.ExampleClass">
            <summary>
                The example class
            </summary>
        </member>
        <member name="T:Alis.Core.Aspect.Time.TimeStep">
            <summary>
                The time step
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.Dt">
            <summary>
                The dt
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.InvDt">
            <summary>
                The inv dt
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.DtRatio">
            <summary>
                The dt ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.VelocityIterations">
            <summary>
                The velocity iterations
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.PositionIterations">
            <summary>
                The position iterations
            </summary>
        </member>
        <member name="F:Alis.Core.Aspect.Time.TimeStep.WarmStarting">
            <summary>
                The warm starting
            </summary>
        </member>
        <member name="T:Alis.SoundGame">
            <summary>
                The sound game class
            </summary>
            <seealso cref="T:Alis.Core.GameBase" />
        </member>
        <member name="M:Alis.SoundGame.Run">
            <summary>
                Runs this instance
            </summary>
        </member>
        <member name="M:Alis.SoundGame.Builder">
            <summary>
                Builders
            </summary>
            <returns>The sound game builder</returns>
        </member>
        <member name="T:Alis.VideoGame">
            <summary>
                The video game class
            </summary>
            <seealso cref="T:Alis.Core.GameBase" />
        </member>
        <member name="M:Alis.VideoGame.#ctor">
            <summary>
                Video game
            </summary>
        </member>
        <member name="P:Alis.VideoGame.InputManager">
            <summary>
                Gets or sets the value of the input manager
            </summary>
        </member>
        <member name="P:Alis.VideoGame.GraphicManager">
            <summary>
                Gets or sets the value of the graphic manager
            </summary>
        </member>
        <member name="P:Alis.VideoGame.SceneManager">
            <summary>
                Gets or sets the value of the scene manager
            </summary>
        </member>
        <member name="P:Alis.VideoGame.AudioManager">
            <summary>
                Gets the value of the audio manager
            </summary>
        </member>
        <member name="P:Alis.VideoGame.PhysicManager">
            <summary>
            Gets or sets the value of the physic manager
            </summary>
        </member>
        <member name="P:Alis.VideoGame.Setting">
            <summary>
                Gets or sets the value of the setting manager
            </summary>
        </member>
        <member name="M:Alis.VideoGame.Builder">
            <summary>
                Builders
            </summary>
            <returns>The video game builder</returns>
        </member>
    </members>
</doc>
