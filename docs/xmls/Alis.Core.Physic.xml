<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alis.Core.Physic</name>
    </assembly>
    <members>
        <member name="T:Alis.Core.Physic.Collision.AabbHelper">
            <summary>
                The aabb helper class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.AabbHelper.ComputeEdgeAabb(Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the edge aabb using the specified start
            </summary>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <param name="transform">The transform</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.AabbHelper.ComputeCircleAabb(Alis.Core.Aspect.Math.Vector.Vector2@,System.Single,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the circle aabb using the specified pos
            </summary>
            <param name="pos">The pos</param>
            <param name="radius">The radius</param>
            <param name="transform">The transform</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.AabbHelper.ComputePolygonAabb(Alis.Core.Physic.Shared.Vertices,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the polygon aabb using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="transform">The transform</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1">
            <summary>
                A dynamic tree arranges data in a binary tree to accelerate queries such as volume queries and ray casts.
                Leafs are proxies with an AABB. In the tree we expand the proxy AABB by Settings.b2_fatAABBFactor so that the proxy
                AABB is bigger than the client object. This allows the client object to move by small amounts without triggering a
                tree
                update. Nodes are pooled and relocatable, so we use node indices rather than pointers.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.NullNode">
            <summary>
                The null node
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.queryStack">
            <summary>
                The stack
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.rayCastStack">
            <summary>
                The stack
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.freeList">
            <summary>
                The free list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.nodeCapacity">
            <summary>
                The node capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.nodeCount">
            <summary>
                The node count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.nodes">
            <summary>
                The nodes
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.root">
            <summary>
                The root
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.#ctor">
            <summary>Constructing the tree initializes the node pool.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.Height">
            <summary>Compute the height of the binary tree in O(N) time. Should not be called often.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.AreaRatio">
            <summary>Get the ratio of the sum of the node areas to the root area.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.Balance">
            <summary>
                Get the maximum balance of a node in the tree. The balance is the difference in height of the two children of
                a node.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.CreateProxy(Alis.Core.Physic.Shared.Aabb@,`0)">
            <summary>
                Create a proxy in the tree as a leaf node. We return the index of the node instead of a pointer so that we can
                grow the node pool.
            </summary>
            <param name="aabb">The AABB.</param>
            <param name="userData">The user data.</param>
            <returns>Index of the created proxy</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.DestroyProxy(System.Int32)">
            <summary>Destroy a proxy. This asserts if the id is invalid.</summary>
            <param name="proxyId">The proxy id.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.MoveProxy(System.Int32,Alis.Core.Physic.Shared.Aabb@,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Move a proxy with a AABB. If the proxy has moved outside of its fattened AABB, then the proxy is
                removed from the tree and re-inserted. Otherwise the function returns immediately.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="aabb">The AABB.</param>
            <param name="displacement">The displacement.</param>
            <returns>true if the proxy was re-inserted.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.WasMoved(System.Int32)">
            <summary>
                Describes whether this instance was moved
            </summary>
            <param name="proxyId">The proxy id</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.ClearMoved(System.Int32)">
            <summary>
                Clears the moved using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.GetUserData(System.Int32)">
            <summary>
                Gets the user data using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <returns>The</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.GetFatAabb(System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Get the fat AABB for a proxy.</summary>
            <param name="proxyId">The proxy id.</param>
            <param name="fatAabb">The fat AABB.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.Query(System.Func{System.Int32,System.Boolean},Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Query an AABB for overlapping proxies. The callback class is called for each proxy that overlaps the supplied
                AABB.
            </summary>
            <param name="callback">The callback.</param>
            <param name="aabb">The AABB.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.RayCast(System.Func{Alis.Core.Physic.Collision.RayCast.RayCastInput,System.Int32,System.Single},Alis.Core.Physic.Collision.RayCast.RayCastInput@)">
            <summary>
                Ray-cast against the proxies in the tree. This relies on the callback to perform an exact ray-cast in the case
                where the proxy contains a Shape. The callback also performs any collision filtering. This has performance
                roughly equal to k * log(n), where k is the number of collisions and n is the number of proxies in the tree.
            </summary>
            <param name="callback">A callback class that is called for each proxy that is hit by the ray.</param>
            <param name="input">The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.CalculateNormalizedRayDirection(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Calculates the normalized ray direction using the specified p 1
            </summary>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.CalculateAbsVector(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Calculates the abs vector using the specified vector
            </summary>
            <param name="vector">The vector</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.CalculateSegmentAabb(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Calculates the segment aabb using the specified p 1
            </summary>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <param name="maxFraction">The max fraction</param>
            <returns>The aabb</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.IsAabbOverlap(Alis.Core.Physic.Shared.Aabb,Alis.Core.Physic.Shared.Aabb)">
            <summary>
                Describes whether this instance is aabb overlap
            </summary>
            <param name="aabb1">The aabb</param>
            <param name="aabb2">The aabb</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.IsSeparationValid(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Shared.Aabb)">
            <summary>
                Describes whether this instance is separation valid
            </summary>
            <param name="r">The </param>
            <param name="p1">The </param>
            <param name="aabb">The aabb</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.HandleLeafNode(System.Func{Alis.Core.Physic.Collision.RayCast.RayCastInput,System.Int32,System.Single},Alis.Core.Physic.Collision.RayCast.RayCastInput,System.Single,System.Int32)">
            <summary>
                Handles the leaf node using the specified callback
            </summary>
            <param name="callback">The callback</param>
            <param name="input">The input</param>
            <param name="maxFraction">The max fraction</param>
            <param name="nodeId">The node id</param>
            <returns>The max fraction</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.AllocateNode">
            <summary>
                Allocates the node
            </summary>
            <returns>The node id</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.FreeNode(System.Int32)">
            <summary>
                Frees the node using the specified node id
            </summary>
            <param name="nodeId">The node id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.InsertLeaf(System.Int32)">
            <summary>
                Inserts the leaf using the specified leaf
            </summary>
            <param name="leaf">The leaf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.SetRootLeaf(System.Int32)">
            <summary>
                Sets the root leaf using the specified leaf
            </summary>
            <param name="leaf">The leaf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.FindInsertionIndex(Alis.Core.Physic.Shared.Aabb)">
            <summary>
                Finds the insertion index using the specified leaf aabb
            </summary>
            <param name="leafAabb">The leaf aabb</param>
            <returns>The index</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.FindBestFitChild(System.Int32,Alis.Core.Physic.Shared.Aabb)">
            <summary>
                Finds the best fit child using the specified index
            </summary>
            <param name="index">The index</param>
            <param name="leafAabb">The leaf aabb</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.CalculateCost(Alis.Core.Physic.Shared.Aabb,System.Int32)">
            <summary>
                Calculates the cost using the specified leaf aabb
            </summary>
            <param name="leafAabb">The leaf aabb</param>
            <param name="childIndex">The child index</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.CreateNewParentForLeaf(System.Int32,System.Int32,Alis.Core.Physic.Shared.Aabb)">
            <summary>
                Creates the new parent for leaf using the specified leaf
            </summary>
            <param name="leaf">The leaf</param>
            <param name="index">The index</param>
            <param name="leafAabb">The leaf aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.ReplaceChild(System.Int32,System.Int32,System.Int32)">
            <summary>
                Replaces the child using the specified parent index
            </summary>
            <param name="parentIndex">The parent index</param>
            <param name="oldChild">The old child</param>
            <param name="newChild">The new child</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.BalanceTreeFromLeafToRoot(System.Int32)">
            <summary>
                Balances the tree from leaf to root using the specified leaf
            </summary>
            <param name="leaf">The leaf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.RemoveLeaf(System.Int32)">
            <summary>
                Removes the leaf using the specified leaf
            </summary>
            <param name="leaf">The leaf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.BalanceTo(System.Int32)">
            <summary>
                Balances the to using the specified i a
            </summary>
            <param name="iA">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.BalanceRight(System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0})">
            <summary>
                Balances the right using the specified i a
            </summary>
            <param name="iA">The </param>
            <param name="a">The </param>
            <param name="iC">The </param>
            <param name="c">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.BalanceLeft(System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0})">
            <summary>
                Balances the left using the specified i a
            </summary>
            <param name="iA">The </param>
            <param name="a">The </param>
            <param name="iB">The </param>
            <param name="b">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.UpdateParent(System.Int32,System.Int32,System.Int32)">
            <summary>
                Updates the parent using the specified old child
            </summary>
            <param name="oldChild">The old child</param>
            <param name="newChild">The new child</param>
            <param name="parent">The parent</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.BalanceRightCase1(System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0})">
            <summary>
                Balances the right case 1 using the specified i a
            </summary>
            <param name="iA">The </param>
            <param name="a">The </param>
            <param name="iC">The </param>
            <param name="c">The </param>
            <param name="iF">The </param>
            <param name="f">The </param>
            <param name="iG">The </param>
            <param name="g">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.BalanceRightCase2(System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0})">
            <summary>
                Balances the right case 2 using the specified i a
            </summary>
            <param name="iA">The </param>
            <param name="a">The </param>
            <param name="iC">The </param>
            <param name="c">The </param>
            <param name="iF">The </param>
            <param name="f">The </param>
            <param name="iG">The </param>
            <param name="g">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.BalanceLeftCase1(System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0})">
            <summary>
                Balances the left case 1 using the specified i a
            </summary>
            <param name="iA">The </param>
            <param name="a">The </param>
            <param name="iB">The </param>
            <param name="b">The </param>
            <param name="iD">The </param>
            <param name="d">The </param>
            <param name="iE">The </param>
            <param name="e">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.BalanceLeftCase2(System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0},System.Int32,Alis.Core.Physic.Collision.BroadPhase.TreeNode{`0})">
            <summary>
                Balances the left case 2 using the specified i a
            </summary>
            <param name="iA">The </param>
            <param name="a">The </param>
            <param name="iB">The </param>
            <param name="b">The </param>
            <param name="iD">The </param>
            <param name="d">The </param>
            <param name="iE">The </param>
            <param name="e">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.ComputeHeight(System.Int32)">
            <summary>Compute the height of a sub-tree.</summary>
            <param name="nodeId">The node id to use as parent.</param>
            <returns>The height of the tree.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.ComputeHeight">
            <summary>Compute the height of the entire tree.</summary>
            <returns>The height of the tree.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTree`1.ShiftOrigin(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Shift the origin of the nodes</summary>
            <param name="newOrigin">The displacement to use.</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase">
            <summary>
                The broad-phase is used for computing pairs and performing volume queries and ray casts. This broad-phase does
                not persist pairs. Instead, this reports potentially new pairs. It is up to the client to consume the new pairs and
                to
                track subsequent overlap.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.NullProxy">
            <summary>
                The null proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.queryCallback">
            <summary>
                The query callback
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.tree">
            <summary>
                The fixture proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.moveBuffer">
            <summary>
                The move buffer
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.moveCapacity">
            <summary>
                The move capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.moveCount">
            <summary>
                The move count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.pairBuffer">
            <summary>
                The pair buffer
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.pairCapacity">
            <summary>
                The pair capacity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.pairCount">
            <summary>
                The pair count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.proxyCount">
            <summary>
                The proxy count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.queryProxyId">
            <summary>
                The query proxy id
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.#ctor">
            <summary>Constructs a new broad phase based on the dynamic tree implementation</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.TreeQuality">
            <summary>Get the tree quality based on the area of the tree.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.TreeHeight">
            <summary>Gets the height of the tree.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.ProxyCount">
            <summary>Get the number of proxies.</summary>
            <value>The proxy count.</value>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.AddProxy(Alis.Core.Physic.Dynamics.FixtureProxy@)">
            <summary>Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs is called.</summary>
            <param name="proxy">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.RemoveProxy(System.Int32)">
            <summary>Destroy a proxy. It is up to the client to remove any pairs.</summary>
            <param name="proxyId">The proxy id.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.MoveProxy(System.Int32,Alis.Core.Physic.Shared.Aabb@,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Call MoveProxy as many times as you like, then when you are done call UpdatePairs to finalized the proxy pairs
                (for your time step).
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.TouchProxy(System.Int32)">
            <summary>Call to trigger a re-processing of it's pairs on the next call to UpdatePairs.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.GetFatAabb(System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Get the AABB for a proxy.</summary>
            <param name="proxyId">The proxy id.</param>
            <param name="aabb">The AABB.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.GetProxy(System.Int32)">
            <summary>Get user data from a proxy. Returns null if the id is invalid.</summary>
            <param name="proxyId">The proxy id.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.TestOverlap(System.Int32,System.Int32)">
            <summary>Test overlap of fat AABBs.</summary>
            <param name="proxyIdA">The proxy id A.</param>
            <param name="proxyIdB">The proxy id B.</param>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.UpdatePairs(Alis.Core.Physic.Collision.Handlers.BroadPhaseHandler)">
            <summary>Update the pairs. This results in pair callbacks. This can only add pairs.</summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.Query(System.Func{System.Int32,System.Boolean},Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Query an AABB for overlapping proxies. The callback class is called for each proxy that overlaps the supplied
                AABB.
            </summary>
            <param name="callback">The callback.</param>
            <param name="aabb">The AABB.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.RayCast(System.Func{Alis.Core.Physic.Collision.RayCast.RayCastInput,System.Int32,System.Single},Alis.Core.Physic.Collision.RayCast.RayCastInput@)">
            <summary>
                Ray-cast against the proxies in the tree. This relies on the callback to perform a exact ray-cast in the case
                were the proxy contains a shape. The callback also performs the any collision filtering. This has performance
                roughly
                equal to k * log(n), where k is the number of collisions and n is the number of proxies in the tree.
            </summary>
            <param name="callback">A callback class that is called for each proxy that is hit by the ray.</param>
            <param name="input">The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.ShiftOrigin(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Shift the world origin. Useful for large worlds.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.BufferMove(System.Int32)">
            <summary>
                Buffers the move using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.UnBufferMove(System.Int32)">
            <summary>
                Uns the buffer move using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.DynamicTreeBroadPhase.QueryCallback(System.Int32)">
            <summary>This is called from DynamicTree.Query when we are gathering pairs.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase">
            <summary>
                The broad phase interface
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.ProxyCount">
            <summary>
                Gets the value of the proxy count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.UpdatePairs(Alis.Core.Physic.Collision.Handlers.BroadPhaseHandler)">
            <summary>
                Updates the pairs using the specified callback
            </summary>
            <param name="callback">The callback</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.TestOverlap(System.Int32,System.Int32)">
            <summary>
                Describes whether this instance test overlap
            </summary>
            <param name="proxyIdA">The proxy id</param>
            <param name="proxyIdB">The proxy id</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.AddProxy(Alis.Core.Physic.Dynamics.FixtureProxy@)">
            <summary>
                Adds the proxy using the specified proxy
            </summary>
            <param name="proxy">The proxy</param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.RemoveProxy(System.Int32)">
            <summary>
                Removes the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.MoveProxy(System.Int32,Alis.Core.Physic.Shared.Aabb@,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Moves the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <param name="aabb">The aabb</param>
            <param name="displacement">The displacement</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.GetProxy(System.Int32)">
            <summary>
                Gets the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <returns>The fixture proxy</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.TouchProxy(System.Int32)">
            <summary>
                Touches the proxy using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.GetFatAabb(System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Gets the fat aabb using the specified proxy id
            </summary>
            <param name="proxyId">The proxy id</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.Query(System.Func{System.Int32,System.Boolean},Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Queries the callback
            </summary>
            <param name="callback">The callback</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.RayCast(System.Func{Alis.Core.Physic.Collision.RayCast.RayCastInput,System.Int32,System.Single},Alis.Core.Physic.Collision.RayCast.RayCastInput@)">
            <summary>
                Rays the cast using the specified callback
            </summary>
            <param name="callback">The callback</param>
            <param name="input">The input</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.IBroadPhase.ShiftOrigin(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Shifts the origin using the specified new origin
            </summary>
            <param name="newOrigin">The new origin</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.BroadPhase.Pair">
            <summary>
                The pair
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.Pair.ProxyIdA">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.Pair.ProxyIdB">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.BroadPhase.TreeNode`1">
            <summary>A node in the dynamic tree. The client does not interact with this directly.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.BroadPhase.TreeNode`1.Aabb">
            <summary>Enlarged AABB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.TreeNode`1.Child1">
            <summary>
                The child
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.TreeNode`1.Child2">
            <summary>
                The child
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.TreeNode`1.Height">
            <summary>
                The height
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.TreeNode`1.Moved">
            <summary>
                The moved
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.TreeNode`1.ParentOrNext">
            <summary>
                The parent or next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.BroadPhase.TreeNode`1.UserData">
            <summary>
                The user data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.BroadPhase.TreeNode`1.IsLeaf">
            <summary>
                Describes whether this instance is leaf
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.Contact">
            <summary>
                The class manages contact between two shapes. A contact exists for each overlapping AABB in the broad-phase
                (except if filtered). Therefore a contact object may exist that has no contact points.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.Edge">
            <summary>
                The edge shape
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.Registers">
            <summary>
                The not supported
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.manifold">
            <summary>
                The manifold
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.Contact.type">
            <summary>
                The type
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.#ctor(Alis.Core.Physic.Dynamics.Fixture,System.Int32,Alis.Core.Physic.Dynamics.Fixture,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.ContactSystem.Contact" /> class
            </summary>
            <param name="fA">The </param>
            <param name="indexA">The index</param>
            <param name="fB">The </param>
            <param name="indexB">The index</param>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Flags">
            <summary>
                The flags
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.NodeA">
            <summary>
                The contact edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.NodeB">
            <summary>
                The contact edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Toi">
            <summary>
                The toi
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.ToiCount">
            <summary>
                The toi count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Manifold">
            <summary>Get the contact manifold. Do not modify the manifold unless you understand the internals of Box2D.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Friction">
            <summary>
                Gets or sets the value of the friction
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Restitution">
            <summary>
                Gets or sets the value of the restitution
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.RestitutionThreshold">
            <summary>
                Gets or sets the value of the restitution threshold
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.TangentSpeed">
            <summary>Get or set the desired tangent speed for a conveyor belt behavior. In meters per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.FixtureA">
            <summary>
                Gets the value of the fixture a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.FixtureB">
            <summary>
                Gets the value of the fixture b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.ChildIndexA">
            <summary>Get the child primitive index for fixture A.</summary>
            <value>The child index A.</value>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.ChildIndexB">
            <summary>Get the child primitive index for fixture B.</summary>
            <value>The child index B.</value>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Enabled">
            <summary>
                Enable/disable this contact.The contact is only disabled for the current time step (or sub-step in continuous
                collisions).
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Next">
            <summary>
                Gets the value of the next
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.Previous">
            <summary>
                Gets the value of the previous
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.IsTouching">
            <summary>
                Gets the value of the is touching
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.IslandFlag">
            <summary>
                Gets the value of the island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.ToiFlag">
            <summary>
                Gets the value of the toi flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.Contact.FilterFlag">
            <summary>
                Gets the value of the filter flag
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.ResetRestitution">
            <summary>
                Resets the restitution
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.ResetRestitutionThreshold">
            <summary>
                Resets the restitution threshold
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.ResetFriction">
            <summary>
                Resets the friction
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.GetWorldManifold(Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2[]@)">
            <summary>Gets the world manifold.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.Reset(Alis.Core.Physic.Dynamics.Fixture,System.Int32,Alis.Core.Physic.Dynamics.Fixture,System.Int32)">
            <summary>
                Resets the f a
            </summary>
            <param name="fA">The </param>
            <param name="indexA">The index</param>
            <param name="fB">The </param>
            <param name="indexB">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.Update(Alis.Core.Physic.Collision.ContactSystem.ContactManager)">
            <summary>
                Updates the contact manager
            </summary>
            <param name="contactManager">The contact manager</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.IsSensorContact">
            <summary>
                Describes whether this instance is sensor contact
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.CheckSensorOverlap(Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Describes whether this instance check sensor overlap
            </summary>
            <param name="xfA">The xf</param>
            <param name="xfB">The xf</param>
            <returns>The touching</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.EvaluateAndCheckManifold(Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.NarrowPhase.Manifold)">
            <summary>
                Describes whether this instance evaluate and check manifold
            </summary>
            <param name="xfA">The xf</param>
            <param name="xfB">The xf</param>
            <param name="oldManifold">The old manifold</param>
            <returns>The touching</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.UpdateTouchingFlag(System.Boolean)">
            <summary>
                Updates the touching flag using the specified touching
            </summary>
            <param name="touching">The touching</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.InvokeCollisionEvents(Alis.Core.Physic.Collision.ContactSystem.ContactManager,System.Boolean)">
            <summary>
                Invokes the collision events using the specified contact manager
            </summary>
            <param name="contactManager">The contact manager</param>
            <param name="wasTouching">The was touching</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.InvokeSeparationEvents(Alis.Core.Physic.Collision.ContactSystem.ContactManager)">
            <summary>
                Invokes the separation events using the specified contact manager
            </summary>
            <param name="contactManager">The contact manager</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.Evaluate(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@)">
            <summary>Evaluate this contact with your own manifold and transforms.</summary>
            <param name="maniFold">The manifold.</param>
            <param name="transformA">The first transform.</param>
            <param name="transformB">The second transform.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.Create(Alis.Core.Physic.Dynamics.Fixture,System.Int32,Alis.Core.Physic.Dynamics.Fixture,System.Int32)">
            <summary>
                Creates the fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="indexA">The index</param>
            <param name="fixtureB">The fixture</param>
            <param name="indexB">The index</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.GetContactFromPoolOrNew(Alis.Core.Physic.Collision.Shapes.ShapeType,Alis.Core.Physic.Collision.Shapes.ShapeType,Alis.Core.Physic.Dynamics.Fixture,System.Int32,Alis.Core.Physic.Dynamics.Fixture,System.Int32)">
            <summary>
                Gets the contact from pool or new using the specified type 1
            </summary>
            <param name="type1">The type</param>
            <param name="type2">The type</param>
            <param name="fixtureA">The fixture</param>
            <param name="indexA">The index</param>
            <param name="fixtureB">The fixture</param>
            <param name="indexB">The index</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.GetContactFromPool(Alis.Core.Physic.Collision.Shapes.ShapeType,Alis.Core.Physic.Collision.Shapes.ShapeType,Alis.Core.Physic.Dynamics.Fixture,System.Int32,Alis.Core.Physic.Dynamics.Fixture,System.Int32,System.Collections.Generic.Queue{Alis.Core.Physic.Collision.ContactSystem.Contact})">
            <summary>
                Gets the contact from pool using the specified type 1
            </summary>
            <param name="type1">The type</param>
            <param name="type2">The type</param>
            <param name="fixtureA">The fixture</param>
            <param name="indexA">The index</param>
            <param name="fixtureB">The fixture</param>
            <param name="indexB">The index</param>
            <param name="pool">The pool</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.GetNewContact(Alis.Core.Physic.Collision.Shapes.ShapeType,Alis.Core.Physic.Collision.Shapes.ShapeType,Alis.Core.Physic.Dynamics.Fixture,System.Int32,Alis.Core.Physic.Dynamics.Fixture,System.Int32)">
            <summary>
                Gets the new contact using the specified type 1
            </summary>
            <param name="type1">The type</param>
            <param name="type2">The type</param>
            <param name="fixtureA">The fixture</param>
            <param name="indexA">The index</param>
            <param name="fixtureB">The fixture</param>
            <param name="indexB">The index</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.ShouldResetWithOriginalOrder(Alis.Core.Physic.Collision.Shapes.ShapeType,Alis.Core.Physic.Collision.Shapes.ShapeType)">
            <summary>
                Describes whether should reset with original order
            </summary>
            <param name="type1">The type</param>
            <param name="type2">The type</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.Destroy">
            <summary>
                Destroys this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.ClearFlags">
            <summary>
                Clears the flags
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.Contact.InvalidateToi">
            <summary>
                Invalidates the toi
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactEdge">
            <summary>
                A contact edge is used to connect bodies and contacts together in a contact graph where each body is a node
                and each contact is an edge. A contact edge belongs to a doubly linked list maintained in each attached body. Each
                contact has two contact nodes, one for each attached body.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactEdge.Contact">
            <summary>The contact</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactEdge.Next">
            <summary>The next contact edge in the body's contact list</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactEdge.Other">
            <summary>Provides quick access to the other body attached.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactEdge.Prev">
            <summary>The previous contact edge in the body's contact list</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactFeature">
            <summary>The features that intersect to form the contact point This must be 4 bytes or less.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactFeature.IndexA">
            <summary>Feature index on ShapeA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactFeature.IndexB">
            <summary>Feature index on ShapeB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactFeature.TypeA">
            <summary>The feature type on ShapeA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactFeature.TypeB">
            <summary>The feature type on ShapeB</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactFeatureType">
            <summary>
                The contact feature type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFeatureType.Vertex">
            <summary>
                The vertex contact feature type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactFeatureType.Face">
            <summary>
                The face contact feature type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactId">
            <summary>Contact ids to facilitate warm starting.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactId.ContactFeature">
            <summary>The features that intersect to form the contact point</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactId.Key">
            <summary>Used to quickly compare contact ids.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactManager">
            <summary>
                The contact manager class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.contactList">
            <summary>
                The contact list
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ContactPool">
            <summary>
                The contact
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactManager.contactCounter">
            <summary>
                The contact count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.#ctor(Alis.Core.Physic.Collision.BroadPhase.IBroadPhase)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.ContactSystem.ContactManager" /> class
            </summary>
            <param name="broadPhase">The broad phase</param>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.OnBroadPhaseCollision">
            <summary>Fires when the broadphase detects that two Fixtures are close to each other.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.BeginContact">
            <summary>Fires when a contact is created</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ContactFilter">
            <summary>The filter used by the contact manager.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.EndContact">
            <summary>Fires when a contact is deleted</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.LastMinAlpha">
            <summary>
                The last min alpha
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.PostSolve">
            <summary>Fires after the solver has run</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.PreSolve">
            <summary>Fires before the solver runs</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.Current">
            <summary>
                The dynamic tree broad phase
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.BroadPhase">
            <summary>
                Gets the value of the broad phase
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ContactCount">
            <summary>
                Gets the value of the contact count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.AddPair(Alis.Core.Physic.Dynamics.FixtureProxy@,Alis.Core.Physic.Dynamics.FixtureProxy@)">
            <summary>
                Adds the pair using the specified proxy a
            </summary>
            <param name="proxyA">The proxy</param>
            <param name="proxyB">The proxy</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.CheckExistingContact(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture,System.Int32,System.Int32)">
            <summary>
                Describes whether this instance check existing contact
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <param name="indexA">The index</param>
            <param name="indexB">The index</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.CreateContact(Alis.Core.Physic.Dynamics.Fixture,System.Int32,Alis.Core.Physic.Dynamics.Fixture,System.Int32)">
            <summary>
                Creates the contact using the specified fixture a
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="indexA">The index</param>
            <param name="fixtureB">The fixture</param>
            <param name="indexB">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.FindNewContacts">
            <summary>
                Finds the new contacts
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.Remove(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Removes the c
            </summary>
            <param name="c">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.Collide">
            <summary>
                Collides this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ShouldProcessContact(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Describes whether this instance should process contact
            </summary>
            <param name="c">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ShouldPersistContact(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Describes whether this instance should persist contact
            </summary>
            <param name="c">The </param>
            <returns>The overlap</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ShouldBodiesCollide(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Describes whether this instance should bodies collide
            </summary>
            <param name="c">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.GetTheMinContact(System.Single)">
            <summary>
                Gets the the min contact using the specified min alpha
            </summary>
            <param name="minAlpha">The min alpha</param>
            <returns>The contact</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.IsValidCachedToi(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Describes whether this instance is valid cached toi
            </summary>
            <param name="c">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.IsSensorContact(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Describes whether this instance is sensor contact
            </summary>
            <param name="c">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.IsActiveContact(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Describes whether this instance is active contact
            </summary>
            <param name="c">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.IsCollidableContact(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Describes whether this instance is collidable contact
            </summary>
            <param name="c">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.AdjustSweeps(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Adjusts the sweeps using the specified c
            </summary>
            <param name="c">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ComputeTimeOfImpact(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Computes the time of impact using the specified c
            </summary>
            <param name="c">The </param>
            <returns>The output</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.UpdateContactToi(Alis.Core.Physic.Collision.ContactSystem.Contact,Alis.Core.Physic.Collision.TOI.ToiOutput)">
            <summary>
                Updates the contact toi using the specified c
            </summary>
            <param name="c">The </param>
            <param name="output">The output</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ShouldCollide(Alis.Core.Physic.Dynamics.Fixture,Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Describes whether should collide
            </summary>
            <param name="fixtureA">The fixture</param>
            <param name="fixtureB">The fixture</param>
            <returns>The collide</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.ClearFlags">
            <summary>
                Clears the flags
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.InvalidateToi">
            <summary>
                Invalidates the toi
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.ContactSystem.ContactManager.CalculateMinAlpha">
            <summary>
                Calculates the min alpha
            </summary>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactSetting">
            <summary>
                The contact flags enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactSetting.None">
            <summary>
                The unknown contact flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactSetting.IslandFlag">
            <summary>Used when crawling contact graph when forming islands.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactSetting.TouchingFlag">
            <summary>Set when the shapes are touching.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactSetting.EnabledFlag">
            <summary>This contact can be disabled (by user)</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactSetting.FilterFlag">
            <summary>This contact needs filtering because a fixture filter was changed.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactSetting.BulletHitFlag">
            <summary>This bullet contact had a TOI event</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactSetting.ToiFlag">
            <summary>This contact has a valid TOI in m_toi</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.ContactSystem.ContactType">
            <summary>
                The contact type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.NotSupported">
            <summary>
                The not supported contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.Polygon">
            <summary>
                The polygon contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.PolygonAndCircle">
            <summary>
                The polygon and circle contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.Circle">
            <summary>
                The circle contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.EdgeAndPolygon">
            <summary>
                The edge and polygon contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.EdgeAndCircle">
            <summary>
                The edge and circle contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.ChainAndPolygon">
            <summary>
                The chain and polygon contact type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.ContactSystem.ContactType.ChainAndCircle">
            <summary>
                The chain and circle contact type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.DistanceGjk">
            <summary>
                The Gilbert distance algorithm that provides the distance between shapes. Using Voronoi
                regions and Barycentric coordinates.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.DistanceGjk.GjkCalls">
            <summary>
                The number of calls made to the ComputeDistance() function. Note: This is only activated when
                Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.DistanceGjk.GjkIter">
            <summary>
                The number of iterations that was made on the last call to ComputeDistance(). Note: This is only activated
                when Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.DistanceGjk.GjkMaxIter">
            <summary>
                The maximum number of iterations calls to the Distance() function. Note: This is only activated when
                Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.ComputeDistance(Alis.Core.Physic.Collision.Distance.DistanceInput@,Alis.Core.Physic.Collision.Distance.DistanceOutput@,Alis.Core.Physic.Collision.NarrowPhase.SimplexCache@)">
            <summary>
                Computes the distance using the specified input
            </summary>
            <param name="input">The input</param>
            <param name="output">The output</param>
            <param name="cache">The cache</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.SaveSimplexVertices(Alis.Core.Physic.Collision.NarrowPhase.Simplex,System.Int32[]@,System.Int32[]@)">
            <summary>
                Saves the simplex vertices using the specified simplex
            </summary>
            <param name="simplex">The simplex</param>
            <param name="saveA">The save</param>
            <param name="saveB">The save</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.InitializeSimplex(Alis.Core.Physic.Collision.NarrowPhase.SimplexCache@,Alis.Core.Physic.Collision.Distance.DistanceInput@)">
            <summary>
                Initializes the simplex using the specified cache
            </summary>
            <param name="cache">The cache</param>
            <param name="input">The input</param>
            <returns>The simplex</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.AddNewVertexToSimplex(Alis.Core.Physic.Collision.NarrowPhase.Simplex@,Alis.Core.Physic.Collision.Distance.DistanceInput@)">
            <summary>
                Adds the new vertex to simplex using the specified simplex
            </summary>
            <param name="simplex">The simplex</param>
            <param name="input">The input</param>
            <returns>The vertex</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.SolveSimplex(Alis.Core.Physic.Collision.NarrowPhase.Simplex@)">
            <summary>
                Solves the simplex using the specified simplex
            </summary>
            <param name="simplex">The simplex</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.IsDuplicateSupportPoint(System.Int32[],System.Int32[],Alis.Core.Physic.Collision.NarrowPhase.SimplexVertex,System.Int32)">
            <summary>
                Describes whether is duplicate support point
            </summary>
            <param name="saveA">The save</param>
            <param name="saveB">The save</param>
            <param name="vertex">The vertex</param>
            <param name="saveCount">The save count</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.PrepareOutput(Alis.Core.Physic.Collision.Distance.DistanceOutput@,Alis.Core.Physic.Collision.NarrowPhase.Simplex@,Alis.Core.Physic.Collision.NarrowPhase.SimplexCache@,Alis.Core.Physic.Collision.Distance.DistanceInput@)">
            <summary>
                Prepares the output using the specified output
            </summary>
            <param name="output">The output</param>
            <param name="simplex">The simplex</param>
            <param name="cache">The cache</param>
            <param name="input">The input</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.ApplyRadii(Alis.Core.Physic.Collision.Distance.DistanceOutput@,Alis.Core.Physic.Collision.Distance.DistanceInput@)">
            <summary>
                Applies the radii using the specified output
            </summary>
            <param name="output">The output</param>
            <param name="input">The input</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.ShapeCast(Alis.Core.Physic.Collision.Distance.ShapeCastInput@,Alis.Core.Physic.Collision.Distance.ShapeCastOutput@)">
            <summary>
                Perform a linear shape cast of shape B moving and shape A fixed. Determines the hit point, normal, and
                translation fraction.
            </summary>
            <returns>true if hit, false if there is no hit or an initial overlap</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.InitializeOutput(Alis.Core.Physic.Collision.Distance.ShapeCastOutput@)">
            <summary>
                Initializes the output using the specified output
            </summary>
            <param name="output">The output</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.CalculateRadius(Alis.Core.Physic.Collision.Distance.DistanceProxy)">
            <summary>
                Calculates the radius using the specified proxy
            </summary>
            <param name="proxy">The proxy</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.InitializeSimplex">
            <summary>
                Initializes the simplex
            </summary>
            <returns>The simplex</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.IterateUntilConverged(Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,System.Single@,Alis.Core.Physic.Collision.NarrowPhase.Simplex@,System.Single)">
            <summary>
                Describes whether iterate until converged
            </summary>
            <param name="proxyA">The proxy</param>
            <param name="proxyB">The proxy</param>
            <param name="xfA">The xf</param>
            <param name="xfB">The xf</param>
            <param name="r">The </param>
            <param name="n">The </param>
            <param name="lambda">The lambda</param>
            <param name="simplex">The simplex</param>
            <param name="radius">The radius</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.ComputeV(Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,System.Single@,Alis.Core.Physic.Collision.NarrowPhase.Simplex@,System.Single)">
            <summary>
                Computes the v using the specified input
            </summary>
            <param name="proxyA">The proxy</param>
            <param name="proxyB">The proxy</param>
            <param name="xfA">The xf</param>
            <param name="xfB">The xf</param>
            <param name="r">The </param>
            <param name="n">The </param>
            <param name="lambda">The lambda</param>
            <param name="simplex">The simplex</param>
            <param name="radius">The radius</param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.ComputeSupport(Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Computes the support using the specified proxy a
            </summary>
            <param name="proxyA">The proxy</param>
            <param name="proxyB">The proxy</param>
            <param name="xfA">The xf</param>
            <param name="xfB">The xf</param>
            <param name="r">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.IsConverged(Alis.Core.Aspect.Math.Vector.Vector2,System.Single@,System.Single)">
            <summary>
                Describes whether is converged
            </summary>
            <param name="v">The </param>
            <param name="lambda">The lambda</param>
            <param name="radius">The radius</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.IsNewDirectionNeeded(Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,System.Single@,System.Single)">
            <summary>
                Describes whether is new direction needed
            </summary>
            <param name="n">The </param>
            <param name="r">The </param>
            <param name="lambda">The lambda</param>
            <param name="radius">The radius</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.UpdateSimplex(Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,System.Single@,Alis.Core.Physic.Collision.NarrowPhase.Simplex@,System.Single)">
            <summary>
                Updates the simplex using the specified input
            </summary>
            <param name="proxyA">The proxy</param>
            <param name="proxyB">The proxy</param>
            <param name="xfA">The xf</param>
            <param name="xfB">The xf</param>
            <param name="r">The </param>
            <param name="v">The </param>
            <param name="n">The </param>
            <param name="lambda">The lambda</param>
            <param name="simplex">The simplex</param>
            <param name="radius">The radius</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceGjk.CalculateOutput(Alis.Core.Physic.Collision.Distance.ShapeCastOutput@,Alis.Core.Physic.Collision.NarrowPhase.Simplex@,Alis.Core.Aspect.Math.Vector.Vector2@,System.Single@,Alis.Core.Aspect.Math.Vector.Vector2@,System.Single)">
            <summary>
                Calculates the output using the specified output
            </summary>
            <param name="output">The output</param>
            <param name="simplex">The simplex</param>
            <param name="r">The </param>
            <param name="lambda">The lambda</param>
            <param name="n">The </param>
            <param name="radiusA">The radius</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.DistanceInput">
            <summary>Input for Distance.ComputeDistance(). You have to option to use the shape radii in the computation.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceInput.ProxyA">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceInput.ProxyB">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceInput.TransformA">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceInput.TransformB">
            <summary>
                The transform
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceInput.UseRadii">
            <summary>
                The use radii
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.DistanceOutput">
            <summary>Output for Distance.ComputeDistance().</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceOutput.Distance">
            <summary>
                The distance
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceOutput.Iterations">
            <summary>Number of GJK iterations used</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceOutput.PointA">
            <summary>Closest point on shapeA</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceOutput.PointB">
            <summary>Closest point on shapeB</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.DistanceProxy">
            <summary>A distance proxy is used by the GJK algorithm. It encapsulates any shape.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceProxy.Radius">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Distance.DistanceProxy.Vertices">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.#ctor(Alis.Core.Physic.Collision.Shapes.AShape,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Distance.DistanceProxy" /> class
            </summary>
            <param name="shape">The shape</param>
            <param name="index">The index</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.InitializeCircleShape(Alis.Core.Physic.Collision.Shapes.CircleShape)">
            <summary>
                Initializes the circle shape using the specified circle
            </summary>
            <param name="circle">The circle</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.InitializePolygonShape(Alis.Core.Physic.Collision.Shapes.PolygonShape)">
            <summary>
                Initializes the polygon shape using the specified polygon
            </summary>
            <param name="polygon">The polygon</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.InitializeChainShape(Alis.Core.Physic.Collision.Shapes.ChainShape,System.Int32)">
            <summary>
                Initializes the chain shape using the specified chain
            </summary>
            <param name="chain">The chain</param>
            <param name="index">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.InitializeEdgeShape(Alis.Core.Physic.Collision.Shapes.EdgeShape)">
            <summary>
                Initializes the edge shape using the specified edge
            </summary>
            <param name="edge">The edge</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.#ctor(Alis.Core.Aspect.Math.Vector.Vector2[],System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Distance.DistanceProxy" /> class
            </summary>
            <param name="vertices">The vertices</param>
            <param name="radius">The radius</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.GetSupport(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Get the supporting vertex index in the given direction.</summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Distance.DistanceProxy.GetVertex(System.Int32)">
            <summary>
                Gets the vertex using the specified index
            </summary>
            <param name="index">The index</param>
            <returns>The vector</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.ShapeCastInput">
            <summary>Input parameters for b2ShapeCast</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.ShapeCastInput.ProxyA">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.ShapeCastInput.ProxyB">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.ShapeCastInput.TransformA">
            <summary>
                The transform
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.ShapeCastInput.TransformB">
            <summary>
                The transform
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.ShapeCastInput.TranslationB">
            <summary>
                The translation
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Distance.ShapeCastOutput">
            <summary>Output results for b2ShapeCast</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.ShapeCastOutput.Point">
            <summary>
                The point
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.ShapeCastOutput.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.ShapeCastOutput.Lambda">
            <summary>
                The lambda
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Distance.ShapeCastOutput.Iterations">
            <summary>
                The iterations
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Filtering.Category">
            <summary>
                The category enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.None">
            <summary>
                The none category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat1">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat2">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat3">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat4">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat5">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat6">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat7">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat8">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat9">
            <summary>
                The cat category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat10">
            <summary>
                The cat 10 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat11">
            <summary>
                The cat 11 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat12">
            <summary>
                The cat 12 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat13">
            <summary>
                The cat 13 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat14">
            <summary>
                The cat 14 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat15">
            <summary>
                The cat 15 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat16">
            <summary>
                The cat 16 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat17">
            <summary>
                The cat 17 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat18">
            <summary>
                The cat 18 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat19">
            <summary>
                The cat 19 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat20">
            <summary>
                The cat 20 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat21">
            <summary>
                The cat 21 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat22">
            <summary>
                The cat 22 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat23">
            <summary>
                The cat 23 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat24">
            <summary>
                The cat 24 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat25">
            <summary>
                The cat 25 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat26">
            <summary>
                The cat 26 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat27">
            <summary>
                The cat 27 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat28">
            <summary>
                The cat 28 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat29">
            <summary>
                The cat 29 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat30">
            <summary>
                The cat 30 category
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Filtering.Category.Cat31">
            <summary>
                The cat 31 category
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Filtering.Filter">
            <summary>
                The filter class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Filtering.Filter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Filtering.Filter" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Filtering.Filter.#ctor(System.Int16,Alis.Core.Physic.Collision.Filtering.Category,Alis.Core.Physic.Collision.Filtering.Category)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Filtering.Filter" /> class
            </summary>
            <param name="group">The group</param>
            <param name="category">The category</param>
            <param name="mask">The mask</param>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Filtering.Filter.Group">
            <summary>
                Collision groups allow a certain group of objects to never collide(negative) or always collide (positive).
                Zero means no collision group. Non-zero group filtering always wins against the mask bits.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Filtering.Filter.Category">
            <summary>The collision category bits. Normally you would just set one bit.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Filtering.Filter.CategoryMask">
            <summary>The collision mask bits. This states the categories that this shape would accept for collision.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.AfterCollisionHandler">
            <summary>
                The after collision handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.BeforeCollisionHandler">
            <summary>
                The before collision handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.BeginContactHandler">
            <summary>This delegate is called when a contact is created</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.BroadPhaseHandler">
            <summary>
                The broad phase handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.CollisionFilterHandler">
            <summary>
                The collision filter handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.EndContactHandler">
            <summary>This delegate is called when a contact is deleted</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.OnCollisionHandler">
            <summary>
                The on collision handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Handlers.OnSeparationHandler">
            <summary>
                The on separation handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.ClipVertex">
            <summary>Used for computing contact manifolds.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.ClipVertex.Id">
            <summary>
                The id
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.ClipVertex.V">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.CollideCircle">
            <summary>
                The collide circle class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideCircle.CollideCircles(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Collides the circles using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="circleA">The circle</param>
            <param name="xfA">The xf</param>
            <param name="circleB">The circle</param>
            <param name="xfB">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideCircle.CollidePolygonAndCircle(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Collides the polygon and circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="polygonA">The polygon</param>
            <param name="xfA">The xf</param>
            <param name="circleB">The circle</param>
            <param name="xfB">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideCircle.ComputeCirclePositionInPolygonFrame(Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Computes the circle position in polygon frame using the specified xf b
            </summary>
            <param name="xfB">The xf</param>
            <param name="circleBPosition">The circle position</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideCircle.FindMinSeparatingEdge(Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Int32,Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Finds the min separating edge using the specified c local
            </summary>
            <param name="cLocal">The local</param>
            <param name="radius">The radius</param>
            <param name="vertexCount">The vertex count</param>
            <param name="vertices">The vertices</param>
            <param name="normals">The normals</param>
            <returns>The normal index</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideCircle.IsCenterInsidePolygon(System.Single,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Shared.Vertices,System.Int32,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Collision.NarrowPhase.Manifold@)">
            <summary>
                Describes whether is center inside polygon
            </summary>
            <param name="separation">The separation</param>
            <param name="v1">The </param>
            <param name="v2">The </param>
            <param name="normals">The normals</param>
            <param name="normalIndex">The normal index</param>
            <param name="circleBPosition">The circle position</param>
            <param name="manifold">The manifold</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideCircle.ComputeBarycentricCoordinates(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Physic.Shared.Vertices,System.Int32)">
            <summary>
                Computes the barycentric coordinates using the specified c local
            </summary>
            <param name="cLocal">The local</param>
            <param name="v1">The </param>
            <param name="v2">The </param>
            <param name="radius">The radius</param>
            <param name="circleBPosition">The circle position</param>
            <param name="manifold">The manifold</param>
            <param name="normals">The normals</param>
            <param name="vertIndex1">The vert index</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideCircle.SetManifoldForVertex(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Sets the manifold for vertex using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="cLocal">The local</param>
            <param name="vertex">The vertex</param>
            <param name="circleBPosition">The circle position</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge">
            <summary>
                The collide edge class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.CollideEdgeAndCircle(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Physic.Collision.Shapes.EdgeShape,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.Shapes.CircleShape,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Collides the edge and circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="edgeA">The edge</param>
            <param name="transformA">The transform</param>
            <param name="circleB">The circle</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.HandleRegionAb(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Handles the region ab using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="edgeStart">The edge start</param>
            <param name="edgeEnd">The edge end</param>
            <param name="q">The </param>
            <param name="radiusSum">The radius sum</param>
            <param name="offset">The offset</param>
            <param name="circlePosition">The circle position</param>
            <param name="edgeNormal">The edge normal</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.ComputeCirclePositionInEdgeFrame(Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Computes the circle position in edge frame using the specified transform a
            </summary>
            <param name="transformA">The transform</param>
            <param name="transformB">The transform</param>
            <param name="circlePosition">The circle position</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.HandleRegionA(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Physic.Collision.Shapes.EdgeShape,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Handles the region a using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="edgeA">The edge</param>
            <param name="edgeStart">The edge start</param>
            <param name="q">The </param>
            <param name="radiusSum">The radius sum</param>
            <param name="circlePosition">The circle position</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.HandleRegionB(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Physic.Collision.Shapes.EdgeShape,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Handles the region b using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="edgeA">The edge</param>
            <param name="edgeEnd">The edge end</param>
            <param name="q">The </param>
            <param name="radiusSum">The radius sum</param>
            <param name="circlePosition">The circle position</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.SetManifoldForCircle(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Sets the manifold for circle using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="contactPoint">The contact point</param>
            <param name="circlePosition">The circle position</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.SetManifoldForEdge(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Sets the manifold for edge using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="edgeStart">The edge start</param>
            <param name="edgeNormal">The edge normal</param>
            <param name="circlePosition">The circle position</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.CollideEdgeAndPolygon(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Physic.Collision.Shapes.EdgeShape,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Collides the edge and polygon using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="edgeA">The edge</param>
            <param name="xfA">The xf</param>
            <param name="polygonB">The polygon</param>
            <param name="xfB">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.GetPolygonInFrameA(Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Aspect.Math.Transform)">
            <summary>
                Gets the polygon in frame a using the specified polygon b
            </summary>
            <param name="polygonB">The polygon</param>
            <param name="xf">The xf</param>
            <returns>The temp polygon</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.GetPrimaryAxis(Alis.Core.Physic.Collision.NarrowPhase.EpAxis,Alis.Core.Physic.Collision.NarrowPhase.EpAxis,System.Single)">
            <summary>
                Gets the primary axis using the specified polygon axis
            </summary>
            <param name="polygonAxis">The polygon axis</param>
            <param name="edgeAxis">The edge axis</param>
            <param name="radius">The radius</param>
            <returns>The primary axis</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.HandleOneSidedEdge(Alis.Core.Physic.Collision.NarrowPhase.EpAxis,Alis.Core.Physic.Collision.NarrowPhase.EpAxis,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Collision.Shapes.EdgeShape)">
            <summary>
                Handles the one sided edge using the specified primary axis
            </summary>
            <param name="primaryAxis">The primary axis</param>
            <param name="edgeAxis">The edge axis</param>
            <param name="v1">The </param>
            <param name="v2">The </param>
            <param name="edge1">The edge</param>
            <param name="edgeA">The edge</param>
            <returns>The primary axis</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.GetReferenceFace(Alis.Core.Physic.Collision.NarrowPhase.EpAxis,Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.TempPolygon,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Collision.NarrowPhase.Manifold@)">
            <summary>
                Gets the reference face using the specified primary axis
            </summary>
            <param name="primaryAxis">The primary axis</param>
            <param name="tempPolygonB">The temp polygon</param>
            <param name="v1">The </param>
            <param name="v2">The </param>
            <param name="edge1">The edge</param>
            <param name="manifold">The manifold</param>
            <returns>The ref</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.SetManifoldPoints(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Physic.Collision.NarrowPhase.EpAxis,Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace,Alis.Core.Physic.Collision.NarrowPhase.ClipVertex[],System.Single,Alis.Core.Aspect.Math.Transform,Alis.Core.Physic.Collision.Shapes.PolygonShape)">
            <summary>
                Sets the manifold points using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="primaryAxis">The primary axis</param>
            <param name="ref1">The ref</param>
            <param name="clipPoints2">The clip points</param>
            <param name="radius">The radius</param>
            <param name="xf">The xf</param>
            <param name="polygonB">The polygon</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.ComputeEdgeSeparation(Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.TempPolygon@,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Computes the edge separation using the specified polygon b
            </summary>
            <param name="polygonB">The polygon</param>
            <param name="v1">The </param>
            <param name="normal1">The normal</param>
            <returns>The axis</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.ComputePolygonSeparation(Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.TempPolygon@,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Computes the polygon separation using the specified polygon b
            </summary>
            <param name="polygonB">The polygon</param>
            <param name="v1">The </param>
            <param name="v2">The </param>
            <returns>The axis</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.TempPolygon">
            <summary>
                The temp polygon
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.TempPolygon.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.TempPolygon" /> class
            </summary>
            <param name="count">The count</param>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.TempPolygon.Vertices">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.TempPolygon.Normals">
            <summary>
                The normals
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.CollideEdge.TempPolygon.Count">
            <summary>
                The count
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.CollidePolygon">
            <summary>
                The collide polygon class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollidePolygon.CollidePolygons(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Aspect.Math.Transform@)">
            <summary>Compute the collision manifold between two polygons.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollidePolygon.FindMaxSeparation(System.Int32@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Aspect.Math.Transform@)">
            <summary>Find the max separation between poly1 and poly2 using edge normals from poly1.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.CollidePolygon.FindIncidentEdge(Alis.Core.Physic.Collision.NarrowPhase.ClipVertex[]@,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Collision.Shapes.PolygonShape,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Finds the incident edge using the specified c
            </summary>
            <param name="c">The </param>
            <param name="poly1">The poly</param>
            <param name="xf1">The xf</param>
            <param name="edge1">The edge</param>
            <param name="poly2">The poly</param>
            <param name="xf2">The xf</param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.Collision">
            <summary>Collision methods</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Collision.TestOverlap(Alis.Core.Physic.Collision.Shapes.AShape,System.Int32,Alis.Core.Physic.Collision.Shapes.AShape,System.Int32,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@)">
            <summary>Test overlap between the two shapes.</summary>
            <param name="shapeA">The first shape.</param>
            <param name="indexA">The index for the first shape.</param>
            <param name="shapeB">The second shape.</param>
            <param name="indexB">The index for the second shape.</param>
            <param name="xfA">The transform for the first shape.</param>
            <param name="xfB">The transform for the seconds shape.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Collision.GetPointStates(Alis.Core.Physic.Collision.NarrowPhase.PointState[]@,Alis.Core.Physic.Collision.NarrowPhase.PointState[]@,Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Physic.Collision.NarrowPhase.Manifold@)">
            <summary>
                Gets the point states using the specified state 1
            </summary>
            <param name="state1">The state</param>
            <param name="state2">The state</param>
            <param name="manifold1">The manifold</param>
            <param name="manifold2">The manifold</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Collision.ClipSegmentToLine(Alis.Core.Physic.Collision.NarrowPhase.ClipVertex[]@,Alis.Core.Physic.Collision.NarrowPhase.ClipVertex[]@,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Int32)">
            <summary>Clipping for contact manifolds.</summary>
            <param name="vOut">The v out.</param>
            <param name="vIn">The v in.</param>
            <param name="normal">The normal.</param>
            <param name="offset">The offset.</param>
            <param name="vertexIndexA">The vertex index A.</param>
            <returns></returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.EpAxis">
            <summary>This structure is used to keep track of the best separating axis.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.EpAxis.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.EpAxis.Index">
            <summary>
                The index
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.EpAxis.Separation">
            <summary>
                The separation
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.EpAxis.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.EpAxisType">
            <summary>
                The ep axis type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.EpAxisType.Unknown">
            <summary>
                The unknown ep axis type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.EpAxisType.EdgeA">
            <summary>
                The edge ep axis type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.EpAxisType.EdgeB">
            <summary>
                The edge ep axis type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.Manifold">
            <summary>
                A manifold for two touching convex Shapes.
                Supports multiple types of contact:
                - Clip point versus plane with radius
                - Point versus point with radius (circles)
                The local point usage depends on the manifold type:
                - ShapeType.Circles: the local center of circleA
                - SeparationFunction.FaceA: the center of faceA
                - SeparationFunction.FaceB: the center of faceB
                Similarly the local normal usage:
                - ShapeType.Circles: not used
                - SeparationFunction.FaceA: the normal on polygonA
                - SeparationFunction.FaceB: the normal on polygonB
                We store contacts in this way so that position correction can
                account for movement, which is critical for continuous physics.
                All contact scenarios must be expressed in one of these types.
                This structure is stored across time steps, so we keep it small.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.Manifold.LocalNormal">
            <summary>Not use for Type.SeparationFunction.Points</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.Manifold.LocalPoint">
            <summary>Usage depends on manifold type</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.Manifold.PointCount">
            <summary>The number of manifold points</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.Manifold.Points">
            <summary>The points of contact</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.Manifold.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.ManifoldPoint">
            <summary>
                A manifold point is a contact point belonging to a contact
                manifold. It holds details related to the geometry and dynamics
                of the contact points.
                The local point usage depends on the manifold type:
                -ShapeType.Circles: the local center of circleB
                -SeparationFunction.FaceA: the local center of cirlceB or the clip point of polygonB
                -SeparationFunction.FaceB: the clip point of polygonA
                This structure is stored across time steps, so we keep it small.
                Note: the impulses are used for internal caching and may not
                provide reliable contact forces, especially for high speed collisions.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.ManifoldPoint.Id">
            <summary>Uniquely identifies a contact point between two Shapes</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.ManifoldPoint.LocalPoint">
            <summary>Usage depends on manifold type</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.ManifoldPoint.NormalImpulse">
            <summary>The non-penetration impulse</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.ManifoldPoint.TangentImpulse">
            <summary>The friction impulse</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.ManifoldType">
            <summary>
                The manifold type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.ManifoldType.Circles">
            <summary>
                The circles manifold type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.ManifoldType.FaceA">
            <summary>
                The face manifold type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.ManifoldType.FaceB">
            <summary>
                The face manifold type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.PointState">
            <summary>This is used for determining the state of contact points.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.PointState.Null">
            <summary>Point does not exist</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.PointState.Add">
            <summary>Point was added in the update</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.PointState.Persist">
            <summary>Point persisted across the update</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.PointState.Remove">
            <summary>Point was removed in the update</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace">
            <summary>Reference face used for clipping</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace.I1">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace.I2">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace.V1">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace.V2">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace.SideNormal1">
            <summary>
                The side normal
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace.SideOffset1">
            <summary>
                The side offset
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace.SideNormal2">
            <summary>
                The side normal
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.ReferenceFace.SideOffset2">
            <summary>
                The side offset
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.Simplex">
            <summary>
                The simplex
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.Simplex.Count">
            <summary>
                Gets or sets the value of the count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.Simplex.V">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Simplex.ReadCache(Alis.Core.Physic.Collision.NarrowPhase.SimplexCache@,Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.Distance.DistanceProxy@,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Reads the cache using the specified cache
            </summary>
            <param name="cache">The cache</param>
            <param name="proxyA">The proxy</param>
            <param name="transformA">The transform</param>
            <param name="proxyB">The proxy</param>
            <param name="transformB">The transform</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Simplex.WriteCache(Alis.Core.Physic.Collision.NarrowPhase.SimplexCache@)">
            <summary>
                Writes the cache using the specified cache
            </summary>
            <param name="cache">The cache</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Simplex.GetSearchDirection">
            <summary>
                Gets the search direction
            </summary>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Simplex.GetClosestPoint">
            <summary>
                Gets the closest point
            </summary>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Simplex.GetWitnessPoints(Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Gets the witness points using the specified p a
            </summary>
            <param name="pA">The </param>
            <param name="pB">The </param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Simplex.GetMetric">
            <summary>
                Gets the metric
            </summary>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Simplex.Solve2">
            <summary>
                Solves the 2
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.Simplex.Solve3">
            <summary>
                Solves the 3
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.SimplexCache">
            <summary>Used to warm start ComputeDistance. Set count to zero on first call.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.SimplexCache.Count">
            <summary>Length or area</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.SimplexCache.IndexA">
            <summary>Vertices on shape A</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.NarrowPhase.SimplexCache.IndexB">
            <summary>Vertices on shape B</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.SimplexCache.Metric">
            <summary>
                The metric
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.SimplexVertex">
            <summary>
                The simplex vertex
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.SimplexVertex.A">
            <summary>Barycentric coordinate for closest point</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.SimplexVertex.IndexA">
            <summary>wA index</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.SimplexVertex.IndexB">
            <summary>wB index</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.SimplexVertex.W">
            <summary>wB - wA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.SimplexVertex.Wa">
            <summary>Support point in proxyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.NarrowPhase.SimplexVertex.Wb">
            <summary>Support point in proxyB</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.NarrowPhase.WorldManifold">
            <summary>
                The world manifold class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.NarrowPhase.WorldManifold.Initialize(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Aspect.Math.Transform@,System.Single,Alis.Core.Aspect.Math.Transform@,System.Single,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2[]@)">
            <summary>
                Evaluate the manifold with supplied transforms. This assumes modest motion from the original state. This does
                not change the point count, impulses, etc. The radii must come from the Shapes that generated the manifold.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.RayCastHelper">
            <summary>
                The ray cast helper class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.RayCastHelper.RayCastEdge(Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,System.Boolean,Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether ray cast edge
                p = p1 + t * d
                v = v1 + s * e
                p1 + t * d = v1 + s * e
                s * e - t * d = p1 - v1
            </summary>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <param name="oneSided">The one sided</param>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.RayCastHelper.RayCastCircle(Alis.Core.Aspect.Math.Vector.Vector2@,System.Single,Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether ray cast circle
            </summary>
            <param name="pos">The pos</param>
            <param name="radius">The radius</param>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.RayCastHelper.RayCastPolygon(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Aspect.Math.Transform@,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether ray cast polygon
            </summary>
            <param name="vertices">The vertices</param>
            <param name="normals">The normals</param>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.RayCastHelper.TransformPoint(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Transform)">
            <summary>
                Transforms the point using the specified point
            </summary>
            <param name="point">The point</param>
            <param name="transform">The transform</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.RayCastHelper.CalculateNumerator(System.Int32,Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Calculates the numerator using the specified i
            </summary>
            <param name="i">The </param>
            <param name="vertices">The vertices</param>
            <param name="normals">The normals</param>
            <param name="p1">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.RayCastHelper.CalculateDenominator(System.Int32,Alis.Core.Physic.Shared.Vertices,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Calculates the denominator using the specified i
            </summary>
            <param name="i">The </param>
            <param name="normals">The normals</param>
            <param name="d">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.RayCastHelper.ProcessDenominator(System.Single@,System.Single@,System.Int32@,System.Int32,System.Single,System.Single)">
            <summary>
                Describes whether process denominator
            </summary>
            <param name="lower">The lower</param>
            <param name="upper">The upper</param>
            <param name="index">The index</param>
            <param name="i">The </param>
            <param name="numerator">The numerator</param>
            <param name="denominator">The denominator</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.RayCast.RayCastInput">
            <summary>Ray-cast input data.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.RayCast.RayCastInput.Fraction">
            <summary>
                The ray extends from p1 to p1 + maxFraction * (p2 - p1). If you supply a max fraction of 1, the ray extends
                from p1 to p2. A max fraction of 0.5 makes the ray go from p1 and half way to p2.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.RayCast.RayCastInput.Point1">
            <summary>The starting point of the ray.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.RayCast.RayCastInput.Point2">
            <summary>The ending point of the ray.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.RayCast.RayCastOutput">
            <summary>Ray-cast output data.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.RayCast.RayCastOutput.Fraction">
            <summary>
                The ray hits at p1 + fraction * (p2 - p1), where p1 and p2 come from RayCastInput. Contains the actual
                fraction of the ray where it has the intersection point.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.RayCast.RayCastOutput.Normal">
            <summary>The normal of the face of the shape the ray has hit.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.AShape">
            <summary>
                A shape is used for collision detection. You can create a shape however you like. Shapes used for simulation
                in World are created automatically when a Fixture is created. Shapes may encapsulate a one or more child shapes.
                A shape is 2D geometrical object, such as a circle or polygon.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.AShape.DensityPrivate">
            <summary>
                The density
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.AShape.MassDataPrivate">
            <summary>
                The mass data
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.AShape.RadiusPrivate">
            <summary>
                The radius
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.AShape.ShapeTypePrivate">
            <summary>
                The shape type
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.AShape.#ctor(Alis.Core.Physic.Collision.Shapes.ShapeType,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.AShape" /> class
            </summary>
            <param name="type">The type</param>
            <param name="radius">The radius</param>
            <param name="density">The density</param>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.AShape.ShapeType">
            <summary>Get the type of this shape.</summary>
            <value>The type of the shape.</value>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.AShape.ChildCount">
            <summary>Get the number of child primitives.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.AShape.Radius">
            <summary>Radius of the Shape Changing the radius causes a recalculation of shape properties.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.AShape.Density">
            <summary>Gets or sets the density. Changing the density causes a recalculation of shape properties.</summary>
            <value>The density.</value>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.AShape.GetMassData(Alis.Core.Physic.Collision.Shapes.MassData@)">
            <summary>
                Contains the properties of the shape such as:
                - Area of the shape
                - Centroid
                - Inertia
                - Mass
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.AShape.Clone">
            <summary>Clone the concrete shape</summary>
            <returns>A clone of the shape</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.AShape.TestPoint(Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Test a point for containment in this shape. Note: This only works for convex shapes.</summary>
            <param name="transform">The shape world transform.</param>
            <param name="point">A point in world coordinates.</param>
            <returns>True if the point is inside the shape</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.AShape.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>Cast a ray against a child shape.</summary>
            <param name="input">The ray-cast input parameters.</param>
            <param name="transform">The transform to be applied to the shape.</param>
            <param name="childIndex">The child shape index.</param>
            <param name="output">The ray-cast results.</param>
            <returns>True if the ray-cast hits the shape</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.AShape.ComputeAabb(Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Given a transform, compute the associated axis aligned bounding box for a child shape.</summary>
            <param name="transform">The world transform of the shape.</param>
            <param name="childIndex">The child shape index.</param>
            <param name="aabb">The AABB results.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.AShape.ComputeProperties">
            <summary>
                Compute the mass properties of this shape using its dimensions and density. The inertia tensor is computed
                about the local origin, not the centroid.
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.ChainShape">
            <summary>
                A chain shape is a free form sequence of line segments. The chain has one-sided collision, with the surface
                normal pointing to the right of the edge. This provides a counter-clockwise winding like the polygon shape.
                Connectivity information is used to create smooth collisions. Warning: the chain will not collide properly if there
                are
                self-intersections.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.#ctor(Alis.Core.Physic.Shared.Vertices,System.Boolean)">
            <summary>Create a new ChainShape from the vertices.</summary>
            <param name="vertices">The vertices to use. Must contain 2 or more vertices.</param>
            <param name="createLoop">
                Set to true to create a closed loop. It connects the first vertex to the last, and
                automatically adjusts connectivity to create smooth collisions along the chain.
            </param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.ChainShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.ChainShape.Vertices">
            <summary>The vertices. These are not owned/freed by the chain Shape.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.ChainShape.ChildCount">
            <summary>Edge count = vertex count - 1</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.ChainShape.PrevVertex">
            <summary>Establish connectivity to a vertex that precedes the first vertex. Don't call this for loops.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.ChainShape.NextVertex">
            <summary>Establish connectivity to a vertex that follows the last vertex. Don't call this for loops.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.GetChildEdge(Alis.Core.Physic.Collision.Shapes.EdgeShape,System.Int32)">
            <summary>
                Gets the child edge using the specified edge
            </summary>
            <param name="edge">The edge</param>
            <param name="index">The index</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.GetChildEdge(System.Int32)">
            <summary>
                Gets the child edge using the specified index
            </summary>
            <param name="index">The index</param>
            <returns>The edge shape</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.TestPoint(Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether this instance ray cast
            </summary>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.ComputeAabb(Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the aabb using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.ChainShape.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.CircleShape">
            <summary>A circle shape.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.CircleShape.PositionCircle">
            <summary>
                The position
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.#ctor(System.Single,System.Single,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Create a new circle with the desired radius and density.</summary>
            <param name="radius">The radius of the circle.</param>
            <param name="density">The density of the circle.</param>
            <param name="position">Position of the shape</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.#ctor(System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.CircleShape" /> class
            </summary>
            <param name="density">The density</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.CircleShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.CircleShape.ChildCount">
            <summary>
                Gets the value of the child count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.CircleShape.Position">
            <summary>Get or set the position of the circle</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.TestPoint(Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether this instance ray cast
            </summary>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeAabb(Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the aabb using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeProperties">
            <summary>
                Computes the properties
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeMass">
            <summary>
                Computes the mass
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.ComputeInertia">
            <summary>
                Computes the inertia
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.CircleShape.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.EdgeShape">
            <summary>
                A line segment (edge) shape. These can be connected in chains or loops to other edge shapes. Edges created
                independently are two-sided and do no provide smooth movement across junctions.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.EdgeShape.vertex1">
            <summary>
                The vertex
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.EdgeShape.vertex2">
            <summary>
                The vertex
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.#ctor(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Create a new EdgeShape with the specified start and end. This edge supports two-sided collision.</summary>
            <param name="start">The start of the edge.</param>
            <param name="end">The end of the edge.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.#ctor(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Create a new EdgeShape with ghost vertices for smooth collision. This edge only supports one-sided collision.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.EdgeShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.ChildCount">
            <summary>
                Gets the value of the child count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.OneSided">
            <summary>Is true if the edge is connected to an adjacent vertex before vertex 1.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Vertex0">
            <summary>Optional adjacent vertices. These are used for smooth collision.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Vertex3">
            <summary>Optional adjacent vertices. These are used for smooth collision.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Vertex1">
            <summary>These are the edge vertices</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.EdgeShape.Vertex2">
            <summary>These are the edge vertices</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.SetOneSided(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Sets the one sided using the specified v 0
            </summary>
            <param name="v0">The </param>
            <param name="v1">The </param>
            <param name="v2">The </param>
            <param name="v3">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.SetTwoSided(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Sets the two sided using the specified start
            </summary>
            <param name="start">The start</param>
            <param name="end">The end</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.TestPoint(Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether this instance ray cast
            </summary>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.ComputeAabb(Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>
                Computes the aabb using the specified transform
            </summary>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="aabb">The aabb</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.ComputeProperties">
            <summary>
                Computes the properties
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.EdgeShape.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.MassData">
            <summary>This holds the mass data computed for a shape.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.#ctor(System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.MassData" /> class
            </summary>
            <param name="area">The area</param>
            <param name="inertia">The inertia</param>
            <param name="mass">The mass</param>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.MassData.Area">
            <summary>The area of the shape</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.MassData.Centroid">
            <summary>The position of the shape's centroid relative to the shape's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.MassData.Inertia">
            <summary>The rotational inertia of the shape about the local origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.MassData.Mass">
            <summary>The mass of the shape, usually in kilograms.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.op_Equality(Alis.Core.Physic.Collision.Shapes.MassData,Alis.Core.Physic.Collision.Shapes.MassData)">
            <summary>The equal operator</summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.op_Inequality(Alis.Core.Physic.Collision.Shapes.MassData,Alis.Core.Physic.Collision.Shapes.MassData)">
            <summary>The not equal operator</summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.Equals(Alis.Core.Physic.Collision.Shapes.MassData)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="other">The other</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.Equals(System.Object)">
            <summary>
                Describes whether this instance equals
            </summary>
            <param name="obj">The obj</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.MassData.GetHashCode">
            <summary>
                Gets the hash code
            </summary>
            <returns>The int</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.PolygonShape">
            <summary>Represents a simple non-self intersecting convex polygon. Create a convex hull from the given array of points.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.PolygonShape.NormalsPrivate">
            <summary>
                The normals
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.PolygonShape.VerticesPrivate">
            <summary>
                The vertices
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.#ctor(Alis.Core.Physic.Shared.Vertices,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.PolygonShape" /> class.</summary>
            <param name="vertices">The vertices.</param>
            <param name="density">The density.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.#ctor(System.Single)">
            <summary>Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.PolygonShape" /> class.</summary>
            <param name="density">The density.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Collision.Shapes.PolygonShape" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.PolygonShape.Vertices">
            <summary>
                Create a convex hull from the given array of local points. The number of vertices must be in the range [3,
                Settings.MaxPolygonVertices]. Warning: the points may be re-ordered, even if they form a convex polygon Warning:
                collinear points are handled but not removed. Collinear points may lead to poor stacking behavior.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.Shapes.PolygonShape.ChildCount">
            <summary>
                Gets the value of the child count
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.SetVertices(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Sets the vertices using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <exception cref="T:System.InvalidOperationException">Thrown when polygon is degenerate or has less than 3 vertices</exception>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.CheckVerticesValidity(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Checks the vertices validity using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <exception cref="T:System.InvalidOperationException">You can't create a polygon with less than 3 vertices</exception>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.RemoveDuplicateVertices(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Removes the duplicate vertices using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <returns>The vector array</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.FindRightmostVertex(Alis.Core.Aspect.Math.Vector.Vector2[],System.Int32)">
            <summary>
                Finds the rightmost vertex using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="numberOfVertices">The number of vertices</param>
            <returns>The rightmost vertex index</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeConvexHull(Alis.Core.Aspect.Math.Vector.Vector2[],System.Int32,System.Int32)">
            <summary>
                Computes the convex hull using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="numberOfVertices">The number of vertices</param>
            <param name="rightmostVertexIndex">The rightmost vertex index</param>
            <returns>The int array</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.CopyVerticesAndComputeNormals(Alis.Core.Aspect.Math.Vector.Vector2[],System.Int32[])">
            <summary>
                Copies the vertices and compute normals using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="hull">The hull</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.SetAsBox(System.Single,System.Single)">
            <summary>
                Sets the as box using the specified hx
            </summary>
            <param name="hx">The hx</param>
            <param name="hy">The hy</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.SetAsBox(System.Single,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Sets the as box using the specified hx
            </summary>
            <param name="hx">The hx</param>
            <param name="hy">The hy</param>
            <param name="center">The center</param>
            <param name="angle">The angle</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeProperties">
            <summary>
                Computes the properties
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeAreaCenterAndInertia(Alis.Core.Aspect.Math.Vector.Vector2,System.Int32)">
            <summary>
                Computes the area center and inertia using the specified s
            </summary>
            <param name="s">The </param>
            <param name="count">The count</param>
            <returns>The float area vector center float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeTriangleVerticesAndArea(Alis.Core.Aspect.Math.Vector.Vector2,System.Int32)">
            <summary>
                Computes the triangle vertices and area using the specified s
            </summary>
            <param name="s">The </param>
            <param name="i">The </param>
            <returns>The vector vector float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.GetCoordinates(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Gets the coordinates using the specified e 1
            </summary>
            <param name="e1">The </param>
            <param name="e2">The </param>
            <returns>The float ex float ey float ex float ey</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeCentroid(Alis.Core.Aspect.Math.Vector.Vector2,System.Single,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Computes the centroid using the specified center
            </summary>
            <param name="center">The center</param>
            <param name="area">The area</param>
            <param name="s">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeInertia(Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Computes the inertia using the specified center
            </summary>
            <param name="center">The center</param>
            <param name="I">The </param>
            <returns>The inertia</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.TestPoint(Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Describes whether this instance test point
            </summary>
            <param name="transform">The transform</param>
            <param name="point">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastInput@,Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Collision.RayCast.RayCastOutput@)">
            <summary>
                Describes whether this instance ray cast
            </summary>
            <param name="input">The input</param>
            <param name="transform">The transform</param>
            <param name="childIndex">The child index</param>
            <param name="output">The output</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.ComputeAabb(Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Given a transform, compute the associated axis aligned bounding box for a child shape.</summary>
            <param name="transform">The world transform of the shape.</param>
            <param name="childIndex">The child shape index.</param>
            <param name="aabb">The AABB results.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.Shapes.PolygonShape.Clone">
            <summary>
                Clones this instance
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.Shapes.ShapeType">
            <summary>
                The shape type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.Unknown">
            <summary>
                The unknown shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.Circle">
            <summary>
                The circle shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.Edge">
            <summary>
                The edge shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.Polygon">
            <summary>
                The polygon shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.Chain">
            <summary>
                The chain shape type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.Shapes.ShapeType.TypeCount">
            <summary>
                The type count shape type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TestPointHelper">
            <summary>
                The test point helper class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TestPointHelper.TestPointCircle(Alis.Core.Aspect.Math.Vector.Vector2@,System.Single,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Describes whether test point circle
            </summary>
            <param name="pos">The pos</param>
            <param name="radius">The radius</param>
            <param name="point">The point</param>
            <param name="transform">The transform</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TestPointHelper.TestPointPolygon(Alis.Core.Physic.Shared.Vertices,Alis.Core.Physic.Shared.Vertices,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Describes whether test point polygon
            </summary>
            <param name="vertices">The vertices</param>
            <param name="normals">The normals</param>
            <param name="point">The point</param>
            <param name="transform">The transform</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.SeparationFunction">
            <summary>
                The separation function class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.SeparationFunction.Initialize(Alis.Core.Physic.Collision.NarrowPhase.SimplexCache@,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,System.Single,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Physic.Collision.TOI.SeparationFunctionType@)">
            <summary>
                Initializes the cache
            </summary>
            <param name="cache">The cache</param>
            <param name="proxyA">The proxy</param>
            <param name="sweepA">The sweep</param>
            <param name="proxyB">The proxy</param>
            <param name="sweepB">The sweep</param>
            <param name="t1">The </param>
            <param name="axis">The axis</param>
            <param name="localPoint">The local point</param>
            <param name="type">The type</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.SeparationFunction.FindMinSeparation(System.Int32@,System.Int32@,System.Single,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Physic.Collision.TOI.SeparationFunctionType)">
            <summary>
                Finds the min separation using the specified index a
            </summary>
            <param name="indexA">The index</param>
            <param name="indexB">The index</param>
            <param name="t">The </param>
            <param name="proxyA">The proxy</param>
            <param name="sweepA">The sweep</param>
            <param name="proxyB">The proxy</param>
            <param name="sweepB">The sweep</param>
            <param name="axis">The axis</param>
            <param name="localPoint">The local point</param>
            <param name="type">The type</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.SeparationFunction.Evaluate(System.Int32,System.Int32,System.Single,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Physic.Collision.Distance.DistanceProxy,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Physic.Collision.TOI.SeparationFunctionType)">
            <summary>
                Evaluates the index a
            </summary>
            <param name="indexA">The index</param>
            <param name="indexB">The index</param>
            <param name="t">The </param>
            <param name="proxyA">The proxy</param>
            <param name="sweepA">The sweep</param>
            <param name="proxyB">The proxy</param>
            <param name="sweepB">The sweep</param>
            <param name="axis">The axis</param>
            <param name="localPoint">The local point</param>
            <param name="type">The type</param>
            <returns>The float</returns>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.SeparationFunctionType">
            <summary>
                The separation function type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.SeparationFunctionType.Points">
            <summary>
                The points separation function type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.SeparationFunctionType.FaceA">
            <summary>
                The face separation function type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.SeparationFunctionType.FaceB">
            <summary>
                The face separation function type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.Sweep">
            <summary>
                This describes the motion of a body/shape for TOI computation. Shapes are defined with respect to the body
                origin, which may no coincide with the center of mass. However, to support dynamics we must interpolate the center
                of
                mass position.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.A">
            <summary>World angles</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.A0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.Alpha0">
            <summary>Fraction of the current time step in the range [0,1] c0 and a0 are the positions at alpha0.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.C">
            <summary>Center world positions</summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.C0">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.Sweep.LocalCenter">
            <summary>Local center of mass position</summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.Sweep.GetTransform(Alis.Core.Aspect.Math.Transform@,System.Single)">
            <summary>Get the interpolated transform at a specific time.</summary>
            <param name="xfb">The transform.</param>
            <param name="beta">beta is a factor in [0,1], where 0 indicates alpha0.</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.Sweep.Advance(System.Single)">
            <summary>Advance the sweep forward, yielding a new initial state.</summary>
            <param name="alpha">new initial time</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.Sweep.Normalize">
            <summary>Normalize the angles.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.TimeOfImpact">
            <summary>
                The time of impact class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.TimeOfImpact._toiMaxRootIter">
            <summary>
                The toi max root iter
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ToiCalls">
            <summary>
                The toi max iter
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ToiIter">
            <summary>
                The toi max iter
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ToiMaxIter">
            <summary>
                The toi max iter
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ToiRootIter">
            <summary>
                The toi max root iter
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.TimeOfImpact.CalculateTimeOfImpact(Alis.Core.Physic.Collision.TOI.ToiInput@,Alis.Core.Physic.Collision.TOI.ToiOutput@)">
            <summary>
                Calculates the time of impact using the specified input
            </summary>
            <param name="input">The input</param>
            <param name="output">The output</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.TimeOfImpact.InitializeOutput(Alis.Core.Physic.Collision.TOI.ToiInput)">
            <summary>
                Initializes the output using the specified input
            </summary>
            <param name="input">The input</param>
            <returns>The toi output</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.TimeOfImpact.NormalizeSweeps(Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Physic.Collision.TOI.Sweep@)">
            <summary>
                Normalizes the sweeps using the specified sweep a
            </summary>
            <param name="sweepA">The sweep</param>
            <param name="sweepB">The sweep</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.TimeOfImpact.PrepareDistanceInput(Alis.Core.Physic.Collision.TOI.ToiInput)">
            <summary>
                Prepares the distance input using the specified input
            </summary>
            <param name="input">The input</param>
            <returns>The distance input</returns>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ComputeSeparatingAxes(Alis.Core.Physic.Collision.TOI.ToiInput@,Alis.Core.Physic.Collision.TOI.ToiOutput@,Alis.Core.Physic.Collision.Distance.DistanceInput@,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Physic.Collision.TOI.Sweep@,System.Single,System.Single,System.Single@,System.Int32@,System.Single)">
            <summary>
                Computes the separating axes using the specified input
            </summary>
            <param name="input">The input</param>
            <param name="output">The output</param>
            <param name="distanceInput">The distance input</param>
            <param name="sweepA">The sweep</param>
            <param name="sweepB">The sweep</param>
            <param name="target">The target</param>
            <param name="tolerance">The tolerance</param>
            <param name="t1">The </param>
            <param name="iter">The iter</param>
            <param name="tMax">The max</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ResolveDeepestPoint(Alis.Core.Physic.Collision.TOI.ToiInput@,Alis.Core.Physic.Collision.TOI.ToiOutput@,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Physic.Collision.TOI.SeparationFunctionType,System.Single,System.Single,System.Single@,System.Single)">
            <summary>
                Resolves the deepest point using the specified input
            </summary>
            <param name="input">The input</param>
            <param name="output">The output</param>
            <param name="sweepA">The sweep</param>
            <param name="sweepB">The sweep</param>
            <param name="axis">The axis</param>
            <param name="localPoint">The local point</param>
            <param name="type">The type</param>
            <param name="target">The target</param>
            <param name="tolerance">The tolerance</param>
            <param name="t1">The </param>
            <param name="tMax">The max</param>
        </member>
        <member name="M:Alis.Core.Physic.Collision.TOI.TimeOfImpact.ComputeRoot(Alis.Core.Physic.Collision.TOI.ToiInput@,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Physic.Collision.TOI.Sweep@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Physic.Collision.TOI.SeparationFunctionType,System.Single,System.Single,System.Single@,System.Single@,System.Single,System.Single)">
            <summary>
                Computes the root using the specified input
            </summary>
            <param name="input">The input</param>
            <param name="sweepA">The sweep</param>
            <param name="sweepB">The sweep</param>
            <param name="axis">The axis</param>
            <param name="localPoint">The local point</param>
            <param name="type">The type</param>
            <param name="target">The target</param>
            <param name="tolerance">The tolerance</param>
            <param name="t1">The </param>
            <param name="t2">The </param>
            <param name="s1">The </param>
            <param name="s2">The </param>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.ToiInput">
            <summary>Input parameters for CalculateTimeOfImpact</summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.ToiInput.ProxyA">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.ToiInput.ProxyB">
            <summary>
                The proxy
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.ToiInput.SweepA">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.ToiInput.SweepB">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.ToiInput.Max">
            <summary>
                The max
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.ToiOutput">
            <summary>
                The toi output
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.ToiOutput.State">
            <summary>
                The state
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Collision.TOI.ToiOutput.Property">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Collision.TOI.ToiOutputState">
            <summary>
                The toi output state enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutputState.Unknown">
            <summary>
                The unknown toi output state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutputState.Failed">
            <summary>
                The failed toi output state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutputState.Overlapped">
            <summary>
                The overlapped toi output state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutputState.Touching">
            <summary>
                The touching toi output state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Collision.TOI.ToiOutputState.Seperated">
            <summary>
                The seperated toi output state
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Config.Settings">
            <summary>
                The settings class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.ManifoldPoints">
            <summary>The maximum number of contact points between two convex shapes. DO NOT CHANGE THIS VALUE!</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.EnableSubStepping">
            <summary>Enable or disable sub stepping. Used for debugging.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.BlockSolve">
            <summary>Enable or disable the block contact solver. Used for debugging.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.SkipSanityChecks">
            <summary>
                Set this to true to skip sanity checks in the engine. This will speed up the tools by removing the overhead of
                the checks, but you will need to handle checks yourself where it is needed.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.UseConvexHullPolygons">
            <summary>
                If true, it will run a GiftWrap convex hull on all polygon inputs. This makes for a more stable engine when
                given random input, but if speed of the creation of polygons are more important, you might want to set this to
                false.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.UseFpeCollisionCategories">
            <summary>
                Velcro Physics has a different way of filtering fixtures than Box2d. We have both FPE and Box2D filtering in
                the engine. If you are upgrading from earlier versions of FPE, set this to true and
                DefaultFixtureCollisionCategories
                to Category.All.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.DefaultFixtureCollisionCategories">
            <summary>
                This is used by the Fixture constructor as the default value for Fixture.CollisionCategories member. Note that
                you may need to change this depending on the setting of UseFPECollisionCategories, above.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.DefaultFixtureCollidesWith">
            <summary>This is used by the Fixture constructor as the default value for Fixture.CollidesWith member.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.DefaultFixtureIgnoreCcdWith">
            <summary>This is used by the Fixture constructor as the default value for Fixture.IgnoreCCDWith member.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.DefaultCollisionGroup">
            <summary>
                Set the default collision group
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.GjkIterations">
            <summary>Defines the maximum number of iterations made by the GJK algorithm.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AabbExtension">
            <summary>
                This is used to fatten AABBs in the dynamic tree. This allows proxies to move by a small amount without
                triggering a tree adjustment. This is in meters.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AabbMultiplier">
            <summary>
                This is used to fatten AABBs in the dynamic tree. This is used to predict the future position based on the
                current displacement. This is a dimensionless multiplier.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.LinearSlop">
            <summary>
                A small length used as a collision and constraint tolerance. Usually it is chosen to be numerically
                significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AngularSlop">
            <summary>
                A small angle used as a collision and constraint tolerance. Usually it is chosen to be numerically
                significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.SubSteps">
            <summary>Maximum number of sub-steps per contact in continuous physics simulation.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.ToiContacts">
            <summary>Maximum number of contacts to be handled to solve a TOI impact.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.LinearCorrection">
            <summary>The maximum linear position correction used when solving constraints. This helps to prevent overshoot.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AngularCorrection">
            <summary>The maximum angular position correction used when solving constraints. This helps to prevent overshoot.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.Translation">
            <summary>
                The maximum linear velocity of a body. This limit is very large and is used to prevent numerical problems. You
                shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.Rotation">
            <summary>
                The maximum angular velocity of a body. This limit is very large and is used to prevent numerical problems.
                You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.Baumgarte">
            <summary>
                This scale factor controls how fast overlap is resolved. Ideally this would be 1 so that overlap is removed in
                one time step. However using values close to 1 often lead to overshoot.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.ToiBaumgarte">
            <summary>
                The toi baumgarte
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.TimeToSleep">
            <summary>The time that a body must be still before it will go to sleep.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.LinearSleepTolerance">
            <summary>A body cannot sleep if its linear velocity is above this tolerance.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AngularSleepTolerance">
            <summary>A body cannot sleep if its angular velocity is above this tolerance.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.AutoClearForces">
            <summary>
                By default, forces are cleared automatically after each call to Step. The default behavior is modified with
                this setting. The purpose of this setting is to support sub-stepping. Sub-stepping is often used to maintain a
                fixed
                sized time step under a variable frame-rate. When you perform sub-stepping you should disable auto clearing of
                forces
                and instead call ClearForces after all sub-steps are complete in one pass of your game loop.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.PolygonVertices">
            <summary>The maximum number of vertices on a convex polygon.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.PolygonRadius">
            <summary>
                The radius of the polygon/edge shape skin. This should not be modified. Making this smaller means polygons
                will have an insufficient buffer for continuous collision. Making it larger may create artifacts for vertex
                collision.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MixFriction">
            <summary>
                Gets called when there is a collision between 2 fixtures. The first two parameters are the friction values of
                either fixture. The return value should be the desired friction value of the collection.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MixRestitution">
            <summary>
                Gets called when there is a collision between 2 fixtures. The first two parameters are the restitution values
                of either fixture. The return value should be the desired restitution value of the collection.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Config.Settings.MixRestitutionThreshold">
            <summary>
                The default mix restitution threshold
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Config.Settings.DefaultMixFriction(System.Single,System.Single)">
            <summary>
                Friction mixing law. The idea is to allow either fixture to drive the friction to zero. For example, anything
                slides on ice.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Config.Settings.DefaultMixRestitution(System.Single,System.Single)">
            <summary>
                Restitution mixing law. The idea is allow for anything to bounce off an inelastic surface. For example, a
                superball bounces on anything.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Config.Settings.DefaultMixRestitutionThreshold(System.Single,System.Single)">
            <summary>Restitution mixing law. This picks the lowest value.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Body">
            <summary>
                The body class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.angularVelocity">
            <summary>
                The angular velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.inertia">
            <summary>
                The inertia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.linearVelc">
            <summary>
                The linear velocity
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Body.Xf">
            <summary>
                The xf
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.#ctor(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Dynamics.BodyType,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Body" /> class
            </summary>
            <param name="position">The position</param>
            <param name="linearVelocity">The linear velocity</param>
            <param name="bodyType">The body type</param>
            <param name="angle">The angle</param>
            <param name="angularVelocity">The angular velocity</param>
            <param name="linearDamping">The linear damping</param>
            <param name="angularDamping">The angular damping</param>
            <param name="allowSleep">The allow sleep</param>
            <param name="awake">The awake</param>
            <param name="fixedRotation">The fixed rotation</param>
            <param name="isBullet">The is bullet</param>
            <param name="enabled">The enabled</param>
            <param name="gravityScale">The gravity scale</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Body" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.GameObject">
            <summary>
                The game object
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.OnCollision">
            <summary>
                Fires when two shapes collide and a contact is created between them. Note that the first fixture argument is
                always the fixture that the delegate is subscribed to.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.OnSeparation">
            <summary>
                Fires when two shapes separate and a contact is removed between them. Note: This can in some cases be called
                multiple times, as a fixture can have multiple contacts. Note The first fixture argument is always the fixture that
                the
                delegate is subscribed to.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Flags">
            <summary>
                The flags
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Force">
            <summary>
                The force
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.InvI">
            <summary>
                The inv
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.InvMass">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Sweep">
            <summary>
                The sweep
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Torque">
            <summary>
                The torque
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.SleepTime">
            <summary>
                Gets or sets the value of the sleep time
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IslandIndex">
            <summary>
                Gets or sets the value of the island index
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.GravityScale">
            <summary>
                Scale the gravity applied to this body. Defaults to 1. A value of 2 means double the gravity is applied to
                this body.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Revolutions">
            <summary>Gets the total number revolutions the body has made.</summary>
            <value>The revolutions.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.BodyType">
            <summary>Gets or sets the body type. Warning: Calling this mid-update might cause a crash.</summary>
            <value>The type of body.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.LinearVelocity">
            <summary>Get or sets the linear velocity of the center of mass.</summary>
            <value>The linear velocity.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.AngularVelocity">
            <summary>Gets or sets the angular velocity. Radians/second.</summary>
            <value>The angular velocity.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.LinearDamping">
            <summary>Gets or sets the linear damping.</summary>
            <value>The linear damping.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.AngularDamping">
            <summary>Gets or sets the angular damping.</summary>
            <value>The angular damping.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsBullet">
            <summary>Gets or sets a value indicating whether this body should be included in the CCD solver.</summary>
            <value><c>true</c> if this instance is included in CCD; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.SleepingAllowed">
            <summary>You can disable sleeping on this body. If you disable sleeping, the body will be woken.</summary>
            <value><c>true</c> if sleeping is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Awake">
            <summary>Set the sleep state of the body. A sleeping body has very low CPU cost.</summary>
            <value><c>true</c> if awake; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Enabled">
            <summary>
                Set the active state of the body. An inactive body is not simulated and cannot be collided with or woken up.
                If you pass a flag of true, all fixtures will be added to the broad-phase. If you pass a flag of false, all
                fixtures
                will be removed from the broad-phase and all contacts will be destroyed. Fixtures and joints are otherwise
                unaffected.
                You may continue to create/destroy fixtures and joints on inactive bodies. Fixtures on an inactive body are
                implicitly
                inactive and will not participate in collisions, ray-casts, or queries. Joints connected to an inactive body are
                implicitly inactive. An inactive body is still owned by a b2World object and remains in the body list.
            </summary>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.FixedRotation">
            <summary>Set this body to have fixed rotation. This causes the mass to be reset.</summary>
            <value><c>true</c> if it has fixed rotation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.FixtureList">
            <summary>Gets all the fixtures attached to this body.</summary>
            <value>The fixture list.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.JointList">
            <summary>Get the list of all joints attached to this body.</summary>
            <value>The joint list.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.ContactList">
            <summary>
                Get the list of all contacts attached to this body. Warning: this list changes during the time step and you
                may miss some collisions if you don't use ContactListener.
            </summary>
            <value>The contact list.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Position">
            <summary>Get the world body origin position.</summary>
            <returns>Return the world position of the body's origin.</returns>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Rotation">
            <summary>Get the angle in radians.</summary>
            <returns>Return the current world rotation angle in radians.</returns>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsIsland">
            <summary>
                Gets the value of the is island
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsStatic">
            <summary>
                Gets the value of the is static
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsKinematic">
            <summary>
                Gets the value of the is kinematic
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsDynamic">
            <summary>
                Gets the value of the is dynamic
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.WorldCenter">
            <summary>Get the world position of the center of mass.</summary>
            <value>The world position.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.LocalCenter">
            <summary>Get the local position of the center of mass.</summary>
            <value>The local position.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Mass">
            <summary>Gets or sets the mass. Usually in kilograms (kg).</summary>
            <value>The mass.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Inertia">
            <summary>Get or set the rotational inertia of the body about the local origin. usually in kg-m^2.</summary>
            <value>The inertia.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Restitution">
            <summary>
                Sets the value of the restitution
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.Friction">
            <summary>
                Sets the value of the friction
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.CollisionCategories">
            <summary>
                Sets the value of the collision categories
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.CollidesWith">
            <summary>
                Sets the value of the collides with
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IgnoreCcdWith">
            <summary>
                Body objects can define which categories of bodies they wish to ignore CCD with. This allows certain bodies to
                be configured to ignore CCD with objects that aren't a penetration problem due to the way content has been
                prepared.
                This is compared against the other Body's fixture CollisionCategories within World.SolveTOI().
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.CollisionGroup">
            <summary>
                Sets the value of the collision group
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IsSensor">
            <summary>
                Sets the value of the is sensor
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Body.IgnoreCcd">
            <summary>
                Gets or sets the value of the ignore ccd
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetMassData(Alis.Core.Physic.Collision.Shapes.MassData@)">
            <summary>
                Gets the mass data using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ResetDynamics">
            <summary>Resets the dynamics of this body. Sets torque, force and linear/angular velocity to 0</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.AddFixture(Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Creates a fixture and attach it to this body. If the density is non-zero, this function automatically updates
                the mass of the body. Contacts are not created until the next time step. Warning: This function is locked during
                callbacks.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.AddFixture(Alis.Core.Physic.Collision.Shapes.AShape)">
            <summary>
                Creates a fixture and attach it to this body. If the density is non-zero, this function automatically updates
                the mass of the body. Contacts are not created until the next time step. Warning: This function is locked during
                callbacks.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.RemoveFixture(Alis.Core.Physic.Dynamics.Fixture)">
            <summary>
                Destroy a fixture. This removes the fixture from the broad-phase and destroys all contacts associated with
                this fixture. This will automatically adjust the mass of the body if the body is dynamic and the fixture has
                positive
                density. All fixtures attached to a body are implicitly destroyed when the body is destroyed. Warning: This
                function is
                locked during callbacks.
            </summary>
            <param name="fixture">The fixture to be removed.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetTransform(Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies.
                Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="position">The world position of the body's local origin.</param>
            <param name="rotation">The world rotation in radians.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetTransform(Alis.Core.Aspect.Math.Vector.Vector2@,System.Single)">
            <summary>
                Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies.
                Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="position">The world position of the body's local origin.</param>
            <param name="rotation">The world rotation in radians.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetTransform(Alis.Core.Aspect.Math.Transform@)">
            <summary>Get the body transform for the body's origin.</summary>
            <param name="transform">The transform of the body's origin.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyForce(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque
                and affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyForce(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Applies a force at the center of mass.</summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyForce(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Applies a force at the center of mass.</summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyForce(Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque
                and affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyTorque(System.Single)">
            <summary>Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass.</summary>
            <param name="torque">The torque about the z-axis (out of the screen), usually in N-m.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyLinearImpulse(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Apply an impulse at a point. This immediately modifies the velocity. This wakes up the body.</summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyLinearImpulse(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if
                the point of application is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyLinearImpulse(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Apply an impulse at a point. This immediately modifies the velocity. This wakes up the body.</summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyLinearImpulse(Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if
                the point of application is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ApplyAngularImpulse(System.Single)">
            <summary>Apply an angular impulse.</summary>
            <param name="impulse">The angular impulse in units of kg*m*m/s.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ResetMassData">
            <summary>
                This resets the mass properties to the sum of the mass properties of the fixtures. This normally does not need
                to be called unless you called SetMassData to override the mass and you later want to reset the mass.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldPoint(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Get the world coordinates of a point given the local coordinates.</summary>
            <param name="localPoint">A point on the body measured relative the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldPoint(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Get the world coordinates of a point given the local coordinates.</summary>
            <param name="localPoint">A point on the body measured relative the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldVector(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Get the world coordinates of a vector given the local coordinates. Note that the vector only takes the
                rotation into account, not the position.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetWorldVector(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Get the world coordinates of a vector given the local coordinates.</summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalPoint(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Gets a local point relative to the body's origin given a world point. Note that the vector only takes the
                rotation into account, not the position.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalPoint(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Gets a local point relative to the body's origin given a world point.</summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalVector(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Gets a local vector given a world vector. Note that the vector only takes the rotation into account, not the
                position.
            </summary>
            <param name="worldVector">A vector in world coordinates.</param>
            <returns>The corresponding local vector.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLocalVector(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Gets a local vector given a world vector. Note that the vector only takes the rotation into account, not the
                position.
            </summary>
            <param name="worldVector">A vector in world coordinates.</param>
            <returns>The corresponding local vector.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocityFromWorldPoint(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Get the world linear velocity of a world point attached to this body.</summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocityFromWorldPoint(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Get the world linear velocity of a world point attached to this body.</summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocityFromLocalPoint(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Get the world velocity of a local point.</summary>
            <param name="localPoint">A point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.GetLinearVelocityFromLocalPoint(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Get the world velocity of a local point.</summary>
            <param name="localPoint">A point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SynchronizeFixtures">
            <summary>
                Synchronizes the fixtures
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SynchronizeTransform">
            <summary>
                Synchronizes the transform
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ShouldCollide(Alis.Core.Physic.Dynamics.Body)">
            <summary>This is used to prevent connected bodies from colliding. It may lie, depending on the collideConnected flag.</summary>
            <param name="other">The other body.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ClearFlags">
            <summary>
                Initializes a new instance of the <see cref="M:Alis.Core.Physic.Dynamics.Body.ClearFlags" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.Advance(System.Single)">
            <summary>
                Advances the alpha
            </summary>
            <param name="alpha">The alpha</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.ClearForces">
            <summary>
                Clears the forces
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.CheckOutRange">
            <summary>
                Checks the out range
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Body.SetAlphaToZero">
            <summary>
                Sets the alpha to zero
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BodyHelper">
            <summary>
                The body helper class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BodyHelper.AdvanceBody(Alis.Core.Physic.Collision.ContactSystem.ContactManager,Alis.Core.Physic.Dynamics.Solver.Island,Alis.Core.Physic.Collision.ContactSystem.Contact,System.Single)">
            <summary>
                Advances the body using the specified contact manager
            </summary>
            <param name="contactManager">The contact manager</param>
            <param name="island">The island</param>
            <param name="minContact">The min contact</param>
            <param name="minAlpha">The min alpha</param>
            <returns>The bodies</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BodyHelper.AdvanceBodies(Alis.Core.Physic.Collision.ContactSystem.Contact,System.Single)">
            <summary>
                Advances the bodies using the specified min contact
            </summary>
            <param name="minContact">The min contact</param>
            <param name="minAlpha">The min alpha</param>
            <returns>The bodies</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BodyHelper.UpdateContact(Alis.Core.Physic.Collision.ContactSystem.ContactManager,Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Updates the contact using the specified contact manager
            </summary>
            <param name="contactManager">The contact manager</param>
            <param name="minContact">The min contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BodyHelper.CheckContactSolid(Alis.Core.Physic.Collision.ContactSystem.Contact,Alis.Core.Physic.Dynamics.Body[],Alis.Core.Physic.Collision.TOI.Sweep,Alis.Core.Physic.Collision.TOI.Sweep)">
            <summary>
                Describes whether check contact solid
            </summary>
            <param name="minContact">The min contact</param>
            <param name="bodies">The bodies</param>
            <param name="backup1">The backup</param>
            <param name="backup2">The backup</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BodyHelper.BuildIsland(Alis.Core.Physic.Dynamics.Solver.Island,Alis.Core.Physic.Collision.ContactSystem.Contact,Alis.Core.Physic.Dynamics.Body[])">
            <summary>
                Builds the island using the specified island
            </summary>
            <param name="island">The island</param>
            <param name="minContact">The min contact</param>
            <param name="bodies">The bodies</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BodyHelper.GetContacts(Alis.Core.Physic.Collision.ContactSystem.ContactManager,System.Single,Alis.Core.Physic.Dynamics.Body[],Alis.Core.Physic.Dynamics.Solver.Island,Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Gets the contacts using the specified contact manager
            </summary>
            <param name="contactManager">The contact manager</param>
            <param name="minAlpha">The min alpha</param>
            <param name="bodies">The bodies</param>
            <param name="island">The island</param>
            <param name="minContact">The min contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BodyHelper.ProcessBodyContacts(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Collision.ContactSystem.ContactManager,System.Single,Alis.Core.Physic.Dynamics.Solver.Island,Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Processes the body contacts using the specified body
            </summary>
            <param name="body">The body</param>
            <param name="contactManager">The contact manager</param>
            <param name="minAlpha">The min alpha</param>
            <param name="island">The island</param>
            <param name="minContact">The min contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BodyHelper.ProcessContact(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Collision.ContactSystem.ContactEdge,Alis.Core.Physic.Collision.ContactSystem.ContactManager,System.Single,Alis.Core.Physic.Dynamics.Solver.Island,Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Processes the contact using the specified body
            </summary>
            <param name="body">The body</param>
            <param name="ce">The ce</param>
            <param name="contactManager">The contact manager</param>
            <param name="minAlpha">The min alpha</param>
            <param name="island">The island</param>
            <param name="minContact">The min contact</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BodySettings">
            <summary>
                The body flags enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodySettings.None">
            <summary>
                The unknown body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodySettings.IslandFlag">
            <summary>
                The island flag body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodySettings.AwakeFlag">
            <summary>
                The awake flag body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodySettings.AutoSleepFlag">
            <summary>
                The auto sleep flag body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodySettings.BulletFlag">
            <summary>
                The bullet flag body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodySettings.FixedRotationFlag">
            <summary>
                The fixed rotation flag body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodySettings.Enabled">
            <summary>
                The enabled body flags
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodySettings.IgnoreCcd">
            <summary>
                The ignore ccd body flags
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BodyType">
            <summary>The body type.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyType.Static">
            <summary>Zero velocity, may be manually moved. Note: even static bodies have mass.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyType.Kinematic">
            <summary>Zero mass, non-zero velocity set by user, moved by solver</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BodyType.Dynamic">
            <summary>Positive mass, non-zero velocity determined by forces, moved by solver</summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.BreakableBody">
            <summary>A type of body that supports multiple fixtures that can break apart.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BreakableBody.world">
            <summary>
                The world
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BreakableBody.angularVelocitiesCache">
            <summary>
                The angular velocities cache
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BreakableBody.breakable">
            <summary>
                The break
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.BreakableBody.velocitiesCache">
            <summary>
                The vector
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.#ctor(Alis.Core.Physic.World,System.Collections.Generic.ICollection{Alis.Core.Physic.Shared.Vertices},System.Single,Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.BreakableBody" /> class
            </summary>
            <param name="world">The world</param>
            <param name="parts">The parts</param>
            <param name="density">The density</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.#ctor(Alis.Core.Physic.World,System.Collections.Generic.IEnumerable{Alis.Core.Physic.Collision.Shapes.AShape},Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.BreakableBody" /> class
            </summary>
            <param name="world">The world</param>
            <param name="shapes">The shapes</param>
            <param name="position">The position</param>
            <param name="rotation">The rotation</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.BreakableBody.Strength">
            <summary>The force needed to break the body apart. Default: 500</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.BreakableBody.Broken">
            <summary>
                Gets or sets the value of the broken
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.BreakableBody.MainBody">
            <summary>
                Gets the value of the main body
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.BreakableBody.Parts">
            <summary>
                Gets the value of the parts
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.PostSolve(Alis.Core.Physic.Collision.ContactSystem.Contact,Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint)">
            <summary>
                Posts the solve using the specified contact
            </summary>
            <param name="contact">The contact</param>
            <param name="impulse">The impulse</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.Update">
            <summary>
                Updates this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.Decompose">
            <summary>
                Decomposes this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.BreakableBody.Break">
            <summary>
                Breaks this instance
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Fixture">
            <summary>
                A fixture is used to attach a Shape to a body for collision detection. A fixture inherits its transform from
                its parent. Fixtures hold additional non-geometric data such as friction, collision filters, etc. Fixtures are
                created
                via Body.CreateFixture. Warning: You cannot reuse fixtures.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.CollidesWithprivate">
            <summary>
                The collides with
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.CollisionCategoriesprivate">
            <summary>
                The collision categories
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.CollisionGroupPrivate">
            <summary>
                The collision group
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Fixture.IsSensorPrivate">
            <summary>
                The is sensor
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.#ctor(Alis.Core.Physic.Collision.Shapes.AShape,Alis.Core.Physic.Collision.Filtering.Filter,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Fixture" /> class
            </summary>
            <param name="shape">The shape</param>
            <param name="filter">The filter</param>
            <param name="friction">The friction</param>
            <param name="restitution">The restitution</param>
            <param name="restitutionThreshold">The restitution threshold</param>
            <param name="isSensor">The is sensor</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.AfterCollision">
            <summary>Fires after two shapes has collided and are solved. This gives you a chance to get the impact force.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.BeforeCollision">
            <summary>
                Fires when two fixtures are close to each other. Due to how the broadphase works, this can be quite inaccurate
                as shapes are approximated using AABBs.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.OnCollision">
            <summary>
                Fires when two shapes collide and a contact is created between them. Note that the first fixture argument is
                always the fixture that the delegate is subscribed to.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.OnSeparation">
            <summary>
                Fires when two shapes separate and a contact is removed between them. Note: This can in some cases be called
                multiple times, as a fixture can have multiple contacts. Note The first fixture argument is always the fixture that
                the
                delegate is subscribed to.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Filter">
            <summary>Contact filtering data.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.IgnoreCcdWith">
            <summary>
                Gets or sets the value of the ignore ccd with
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Proxies">
            <summary>
                Gets the value of the proxies
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.ProxyCount">
            <summary>
                Gets the value of the proxy count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.RestitutionThreshold">
            <summary>Get or set the restitution threshold. This will _not_ change the restitution threshold of existing contacts.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.CollisionGroup">
            <summary>
                Defaults to 0 If Settings.UseFPECollisionCategories is set to false: Collision groups allow a certain group of
                objects to never collide (negative) or always collide (positive). Zero means no collision group. Non-zero group
                filtering always wins against the mask bits. If Settings.UseFPECollisionCategories is set to true: If 2 fixtures
                are in
                the same collision group, they will not collide.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.CollidesWith">
            <summary>
                Defaults to Category.All The collision mask bits. This states the categories that this fixture would accept
                for collision. Use Settings.UseFPECollisionCategories to change the behavior.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.CollisionCategories">
            <summary>
                The collision categories this fixture is a part of. If Settings.UseFPECollisionCategories is set to false:
                Defaults to Category.Cat1 If Settings.UseFPECollisionCategories is set to true: Defaults to Category.All
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Shape">
            <summary>
                Get the child Shape. You can modify the child Shape, however you should not change the number of vertices
                because this will crash some collision caching mechanisms.
            </summary>
            <value>The shape.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.IsSensor">
            <summary>Gets or sets a value indicating whether this fixture is a sensor.</summary>
            <value><c>true</c> if this instance is a sensor; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Body">
            <summary>Get the parent body of this fixture. This is null if the fixture is not attached.</summary>
            <value>The body.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Friction">
            <summary>Set the coefficient of friction. This will _not_ change the friction of existing contacts.</summary>
            <value>The friction.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Fixture.Restitution">
            <summary>Set the coefficient of restitution. This will not change the restitution of existing contacts.</summary>
            <value>The restitution.</value>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.Refilter">
            <summary>
                Contacts are persistent and will keep being persistent unless they are flagged for filtering. This methods
                flags all contacts associated with the body for filtering.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.TestPoint(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Test a point for containment in this fixture.</summary>
            <param name="point">A point in world coordinates.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.RayCast(Alis.Core.Physic.Collision.RayCast.RayCastOutput@,Alis.Core.Physic.Collision.RayCast.RayCastInput@,System.Int32)">
            <summary>Cast a ray against this Shape.</summary>
            <param name="output">The ray-cast results.</param>
            <param name="input">The ray-cast input parameters.</param>
            <param name="childIndex">Index of the child.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.GetAabb(Alis.Core.Physic.Shared.Aabb@,System.Int32)">
            <summary>
                Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a more accurate AABB, compute it
                using the Shape and the body transform.
            </summary>
            <param name="aabb">The AABB.</param>
            <param name="childIndex">Index of the child.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.Destroy">
            <summary>
                Destroys this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.CreateProxies(Alis.Core.Physic.Collision.BroadPhase.IBroadPhase,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Creates the proxies using the specified broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="xf">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.DestroyProxies(Alis.Core.Physic.Collision.BroadPhase.IBroadPhase)">
            <summary>
                Destroys the proxies using the specified broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Fixture.Synchronize(Alis.Core.Physic.Collision.BroadPhase.IBroadPhase,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Synchronizes the broad phase
            </summary>
            <param name="broadPhase">The broad phase</param>
            <param name="transform1">The transform</param>
            <param name="transform2">The transform</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.FixtureProxy">
            <summary>This proxy is used internally to connect fixtures to the broad-phase.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.FixtureProxy.Aabb">
            <summary>
                The aabb
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.FixtureProxy.ChildIndex">
            <summary>
                The child index
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.FixtureProxy.Fixture">
            <summary>
                The fixture
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.FixtureProxy.ProxyId">
            <summary>
                The proxy id
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.BodyHandler">
            <summary>
                The body handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.FixtureHandler">
            <summary>
                The fixture handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.JointHandler">
            <summary>
                The joint handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.PostSolveHandler">
            <summary>
                The post solve handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Handlers.PreSolveHandler">
            <summary>
                The pre solve handler
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.AngleJoint">
            <summary>Maintains a fixed angle between two bodies</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.bias">
            <summary>
                The bias
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.jointError">
            <summary>
                The joint error
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.massFactor">
            <summary>
                The mass factor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.AngleJoint.targetAngle">
            <summary>
                The target angle
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.AngleJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.TargetAngle">
            <summary>The desired angle between BodyA and BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.BiasFactor">
            <summary>Gets or sets the bias factor. Defaults to 0.2</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.Impulse">
            <summary>Gets or sets the maximum impulse. Defaults to float.MaxValue</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.AngleJoint.Softness">
            <summary>Gets or sets the softness of the joint. Defaults to 0</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.AngleJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.DistanceJoint">
            <summary>
                A distance joint constrains two points on two bodies to remain at a fixed distance from each other. You can
                view this as a massless, rigid rod.
                1-D constrained system
                m (v2 - v1) = lambda
                v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.
                x2 = x1 + h * v2
                1-D mass-damper-spring system
                m (v2 - v1) + h * d * v2 + h * k *
                C = norm(p2 - p1) - L
                u = (p2 - p1) / norm(p2 - p1)
                dot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))
                J = [-u -cross(r1, u) u cross(r2, u)]
                K = J * invM * JT
                = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.lengthPrivate">
            <summary>
                The length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.bias">
            <summary>
                The bias
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.currentLength">
            <summary>
                The current length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.damping">
            <summary>
                The damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.lowerImpulse">
            <summary>
                The lower impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.maxLength">
            <summary>
                The max length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.minLength">
            <summary>
                The min length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.softMass">
            <summary>
                The soft mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.stiffness">
            <summary>
                The stiffness
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.u">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.upperImpulse">
            <summary>
                The upper impulse
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType,System.Boolean,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.DistanceJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The type</param>
            <param name="collideConnected">The collide connected</param>
            <param name="localAnchorA">The local anchor</param>
            <param name="localAnchorB">The local anchor</param>
            <param name="length">The length</param>
            <param name="minLength">The min length</param>
            <param name="maxLength">The max length</param>
            <param name="stiffness">The stiffness</param>
            <param name="damping">The damping</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean)">
            <summary>
                This requires defining an anchor point on both bodies and the non-zero length of the distance joint. If you
                don't supply a length, the local anchor points is used so that the initial configuration can violate the constraint
                slightly. This helps when saving and loading a game. Warning Do not use a zero or short length.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchorA">The first body anchor</param>
            <param name="anchorB">The second body anchor</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.LocalAnchorA">
            <summary>The local anchor point relative to bodyA's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.LocalAnchorB">
            <summary>The local anchor point relative to bodyB's origin.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.WorldAnchorA">
            <summary>The anchor on <see cref="P:Alis.Core.Physic.Dynamics.Joints.Joint.BodyA" /> in world coordinates</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.WorldAnchorB">
            <summary>The anchor on <see cref="P:Alis.Core.Physic.Dynamics.Joints.Joint.BodyB" /> in world coordinates</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Stiffness">
            <summary>Set/get the linear stiffness in N/m</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Damping">
            <summary>Set/get linear damping in N*s/m</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.MinLength">
            <summary>Minimum length. Clamped to a stable minimum value.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.Length">
            <summary>Maximum length. Must be greater than or equal to the minimum length.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.GetReactionForce(System.Single)">
            <summary>Get the reaction force given the inverse time step. Unit is N.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.GetReactionTorque(System.Single)">
            <summary>Get the reaction torque given the inverse time step. Unit is N*m. This is always zero for a distance joint.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.DistanceJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint">
            <summary>
                A mouse joint is used to make a point on a body track a specified world point. This a soft constraint with a
                maximum force. This allows the constraint to stretch and without applying huge forces. NOTE: this joint is not
                documented in the manual because it was developed to be used in the testbed. If you want to learn how to use the
                mouse
                joint, look at the testbed.
                p = attached point, m = mouse point
                C = p - m
                cDot = v
                = v + cross(w, r)
                J = [I r_skew]
                Identity used:
                w k % (rx i + ry j) = w * (-ry i + rx j)
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.beta">
            <summary>
                The beta
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.c">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.targetB">
            <summary>
                The target
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType,System.Boolean,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The joint type</param>
            <param name="collideConnected">The collide connected</param>
            <param name="target">The target</param>
            <param name="maxForce">The max force</param>
            <param name="stiffness">The stiffness</param>
            <param name="damping">The damping</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>This requires a world target point, tuning parameters, and the time step.</summary>
            <param name="body">The body.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.LocalAnchorA">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.WorldAnchorA">
            <summary>Use this to update the target point.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.Force">
            <summary>
                The maximum constraint force that can be exerted to move the candidate body. Usually you will express as some
                multiple of the weight (multiplier * mass * gravity). Set/get the maximum force in Newtons.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.Stiffness">
            <summary>Set/get the linear stiffness in N/m</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.Damping">
            <summary>Set/get linear damping in N*s/m</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.ShiftOrigin(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Shifts the origin using the specified new origin
            </summary>
            <param name="newOrigin">The new origin</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.FrictionJoint">
            <summary>
                Friction joint. This is used for top-down friction. It provides 2D translational friction and angular
                friction.
                Point-to-point constraint
                cDot = v2 - v1
                = v2 + cross(w2, r2) - v1 - cross(w1, r1)
                J = [-I -r1_skew I r2_skew ]
                Identity used:
                w k % (rx i + ry j) = w * (-ry i + rx j)
                Angle constraint
                cDot = w2 - w1
                J = [0 0 -1 0 0 1]
                K = invI1 + invI2
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.angularImpulse">
            <summary>
                The angular impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.angularMass">
            <summary>
                The angular mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.linearImpulse">
            <summary>
                The linear impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.linearMass">
            <summary>
                The linear mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType,System.Boolean,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.FrictionJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The joint type</param>
            <param name="collideConnected">The collide connected</param>
            <param name="localAnchorA">The local anchor</param>
            <param name="localAnchorB">The local anchor</param>
            <param name="maxForce">The max force</param>
            <param name="maxTorque">The max torque</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean)">
            <summary>Constructor for FrictionJoint.</summary>
            <param name="bodyA"></param>
            <param name="bodyB"></param>
            <param name="anchor"></param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.Force">
            <summary>The maximum friction force in N.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.Torque">
            <summary>The maximum friction torque in N-m.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data.
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.SolveAngularFriction(System.Single@,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
                Solves the angular friction using the specified v a
            </summary>
            <param name="wA">The </param>
            <param name="wB">The </param>
            <param name="iA">The </param>
            <param name="iB">The </param>
            <param name="h">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.SolveLinearFriction(Alis.Core.Aspect.Math.Vector.Vector2@,System.Single@,Alis.Core.Aspect.Math.Vector.Vector2@,System.Single@,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Solves the linear friction using the specified v a
            </summary>
            <param name="vA">The </param>
            <param name="wA">The </param>
            <param name="vB">The </param>
            <param name="wB">The </param>
            <param name="mA">The </param>
            <param name="mB">The </param>
            <param name="iA">The </param>
            <param name="iB">The </param>
            <param name="h">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.FrictionJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.GearJoint">
            <summary>
                A gear joint is used to connect two joints together. Either joint can be a revolute or prismatic joint. You specify
                a
                gear ratio to bind the motions together:
                <![CDATA[coordinate1 + ratio * coordinate2 = ant]]>
                The ratio can be negative or positive. If one joint is a revolute joint and the other joint is a prismatic joint,
                then
                the ratio will have units of length or units of 1/length. Warning: You have to manually destroy the gear joint if
                jointA or jointB is destroyed.
                Gear Joint:
                C0 = (coordinate1 + ratio * coordinate2)_initial
                C = (coordinate1 + ratio * coordinate2) - C0 = 0
                J = [J1 ratio * J2]
                K = J * invM * JT
                = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T
                Revolute:
                coordinate = rotation
                Cdo = angularVelocity
                J = [0 0 1]
                K = J * invM * JT = invI
                Prismatic:
                coordinate = dot(p - pg, ug)
                Cdo = dot(v + cross(w, r), ug)
                J = [ug cross(r, ug)]
                K = J * invM * JT = invMass + invI * cross(r, ug)^2
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.bodyC">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.bodyD">
            <summary>
                The body
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.constant">
            <summary>
                The constant
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jointA">
            <summary>
                The joint
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jointB">
            <summary>
                The joint
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.typeA">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.typeB">
            <summary>
                The type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.iA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.iB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.iC">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.iD">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.indexC">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.indexD">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jvAc">
            <summary>
                The jv bd
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jvBd">
            <summary>
                The jv bd
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jwA">
            <summary>
                The jw
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jwB">
            <summary>
                The jw
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jwC">
            <summary>
                The jw
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.jwD">
            <summary>
                The jw
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.lcA">
            <summary>
                The lc
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.lcB">
            <summary>
                The lc
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.lcC">
            <summary>
                The lc
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.lcD">
            <summary>
                The lc
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAnchorC">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAnchorD">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAxisC">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.localAxisD">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.mA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.mB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.mC">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.mD">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.ratio">
            <summary>
                The ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.referenceAngleA">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.GearJoint.referenceAngleB">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.Joint,Alis.Core.Physic.Dynamics.Joints.Joint,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.GearJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointA">The joint</param>
            <param name="jointB">The joint</param>
            <param name="ratio">The ratio</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.Ratio">
            <summary>The gear ratio.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.JointA">
            <summary>The first revolute/prismatic joint attached to the gear joint.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.GearJoint.JointB">
            <summary>The second revolute/prismatic joint attached to the gear joint.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetCoordinateA">
            <summary>
                Gets the coordinate a
            </summary>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetCoordinateAForRevoluteJoint(System.Single,System.Single)">
            <summary>
                Gets the coordinate a for revolute joint using the specified a a
            </summary>
            <param name="aA">The </param>
            <param name="aC">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetCoordinateAForPrismaticJoint(Alis.Core.Aspect.Math.Transform,Alis.Core.Aspect.Math.Transform)">
            <summary>
                Gets the coordinate a for prismatic joint using the specified xf a
            </summary>
            <param name="xfA">The xf</param>
            <param name="xfC">The xf</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetCoordinateB">
            <summary>
                Gets the coordinate b
            </summary>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetCoordinateBForRevoluteJoint(System.Single,System.Single)">
            <summary>
                Gets the coordinate b for revolute joint using the specified a b
            </summary>
            <param name="aB">The </param>
            <param name="aD">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetCoordinateBForPrismaticJoint(Alis.Core.Aspect.Math.Transform,Alis.Core.Aspect.Math.Transform)">
            <summary>
                Gets the coordinate b for prismatic joint using the specified xf b
            </summary>
            <param name="xfB">The xf</param>
            <param name="xfD">The xf</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.GearJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.Joint">
            <summary>
                The joint class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.Joint._jointType">
            <summary>
                The joint type
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.#ctor(Alis.Core.Physic.Dynamics.Joints.JointType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.Joint" /> class
            </summary>
            <param name="jointType">The joint type</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.Joint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The joint type</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType)">
            <summary>Constructor for fixed joint</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.Joint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The type</param>
            <param name="collideConnected">The collide connected</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.EdgeA">
            <summary>
                The joint edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.EdgeB">
            <summary>
                The joint edge
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.IslandFlag">
            <summary>
                The island flag
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.JointType">
            <summary>Gets or sets the type of the joint.</summary>
            <value>The type of the joint.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Enabled">
            <summary>
                Gets or sets the value of the enabled
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.BodyA">
            <summary>Get the first body attached to this joint.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.BodyB">
            <summary>Get the second body attached to this joint.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.WorldAnchorA">
            <summary>
                Get the anchor point on bodyA in world coordinates. On some joints, this value indicate the anchor point
                within the world.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.WorldAnchorB">
            <summary>
                Get the anchor point on bodyB in world coordinates. On some joints, this value indicate the anchor point
                within the world.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.UserData">
            <summary>Set the user data pointer.</summary>
            <value>The data.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.CollideConnected">
            <summary>Set this flag to true if the attached bodies should collide.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.Joint.Breakpoint">
            <summary>
                The Breakpoint simply indicates the maximum Value the JointError can be before it breaks. The default value is
                float.MaxValue, which means it never breaks.
            </summary>
        </member>
        <member name="E:Alis.Core.Physic.Dynamics.Joints.Joint.Broke">
            <summary>Fires when the joint is broken.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.GetReactionForce(System.Single)">
            <summary>Get the reaction force on body at the joint anchor in Newtons.</summary>
            <param name="invDt">The inverse delta time.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.GetReactionTorque(System.Single)">
            <summary>Get the reaction torque on the body at the joint anchor in N*m.</summary>
            <param name="invDt">The inverse delta time.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.ShiftOrigin(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Shift the origin for any points stored in world coordinates.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.WakeBodies">
            <summary>
                Wakes the bodies
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.IsFixedType">
            <summary>Return true if the joint is a fixed type.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.Validate(System.Single)">
            <summary>
                Validates the inv dt
            </summary>
            <param name="invDt">The inv dt</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>Solves the position constraints.</summary>
            <param name="data"></param>
            <returns>returns true if the position errors are within tolerance.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.Joint.DisableIslandFlag">
            <summary>
                Disables the island flag
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.JointEdge">
            <summary>
                A joint edge is used to connect bodies and joints together in a joint graph where each body is a node and each
                joint is an edge. A joint edge belongs to a doubly linked list maintained in each attached body. Each joint has two
                joint nodes, one for each attached body.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.JointEdge.Joint1">
            <summary>The joint.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.JointEdge.Next">
            <summary>The next joint edge in the body's joint list.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.JointEdge.Other">
            <summary>Provides quick access to the other body attached.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.JointEdge.Prev">
            <summary>The previous joint edge in the body's joint list.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.JointType">
            <summary>
                The joint type enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Unknown">
            <summary>
                The unknown joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Revolute">
            <summary>
                The revolute joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Prismatic">
            <summary>
                The prismatic joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Distance">
            <summary>
                The distance joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Pulley">
            <summary>
                The pulley joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Gear">
            <summary>
                The gear joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Wheel">
            <summary>
                The wheel joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Weld">
            <summary>
                The weld joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Friction">
            <summary>
                The friction joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Motor">
            <summary>
                The motor joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.Angle">
            <summary>
                The angle joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.FixedMouse">
            <summary>
                The fixed mouse joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.FixedRevolute">
            <summary>
                The fixed revolute joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.FixedDistance">
            <summary>
                The fixed distance joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.FixedLine">
            <summary>
                The fixed line joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.FixedPrismatic">
            <summary>
                The fixed prismatic joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.FixedAngle">
            <summary>
                The fixed angle joint type
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.JointType.FixedFriction">
            <summary>
                The fixed friction joint type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.LimitState">
            <summary>
                The limit state enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LimitState.Inactive">
            <summary>
                The inactive limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LimitState.AtLower">
            <summary>
                The at lower limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LimitState.AtUpper">
            <summary>
                The at upper limit state
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.LimitState.Equal">
            <summary>
                The equal limit state
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.MotorJoint">
            <summary>
                A motor joint is used to control the relative motion between two bodies. A typical usage is to control the
                movement of a dynamic body with respect to the ground.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.angularError">
            <summary>
                The angular error
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.angularImpulse">
            <summary>
                The angular impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.angularMass">
            <summary>
                The angular mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.angularOffset">
            <summary>
                The angular offset
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.linearError">
            <summary>
                The linear error
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.linearImpulse">
            <summary>
                The linear impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.linearMass">
            <summary>
                The linear mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.linearOffset">
            <summary>
                The linear offset
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.maxForce">
            <summary>
                The max force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.MotorJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType,System.Boolean,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.MotorJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The joint type</param>
            <param name="collideConnected">The collide connected</param>
            <param name="linearOffset">The linear offset</param>
            <param name="angularOffset">The angular offset</param>
            <param name="maxForce">The max force</param>
            <param name="maxTorque">The max torque</param>
            <param name="correctionFactor">The correction factor</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,System.Boolean)">
            <summary>Constructor for MotorJoint.</summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.Force">
            <summary>Get/set the maximum friction force in N.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.Torque">
            <summary>Get/set the maximum friction torque in N*m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.CorrectionFactor">
            <summary>
                Get/set the position correction factor in the range [0,1].
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.LinearOffset">
            <summary>The linear (translation) offset.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.MotorJoint.AngularOffset">
            <summary>Get or set the angular offset.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.MotorJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint">
            <summary>
                A prismatic joint. This joint provides one degree of freedom: translation along an axis fixed in bodyA.
                Relative rotation is prevented. You can use a joint limit to restrict the range of motion and a joint motor to
                drive
                the motion or to model joint friction.
                Linear constraint (point-to-line)
                d = p2 - p1 = x2 + r2 - x1 - r1
                C = dot(perp, d)
                Cdo = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 - cross(w1, r1))
                = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) + dot(cross(r2, perp), v2)
                J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]
                Angular constraint
                C = a2 - a1 + a_initial
                Cdo = w2 - w1
                J = [0 0 -1 0 0 1]
                K = J * invM * JT
                J = [-a -s1 a s2]
                [0  -1  0  1]
                a = perp
                s1 = cross(d + r1, a) = cross(p2 - x1, a)
                s2 = cross(r2, a) = cross(p2 - x2, a)
                Motor/Limit linear constraint
                C = dot(ax1, d)
                Cdo = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) + dot(cross(r2, ax1), v2)
                J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]
                Predictive limit is applied even when the limit is not active.
                Prevents a constraint speed that can lead to a constraint error in one time step.
                Want C2 = C1 + h * Cdo >= 0
                Or:
                Cdo + C1/h >= 0
                I do not apply a negative constraint error because that is handled in position correction.
                So:
                Cdo + max(C1, 0)/h >= 0
                Block Solver
                We develop a block solver that includes the angular and linear constraints. This makes the limit stiffer.
                The Jacobin has 2 rows:
                J = [-uT -s1 uT s2] /// linear
                [0   -1   0  1] /// angular
                u = perp
                s1 = cross(d + r1, u), s2 = cross(r2, u)
                a1 = cross(d + r1, v), a2 = cross(r2, v)
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.a1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.a2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.axialMass">
            <summary>
                The axial mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.axis">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.perp">
            <summary>
                The perp
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.enableLimit">
            <summary>
                The enable limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.enableMotor">
            <summary>
                The enable motor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.k">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.localYAxisA">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.lowerImpulse">
            <summary>
                The lower impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.lowerTranslation">
            <summary>
                The lower translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.maxMotorForce">
            <summary>
                The max motor force
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.motorImpulse">
            <summary>
                The motor impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.motorSpeed">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.s1">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.s2">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.translation">
            <summary>
                The translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.upperImpulse">
            <summary>
                The upper impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.upperTranslation">
            <summary>
                The upper translation
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean)">
            <summary>
                This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor
                points and a local axis so that the initial configuration can violate the constraint slightly. The joint
                translation is
                zero when the local anchor points coincide in world space. Using local anchors and a local axis helps when saving
                and
                loading a game.
            </summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second body anchor.</param>
            <param name="axis">The axis.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="anchor">The anchor</param>
            <param name="axis">The axis</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType,System.Boolean,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Boolean,System.Single,System.Single,System.Boolean,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The joint type</param>
            <param name="collideConnected">The collide connected</param>
            <param name="localAnchorA">The local anchor</param>
            <param name="localAnchorB">The local anchor</param>
            <param name="localAxisA">The local axis</param>
            <param name="referenceAngle">The reference angle</param>
            <param name="enableLimit">The enable limit</param>
            <param name="lowerTranslation">The lower translation</param>
            <param name="upperTranslation">The upper translation</param>
            <param name="enableMotor">The enable motor</param>
            <param name="maxMotorForce">The max motor force</param>
            <param name="motorSpeed">The motor speed</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.JointTranslation">
            <summary>Get the current joint translation, usually in meters.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.JointSpeed">
            <summary>Get the current joint translation speed, usually in meters per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LimitEnabled">
            <summary>Is the joint limit enabled?</summary>
            <value><c>true</c> if [limit enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LowerLimit">
            <summary>Get the lower joint limit, usually in meters.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.UpperLimit">
            <summary>Get the upper joint limit, usually in meters.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.MotorEnabled">
            <summary>Is the joint motor enabled?</summary>
            <value><c>true</c> if [motor enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.MotorSpeed">
            <summary>Set the motor speed, usually in meters per second.</summary>
            <value>The speed.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.MotorForce">
            <summary>Set the maximum motor force, usually in N.</summary>
            <value>The force.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalXAxisA">
            <summary>The local joint axis relative to bodyA.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.LocalYAxisA">
            <summary>
                Gets the value of the local y axis a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.ReferenceAngle">
            <summary>Get the reference angle.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.GetMotorForce(System.Single)">
            <summary>Get the current motor force given the inverse time step, usually in N.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.SetLimits(System.Single,System.Single)">
            <summary>Set the joint limits, usually in meters.</summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
                A velocity based solver computes reaction forces(impulses) using the velocity constraint solver. Under this
                context,
                the position solver is not there to resolve forces. It is only there to cope with integration error.
                Therefore, the pseudo impulses in the position solver do not have any physical meaning. Thus it is okay if they
                suck.
                We could take the active state from the velocity solver. However, the joint might push past the limit when the
                velocity
                solver indicates the limit is inactive.
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.Initialize(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean)">
            <summary>
                Initializes the local anchor a
            </summary>
            <param name="vector2AnchorA">The local anchor</param>
            <param name="vector2AnchorB">The local anchor</param>
            <param name="vector2Axis">The axis</param>
            <param name="useWorldCoordinates">The use world coordinates</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.PulleyJoint">
            <summary>
                The pulley joint is connected to two bodies and two fixed world points. The pulley supports a ratio such that:
                <![CDATA[length1 + ratio * length2 <= constant]]>
                Yes, the force transmitted is scaled by the ratio. Warning: the pulley joint can get a bit squirrelly by itself.
                They
                often work better when combined with prismatic joints. You should also cover the the anchor points with static
                shapes
                to prevent one side from going to zero length.
                Pulley:
                length1 = norm(p1 - s1)
                length2 = norm(p2 - s2)
                C0 = (length1 + ratio * length2)_initial
                C = C0 - (length1 + ratio * length2)
                u1 = (p1 - s1) / norm(p1 - s1)
                u2 = (p2 - s2) / norm(p2 - s2)
                cDot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))
                J = -[u1 cross(r1, u1) ratio * u2  ratio * cross(r2, u2)]
                K = J * invM * JT
                = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 * cross(r2, u2)^2)
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.constant">
            <summary>
                The constant
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.lengthA">
            <summary>
                The length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.lengthB">
            <summary>
                The length
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.ratio">
            <summary>
                The ratio
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.uA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.uB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.worldAnchorA">
            <summary>
                The world anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.worldAnchorB">
            <summary>
                The world anchor
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType,System.Boolean,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.PulleyJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The joint type</param>
            <param name="collideConnected">The collide connected</param>
            <param name="groundAnchorA">The ground anchor</param>
            <param name="groundAnchorB">The ground anchor</param>
            <param name="localAnchorA">The local anchor</param>
            <param name="localAnchorB">The local anchor</param>
            <param name="lengthA">The length</param>
            <param name="lengthB">The length</param>
            <param name="ratio">The ratio</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Boolean)">
            <summary>Constructor for PulleyJoint.</summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The anchor on the first body.</param>
            <param name="anchorB">The anchor on the second body.</param>
            <param name="worldAnchorA">The world anchor for the first body.</param>
            <param name="worldAnchorB">The world anchor for the second body.</param>
            <param name="ratio">The ratio.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.WorldAnchorA">
            <summary>Get the first world anchor.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.WorldAnchorB">
            <summary>Get the second world anchor.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LengthA">
            <summary>Get the current length of the segment attached to BodyA.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.LengthB">
            <summary>Get the current length of the segment attached to BodyB.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.CurrentLengthA">
            <summary>The current length between the anchor point on BodyA and WorldAnchorA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.CurrentLengthB">
            <summary>The current length between the anchor point on BodyB and WorldAnchorB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.Ratio">
            <summary>Get the pulley ratio.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.ShiftOrigin(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Shifts the origin using the specified new origin
            </summary>
            <param name="newOrigin">The new origin</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.PulleyJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint">
            <summary>
                A revolute joint constrains to bodies to share a common point while they are free to rotate about the point.
                The relative rotation about the shared point is the joint angle. You can limit the relative rotation with a joint
                limit
                that specifies a lower and upper angle. You can use a motor to drive the relative rotation about the shared point.
                A
                maximum motor torque is provided so that infinite forces are not generated.
                Point-to-point constraint
                C = p2 - p1
                dot = v2 - v1
                = v2 + cross(w2, r2) - v1 - cross(w1, r1)
                J = [-I -r1_skew I r2_skew ]
                Identity used:
                w k % (rx i + ry j) = w * (-ry i + rx j)
                Motor constraint
                dot = w2 - w1
                J = [0 0 -1 0 0 1]
                K = invI1 + invI2
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.angle">
            <summary>
                The angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.axialMass">
            <summary>
                The axial mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.enableLimit">
            <summary>
                The enable limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.enableMotor">
            <summary>
                The enable motor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.k">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.lowerAngle">
            <summary>
                The lower angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.lowerImpulse">
            <summary>
                The lower impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.maxMotorTorque">
            <summary>
                The max motor torque
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.motorImpulse">
            <summary>
                The motor impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.motorSpeed">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.upperAngle">
            <summary>
                The upper angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.upperImpulse">
            <summary>
                The upper impulse
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType,System.Boolean,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The joint type</param>
            <param name="collideConnected">The collide connected</param>
            <param name="localAnchorA">The local anchor</param>
            <param name="localAnchorB">The local anchor</param>
            <param name="referenceAngle">The reference angle</param>
            <param name="lowerAngle">The lower angle</param>
            <param name="upperAngle">The upper angle</param>
            <param name="motorTorque">The motor torque</param>
            <param name="motorSpeed">The motor speed</param>
            <param name="enableLimit">The enable limit</param>
            <param name="enableMotor">The enable motor</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean)">
            <summary>Constructor of RevoluteJoint.</summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second anchor.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean)">
            <summary>Constructor of RevoluteJoint.</summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchor">The shared anchor.</param>
            <param name="useWorldCoordinates"></param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.EnableLimit">
            <summary>A flag to enable joint limits.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.EnableMotor">
            <summary>A flag to enable the joint motor.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LowerAngle">
            <summary>The lower angle for the joint limit (radians).</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.UpperAngle">
            <summary>The upper angle for the joint limit (radians).</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.ReferenceAngle">
            <summary>The reference angle computed as BodyB angle minus BodyA angle.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.JointAngle">
            <summary>Get the current joint angle in radians.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.JointSpeed">
            <summary>Get the current joint angle speed in radians per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LimitEnabled">
            <summary>Is the joint limit enabled?</summary>
            <value><c>true</c> if [limit enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.LowerLimit">
            <summary>Get the lower joint limit in radians.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.UpperLimit">
            <summary>Get the upper joint limit in radians.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.MotorEnabled">
            <summary>Is the joint motor enabled?</summary>
            <value><c>true</c> if [motor enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.MotorSpeed">
            <summary>Get or set the motor speed in radians per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.MotorTorque">
            <summary>Get or set the maximum motor torque, usually in N-m.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.SetLimits(System.Single,System.Single)">
            <summary>Set the joint limits, usually in meters.</summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.GetMotorTorque(System.Single)">
            <summary>Gets the motor torque in N-m.</summary>
            <param name="invDt">The inverse delta time</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.WeldJoint">
            <summary>
                A weld joint essentially glues two bodies together. A weld joint may distort somewhat because the island
                constraint solver is approximate. The joint is soft constraint based, which means the two bodies will move relative
                to
                each other, when a force is applied. To combine two bodies in a rigid fashion, combine the fixtures to a single
                body
                instead.
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.referenceAngle">
            <summary>
                The reference angle
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.bias">
            <summary>
                The bias
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.damping">
            <summary>
                The damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.rA">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.rB">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WeldJoint.stiffness">
            <summary>
                The stiffness
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType,System.Boolean,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.WeldJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The joint type</param>
            <param name="collideConnected">The collide connected</param>
            <param name="localAnchorA">The local anchor</param>
            <param name="localAnchorB">The local anchor</param>
            <param name="referenceAngle">The reference angle</param>
            <param name="stiffness">The stiffness</param>
            <param name="damping">The damping</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean)">
            <summary>
                You need to specify an anchor point where they are attached. The position of the anchor point is important for
                computing the reaction torque.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second body anchor.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.ReferenceAngle">
            <summary>The bodyB angle minus bodyA angle in the reference state (radians).</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.Stiffness">
            <summary>
                The frequency of the joint. A higher frequency means a stiffer joint, but a too high value can cause the joint
                to oscillate. Default is 0, which means the joint does no spring calculations.
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WeldJoint.Damping">
            <summary>
                The damping on the joint. The damping is only used when the joint has a frequency (> 0). A higher value means
                more damping.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WeldJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Joints.WheelJoint">
            <summary>
                A wheel joint. This joint provides two degrees of freedom: translation along an axis fixed in bodyA and
                rotation in the plane. In other words, it is a point to line constraint with a rotational motor and a linear
                spring/damper. The spring/damper is initialized upon creation. This joint is designed for vehicle suspensions.
                Linear constraint (point-to-line)
                d = pB - pA = xB + rB - xA - rA
                C = dot(ay, d)
                Cdo = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA, rA))
                = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB, ay), vB)
                J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]
                Spring linear constraint
                C = dot(ax, d)
                Cdo = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) + dot(cross(rB, ax), vB)
                J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]
                Motor rotational constraint
                Cdo = wB - wA
                J = [0 0 -1 0 0 1]
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localXAxisA">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localYAxisA">
            <summary>
                The local axis
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.ax">
            <summary>
                The ay
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.ay">
            <summary>
                The ay
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.axialMass">
            <summary>
                The axial mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.bias">
            <summary>
                The bias
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.damping">
            <summary>
                The damping
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.enableLimit">
            <summary>
                The enable limit
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.enableMotor">
            <summary>
                The enable motor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.gamma">
            <summary>
                The gamma
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.impulse">
            <summary>
                The impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.indexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.indexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.invIa">
            <summary>
                The inv ia
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.invIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.invMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.invMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localAnchorA">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localAnchorB">
            <summary>
                The local anchor
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.localCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.lowerImpulse">
            <summary>
                The lower impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.lowerTranslation">
            <summary>
                The lower translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.mass">
            <summary>
                The mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.maxMotorTorque">
            <summary>
                The max motor torque
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.motorImpulse">
            <summary>
                The motor impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.motorMass">
            <summary>
                The motor mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.motorSpeed">
            <summary>
                The motor speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.sAx">
            <summary>
                The bx
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.sBx">
            <summary>
                The bx
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.sAy">
            <summary>
                The by
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.sBy">
            <summary>
                The by
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.springImpulse">
            <summary>
                The spring impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.springMass">
            <summary>
                The spring mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.stiffness">
            <summary>
                The stiffness
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.translation">
            <summary>
                The translation
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.upperImpulse">
            <summary>
                The upper impulse
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Joints.WheelJoint.upperTranslation">
            <summary>
                The upper translation
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean)">
            <summary>Constructor for WheelJoint</summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchor">The anchor point</param>
            <param name="axis">The axis</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.#ctor(Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Body,Alis.Core.Physic.Dynamics.Joints.JointType,System.Boolean,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean,System.Single,System.Single,System.Boolean,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Joints.WheelJoint" /> class
            </summary>
            <param name="bodyA">The body</param>
            <param name="bodyB">The body</param>
            <param name="jointType">The joint type</param>
            <param name="collideConnected">The collide connected</param>
            <param name="localAnchorA">The local anchor</param>
            <param name="localAnchorB">The local anchor</param>
            <param name="localAxisA">The local axis</param>
            <param name="enableLimit">The enable limit</param>
            <param name="lowerTranslation">The lower translation</param>
            <param name="upperTranslation">The upper translation</param>
            <param name="enableMotor">The enable motor</param>
            <param name="maxMotorTorque">The max motor torque</param>
            <param name="motorSpeed">The motor speed</param>
            <param name="stiffness">The stiffness</param>
            <param name="damping">The damping</param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LocalXAxisA">
            <summary>
                Gets the value of the local x axis a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LocalYAxisA">
            <summary>
                Gets the value of the local y axis a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LocalAnchorA">
            <summary>The local anchor point on BodyA</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LocalAnchorB">
            <summary>The local anchor point on BodyB</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.WorldAnchorA">
            <summary>
                Gets or sets the value of the world anchor a
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.WorldAnchorB">
            <summary>
                Gets or sets the value of the world anchor b
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.MotorSpeed">
            <summary>The desired motor speed in radians per second.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.MotorTorque">
            <summary>The maximum motor torque, usually in N-m.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.JointTranslation">
            <summary>Gets the translation along the axis</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.JointLinearSpeed">
            <summary>
                Gets the value of the joint linear speed
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.JointAngle">
            <summary>
                Gets the value of the joint angle
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.JointAngularSpeed">
            <summary>Gets the angular velocity of the joint</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.MotorEnabled">
            <summary>Enable/disable the joint motor.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.UpperLimit">
            <summary>
                Gets or sets the value of the upper limit
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.LowerLimit">
            <summary>
                Gets or sets the value of the lower limit
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.EnableLimit">
            <summary>
                Gets or sets the value of the enable limit
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.Damping">
            <summary>
                Gets or sets the value of the damping
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Joints.WheelJoint.Stiffness">
            <summary>
                Gets or sets the value of the stiffness
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.SetLimits(System.Single,System.Single)">
            <summary>
                Sets the limits using the specified lower
            </summary>
            <param name="lower">The lower</param>
            <param name="upper">The upper</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.GetMotorTorque(System.Single)">
            <summary>Gets the torque of the motor</summary>
            <param name="invDt">inverse delta time</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.GetReactionForce(System.Single)">
            <summary>
                Gets the reaction force using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.GetReactionTorque(System.Single)">
            <summary>
                Gets the reaction torque using the specified inv dt
            </summary>
            <param name="invDt">The inv dt</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.InitVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Inits the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.SetInitialValues">
            <summary>
                Sets the initial values using the specified data
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.CalculateDVector(Alis.Core.Physic.Dynamics.Solver.SolverData)">
            <summary>
                Calculates the d vector using the specified data
            </summary>
            <param name="data">The data</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.CalculateAyAndMass(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Dynamics.Solver.SolverData)">
            <summary>
                Calculates the ay and mass using the specified d
            </summary>
            <param name="d">The </param>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.CalculateAxAndAxialMass(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Dynamics.Solver.SolverData)">
            <summary>
                Calculates the ax and axial mass using the specified d
            </summary>
            <param name="d">The </param>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.CalculateSpringMassAndRelatedValues(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Dynamics.Solver.SolverData)">
            <summary>
                Calculates the spring mass and related values using the specified d
            </summary>
            <param name="d">The </param>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.ApplyWarmStarting(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Applies the warm starting using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.SolveVelocityConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Solves the velocity constraints using the specified data
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Joints.WheelJoint.SolvePositionConstraints(Alis.Core.Physic.Dynamics.Solver.SolverData@)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="data">The data</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint">
            <summary>
                The contact position constraint class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.LocalPoints">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.IndexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.IndexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.InvIa">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.InvIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.InvMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.InvMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.LocalCenterA">
            <summary>
                The local center
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.LocalCenterB">
            <summary>
                The local center
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.LocalNormal">
            <summary>
                The local normal
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.LocalPoint">
            <summary>
                The local point
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.PointCount">
            <summary>
                The point count
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.RadiusA">
            <summary>
                The radius
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.RadiusB">
            <summary>
                The radius
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint.Type">
            <summary>
                The type
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.ContactSolver">
            <summary>
                The contact solver class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.contacts">
            <summary>
                The contacts
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.count">
            <summary>
                The count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.positionConstraints">
            <summary>
                The position constraints
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.positions">
            <summary>
                The positions
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.step">
            <summary>
                The step
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.velocities">
            <summary>
                The velocities
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactSolver.VelocityConstraints">
            <summary>
                The velocity constraints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.Reset(Alis.Core.Aspect.Time.TimeStep,System.Int32,System.Collections.Generic.List{Alis.Core.Physic.Collision.ContactSystem.Contact},System.Collections.Generic.List{Alis.Core.Physic.Dynamics.Solver.Position},System.Collections.Generic.List{Alis.Core.Physic.Dynamics.Solver.Velocity})">
            <summary>
                Resets the step param
            </summary>
            <param name="stepParam">The step param</param>
            <param name="countParam">The count param</param>
            <param name="contactList">The contact list</param>
            <param name="positionList">The position list</param>
            <param name="velocitiesList">The velocities list</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.InitializeParameters(Alis.Core.Aspect.Time.TimeStep,System.Int32,System.Collections.Generic.List{Alis.Core.Physic.Collision.ContactSystem.Contact},System.Collections.Generic.List{Alis.Core.Physic.Dynamics.Solver.Position},System.Collections.Generic.List{Alis.Core.Physic.Dynamics.Solver.Velocity})">
            <summary>
                Initializes the parameters using the specified step param
            </summary>
            <param name="stepParam">The step param</param>
            <param name="countParam">The count param</param>
            <param name="contactList">The contact list</param>
            <param name="positionList">The position list</param>
            <param name="velocitiesList">The velocities list</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.GrowArrayIfNeeded(System.Int32)">
            <summary>
                Grows the array if needed using the specified count param
            </summary>
            <param name="countParam">The count param</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.InitializeConstraints(System.Int32)">
            <summary>
                Initializes the constraints using the specified count param
            </summary>
            <param name="countParam">The count param</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.InitializeVelocityConstraint(System.Int32,Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Initializes the velocity constraint using the specified i
            </summary>
            <param name="i">The </param>
            <param name="contact">The contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.InitializePositionConstraint(System.Int32,Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Initializes the position constraint using the specified i
            </summary>
            <param name="i">The </param>
            <param name="contact">The contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.InitializeVelocityConstraints">
            <summary>
                Initializes the velocity constraints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.InitializeTransforms(System.Single,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@)">
            <summary>
                Initializes the transforms using the specified a a
            </summary>
            <param name="aA">The </param>
            <param name="cA">The </param>
            <param name="localCenterA">The local center</param>
            <param name="aB">The </param>
            <param name="cB">The </param>
            <param name="localCenterB">The local center</param>
            <param name="xfA">The xf</param>
            <param name="xfB">The xf</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.InitializeWorldManifold(Alis.Core.Physic.Collision.NarrowPhase.Manifold@,Alis.Core.Aspect.Math.Transform@,System.Single,Alis.Core.Aspect.Math.Transform@,System.Single,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2[]@)">
            <summary>
                Initializes the world manifold using the specified manifold
            </summary>
            <param name="manifold">The manifold</param>
            <param name="xfA">The xf</param>
            <param name="radiusA">The radius</param>
            <param name="xfB">The xf</param>
            <param name="radiusB">The radius</param>
            <param name="normal">The normal</param>
            <param name="points">The points</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.InitializeVelocityConstraintPoints(Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single,System.Single,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2[],Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single)">
            <summary>
                Initializes the velocity constraint points using the specified vc
            </summary>
            <param name="vc">The vc</param>
            <param name="cA">The </param>
            <param name="cB">The </param>
            <param name="mA">The </param>
            <param name="mB">The </param>
            <param name="iA">The </param>
            <param name="iB">The </param>
            <param name="normal">The normal</param>
            <param name="points">The points</param>
            <param name="vA">The </param>
            <param name="vB">The </param>
            <param name="wA">The </param>
            <param name="wB">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.PrepareBlockSolver(Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Prepares the block solver using the specified vc
            </summary>
            <param name="vc">The vc</param>
            <param name="mA">The </param>
            <param name="mB">The </param>
            <param name="iA">The </param>
            <param name="iB">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.WarmStart">
            <summary>
                Warms the start
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.SolveVelocityConstraints">
            <summary>
                Solves the velocity constraints
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.InitializeVelocityConstraint(Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint)">
            <summary>
                Initializes the velocity constraint using the specified vc
            </summary>
            <param name="vc">The vc</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.SolveTangentConstraints(Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint,System.Int32,System.Single,System.Single,System.Single,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Solves the tangent constraints using the specified vc
            </summary>
            <param name="vc">The vc</param>
            <param name="j">The </param>
            <param name="mA">The </param>
            <param name="iA">The </param>
            <param name="mB">The </param>
            <param name="iB">The </param>
            <param name="vA">The </param>
            <param name="wA">The </param>
            <param name="vB">The </param>
            <param name="wB">The </param>
            <param name="normal">The normal</param>
            <param name="tangent">The tangent</param>
            <param name="friction">The friction</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.SolveNormalConstraints(Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint)">
            <summary>
                Solves the normal constraints using the specified vc
            </summary>
            <param name="vc">The vc</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.SolveNormalConstraint(Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint,System.Int32)">
            <summary>
                Solves the normal constraint using the specified vc
            </summary>
            <param name="vc">The vc</param>
            <param name="j">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.SolveBlockConstraints(Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint)">
            <summary>
                Solves the block constraints using the specified vc
            </summary>
            <param name="vc">The vc</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.StoreImpulses">
            <summary>
                Stores the impulses
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.SolvePositionConstraints">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactSolver.SolveToiPositionConstraints(System.Int32,System.Int32)">
            <summary>
                Describes whether this instance solve toi position constraints
            </summary>
            <param name="toiIndexA">The toi index</param>
            <param name="toiIndexB">The toi index</param>
            <returns>The bool</returns>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint">
            <summary>
                The contact velocity constraint class
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.Points">
            <summary>
                The max manifold points
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.ContactIndex">
            <summary>
                The contact index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.Friction">
            <summary>
                The friction
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.IndexA">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.IndexB">
            <summary>
                The index
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.InvIa">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.InvIb">
            <summary>
                The inv ib
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.InvMassA">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.InvMassB">
            <summary>
                The inv mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.K">
            <summary>
                The
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.Normal">
            <summary>
                The normal
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.NormalMass">
            <summary>
                The normal mass
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.PointCount">
            <summary>
                The point count
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.Restitution">
            <summary>
                The restitution
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.TangentSpeed">
            <summary>
                The tangent speed
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.Threshold">
            <summary>
                The threshold
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint" /> class
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.Island">
            <summary>This is an internal class.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.AngTolSqr">
            <summary>
                The angular sleep tolerance
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.LinTolSqr">
            <summary>
                The linear sleep tolerance
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.bodies">
            <summary>
                The bodies
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.contacts">
            <summary>
                The contacts
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.contactSolver">
            <summary>
                The contact solver
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.joints">
            <summary>
                The joints
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.positions">
            <summary>
                The positions
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Dynamics.Solver.Island.velocities">
            <summary>
                The velocities
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.Island.TimeStepSolveToi">
            <summary>
                Gets or sets the value of the step
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Clear">
            <summary>
                Clears this instance
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Solve(Alis.Core.Aspect.Time.TimeStep,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean,Alis.Core.Physic.Collision.ContactSystem.ContactManager,System.Collections.Generic.List{Alis.Core.Physic.Dynamics.Body})">
            <summary>
                Solves the step
            </summary>
            <param name="step">The step</param>
            <param name="gravity">The gravity</param>
            <param name="allowSleep">The allow sleep</param>
            <param name="contactManager">The contact manager</param>
            <param name="bodiesOfWorld">The bodies of world</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.HandleBodies(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Describes whether this instance handle bodies
            </summary>
            <param name="body">The body</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.HandleContacts(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Handles the contacts using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.HandleJoints(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Handles the joints using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.IntegrateVelocitiesAndApplyDamping(System.Single,Alis.Core.Physic.Dynamics.Body,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Integrates the velocities and apply damping using the specified h
            </summary>
            <param name="h">The </param>
            <param name="body">The body</param>
            <param name="gravity">The gravity</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.IntegratePositions(System.Single)">
            <summary>
                Integrates the positions using the specified h
            </summary>
            <param name="h">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.SolvePositionConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Describes whether this instance solve position constraints
            </summary>
            <param name="step">The step</param>
            <returns>The position solved</returns>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.CopyStateBuffersBackToBodies">
            <summary>
                Copies the state buffers back to bodies
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.HandleSleep(System.Boolean,System.Single)">
            <summary>
                Handles the sleep using the specified position solved
            </summary>
            <param name="positionSolved">The position solved</param>
            <param name="h">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.PostSolveCleanup">
            <summary>
                Posts the solve cleanup
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.SolveToi(System.Single,Alis.Core.Aspect.Time.TimeStep,System.Int32,System.Int32,Alis.Core.Physic.Collision.ContactSystem.ContactManager)">
            <summary>
                Solves the toi using the specified min alpha
            </summary>
            <param name="minAlpha">The min alpha</param>
            <param name="subStep">The sub step</param>
            <param name="toiIndexA">The toi index</param>
            <param name="toiIndexB">The toi index</param>
            <param name="contactManager">The contact manager</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.InitializeTimeStep(System.Single,Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Initializes the time step using the specified min alpha
            </summary>
            <param name="minAlpha">The min alpha</param>
            <param name="subStep">The sub step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.InitializeBodyState">
            <summary>
                Initializes the body state
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.SolvePositionConstraints(Alis.Core.Aspect.Time.TimeStep,System.Int32,System.Int32)">
            <summary>
                Solves the position constraints using the specified sub step
            </summary>
            <param name="subStep">The sub step</param>
            <param name="toiIndexA">The toi index</param>
            <param name="toiIndexB">The toi index</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.LeapToNewState(System.Int32,System.Int32)">
            <summary>
                Leaps the to new state using the specified toi index a
            </summary>
            <param name="toiIndexA">The toi index</param>
            <param name="toiIndexB">The toi index</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.SolveVelocityConstraints(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Solves the velocity constraints using the specified sub step
            </summary>
            <param name="subStep">The sub step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.IntegratePositions(Alis.Core.Aspect.Time.TimeStep)">
            <summary>
                Integrates the positions using the specified sub step
            </summary>
            <param name="subStep">The sub step</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Add(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Adds the body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Add(Alis.Core.Physic.Collision.ContactSystem.Contact)">
            <summary>
                Adds the contact
            </summary>
            <param name="contact">The contact</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Add(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Adds the joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.Report(System.Collections.Generic.List{Alis.Core.Physic.Dynamics.Solver.ContactVelocityConstraint},Alis.Core.Physic.Collision.ContactSystem.ContactManager)">
            <summary>
                Reports the constraints
            </summary>
            <param name="constraints">The constraints</param>
            <param name="contactManager">The contact manager</param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Island.SynchronizeBodies">
            <summary>
                Synchronizes the bodies
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.Position">
            This is an internal structure.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Position.#ctor(Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Solver.Position" /> class
            </summary>
            <param name="c">The </param>
            <param name="a">The </param>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Position.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Solver.Position" /> class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.Position.A">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.Position.C">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.PositionSolverManifold">
            <summary>
                The position solver manifold class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.PositionSolverManifold.Initialize(Alis.Core.Physic.Dynamics.Solver.ContactPositionConstraint,Alis.Core.Aspect.Math.Transform@,Alis.Core.Aspect.Math.Transform@,System.Int32,Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@,System.Single@)">
            <summary>
                Initializes the pc
            </summary>
            <param name="pc">The pc</param>
            <param name="xfA">The xf</param>
            <param name="xfB">The xf</param>
            <param name="index">The index</param>
            <param name="normal">The normal</param>
            <param name="point">The point</param>
            <param name="separation">The separation</param>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.SolverData">
            <summary>
                The solver data
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.SolverData.Step">
            <summary>
                The step
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.SolverData.Positions">
            <summary>
                The positions
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.SolverData.Velocities">
            <summary>
                The velocities
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.Velocity">
            This is an internal structure.
        </member>
        <member name="M:Alis.Core.Physic.Dynamics.Solver.Velocity.#ctor(Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Dynamics.Solver.Velocity" /> class
            </summary>
            <param name="v">The </param>
            <param name="w">The </param>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.Velocity.V">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.Velocity.W">
            <summary>
                The
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint">
            <summary>
                The velocity constraint point class
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.NormalImpulse">
            <summary>
                The normal impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.NormalMass">
            <summary>
                The normal mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.Ra">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.Rb">
            <summary>
                The
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.TangentImpulse">
            <summary>
                The tangent impulse
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.TangentMass">
            <summary>
                The tangent mass
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Dynamics.Solver.VelocityConstraintPoint.VelocityBias">
            <summary>
                The velocity bias
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.Figure.Line">
            <summary>
                The line class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.DistanceBetweenPointAndLineSegment(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Distances the between point and line segment using the specified point
            </summary>
            <param name="point">The point</param>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.CalculateDistanceFromPointToLine(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single)">
            <summary>
                Calculates the distance from point to line using the specified point
            </summary>
            <param name="point">The point</param>
            <param name="start">The start</param>
            <param name="v">The </param>
            <param name="c1">The </param>
            <param name="c2">The </param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.CalculateDistance(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Calculates the distance using the specified point 1
            </summary>
            <param name="point1">The point</param>
            <param name="point2">The point</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.SubtractVectors(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Subtracts the vectors using the specified vector 1
            </summary>
            <param name="vector1">The vector</param>
            <param name="vector2">The vector</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.DotProduct(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Dots the product using the specified vector 1
            </summary>
            <param name="vector1">The vector</param>
            <param name="vector2">The vector</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.IsC1LessThanOrEqualToZero(System.Single)">
            <summary>
                Describes whether is c 1 less than or equal to zero
            </summary>
            <param name="c1">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.IsC2LessThanOrEqualToC1(System.Single,System.Single)">
            <summary>
                Describes whether is c 2 less than or equal to c 1
            </summary>
            <param name="c2">The </param>
            <param name="c1">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.AddVectors(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Adds the vectors using the specified vector 1
            </summary>
            <param name="vector1">The vector</param>
            <param name="vector2">The vector</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.MultiplyVectorByScalar(Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Multiplies the vector by scalar using the specified vector
            </summary>
            <param name="vector">The vector</param>
            <param name="scalar">The scalar</param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.LineIntersect2(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Describes whether line intersect 2
            </summary>
            <param name="a0">The </param>
            <param name="a1">The </param>
            <param name="b0">The </param>
            <param name="b1">The </param>
            <param name="intersectionPoint">The intersection point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.ArePointsEqual(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Describes whether are points equal
            </summary>
            <param name="point1">The point</param>
            <param name="point2">The point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.IsOutOfRange(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Describes whether is out of range
            </summary>
            <param name="val1">The val</param>
            <param name="val2">The val</param>
            <param name="val3">The val</param>
            <param name="val4">The val</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.CalculateDenominator(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Calculates the denominator using the specified val 1
            </summary>
            <param name="val1">The val</param>
            <param name="val2">The val</param>
            <param name="val3">The val</param>
            <param name="val4">The val</param>
            <param name="val5">The val</param>
            <param name="val6">The val</param>
            <param name="val7">The val</param>
            <param name="val8">The val</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.CalculateUa(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Calculates the ua using the specified val 1
            </summary>
            <param name="val1">The val</param>
            <param name="val2">The val</param>
            <param name="val3">The val</param>
            <param name="val4">The val</param>
            <param name="val5">The val</param>
            <param name="val6">The val</param>
            <param name="val7">The val</param>
            <param name="val8">The val</param>
            <param name="denom">The denom</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.CalculateUb(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Calculates the ub using the specified val 1
            </summary>
            <param name="val1">The val</param>
            <param name="val2">The val</param>
            <param name="val3">The val</param>
            <param name="val4">The val</param>
            <param name="val5">The val</param>
            <param name="val6">The val</param>
            <param name="val7">The val</param>
            <param name="val8">The val</param>
            <param name="denom">The denom</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.IsIntersectionValid(System.Single,System.Single)">
            <summary>
                Describes whether is intersection valid
            </summary>
            <param name="ua">The ua</param>
            <param name="ub">The ub</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.CalculateIntersectionPoint(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Calculates the intersection point using the specified x 1
            </summary>
            <param name="x1">The </param>
            <param name="ua">The ua</param>
            <param name="x2">The </param>
            <param name="x3">The </param>
            <param name="y1">The </param>
            <param name="y2">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.LineIntersect(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Lines the intersect using the specified p 1
            </summary>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <param name="q1">The </param>
            <param name="q2">The </param>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.LineIntersect(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Boolean,System.Boolean,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Describes whether line intersect
            </summary>
            <param name="point1">The point</param>
            <param name="point2">The point</param>
            <param name="point3">The point</param>
            <param name="point4">The point</param>
            <param name="firstIsSegment">The first is segment</param>
            <param name="secondIsSegment">The second is segment</param>
            <param name="intersectionPoint">The intersection point</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.HasIntersection(System.Single,System.Single)">
            <summary>
                Describes whether has intersection
            </summary>
            <param name="ua">The ua</param>
            <param name="ub">The ub</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.IsDenominatorZero(System.Single)">
            <summary>
                Describes whether is denominator zero
            </summary>
            <param name="denom">The denom</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.CalculateUa(System.Single,System.Single,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Calculates the ua using the specified a
            </summary>
            <param name="a">The </param>
            <param name="c">The </param>
            <param name="d">The </param>
            <param name="point1">The point</param>
            <param name="point3">The point</param>
            <param name="denom">The denom</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.CalculateUb(System.Single,System.Single,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Calculates the ub using the specified b
            </summary>
            <param name="b">The </param>
            <param name="d">The </param>
            <param name="a">The </param>
            <param name="point1">The point</param>
            <param name="point3">The point</param>
            <param name="denom">The denom</param>
            <returns>The float</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.IsInRange(System.Single,System.Boolean)">
            <summary>
                Describes whether is in range
            </summary>
            <param name="value">The value</param>
            <param name="isSegment">The is segment</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.CalculateIntersectionPoint(Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single,System.Single)">
            <summary>
                Calculates the intersection point using the specified point 1
            </summary>
            <param name="point1">The point</param>
            <param name="ua">The ua</param>
            <param name="b">The </param>
            <param name="d">The </param>
            <returns>The vector</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.LineSegmentVerticesIntersect(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,System.Collections.Generic.List{Alis.Core.Aspect.Math.Vector.Vector2})">
            <summary>
                Lines the segment vertices intersect using the specified point 1
            </summary>
            <param name="point1">The point</param>
            <param name="point2">The point</param>
            <param name="vertices">The vertices</param>
            <returns>The intersection points</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Line.LineSegmentAabbIntersect(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Shared.Aabb)">
            <summary>
                Lines the segment aabb intersect using the specified point 1
            </summary>
            <param name="point1">The point</param>
            <param name="point2">The point</param>
            <param name="aabb">The aabb</param>
            <returns>A list of vector 2</returns>
        </member>
        <member name="T:Alis.Core.Physic.Figure.Polygon">
            <summary>
                The polygon class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateRectangle(System.Single,System.Single)">
            <summary>
                Creates the rectangle using the specified hx
            </summary>
            <param name="hx">The hx</param>
            <param name="hy">The hy</param>
            <returns>The vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateRectangle(System.Single,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Creates the rectangle using the specified hx
            </summary>
            <param name="hx">The hx</param>
            <param name="hy">The hy</param>
            <param name="center">The center</param>
            <param name="angle">The angle</param>
            <returns>The vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.TransformVertices(Alis.Core.Physic.Shared.Vertices,Alis.Core.Aspect.Math.Vector.Vector2,System.Single)">
            <summary>
                Transforms the vertices using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="center">The center</param>
            <param name="angle">The angle</param>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateRoundedRectangle(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates the rounded rectangle using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="xRadius">The radius</param>
            <param name="yRadius">The radius</param>
            <param name="segments">The segments</param>
            <exception>Rounding amount can't be more than half the height and width respectively.</exception>
            <exception>Segments must be zero or more.</exception>
            <returns>The vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.ValidateRoundedRectangleParameters(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Validates the rounded rectangle parameters using the specified width
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="xRadius">The radius</param>
            <param name="yRadius">The radius</param>
            <param name="segments">The segments</param>
            <exception cref="T:System.Exception">Rounding amount can't be more than half the height and width respectively.</exception>
            <exception cref="T:System.Exception">Segments must be zero or more.</exception>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateRectangleWithoutSegments(Alis.Core.Physic.Shared.Vertices,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Creates the rectangle without segments using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="xRadius">The radius</param>
            <param name="yRadius">The radius</param>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateRectangleWithSegments(Alis.Core.Physic.Shared.Vertices,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Creates the rectangle with segments using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="xRadius">The radius</param>
            <param name="yRadius">The radius</param>
            <param name="segments">The segments</param>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateLine(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Creates the line using the specified start
            </summary>
            <param name="start">The start</param>
            <param name="end">The end</param>
            <returns>The vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateCircle(System.Single,System.Int32)">
            <summary>
                Creates the circle using the specified radius
            </summary>
            <param name="radius">The radius</param>
            <param name="numberOfEdges">The number of edges</param>
            <returns>The vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateEllipse(System.Single,System.Single,System.Int32)">
            <summary>
                Creates the ellipse using the specified x radius
            </summary>
            <param name="xRadius">The radius</param>
            <param name="yRadius">The radius</param>
            <param name="numberOfEdges">The number of edges</param>
            <returns>The vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateArc(System.Single,System.Int32,System.Single)">
            <summary>
                Creates the arc using the specified radians
            </summary>
            <param name="radians">The radians</param>
            <param name="sides">The sides</param>
            <param name="radius">The radius</param>
            <returns>The vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateCapsule(System.Single,System.Single,System.Int32)">
            <summary>
                Creates the capsule using the specified height
            </summary>
            <param name="height">The height</param>
            <param name="endRadius">The end radius</param>
            <param name="edges">The edges</param>
            <exception>
                The radius must be lower than height / 2. Higher values of radius would create a
                circle, and not a half circle.
            </exception>
            <returns>The vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateCapsule(System.Single,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
                Creates the capsule using the specified height
            </summary>
            <param name="height">The height</param>
            <param name="topRadius">The top radius</param>
            <param name="topEdges">The top edges</param>
            <param name="bottomRadius">The bottom radius</param>
            <param name="bottomEdges">The bottom edges</param>
            <exception>Bottom edges must be more than 0 </exception>
            <exception>Height must be longer than 0 </exception>
            <exception>
                The bottom radius must be lower than height / 2. Higher values of bottom radius
                would create a circle, and not a half circle.
            </exception>
            <exception>The bottom radius must be more than 0 </exception>
            <exception>
                The top radius must be lower than height / 2. Higher values of top radius would
                create a circle, and not a half circle.
            </exception>
            <exception>The top radius must be more than 0 </exception>
            <exception>Top edges must be more than 0 </exception>
            <returns>The vertices</returns>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.ValidateCapsuleParameters(System.Single,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
                Validates the capsule parameters using the specified height
            </summary>
            <param name="height">The height</param>
            <param name="topRadius">The top radius</param>
            <param name="topEdges">The top edges</param>
            <param name="bottomRadius">The bottom radius</param>
            <param name="bottomEdges">The bottom edges</param>
            <exception cref="T:System.ArgumentException">Bottom edges must be more than 0 </exception>
            <exception cref="T:System.ArgumentException">Height must be longer than 0 </exception>
            <exception cref="T:System.ArgumentException">
                The bottom radius must be lower than height / 2. Higher values of bottom
                radius would create a circle, and not a half circle.
            </exception>
            <exception cref="T:System.ArgumentException">The bottom radius must be more than 0 </exception>
            <exception cref="T:System.ArgumentException">
                The top radius must be lower than height / 2. Higher values of top radius
                would create a circle, and not a half circle.
            </exception>
            <exception cref="T:System.ArgumentException">The top radius must be more than 0 </exception>
            <exception cref="T:System.ArgumentException">Top edges must be more than 0 </exception>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.ValidateHeight(System.Single)">
            <summary>
                Validates the height using the specified height
            </summary>
            <param name="height">The height</param>
            <exception cref="T:System.ArgumentException">Height must be longer than 0 </exception>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.ValidateRadius(System.Single,System.Single,System.String)">
            <summary>
                Validates the radius using the specified radius
            </summary>
            <param name="radius">The radius</param>
            <param name="height">The height</param>
            <param name="position">The position</param>
            <exception cref="T:System.ArgumentException">
                The {position} radius must be lower than height / 2. Higher values of
                {position} radius would create a circle, and not a half circle. {position}Radius
            </exception>
            <exception cref="T:System.ArgumentException">The {position} radius must be more than 0 {position}Radius</exception>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.ValidateRadiusIsPositive(System.Single,System.String)">
            <summary>
                Validates the radius is positive using the specified radius
            </summary>
            <param name="radius">The radius</param>
            <param name="position">The position</param>
            <exception cref="T:System.ArgumentException">The {position} radius must be more than 0 {position}Radius</exception>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.ValidateRadiusIsLessThanHalfHeight(System.Single,System.Single,System.String)">
            <summary>
                Validates the radius is less than half height using the specified radius
            </summary>
            <param name="radius">The radius</param>
            <param name="height">The height</param>
            <param name="position">The position</param>
            <exception cref="T:System.ArgumentException">
                The {position} radius must be lower than height / 2. Higher values of
                {position} radius would create a circle, and not a half circle. {position}Radius
            </exception>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.ValidateEdges(System.Int32,System.String)">
            <summary>
                Validates the edges using the specified edges
            </summary>
            <param name="edges">The edges</param>
            <param name="position">The position</param>
            <exception cref="T:System.ArgumentException">{position} edges must be more than 0 {position}Edges</exception>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateCapsuleTop(Alis.Core.Physic.Shared.Vertices,System.Single,System.Single,System.Int32)">
            <summary>
                Creates the capsule top using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="topRadius">The top radius</param>
            <param name="newHeight">The new height</param>
            <param name="topEdges">The top edges</param>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateCapsuleBottom(Alis.Core.Physic.Shared.Vertices,System.Single,System.Single,System.Int32)">
            <summary>
                Creates the capsule bottom using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <param name="bottomRadius">The bottom radius</param>
            <param name="newHeight">The new height</param>
            <param name="bottomEdges">The bottom edges</param>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Polygon.CreateGear(System.Single,System.Int32,System.Single,System.Single)">
            <summary>
                Creates the gear using the specified radius
            </summary>
            <param name="radius">The radius</param>
            <param name="numberOfTeeth">The number of teeth</param>
            <param name="tipPercentage">The tip percentage</param>
            <param name="toothHeight">The tooth height</param>
            <returns>The vertices</returns>
        </member>
        <member name="T:Alis.Core.Physic.Figure.Rectangle">
            <summary>
                The rectangle class
            </summary>
            <seealso />
        </member>
        <member name="M:Alis.Core.Physic.Figure.Rectangle.#ctor(System.Single,System.Single,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Physic.Dynamics.BodyType,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Figure.Rectangle" /> class
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="position">The position</param>
            <param name="linearVelocity">The linear velocity</param>
            <param name="bodyType">The body type</param>
            <param name="angle">The angle</param>
            <param name="angularVelocity">The angular velocity</param>
            <param name="linearDamping">The linear damping</param>
            <param name="angularDamping">The angular damping</param>
            <param name="allowSleep">The allow sleep</param>
            <param name="awake">The awake</param>
            <param name="fixedRotation">The fixed rotation</param>
            <param name="isBullet">The is bullet</param>
            <param name="enabled">The enabled</param>
            <param name="gravityScale">The gravity scale</param>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Rectangle.ValidateWidth(System.Single)">
            <summary>
                Validates the width using the specified width
            </summary>
            <param name="width">The width</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Width must be more than 0</exception>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Rectangle.ValidateHeight(System.Single)">
            <summary>
                Validates the height using the specified height
            </summary>
            <param name="height">The height</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Height must be more than 0</exception>
        </member>
        <member name="M:Alis.Core.Physic.Figure.Rectangle.ValidateVertices(Alis.Core.Physic.Shared.Vertices)">
            <summary>
                Validates the vertices using the specified vertices
            </summary>
            <param name="vertices">The vertices</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Too few points to be a polygon</exception>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Aabb">
            <summary>An axis aligned bounding box.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Aabb.LowerBound">
            <summary>The lower vertex</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.Aabb.UpperBound">
            <summary>The upper vertex</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.#ctor(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Aabb" /> class
            </summary>
            <param name="min">The min</param>
            <param name="max">The max</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.#ctor(Alis.Core.Aspect.Math.Vector.Vector2,System.Single,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Aabb" /> class
            </summary>
            <param name="center">The center</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.#ctor(Alis.Core.Aspect.Math.Vector.Vector2@,Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Aabb" /> class
            </summary>
            <param name="min">The min</param>
            <param name="max">The max</param>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Width">
            <summary>
                Gets the value of the width
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Height">
            <summary>
                Gets the value of the height
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Center">
            <summary>Get the center of the AABB.</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Extents">
            <summary>Get the extents of the AABB (half-widths).</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Perimeter">
            <summary>Get the perimeter length</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Vertices">
            <summary>Gets the vertices of the AABB.</summary>
            <value>The corners of the AABB</value>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Q1">
            <summary>First quadrant</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Q2">
            <summary>Second quadrant</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Q3">
            <summary>Third quadrant</summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Aabb.Q4">
            <summary>Forth quadrant</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.IsValid">
            <summary>Verify that the bounds are sorted. And the bounds are valid numbers (not NaN).</summary>
            <returns><c>true</c> if this instance is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.Combine(Alis.Core.Physic.Shared.Aabb@)">
            <summary>Combine an AABB into this one.</summary>
            <param name="aabb">The AABB.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.Combine(Alis.Core.Physic.Shared.Aabb@,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Combine two AABBs into this one.</summary>
            <param name="aabb1">The aabb1.</param>
            <param name="aabb2">The aabb2.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.Contains(Alis.Core.Physic.Shared.Aabb@)">
            <summary>Does this AABB contain the provided AABB.</summary>
            <param name="aabb">The AABB.</param>
            <returns><c>true</c> if it contains the specified AABB; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.Contains(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Determines whether the AABB contains the specified point.</summary>
            <param name="point">The point.</param>
            <returns><c>true</c> if it contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Aabb.TestOverlap(Alis.Core.Physic.Shared.Aabb@,Alis.Core.Physic.Shared.Aabb@)">
            <summary>Test if the two AABBs overlap.</summary>
            <param name="a">The first AABB.</param>
            <param name="b">The second AABB.</param>
            <returns>True if they are overlapping.</returns>
        </member>
        <member name="T:Alis.Core.Physic.Shared.PolygonError">
            <summary>
                The polygon error enum
            </summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.NoError">
            <summary>There were no errors in the polygon</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.InvalidAmountOfVertices">
            <summary>Polygon must have between 3 and Settings.MaxPolygonVertices vertices.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.NotSimple">
            <summary>Polygon must be simple. This means no overlapping edges.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.NotCounterClockWise">
            <summary>Polygon must have a counter clockwise winding.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.NotConvex">
            <summary>The polygon is concave, it needs to be convex.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.AreaTooSmall">
            <summary>Polygon area is too small.</summary>
        </member>
        <member name="F:Alis.Core.Physic.Shared.PolygonError.SideTooSmall">
            <summary>The polygon has a side that is too short.</summary>
        </member>
        <member name="T:Alis.Core.Physic.Shared.Vertices">
            <summary>
                The vertices class
            </summary>
            <seealso cref="T:System.Collections.Generic.List`1" />
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Vertices" /> class
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Vertices" /> class
            </summary>
            <param name="capacity">The capacity</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.#ctor(System.Collections.Generic.IEnumerable{Alis.Core.Aspect.Math.Vector.Vector2})">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.Shared.Vertices" /> class
            </summary>
            <param name="vertices">The vertices</param>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Vertices.AttachedToBody">
            <summary>
                Gets or sets the value of the attached to body
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.Shared.Vertices.Holes">
            <summary>
                You can add holes to this collection. It will get respected by some of the triangulation algorithm, but
                otherwise not used.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.NextIndex(System.Int32)">
            <summary>Gets the next index. Used for iterating all the edges with wrap-around.</summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.NextVertex(System.Int32)">
            <summary>Gets the next vertex. Used for iterating all the edges with wrap-around.</summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.PreviousIndex(System.Int32)">
            <summary>Gets the previous index. Used for iterating all the edges with wrap-around.</summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.PreviousVertex(System.Int32)">
            <summary>Gets the previous vertex. Used for iterating all the edges with wrap-around.</summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.GetSignedArea">
            <summary>Gets the signed area. If the area is less than 0, it indicates that the polygon is clockwise winded.</summary>
            <returns>The signed area</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.GetArea">
            <summary>Gets the area.</summary>
            <returns></returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.GetCentroid">
            <summary>
                Gets the centroid
            </summary>
            <returns>The </returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.GetAabb">
            <summary>Returns an AABB that fully contains this polygon.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Translate(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Translates the vertices with the specified vector.</summary>
            <param name="value">The vector.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Scale(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>Scales the vertices with the specified vector.</summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Scale(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Scale the vertices with the specified vector.</summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Rotate(System.Single)">
            <summary>
                Rotate the vertices with the defined value in radians. Warning: Using this method on an active set of vertices
                of a Body, will cause problems with collisions. Use Body.Rotation instead.
            </summary>
            <param name="value">The amount to rotate by in radians.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.IsConvex">
            <summary>
                Determines whether the polygon is convex. O(n^2) running time. Assumptions: - The polygon is in counter
                clockwise order - The polygon has no overlapping edges
            </summary>
            <returns><c>true</c> if it is convex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.IsAnyEdgeIntersecting(System.Int32)">
            <summary>
                Describes whether this instance is any edge intersecting
            </summary>
            <param name="i">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.IsCounterClockWise">
            <summary>
                Indicates if the vertices are in counter clockwise order. Warning: If the area of the polygon is 0, it is
                unable to determine the winding.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.ForceCounterClockWise">
            <summary>Forces the vertices to be counter clock wise order.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.IsSimple">
            <summary>Checks if the vertices forms an simple polygon by checking for edge crossings.</summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.CheckPolygon">
            <summary>
                Checks if the polygon is valid for use in the engine. Performs a full check, for simplicity, convexity,
                orientation, minimum angle, and volume. From Eric Jordan's convex decomposition library
            </summary>
            <returns>PolygonError.NoError if there were no error.</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.IsAreaTooSmall">
            <summary>
                Describes whether this instance is area too small
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.HasSideTooSmall">
            <summary>
                Describes whether this instance has side too small
            </summary>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.ProjectToAxis(Alis.Core.Aspect.Math.Vector.Vector2@,System.Single@,System.Single@)">
            <summary>Projects to axis.</summary>
            <param name="axis">The axis.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.PointInPolygon(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>Winding number test for a point in a polygon.</summary>
            See more info about the algorithm here: http://softsurfer.com/Archive/algorithm_0103/algorithm_0103.htm
            <param name="point">The point to be tested.</param>
            <returns>
                -1 if the winding number is zero and the point is outside the polygon, 1 if the point is inside the polygon,
                and 0 if the point is on the polygons edge.
            </returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.CalculateWindingNumber(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Calculates the winding number using the specified point
            </summary>
            <param name="point">The point</param>
            <returns>The winding number</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.IsPointOnEdge(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Describes whether this instance is point on edge
            </summary>
            <param name="point">The point</param>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.IsEdgeIntersectingRay(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Describes whether this instance is edge intersecting ray
            </summary>
            <param name="point">The point</param>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.DetermineWindingDirection(Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2,Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Determines the winding direction using the specified point
            </summary>
            <param name="point">The point</param>
            <param name="p1">The </param>
            <param name="p2">The </param>
            <returns>The int</returns>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.PointInPolygonAngle(Alis.Core.Aspect.Math.Vector.Vector2@)">
            <summary>
                Compute the sum of the angles made between the test point and each pair of points making up the polygon. If
                this sum is 2pi then the point is an interior point, if 0 then the point is an exterior point. ref:
                http://ozviz.wasp.uwa.edu.au/~pbourke/geometry/insidepoly/  - Solution 2
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Transform(Alis.Core.Aspect.Math.Matrix.Matrix4X4@)">
            <summary>Transforms the polygon using the defined matrix.</summary>
            <param name="transform">The matrix to use as transformation.</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Transform(Alis.Core.Aspect.Math.Vector.Vector2[],Alis.Core.Aspect.Math.Matrix.Matrix4X4@,Alis.Core.Aspect.Math.Vector.Vector2[])">
            <summary>
                Transforms the source array
            </summary>
            <param name="sourceArray">The source array</param>
            <param name="matrix">The matrix</param>
            <param name="destinationArray">The destination array</param>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.Transform(Alis.Core.Aspect.Math.Vector.Vector2[],System.Int32,Alis.Core.Aspect.Math.Matrix.Matrix4X4@,Alis.Core.Aspect.Math.Vector.Vector2[],System.Int32,System.Int32)">
            <summary>
                Transforms the source array
            </summary>
            <param name="sourceArray">The source array</param>
            <param name="sourceIndex">The source index</param>
            <param name="matrix">The matrix</param>
            <param name="destinationArray">The destination array</param>
            <param name="destinationIndex">The destination index</param>
            <param name="length">The length</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Destination array length is lesser than destinationIndex + length</exception>
            <exception cref="T:System.ArgumentException">Source array length is lesser than sourceIndex + length</exception>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.ValidateArrays(Alis.Core.Aspect.Math.Vector.Vector2[],System.Int32,Alis.Core.Aspect.Math.Vector.Vector2[],System.Int32,System.Int32)">
            <summary>
                Validates the arrays using the specified source array
            </summary>
            <param name="sourceArray">The source array</param>
            <param name="sourceIndex">The source index</param>
            <param name="destinationArray">The destination array</param>
            <param name="destinationIndex">The destination index</param>
            <param name="length">The length</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Destination array length is lesser than destinationIndex + length</exception>
            <exception cref="T:System.ArgumentException">Source array length is lesser than sourceIndex + length</exception>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.FlipHorizontally">
            <summary>
                Flips the horizontally
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.Shared.Vertices.FlipVertically">
            <summary>
                Flips the vertically
            </summary>
        </member>
        <member name="T:Alis.Core.Physic.World">
            <summary>The world class manages all physics entities, dynamic simulation, and asynchronous queries.</summary>
        </member>
        <member name="F:Alis.Core.Physic.World.Island">
            <summary>
                The island
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.#ctor(Alis.Core.Aspect.Math.Vector.Vector2)">
            <summary>
                Initializes a new instance of the <see cref="T:Alis.Core.Physic.World" /> class
            </summary>
            <param name="gravity">The gravity</param>
        </member>
        <member name="P:Alis.Core.Physic.World.BreakableBodies">
            <summary>
                The breakable body
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.Gravity">
            <summary>
                Gets the value of the gravity
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.Bodies">
            <summary>
                Gets or sets the value of the bodies
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.Joints">
            <summary>
                Gets or sets the value of the joints
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.ContactManager">
            <summary>
                Gets or sets the value of the contact manager
            </summary>
        </member>
        <member name="P:Alis.Core.Physic.World.TimeStepGlobal">
            <summary>
                Gets or sets the value of the step
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.AddBody(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Adds the body using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveBody(Alis.Core.Physic.Dynamics.Body)">
            <summary>
                Removes the body using the specified body
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:Alis.Core.Physic.World.AddBreakableBody(Alis.Core.Physic.Dynamics.BreakableBody)">
            <summary>
                Adds the breakable body using the specified breakable body
            </summary>
            <param name="breakableBody">The breakable body</param>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveBreakableBody(Alis.Core.Physic.Dynamics.BreakableBody)">
            <summary>
                Removes the breakable body using the specified breakable body
            </summary>
            <param name="breakableBody">The breakable body</param>
        </member>
        <member name="M:Alis.Core.Physic.World.AddJoint(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Adds the joint using the specified joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.World.RemoveJoint(Alis.Core.Physic.Dynamics.Joints.Joint)">
            <summary>
                Removes the joint using the specified joint
            </summary>
            <param name="joint">The joint</param>
        </member>
        <member name="M:Alis.Core.Physic.World.Step(System.Single,System.Int32,System.Int32)">
            <summary>
                Steps the dt
            </summary>
            <param name="dt">The dt</param>
            <param name="velocityIterations">The velocity iterations</param>
            <param name="positionIterations">The position iterations</param>
        </member>
        <member name="M:Alis.Core.Physic.World.FindNewContacts">
            <summary>
                Finds the new contacts
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.UpdateTimeStep(System.Single,System.Int32,System.Int32)">
            <summary>
                Updates the time step using the specified dt
            </summary>
            <param name="dt">The dt</param>
            <param name="velocityIterations">The velocity iterations</param>
            <param name="positionIterations">The position iterations</param>
        </member>
        <member name="M:Alis.Core.Physic.World.CollideContacts">
            <summary>
                Collides the contacts
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.UpdateInvertedDeltaTime">
            <summary>
                Updates the inverted delta time using the specified dt
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.UpdateBreakableBodies">
            <summary>
                Updates the breakable bodies
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.Solve">
            <summary>
                Solves the step
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.SolveToi">
            <summary>
                Solves the toi
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.SetAlphaToZeroForFastMovingBodies">
            <summary>
                Sets the alpha to zero for fast moving bodies
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.InvalidateContactToi">
            <summary>
                Invalidates the contact to is
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.SolveToiEvents">
            <summary>
                Solves the TOI (Time of Impact) events.
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.IsMinAlphaGreaterThanEpsilon(System.Single)">
            <summary>
                Describes whether this instance is min alpha greater than epsilon
            </summary>
            <param name="minAlpha">The min alpha</param>
            <returns>The bool</returns>
        </member>
        <member name="M:Alis.Core.Physic.World.SolveToiIsland(System.Single,System.Int32,System.Int32)">
            <summary>
                Solves the toi island using the specified min alpha
            </summary>
            <param name="minAlpha">The min alpha</param>
            <param name="islandIndexA">The island index</param>
            <param name="islandIndexB">The island index</param>
        </member>
        <member name="M:Alis.Core.Physic.World.SynchronizeIslandBodies">
            <summary>
                Synchronizes the island bodies
            </summary>
        </member>
        <member name="M:Alis.Core.Physic.World.ClearForces">
            <summary>
                Clear all forces
            </summary>
        </member>
    </members>
</doc>
