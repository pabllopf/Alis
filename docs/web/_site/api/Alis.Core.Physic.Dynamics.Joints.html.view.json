{
  "_appFaviconPath": "resources/logo.png",
  "_appFooter": "Alis - Develop the video games of your dreams ðŸ’¯ free!! on Windows, MacOS, Linux, Android(soon), IOS(soon).",
  "_appLogoPath": "resources/logo.png",
  "_appName": "Alis",
  "_appTitle": "Alis - Develop the video games of your dreams ðŸ’¯ free!!",
  "_copyrightFooter": "Developed by Pablo Perdomo FalcÃ³n",
  "_disableAffix": false,
  "_disableBreadcrumb": false,
  "_disableContribution": false,
  "_disableNavbar": false,
  "_disableSideFilter": false,
  "_disableToc": false,
  "_enableNewTab": true,
  "_enableSearch": true,
  "_gitContribute": {
    "branch": "master",
    "apiSpecFolder": "api",
    "repo": "https://github.com/pabllopf/Alis"
  },
  "_gitUrlPattern": "github",
  "_lang": "en",
  "pdf": true,
  "pdfTocPage": true,
  "title": "Namespace Alis.Core.Physic.Dynamics.Joints",
  "content": "<h1 class='section api' data-uid='Alis.Core.Physic.Dynamics.Joints' data-commentId='N:Alis.Core.Physic.Dynamics.Joints' id='Alis_Core_Physic_Dynamics_Joints'>Namespace Alis.Core.Physic.Dynamics.Joints   </h1>\r\n <h3 class='section'>Classes</h3><dl class='parameters'><dt> <a href='Alis.Core.Physic.Dynamics.Joints.AngleJoint.html'>AngleJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">Maintains a fixed angle between two bodies</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.DistanceJoint.html'>DistanceJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">A distance joint constrains two points on two bodies to remain at a fixed distance from each other. You can\nview this as a massless, rigid rod.\n1-D constrained system\nm (v2 - v1) = lambda\nv2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\nx2 = x1 + h * v2\n1-D mass-damper-spring system\nm (v2 - v1) + h * d * v2 + h * k *\nC = norm(p2 - p1) - L\nu = (p2 - p1) / norm(p2 - p1)\ndot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\nJ = [-u -cross(r1, u) u cross(r2, u)]\nK = J * invM * JT\n= invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.FixedMouseJoint.html'>FixedMouseJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">A mouse joint is used to make a point on a body track a specified world point. This a soft constraint with a\nmaximum force. This allows the constraint to stretch and without applying huge forces. NOTE: this joint is not\ndocumented in the manual because it was developed to be used in the testbed. If you want to learn how to use the\nmouse\njoint, look at the testbed.\np = attached point, m = mouse point\nC = p - m\ncDot = v\n= v + cross(w, r)\nJ = [I r_skew]\nIdentity used:\nw k % (rx i + ry j) = w * (-ry i + rx j)</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.FrictionJoint.html'>FrictionJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">Friction joint. This is used for top-down friction. It provides 2D translational friction and angular\nfriction.\nPoint-to-point constraint\ncDot = v2 - v1\n= v2 + cross(w2, r2) - v1 - cross(w1, r1)\nJ = [-I -r1_skew I r2_skew ]\nIdentity used:\nw k % (rx i + ry j) = w * (-ry i + rx j)\nAngle constraint\ncDot = w2 - w1\nJ = [0 0 -1 0 0 1]\nK = invI1 + invI2</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.GearJoint.html'>GearJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">A gear joint is used to connect two joints together. Either joint can be a revolute or prismatic joint. You specify\na\ngear ratio to bind the motions together:\ncoordinate1 + ratio * coordinate2 = ant\nThe ratio can be negative or positive. If one joint is a revolute joint and the other joint is a prismatic joint,\nthen\nthe ratio will have units of length or units of 1/length. Warning: You have to manually destroy the gear joint if\njointA or jointB is destroyed.\nGear Joint:\nC0 = (coordinate1 + ratio * coordinate2)_initial\nC = (coordinate1 + ratio * coordinate2) - C0 = 0\nJ = [J1 ratio * J2]\nK = J * invM * JT\n= J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\nRevolute:\ncoordinate = rotation\nCdo = angularVelocity\nJ = [0 0 1]\nK = J * invM * JT = invI\nPrismatic:\ncoordinate = dot(p - pg, ug)\nCdo = dot(v + cross(w, r), ug)\nJ = [ug cross(r, ug)]\nK = J * invM * JT = invMass + invI * cross(r, ug)^2</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.Joint.html'>Joint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">The joint class</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.JointEdge.html'>JointEdge</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">A joint edge is used to connect bodies and joints together in a joint graph where each body is a node and each\njoint is an edge. A joint edge belongs to a doubly linked list maintained in each attached body. Each joint has two\njoint nodes, one for each attached body.</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.MotorJoint.html'>MotorJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">A motor joint is used to control the relative motion between two bodies. A typical usage is to control the\nmovement of a dynamic body with respect to the ground.</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.PrismaticJoint.html'>PrismaticJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">A prismatic joint. This joint provides one degree of freedom: translation along an axis fixed in bodyA.\nRelative rotation is prevented. You can use a joint limit to restrict the range of motion and a joint motor to\ndrive\nthe motion or to model joint friction.\nLinear constraint (point-to-line)\nd = p2 - p1 = x2 + r2 - x1 - r1\nC = dot(perp, d)\nCdo = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n= -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) + dot(cross(r2, perp), v2)\nJ = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\nAngular constraint\nC = a2 - a1 + a_initial\nCdo = w2 - w1\nJ = [0 0 -1 0 0 1]\nK = J * invM * JT\nJ = [-a -s1 a s2]\n[0  -1  0  1]\na = perp\ns1 = cross(d + r1, a) = cross(p2 - x1, a)\ns2 = cross(r2, a) = cross(p2 - x2, a)\nMotor/Limit linear constraint\nC = dot(ax1, d)\nCdo = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) + dot(cross(r2, ax1), v2)\nJ = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\nPredictive limit is applied even when the limit is not active.\nPrevents a constraint speed that can lead to a constraint error in one time step.\nWant C2 = C1 + h * Cdo &gt;= 0\nOr:\nCdo + C1/h &gt;= 0\nI do not apply a negative constraint error because that is handled in position correction.\nSo:\nCdo + max(C1, 0)/h &gt;= 0\nBlock Solver\nWe develop a block solver that includes the angular and linear constraints. This makes the limit stiffer.\nThe Jacobin has 2 rows:\nJ = [-uT -s1 uT s2] /// linear\n[0   -1   0  1] /// angular\nu = perp\ns1 = cross(d + r1, u), s2 = cross(r2, u)\na1 = cross(d + r1, v), a2 = cross(r2, v)</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.PulleyJoint.html'>PulleyJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">The pulley joint is connected to two bodies and two fixed world points. The pulley supports a ratio such that:\nlength1 + ratio * length2 &lt;= constant\nYes, the force transmitted is scaled by the ratio. Warning: the pulley joint can get a bit squirrelly by itself.\nThey\noften work better when combined with prismatic joints. You should also cover the the anchor points with static\nshapes\nto prevent one side from going to zero length.\nPulley:\nlength1 = norm(p1 - s1)\nlength2 = norm(p2 - s2)\nC0 = (length1 + ratio * length2)_initial\nC = C0 - (length1 + ratio * length2)\nu1 = (p1 - s1) / norm(p1 - s1)\nu2 = (p2 - s2) / norm(p2 - s2)\ncDot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\nJ = -[u1 cross(r1, u1) ratio * u2  ratio * cross(r2, u2)]\nK = J * invM * JT\n= invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 * cross(r2, u2)^2)</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.RevoluteJoint.html'>RevoluteJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">A revolute joint constrains to bodies to share a common point while they are free to rotate about the point.\nThe relative rotation about the shared point is the joint angle. You can limit the relative rotation with a joint\nlimit\nthat specifies a lower and upper angle. You can use a motor to drive the relative rotation about the shared point.\nA\nmaximum motor torque is provided so that infinite forces are not generated.\nPoint-to-point constraint\nC = p2 - p1\ndot = v2 - v1\n= v2 + cross(w2, r2) - v1 - cross(w1, r1)\nJ = [-I -r1_skew I r2_skew ]\nIdentity used:\nw k % (rx i + ry j) = w * (-ry i + rx j)\nMotor constraint\ndot = w2 - w1\nJ = [0 0 -1 0 0 1]\nK = invI1 + invI2</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.WeldJoint.html'>WeldJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">A weld joint essentially glues two bodies together. A weld joint may distort somewhat because the island\nconstraint solver is approximate. The joint is soft constraint based, which means the two bodies will move relative\nto\neach other, when a force is applied. To combine two bodies in a rigid fashion, combine the fixtures to a single\nbody\ninstead.</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.WheelJoint.html'>WheelJoint</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">A wheel joint. This joint provides two degrees of freedom: translation along an axis fixed in bodyA and\nrotation in the plane. In other words, it is a point to line constraint with a rotational motor and a linear\nspring/damper. The spring/damper is initialized upon creation. This joint is designed for vehicle suspensions.\nLinear constraint (point-to-line)\nd = pB - pA = xB + rB - xA - rA\nC = dot(ay, d)\nCdo = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA, rA))\n= -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB, ay), vB)\nJ = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\nSpring linear constraint\nC = dot(ax, d)\nCdo = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) + dot(cross(rB, ax), vB)\nJ = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\nMotor rotational constraint\nCdo = wB - wA\nJ = [0 0 -1 0 0 1]</p>\n\r\n</dd></dl><h3 class='section'>Enums</h3><dl class='parameters'><dt> <a href='Alis.Core.Physic.Dynamics.Joints.JointType.html'>JointType</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">The joint type enum</p>\n\r\n</dd><dt> <a href='Alis.Core.Physic.Dynamics.Joints.LimitState.html'>LimitState</a>  </dt>\r\n<dd>\r\n\r\n\r\n<p sourceFile=\"api/Alis.Core.Physic.Dynamics.Joints.yml\" sourceStartLineNumber=\"1\">The limit state enum</p>\n\r\n</dd></dl>",
  "yamlmime": "ApiPage",
  "_disableNextArticle": true,
  "_key": "api/Alis.Core.Physic.Dynamics.Joints.yml",
  "_navKey": "~/toc.yml",
  "_navPath": "toc.html",
  "_navRel": "../toc.html",
  "_path": "api/Alis.Core.Physic.Dynamics.Joints.html",
  "_rel": "../",
  "_tocKey": "~/api/toc.yml",
  "_tocPath": "api/toc.html",
  "_tocRel": "toc.html",
  "__global": {
    "namespacesInSubtitle": "Namespaces",
    "classesInSubtitle": "Classes",
    "structsInSubtitle": "Structs",
    "interfacesInSubtitle": "Interfaces",
    "enumsInSubtitle": "Enums",
    "delegatesInSubtitle": "Delegates",
    "constructorsInSubtitle": "Constructors",
    "fieldsInSubtitle": "Fields",
    "propertiesInSubtitle": "Properties",
    "methodsInSubtitle": "Methods",
    "eventsInSubtitle": "Events",
    "operatorsInSubtitle": "Operators",
    "eiisInSubtitle": "Explicit Interface Implementations",
    "functionsInSubtitle": "Functions",
    "variablesInSubtitle": "Variables",
    "typeAliasesInSubtitle": "Type Aliases",
    "membersInSubtitle": "Members",
    "improveThisDoc": "Edit this page",
    "viewSource": "View Source",
    "inheritance": "Inheritance",
    "derived": "Derived",
    "inheritedMembers": "Inherited Members",
    "package": "Package",
    "namespace": "Namespace",
    "assembly": "Assembly",
    "syntax": "Syntax",
    "overrides": "Overrides",
    "implements": "Implements",
    "remarks": "Remarks",
    "examples": "Examples",
    "seealso": "See Also",
    "declaration": "Declaration",
    "parameters": "Parameters",
    "typeParameters": "Type Parameters",
    "type": "Type",
    "name": "Name",
    "description": "Description",
    "returns": "Returns",
    "fieldValue": "Field Value",
    "propertyValue": "Property Value",
    "eventType": "Event Type",
    "variableValue": "Variable Value",
    "typeAliasType": "Type Alias Type",
    "exceptions": "Exceptions",
    "condition": "Condition",
    "extensionMethods": "Extension Methods",
    "note": "Note",
    "warning": "Warning",
    "tip": "Tip",
    "important": "Important",
    "caution": "Caution",
    "tocToggleButton": "Show / Hide Table of Contents",
    "tocFilter": "Filter by title",
    "search": "Search",
    "searchResults": "Search Results for",
    "searchResultsCount": "{count} results for \"{query}\"",
    "searchNoResults": "No results for \"{query}\"",
    "pageFirst": "First",
    "pagePrev": "Previous",
    "pageNext": "Next",
    "pageLast": "Last",
    "inThisArticle": "In this article",
    "nextArticle": "Next",
    "prevArticle": "Previous",
    "backToTop": "Back to top",
    "themeLight": "Light",
    "themeDark": "Dark",
    "themeAuto": "Auto",
    "changeTheme": "Change theme",
    "copy": "Copy",
    "downloadPdf": "Download PDF",
    "_shared": {}
  }
}