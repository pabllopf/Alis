### YamlMime:ApiPage
title: Struct Manifold
body:
- api1: Struct Manifold
  id: Alis_Core_Physic_Collision_NarrowPhase_Manifold
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Collision/NarrowPhase/Manifold.cs#L52
  metadata:
    uid: Alis.Core.Physic.Collision.NarrowPhase.Manifold
    commentId: T:Alis.Core.Physic.Collision.NarrowPhase.Manifold
- facts:
  - name: Namespace
    value:
      text: Alis.Core.Physic.Collision.NarrowPhase
      url: Alis.Core.Physic.Collision.NarrowPhase.html
  - name: Assembly
    value: Alis.dll
- markdown: >-
    A manifold for two touching convex Shapes.

    Supports multiple types of contact:

    - Clip point versus plane with radius

    - Point versus point with radius (circles)

    The local point usage depends on the manifold type:

    - ShapeType.Circles: the local center of circleA

    - SeparationFunction.FaceA: the center of faceA

    - SeparationFunction.FaceB: the center of faceB

    Similarly the local normal usage:

    - ShapeType.Circles: not used

    - SeparationFunction.FaceA: the normal on polygonA

    - SeparationFunction.FaceB: the normal on polygonB

    We store contacts in this way so that position correction can

    account for movement, which is critical for continuous physics.

    All contact scenarios must be expressed in one of these types.

    This structure is stored across time steps, so we keep it small.
- code: public struct Manifold
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Fields
- api3: Points
  id: Alis_Core_Physic_Collision_NarrowPhase_Manifold_Points
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Collision/NarrowPhase/Manifold.cs#L64
  metadata:
    uid: Alis.Core.Physic.Collision.NarrowPhase.Manifold.Points
    commentId: F:Alis.Core.Physic.Collision.NarrowPhase.Manifold.Points
- markdown: The points of contact
- code: public ManifoldPoint[] Points
- h4: Field Value
- parameters:
  - type:
    - text: ManifoldPoint
      url: Alis.Core.Physic.Collision.NarrowPhase.ManifoldPoint.html
    - '['
    - ']'
- h2: Properties
- api3: LocalNormal
  id: Alis_Core_Physic_Collision_NarrowPhase_Manifold_LocalNormal
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Collision/NarrowPhase/Manifold.cs#L55
  metadata:
    uid: Alis.Core.Physic.Collision.NarrowPhase.Manifold.LocalNormal
    commentId: P:Alis.Core.Physic.Collision.NarrowPhase.Manifold.LocalNormal
- markdown: Not use for Type.SeparationFunction.Points
- code: public Vector2 LocalNormal { readonly get; set; }
- h4: Property Value
- parameters:
  - type:
    - text: Vector2
      url: Alis.Core.Aspect.Math.Vector.Vector2.html
- api3: LocalPoint
  id: Alis_Core_Physic_Collision_NarrowPhase_Manifold_LocalPoint
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Collision/NarrowPhase/Manifold.cs#L58
  metadata:
    uid: Alis.Core.Physic.Collision.NarrowPhase.Manifold.LocalPoint
    commentId: P:Alis.Core.Physic.Collision.NarrowPhase.Manifold.LocalPoint
- markdown: Usage depends on manifold type
- code: public Vector2 LocalPoint { readonly get; set; }
- h4: Property Value
- parameters:
  - type:
    - text: Vector2
      url: Alis.Core.Aspect.Math.Vector.Vector2.html
- api3: PointCount
  id: Alis_Core_Physic_Collision_NarrowPhase_Manifold_PointCount
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Collision/NarrowPhase/Manifold.cs#L61
  metadata:
    uid: Alis.Core.Physic.Collision.NarrowPhase.Manifold.PointCount
    commentId: P:Alis.Core.Physic.Collision.NarrowPhase.Manifold.PointCount
- markdown: The number of manifold points
- code: public int PointCount { readonly get; set; }
- h4: Property Value
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
- api3: Type
  id: Alis_Core_Physic_Collision_NarrowPhase_Manifold_Type
  src: https://github.com/pabllopf/Alis/blob/master/4_Operation/Physic/src/Collision/NarrowPhase/Manifold.cs#L69
  metadata:
    uid: Alis.Core.Physic.Collision.NarrowPhase.Manifold.Type
    commentId: P:Alis.Core.Physic.Collision.NarrowPhase.Manifold.Type
- markdown: The type
- code: public ManifoldType Type { readonly get; set; }
- h4: Property Value
- parameters:
  - type:
    - text: ManifoldType
      url: Alis.Core.Physic.Collision.NarrowPhase.ManifoldType.html
languageId: csharp
metadata:
  description: >-
    A manifold for two touching convex Shapes.

    Supports multiple types of contact:

    - Clip point versus plane with radius

    - Point versus point with radius (circles)

    The local point usage depends on the manifold type:

    - ShapeType.Circles: the local center of circleA

    - SeparationFunction.FaceA: the center of faceA

    - SeparationFunction.FaceB: the center of faceB

    Similarly the local normal usage:

    - ShapeType.Circles: not used

    - SeparationFunction.FaceA: the normal on polygonA

    - SeparationFunction.FaceB: the normal on polygonB

    We store contacts in this way so that position correction can

    account for movement, which is critical for continuous physics.

    All contact scenarios must be expressed in one of these types.

    This structure is stored across time steps, so we keep it small.
