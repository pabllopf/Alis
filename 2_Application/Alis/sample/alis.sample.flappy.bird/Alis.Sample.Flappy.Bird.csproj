<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <OutputType>WinExe</OutputType>
        <OutDir>bin/$(Configuration)/$(RuntimeIdentifier)/lib/</OutDir>
        <LangVersion>13</LangVersion>
        <Nullable>disable</Nullable>
        <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
        <SonarQubeExclude>true</SonarQubeExclude>
        <AssetsExternal>false</AssetsExternal>
    </PropertyGroup>

    <PropertyGroup>
        <DefineConstants>$(DefineConstants);$([System.String]::Copy('$(RuntimeIdentifier)').Replace('-',''));$([System.String]::Copy('$(NETCoreSdkRuntimeIdentifier)').Replace('-',''));</DefineConstants>
    </PropertyGroup>

    <ItemGroup>
        <AssemblyAttribute Include="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute"/>
    </ItemGroup>

    <PropertyGroup>
        <NameTest>$([System.Text.RegularExpressions.Regex]::Replace('$(AssemblyName)', '.[^.]*Sample[^*]*', ''))</NameTest>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference
            Condition="Exists('$(ProjectDir)../src/$(NameTest).csproj') == True"
            Include="$(ProjectDir)../src/$(NameTest).csproj"/>

        <ProjectReference
            Condition="Exists('$(ProjectDir)../src/$(NameTest).csproj') == False"
            Include="$(ProjectDir)../../src/$(NameTest).csproj"/>

        <ProjectReference
            Condition="Exists('$(ProjectDir)../generator/$(NameTest).Generator.csproj')"
            Include="$(ProjectDir)../generator/$(NameTest).Generator.csproj"
            OutputItemType="Analyzer"
            PrivateAssets="all"
            ReferenceOutputAssembly="false"/>
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Condition="$(ProjectDir.Contains('1_Presentation')) OR $(ProjectDir.Contains('2_Application'))"
                          Include="
          $(SolutionDir)4_Operation/**/**/generator/**/*Generator.csproj;
          $(SolutionDir)6_Ideation/**/**/generator/**/*Generator.csproj;"
                          OutputItemType="Analyzer"
                          PrivateAssets="all"
                          ReferenceOutputAssembly="false"/>
    </ItemGroup>

    <PropertyGroup Condition="'$(Configuration)'=='Release'">
        <!-- app.manifest file to use when building the project -->
        <ApplicationManifest>$(ProjectDir)Config/app.manifest</ApplicationManifest>

        <!-- Enables Ahead-of-Time (AOT) compilation for maximum performance and smaller binaries. -->
        <PublishAot>true</PublishAot>
        <!-- Publishes all dependencies with the app, so it runs independently of the system's .NET installation. -->
        <SelfContained>true</SelfContained>

        <!-- Uses invariant globalization to reduce the size by excluding culture-specific data. -->
        <InvariantGlobalization>true</InvariantGlobalization>
        <!-- Folds identical method bodies to reduce code duplication and binary size. -->
        <IlcFoldIdenticalMethodBodies>true</IlcFoldIdenticalMethodBodies>
        <!-- Disables reflection support to allow more aggressive trimming and reduce binary size. -->
        <IlcDisableReflection>false</IlcDisableReflection>

        <!-- Disables stack trace support to save space, at the cost of less detailed error information. -->
        <StackTraceSupport>false</StackTraceSupport>
        <!-- Optimizes the build for size rather than speed. -->
        <OptimizationPreference>Size</OptimizationPreference>
        <!-- Removes debug information from the output, reducing binary size. -->
        <DebugType>none</DebugType>

        <!-- Generates a method statistics file for analysis; does not affect published size. -->
        <IlcGenerateMstatFile>true</IlcGenerateMstatFile>
        <!-- Generates a DGML graph file for code analysis; does not affect published size. -->
        <IlcGenerateDgmlFile>true</IlcGenerateDgmlFile>
        <!-- Generates a map file for code analysis; does not affect published size. -->
        <IlcGenerateMapFile>true</IlcGenerateMapFile>
        <!-- Dumps generated IL code for inspection; does not affect published size. -->
        <IlcDumpGeneratedIL>true</IlcDumpGeneratedIL>

        <!-- Enables tree trimming to remove unused code and libraries, reducing the final binary size. -->
        <PublishTrimmed>true</PublishTrimmed>
        <!-- Aggressively trims unused assemblies and types; 'link' is the most space-saving mode. -->
        <TrimMode>full</TrimMode>
        <!-- Suppresses warnings about code that may be unsafe to trim, useful for aggressive size reduction. -->
        <SuppressTrimAnalysisWarnings>true</SuppressTrimAnalysisWarnings>
        <!-- Compresses files in single-file publish mode, further reducing disk footprint. -->
        <EnableCompressionInSingleFile>true</EnableCompressionInSingleFile>
        <!-- Removes debugging symbols from the output, saving space in the final binary. -->
        <StripSymbols>true</StripSymbols>
        <!-- Disables ReadyToRun compilation, which can increase binary size; only enable if startup performance is critical. -->
        <EnableReadyToRun>false</EnableReadyToRun>
        <!-- Ensures native libraries are extracted only when needed, reducing initial disk usage. -->
        <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
        <!-- Allows unloading of unused assemblies, which can help reduce memory and disk usage in some scenarios. -->
        <EnableAssemblyLoadContextUnload>true</EnableAssemblyLoadContextUnload>
        <!-- Prevents inclusion of default items (like unnecessary files) in the build output, reducing published size. -->
        <EnableDefaultItems>true</EnableDefaultItems>
        <!-- Avoids copying unused satellite assemblies (localization resources), saving space if not needed. -->
        <CopyUnusedSatelliteAssemblies>false</CopyUnusedSatelliteAssemblies>
        <!-- Disables generation of XML documentation files, which are not needed for runtime and take extra space. -->
        <GenerateDocumentationFile>false</GenerateDocumentationFile>
        <!-- Prevents creation of reference assemblies, which are only needed for development, not for deployment. -->
        <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
        <!-- Disables SourceLink, which embeds source control metadata and can increase output size. -->
        <EnableSourceLink>false</EnableSourceLink>
        <!-- Prevents generation of native debug symbols (.dSYM) on macOS. -->
        <DebugSymbols>false</DebugSymbols>

        <!-- Prevents generation of PDB files, which are not needed in production and take up space. -->
        <GenerateDebugSymbols>false</GenerateDebugSymbols>
    </PropertyGroup>


    <ItemGroup Condition="Exists('$(ProjectDir)Assets/') AND '$(AssetsExternal)' == 'true'">
        <None
            Update="$(ProjectDir)Assets/**"
            LinkBase="Assets"
            CopyToOutputDirectory="Always"
            CopyToPublishDirectory="Always"/>
    </ItemGroup>

    <PropertyGroup Condition="Exists('$(ProjectDir)Assets/') AND '$(AssetsExternal)' == 'false'">
        <!-- Folder containing the original resources -->
        <ResourceInputDir>Assets</ResourceInputDir>
        <!-- Final packed file, in the obj build folder -->
        <PackedAssets>$(ProjectDir)obj/assets.pak</PackedAssets>
    </PropertyGroup>

    <!-- Pack resources into a ZIP (assets.pak) using macOS zip command -->
    <Target Name="PackOptimizedResources" BeforeTargets="Build;Publish" Condition="Exists('$(ProjectDir)Assets/') AND '$(AssetsExternal)' == 'false'">
        <Message Text="Deleting and packing resources into $(PackedAssets) from $(ResourceInputDir)" Importance="high" />
        <Delete Files="$(PackedAssets)" />
        <Exec Command="zip -r $(PackedAssets) $(ResourceInputDir)" />
    </Target>

    <!-- Include .pak as embedded resource if it exists -->
    <ItemGroup Condition="Exists('$(ProjectDir)Assets/') AND Exists('$(PackedAssets)') AND '$(AssetsExternal)' == 'false'">
        <EmbeddedResource Include="$(PackedAssets)" LinkBase="." Link="assets.pak" Visible="false" />
    </ItemGroup>

    <!-- Target to create the .app bundle on macOS after publish -->
    <Target Name="CreateMacAppBundle" AfterTargets="Publish" Condition=" '$(RuntimeIdentifier)' == 'osx-x64' OR '$(RuntimeIdentifier)' == 'osx-arm64' ">
        <PropertyGroup>
            <!-- App name and paths -->
            <AppName>$(AssemblyName)</AppName>
            <AppBundleDir>$(PublishDir)$(AppName).app/Contents</AppBundleDir>
            <AppMacOSDir>$(AppBundleDir)/MacOS</AppMacOSDir>
            <AppResourcesDir>$(AppBundleDir)/Resources</AppResourcesDir>
            <AppPlistSource>$(ProjectDir)obj/Info.plist</AppPlistSource>
            <AppPlist>$(AppBundleDir)/Info.plist</AppPlist>
            <AppIconIco>$(ProjectDir)Config/app.ico</AppIconIco>
            <AppIconIcns>$(AppResourcesDir)/app.icns</AppIconIcns>
        </PropertyGroup>

        <!-- Create folder structure -->
        <MakeDir Directories="$(AppMacOSDir);$(AppResourcesDir)" />

        <!-- Copy the executable -->
        <Copy SourceFiles="$(PublishDir)$(AppName)" DestinationFolder="$(AppMacOSDir)" />

        <!-- Copy content files (adjust pattern if you have more content) -->
        <Copy SourceFiles="@(Content)" DestinationFolder="$(AppResourcesDir)" SkipUnchangedFiles="true" Condition="@(Content->Count()) &gt; 0" />

        <!-- Convert icon to .icns if necessary -->
        <Exec Command="sips -s format icns $(AppIconIco) --out $(AppIconIcns)" Condition="Exists('$(AppIconIco)')" />

        <!-- Copy Info.plist generated in Config -->
        <Copy SourceFiles="$(AppPlistSource)" DestinationFiles="$(AppPlist)" />

        <!-- Set executable permissions for the binary -->
        <Exec Command="chmod +x $(AppMacOSDir)/$(AppName)" />
    </Target>

    <Target Name="GenerateDynamicInfoPlist" BeforeTargets="Publish">
        <PropertyGroup>
            <DynamicPlistTemplate>$(ProjectDir)Config/Info.plist</DynamicPlistTemplate>
            <DynamicPlistOutput>$(ProjectDir)obj/Info.plist</DynamicPlistOutput>
        </PropertyGroup>
        <ReadLinesFromFile File="$(DynamicPlistTemplate)">
            <Output TaskParameter="Lines" ItemName="PlistLines" />
        </ReadLinesFromFile>
        <WriteLinesToFile
            File="$(DynamicPlistOutput)"
            Lines="@(PlistLines->Replace('Alis.Sample.Flappy.Bird', '$(AssemblyName)')->Replace('1.0', '$(Version)')->Replace('com.alis.flappybird', '$(ApplicationId)'))"
            Overwrite="true" />
    </Target>


    <ItemGroup>
        <!-- Descriptor de linker (ver LinkerConfig.xml abajo) -->
        <TrimmerRootDescriptor Include="LinkerConfig.xml" />
    </ItemGroup>

    <!-- ==== SUGERIR AL TRIMMER QUE PROCESE/RECORTE ESTOS ENSAMBLADOS ==== -->
    <ItemGroup>
        <!-- Marcar explícitamente un amplio conjunto de assemblies como recortables -->
        <TrimmerRootAssembly Include="System.Linq" Trim="true" />
        <TrimmerRootAssembly Include="System.Linq.Expressions" Trim="true" />
        <TrimmerRootAssembly Include="System.Reflection" Trim="true" />
        <TrimmerRootAssembly Include="System.Reflection.Emit" Trim="true" />
        <TrimmerRootAssembly Include="System.Text.Json" Trim="true" />
        <TrimmerRootAssembly Include="System.Xml" Trim="true" />
        <TrimmerRootAssembly Include="System.Data" Trim="true" />
        <TrimmerRootAssembly Include="System.Net.Http" Trim="true" />
        <TrimmerRootAssembly Include="System.Net.Primitives" Trim="true" />
        <TrimmerRootAssembly Include="System.IO.Compression" Trim="true" />
        <TrimmerRootAssembly Include="System.Diagnostics" Trim="true" />
        <TrimmerRootAssembly Include="System.Resources" Trim="true" />
        <TrimmerRootAssembly Include="System.Globalization" Trim="true" />
        <TrimmerRootAssembly Include="System.ComponentModel" Trim="true" />
        <TrimmerRootAssembly Include="System.Runtime.Serialization" Trim="true" />
        <TrimmerRootAssembly Include="System.Security.Cryptography.Algorithms" Trim="true" />
        <TrimmerRootAssembly Include="System.Security" Trim="true" />
        <TrimmerRootAssembly Include="System.Drawing.Common" Trim="true" />
        <TrimmerRootAssembly Include="System.DirectoryServices" Trim="true" />
        <TrimmerRootAssembly Include="System.Threading.Channels" Trim="true" />
        <TrimmerRootAssembly Include="System.Text.RegularExpressions" Trim="true" />
    </ItemGroup>
    
</Project>