<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <OutputType>Exe</OutputType>
        <OutDir>bin/$(Configuration)/$(RuntimeIdentifier)/lib/</OutDir>
        <LangVersion>13</LangVersion>
        <Nullable>disable</Nullable>
        <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
        <SonarQubeExclude>true</SonarQubeExclude>
        <AssetsExternal>false</AssetsExternal>
        <ApplicationIcon>Config/app.ico</ApplicationIcon>
    </PropertyGroup>

    <PropertyGroup>
        <DefineConstants>$(DefineConstants);$([System.String]::Copy('$(RuntimeIdentifier)').Replace('-',''));$([System.String]::Copy('$(NETCoreSdkRuntimeIdentifier)').Replace('-',''));</DefineConstants>
    </PropertyGroup>

    <ItemGroup>
        <AssemblyAttribute Include="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute"/>
    </ItemGroup>

    <PropertyGroup>
        <NameTest>$([System.Text.RegularExpressions.Regex]::Replace('$(AssemblyName)', '.[^.]*Sample[^*]*', ''))</NameTest>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference
            Condition="Exists('$(ProjectDir)../src/$(NameTest).csproj') == True"
            Include="$(ProjectDir)../src/$(NameTest).csproj"/>

        <ProjectReference
            Condition="Exists('$(ProjectDir)../src/$(NameTest).csproj') == False"
            Include="$(ProjectDir)../../src/$(NameTest).csproj"/>

        <ProjectReference
            Condition="Exists('$(ProjectDir)../generator/$(NameTest).Generator.csproj')"
            Include="$(ProjectDir)../generator/$(NameTest).Generator.csproj"
            OutputItemType="Analyzer"
            PrivateAssets="all"
            ReferenceOutputAssembly="false"/>
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Condition="$(ProjectDir.Contains('1_Presentation')) OR $(ProjectDir.Contains('2_Application'))"
                          Include="
          $(SolutionDir)4_Operation/**/**/generator/**/*Generator.csproj;
          $(SolutionDir)6_Ideation/**/**/generator/**/*Generator.csproj;"
                          OutputItemType="Analyzer"
                          PrivateAssets="all"
                          ReferenceOutputAssembly="false"/>
    </ItemGroup>
    
    <ItemGroup Condition="Exists('$(ProjectDir)Assets/') AND '$(AssetsExternal)' == 'true'">
        <None
            Update="$(ProjectDir)Assets/**"
            LinkBase="Assets"
            CopyToOutputDirectory="Always"
            CopyToPublishDirectory="Always"/>
    </ItemGroup>

    <PropertyGroup Condition="Exists('$(ProjectDir)Assets/') AND '$(AssetsExternal)' == 'false'">
        <!-- Folder containing the original resources -->
        <ResourceInputDir>Assets</ResourceInputDir>
        <!-- Final packed file, in the obj build folder -->
        <PackedAssets>$(ProjectDir)obj/assets.pak</PackedAssets>
    </PropertyGroup>

    <!-- Pack resources into a ZIP (assets.pak) using macOS zip command -->
    <Target Name="PackOptimizedResources" BeforeTargets="Build;Publish" Condition="Exists('$(ProjectDir)Assets/') AND '$(AssetsExternal)' == 'false'">
        <Message Text="Deleting and packing resources into $(PackedAssets) from $(ResourceInputDir)" Importance="high" />
        <Delete Files="$(PackedAssets)" />
        <Exec Command="zip -r $(PackedAssets) $(ResourceInputDir)" />
    </Target>

    <!-- Include .pak as embedded resource if it exists -->
    <ItemGroup Condition="Exists('$(ProjectDir)Assets/') AND Exists('$(PackedAssets)') AND '$(AssetsExternal)' == 'false'">
        <AdditionalFiles Include="$(PackedAssets)" LinkBase="." Link="assets.pak" Visible="false" />
    </ItemGroup>
</Project>