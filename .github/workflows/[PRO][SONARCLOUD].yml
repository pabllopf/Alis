name: "[PRO][SONARCLOUD]"
on:
  push:
    branches:
      - master
    paths:
      - '**.cs'
      - '**.yml'


jobs:
  build:
    name: Build and analyze
    runs-on: macos-latest
    steps:
      - name: Install dependencies with Homebrew
        run: |
          brew install sdl2 sdl2_image sdl2_ttf ffmpeg
          brew link ffmpeg

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: setup
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            3.0.103
            3.1.426
            5.0.408
            6.0.420
            7.0.408
            8.0.202

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global coverlet.console

      - name: Install global tools
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global coverlet.console

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PATH: $PATH:~/.dotnet/tools
        run: |
          # Ruta a la solución (.sln)
          dotnet build alis.sln --no-incremental -c Release -f net6.0 -p:WarningLevel=3 -nowarn:CS8604;CS8605;CS86031701;0809;NETSDK1138;NETSDK1057;CS0618;SYSLIB0050;CS8633;CS8622;CS8714;CS8605;CS8769;CS8618;CS8625;CS8601;CS8602;CS8604;CS8765;CS8603;CS8767;CS8600;CS0433;CS0436;CS1701;CS1702;CS0618;CS1570

          # Ejecutar cobertura
          dotnet-coverage collect "dotnet test alis.sln -c Release -f net6.0 -p:WarningLevel=3 -nowarn:CS8604;CS8605;CS86031701;0809;NETSDK1138;NETSDK1057;CS0618;SYSLIB0050;CS8633;CS8622;CS8714;CS8605;CS8769;CS8618;CS8625;CS8601;CS8602;CS8604;CS8765;CS8603;CS8767;CS8600;CS0433;CS0436;CS1701;CS1702;CS0618;CS1570" -f xml -o "coverage.xml"
          
          # Inicio del análisis SonarCloud
          dotnet-sonarscanner begin /k:"pabllopf_Alis" /o:"pabllopf" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.scanner.scanAll=false
          dotnet build alis.sln --no-incremental -c Release -f net6.0 -p:WarningLevel=3 -nowarn:CS8604;CS8605CS86031701;0809;NETSDK1138;NETSDK1057;CS0618;SYSLIB0050;CS8633;CS8622;CS8714;CS8605;CS8769;CS8618;CS8625;CS8601;CS8602;CS8604;CS8765;CS8603;CS8767;CS8600;CS0433;CS0436;CS1701;CS1702;CS0618;CS1570
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
