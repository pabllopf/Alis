name: "[PRO][PUBLISH]"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs: 
  #
  # comment code
  #

  Comment_Code:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: master

    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          2.1.x
          3.1.x
          5.0.x
          6.0.x

    - name: Install tool
      run: dotnet tool install --global dotnet-document --version 0.1.4-alpha

    - name: Comment code
      run: dotnet document apply ./alis.sln 

    - name: create a file to save the log
      run: date > ./.publish/generated.txt
    
    - name: git config user.name github-actions
      run: git config user.name github-actions

    - name: git config user.email github-actions@github.com
      run: git config user.email github-actions@github.com

    - name: git config core.autocrlf false
      run: git config core.autocrlf false

    - name:  git add .
      run:  git add .

    - name:  git commit -m "Add comments to code by ations"
      run: git commit -m "Add comments to code by ations"

    - name:  git push
      run:  git push



  #
  # FAST TEST
  #
  Fast_Test:
    needs: Comment_Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: develop
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            2.1.x
            3.1.x
            5.0.x
            6.0.x
      - name: Dotnet test
        run: dotnet test alis.sln


  #
  # TEST WINDOWS
  #
  Windows_Latest:
    needs: Fast_Test
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: master
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            2.1.x
            3.1.x
            5.0.x
            6.0.x
      - name: Dotnet test
        run: dotnet test alis.sln 
    



  #
  # TEST MACOS
  #
  Macos_Latest:
    needs: Fast_Test
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: master
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            2.1.x
            3.1.x
            5.0.x
            6.0.x
      - name: Dotnet test
        run: dotnet test alis.sln  


  #
  # TEST LINUX
  #

  Linux_latest:
    needs: Fast_Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: master
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            2.1.x
            3.1.x
            5.0.x
            6.0.x
      - name: Dotnet test
        run: dotnet test alis.sln


  #
  # CREATE PACKAGES
  #
  Create_Packages:
    needs: [ Windows_Latest, Macos_Latest, Linux_latest ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: master
        
      - name: Install dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            2.1.x
            3.1.x
            5.0.x
            6.0.x
    
      - name: Define file name to update version
        run: echo "FILENAME=$(echo './Directory.Build.props')" >> $GITHUB_ENV

      - name: Print the file name to update version
        run: echo $FILENAME

      - name: Get the current version
        run: echo "VERSION=$(grep -Eo '[0-9]\.[0-9]+.[0-9]+' ${{ env.FILENAME }} )" >> $GITHUB_ENV

      - name: Print the current version
        run: echo $VERSION

      - name: Get mayor version
        run: echo "MAYOR=$(echo ${{ env.VERSION }} | cut -f1 -d.)" >> $GITHUB_ENV

      - name: Print mayor version
        run: echo $MAYOR

      - name: Get minor version
        run: echo "MINOR=$(echo ${{ env.VERSION }} | cut -f2 -d.)" >> $GITHUB_ENV

      - name: Print minor version
        run: echo $MINOR

      - name: Get alpha version
        run: echo "ALPHA=$(echo ${{ env.VERSION }} | cut -f3 -d.)" >> $GITHUB_ENV

      - name: Print current alpha version
        run: echo $ALPHA

      - name: Increment version
        run: echo "ALPHA=$(((ALPHA=ALPHA+1)))" >> $GITHUB_ENV 

      - name: Alpha version incremented
        run: echo $ALPHA

      - name: Check alpha version
        run: if [[ "$ALPHA" -gt 9 ]]; then echo "MINOR=$(((MINOR=MINOR+1)))" >> $GITHUB_ENV ; echo "ALPHA=$(((ALPHA=0)))" >> $GITHUB_ENV ; fi

      - name: Check minor version
        run: if [[ "$MINOR" -gt 9 ]]; then echo "MAYOR=$(((MAYOR=MAYOR+1)))" >> $GITHUB_ENV; echo "MINOR=$(((MINOR=0)))" >> $GITHUB_ENV; fi
        
      - name: Create the next version
        run: echo "VERSIONFINAL=$(echo '${{env.MAYOR}}.${{env.MINOR}}.${{env.ALPHA}}')" >> $GITHUB_ENV
        
      - name: Print the next version
        run: echo $VERSIONFINAL

      - name: Write in filename the next version
        run: sed -i "s/$VERSION/$VERSIONFINAL/" $FILENAME

      - name: Create packages
        run: for i in `find . -name "*.csproj" -type f`; do dotnet pack -c Release $i -o ./.publish/$VERSIONFINAL/; done

      - name: Write in filename the next version
        run: sed -i "s/$VERSIONFINAL/$VERSION/" $FILENAME

      - name: git config user.name github-actions
        run: git config user.name github-actions

      - name: git config user.email github-actions@github.com
        run: git config user.email github-actions@github.com

      - name: git config core.autocrlf false
        run: git config core.autocrlf false

      - name:  git add .
        run:  git add .

      - name:  git commit -m "Create the packages of version '$VERSION'."
        run: git commit -m "Create the packages of version '$VERSION'."

      - name:  git push
        run:  git push

  #
  # PUBLISH ON NUGET.ORG
  #

  Publish_On_Nuget_Org:
    needs: Create_Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: master
        
      - name: Install dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            2.1.x
            3.1.x
            5.0.x
            6.0.x
    
      - name: Define file name to update version
        run: echo "FILENAME=$(echo './Directory.Build.props')" >> $GITHUB_ENV

      - name: Print the file name to update version
        run: echo $FILENAME

      - name: Get the current version
        run: echo "VERSION=$(grep -Eo '[0-9]\.[0-9]+.[0-9]+' ${{ env.FILENAME }} )" >> $GITHUB_ENV

      - name: Print the current version
        run: echo $VERSION

      - name: Get mayor version
        run: echo "MAYOR=$(echo ${{ env.VERSION }} | cut -f1 -d.)" >> $GITHUB_ENV

      - name: Print mayor version
        run: echo $MAYOR

      - name: Get minor version
        run: echo "MINOR=$(echo ${{ env.VERSION }} | cut -f2 -d.)" >> $GITHUB_ENV

      - name: Print minor version
        run: echo $MINOR

      - name: Get alpha version
        run: echo "ALPHA=$(echo ${{ env.VERSION }} | cut -f3 -d.)" >> $GITHUB_ENV

      - name: Print current alpha version
        run: echo $ALPHA

      - name: Increment version
        run: echo "ALPHA=$(((ALPHA=ALPHA+1)))" >> $GITHUB_ENV 

      - name: Alpha version incremented
        run: echo $ALPHA

      - name: Check alpha version
        run: if [[ "$ALPHA" -gt 9 ]]; then echo "MINOR=$(((MINOR=MINOR+1)))" >> $GITHUB_ENV ; echo "ALPHA=$(((ALPHA=0)))" >> $GITHUB_ENV ; fi

      - name: Check minor version
        run: if [[ "$MINOR" -gt 9 ]]; then echo "MAYOR=$(((MAYOR=MAYOR+1)))" >> $GITHUB_ENV; echo "MINOR=$(((MINOR=0)))" >> $GITHUB_ENV; fi

      - name: Create the next version
        run: echo "VERSIONFINAL=$(echo '${{env.MAYOR}}.${{env.MINOR}}.${{env.ALPHA}}')" >> $GITHUB_ENV
        
      - name: Print the next version
        run: echo $VERSIONFINAL
        
      - name: Publish nugets
        run: dotnet nuget push ./.publish/$VERSIONFINAL/*.nupkg -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET}} --skip-duplicate

  #
  # PUBLISH ON GITHUB PACKAGES
  #

  Publish_On_Github_Packages:
    needs: Create_Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: master
        
      - name: Install dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            2.1.x
            3.1.x
            5.0.x
            6.0.x
    
      - name: Define file name to update version
        run: echo "FILENAME=$(echo './Directory.Build.props')" >> $GITHUB_ENV

      - name: Print the file name to update version
        run: echo $FILENAME

      - name: Get the current version
        run: echo "VERSION=$(grep -Eo '[0-9]\.[0-9]+.[0-9]+' ${{ env.FILENAME }} )" >> $GITHUB_ENV

      - name: Print the current version
        run: echo $VERSION

      - name: Get mayor version
        run: echo "MAYOR=$(echo ${{ env.VERSION }} | cut -f1 -d.)" >> $GITHUB_ENV

      - name: Print mayor version
        run: echo $MAYOR

      - name: Get minor version
        run: echo "MINOR=$(echo ${{ env.VERSION }} | cut -f2 -d.)" >> $GITHUB_ENV

      - name: Print minor version
        run: echo $MINOR

      - name: Get alpha version
        run: echo "ALPHA=$(echo ${{ env.VERSION }} | cut -f3 -d.)" >> $GITHUB_ENV

      - name: Print current alpha version
        run: echo $ALPHA

      - name: Increment version
        run: echo "ALPHA=$(((ALPHA=ALPHA+1)))" >> $GITHUB_ENV 

      - name: Alpha version incremented
        run: echo $ALPHA

      - name: Check alpha version
        run: if [[ "$ALPHA" -gt 9 ]]; then echo "MINOR=$(((MINOR=MINOR+1)))" >> $GITHUB_ENV ; echo "ALPHA=$(((ALPHA=0)))" >> $GITHUB_ENV ; fi

      - name: Check minor version
        run: if [[ "$MINOR" -gt 9 ]]; then echo "MAYOR=$(((MAYOR=MAYOR+1)))" >> $GITHUB_ENV; echo "MINOR=$(((MINOR=0)))" >> $GITHUB_ENV; fi

      - name: Create the next version
        run: echo "VERSIONFINAL=$(echo '${{env.MAYOR}}.${{env.MINOR}}.${{env.ALPHA}}')" >> $GITHUB_ENV
        
      - name: Print the next version
        run: echo $VERSIONFINAL
        
      - name: Publish nugets
        run: dotnet nuget push ./.publish/$VERSIONFINAL/*.nupkg --source "https://nuget.pkg.github.com/pabllopf/index.json" -k ${{secrets.GITHUB_TOKEN}} --skip-duplicate

  Release:
    needs: [Publish_On_Github_Packages, Publish_On_Nuget_Org]
    runs-on: "ubuntu-latest"

    steps:
      
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: master
        
      - name: Install dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            2.1.x
            3.1.x
            5.0.x
            6.0.x
    
      - name: Define file name to update version
        run: echo "FILENAME=$(echo './Directory.Build.props')" >> $GITHUB_ENV

      - name: Print the file name to update version
        run: echo $FILENAME

      - name: Get the current version
        run: echo "VERSION=$(grep -Eo '[0-9]\.[0-9]+.[0-9]+' ${{ env.FILENAME }} )" >> $GITHUB_ENV

      - name: Print the current version
        run: echo $VERSION

      - name: Get mayor version
        run: echo "MAYOR=$(echo ${{ env.VERSION }} | cut -f1 -d.)" >> $GITHUB_ENV

      - name: Print mayor version
        run: echo $MAYOR

      - name: Get minor version
        run: echo "MINOR=$(echo ${{ env.VERSION }} | cut -f2 -d.)" >> $GITHUB_ENV

      - name: Print minor version
        run: echo $MINOR

      - name: Get alpha version
        run: echo "ALPHA=$(echo ${{ env.VERSION }} | cut -f3 -d.)" >> $GITHUB_ENV

      - name: Print current alpha version
        run: echo $ALPHA

      - name: Increment version
        run: echo "ALPHA=$(((ALPHA=ALPHA+1)))" >> $GITHUB_ENV 

      - name: Alpha version incremented
        run: echo $ALPHA

      - name: Check alpha version
        run: if [[ "$ALPHA" -gt 9 ]]; then echo "MINOR=$(((MINOR=MINOR+1)))" >> $GITHUB_ENV ; echo "ALPHA=$(((ALPHA=0)))" >> $GITHUB_ENV ; fi

      - name: Check minor version
        run: if [[ "$MINOR" -gt 9 ]]; then echo "MAYOR=$(((MAYOR=MAYOR+1)))" >> $GITHUB_ENV; echo "MINOR=$(((MINOR=0)))" >> $GITHUB_ENV; fi

      - name: Create the next version
        run: echo "VERSIONFINAL=$(echo '${{env.MAYOR}}.${{env.MINOR}}.${{env.ALPHA}}')" >> $GITHUB_ENV
        
      - name: Print the next version
        run: echo $VERSIONFINAL

      - name: git config user.name github-actions
        run: git config user.name github-actions

      - name: git config user.email github-actions@github.com
        run: git config user.email github-actions@github.com

      - name: git config core.autocrlf false
        run: git config core.autocrlf false

      - name:  git tag -a <tag_name> HEAD -m "my version 1.4"
        run:  git tag -a v${{ env.VERSIONFINAL }} HEAD -m "v${{ env.VERSIONFINAL }}"

      - name:  git push --tags
        run:  git push --tags

      - name: Update CHANGELOG
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: "v${{ env.VERSIONFINAL }}"
          writeToFile: true
          excludeTypes: chore, perf

      - uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changes }}
          token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          name: "v${{ env.VERSIONFINAL }} has arrived !!!"
          tag_name: "v${{ env.VERSIONFINAL }}"
          generate_release_notes: true
          append_body: true
          files: |
            licence.md
            ./.publish/${{ env.VERSIONFINAL }}/*.nupkg
      
      - name: create a file to save the log
        run: date > ./.publish/generated.txt

      - name: git config user.name github-actions
        run: git config user.name github-actions

      - name: git config user.email github-actions@github.com
        run: git config user.email github-actions@github.com

      - name: git config core.autocrlf false
        run: git config core.autocrlf false

      - name:  git add .
        run:  git add .

      - name:  git commit -m "Create changelog '$VERSIONFINAL'."
        run: git commit -m "Create changelog '$VERSIONFINAL'."

      - name:  git push
        run:  git push

      # https://nitayneeman.com/posts/understanding-semantic-commit-messages-using-git-and-angular/
      # https://github.com/marketplace/actions/labeler
      # 

      #feat: (new feature for the user, not a new feature for build script)
      #fix: (bug fix for the user, not a fix to a build script)
      #docs: (changes to the documentation)
      #style: (formatting, missing semi colons, etc; no production code change)
      #refactor: (refactoring production code, eg. renaming a variable)
      #test: (adding missing tests, refactoring tests; no production code change)
      #chore: (updating grunt tasks etc; no production code change)
      


  #
  # CREATE THE COMMIT
  #
  Write_new_version:
    needs: [ Release ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: master
        
      - name: Install dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            2.1.x
            3.1.x
            5.0.x
            6.0.x
    
      - name: Define file name to update version
        run: echo "FILENAME=$(echo './Directory.Build.props')" >> $GITHUB_ENV

      - name: Print the file name to update version
        run: echo $FILENAME

      - name: Get the current version
        run: echo "VERSION=$(grep -Eo '[0-9]\.[0-9]+.[0-9]+' ${{ env.FILENAME }} )" >> $GITHUB_ENV

      - name: Print the current version
        run: echo $VERSION

      - name: Get mayor version
        run: echo "MAYOR=$(echo ${{ env.VERSION }} | cut -f1 -d.)" >> $GITHUB_ENV

      - name: Print mayor version
        run: echo $MAYOR

      - name: Get minor version
        run: echo "MINOR=$(echo ${{ env.VERSION }} | cut -f2 -d.)" >> $GITHUB_ENV

      - name: Print minor version
        run: echo $MINOR

      - name: Get alpha version
        run: echo "ALPHA=$(echo ${{ env.VERSION }} | cut -f3 -d.)" >> $GITHUB_ENV

      - name: Print current alpha version
        run: echo $ALPHA

      - name: Increment version
        run: echo "ALPHA=$(((ALPHA=ALPHA+1)))" >> $GITHUB_ENV 

      - name: Alpha version incremented
        run: echo $ALPHA

      - name: Check alpha version
        run: if [[ "$ALPHA" -gt 9 ]]; then echo "MINOR=$(((MINOR=MINOR+1)))" >> $GITHUB_ENV ; echo "ALPHA=$(((ALPHA=0)))" >> $GITHUB_ENV ; fi

      - name: Check minor version
        run: if [[ "$MINOR" -gt 9 ]]; then echo "MAYOR=$(((MAYOR=MAYOR+1)))" >> $GITHUB_ENV; echo "MINOR=$(((MINOR=0)))" >> $GITHUB_ENV; fi

      - name: Create the next version
        run: echo "VERSIONFINAL=$(echo '${{env.MAYOR}}.${{env.MINOR}}.${{env.ALPHA}}')" >> $GITHUB_ENV
        
      - name: Print the next version
        run: echo $VERSIONFINAL

      - name: Write in filename the next version
        run: sed -i "s/$VERSION/$VERSIONFINAL/" $FILENAME
        
      - name: View the file content
        run: cat $FILENAME

      - name: git config user.name github-actions
        run: git config user.name github-actions

      - name: git config user.email github-actions@github.com
        run: git config user.email github-actions@github.com

      - name: git config core.autocrlf false
        run: git config core.autocrlf false

      - name:  git add .
        run:  git add .

      - name:  git commit -m "Write the file  to update '$VERSIONFINAL'."
        run: git commit -m "Write the file  to update '$VERSIONFINAL'."

      - name:  git push
        run:  git push
        