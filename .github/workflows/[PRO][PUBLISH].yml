name: "[PRO][PUBLISH]"

on:
  push:
    branches: [ master ]


jobs:
  prepare:
    if: contains(github.event.head_commit.message, 'release:')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: master
          fetch-depth: 1

      - name: Get current version
        id: get-version
        run: |
          file=Directory.Build.props
          version=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "$file" | head -n1)
          IFS='.' read -r major minor patch <<< "$version"
      
          patch=$((patch + 1))
          if [[ "$patch" -gt 9 ]]; then
            patch=0
            minor=$((minor + 1))
          fi
          if [[ "$minor" -gt 9 ]]; then
            minor=0
            major=$((major + 1))
          fi
      
          versionfinal="$major.$minor.$patch"
      
          # 👇 Diferencia clave: en Ubuntu no se usan comillas vacías con -i
          sed -i "s/$version/$versionfinal/" "$file"
      
          echo "version=$versionfinal" >> "$GITHUB_OUTPUT"


  build_extensions:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework: [ net5.0, net8.0, netstandard2.0, net461, netcoreapp2.0 ]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Get current version
        id: get-version
        run: |
          file=Directory.Build.props
          version=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "$file" | head -n1)
          IFS='.' read -r major minor patch <<< "$version"
      
          patch=$((patch + 1))
          if [[ "$patch" -gt 9 ]]; then
            patch=0
            minor=$((minor + 1))
          fi
          if [[ "$minor" -gt 9 ]]; then
            minor=0
            major=$((major + 1))
          fi
      
          versionfinal="$major.$minor.$patch"
      
          # ✅ GNU sed compatible (Ubuntu)
          sed -i "s/$version/$versionfinal/" "$file"
      
          echo "version=$versionfinal" >> "$GITHUB_OUTPUT"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.301

      - name: Check disk space and clean if needed
        shell: bash
        run: |
          echo "💽 Espacio en disco antes de limpiar:"
          df -h /

          THRESHOLD_GB=25
          FREE_GB=$(df -BG / | tail -1 | awk '{print $4}' | sed 's/G//')

          if (( FREE_GB < THRESHOLD_GB )); then
            echo "⚠️ Espacio libre menor de ${THRESHOLD_GB}GB. Limpiando..."
            sudo rm -rf /usr/share/dotnet/sdk/NuGetFallbackFolder || true
            sudo rm -rf /opt/hostedtoolcache/dotnet || true
            sudo rm -rf "$HOME/.nuget/packages" || true
            sudo apt-get clean
            docker system prune -af || true
          else
            echo "✅ Espacio suficiente: ${FREE_GB}GB libres."
          fi

          echo "💽 Espacio en disco después de limpiar:"
          df -h /

      - name: Build extensiones automáticamente
        run: |
          echo "Buscando proyectos..."
          
          if [[ "${{ matrix.framework }}" == netcoreapp* ]]; then
           runtimes=("win-x64" "linux-x64" "osx-x64")
          else
           runtimes=("win-x64" "win-x86" "win-arm64" "linux-x64" "linux-arm" "linux-arm64" "osx-x64" "osx-arm64")
          fi
          
          for proj in $(find 1_Presentation/Extension -name "*.csproj" \
            | grep -viE "sample|generator|benchmark|template|Alis.App|test"); do
          
            echo "Compilando $proj ->  -c Release"
            dotnet build "$proj" -c Release
          
            for rt in "${runtimes[@]}"; do
              echo "Compilando $proj -> fw=${{ matrix.framework }}, rt=$rt"
              dotnet build "$proj" \
                -c Release \
                -f "${{ matrix.framework }}" \
                -r "$rt"
            done
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-core-extensions-${{ matrix.framework }}
          path: |
            **/1_Presentation/**/Extension/**/src/**/bin/**/Release/**/*

            
  build_core:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Get current version
        id: get-version
        run: |
          file=Directory.Build.props
          version=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "$file" | head -n1)
          IFS='.' read -r major minor patch <<< "$version"
      
          patch=$((patch + 1))
          if [[ "$patch" -gt 9 ]]; then
            patch=0
            minor=$((minor + 1))
          fi
          if [[ "$minor" -gt 9 ]]; then
            minor=0
            major=$((major + 1))
          fi
      
          versionfinal="$major.$minor.$patch"
      
          # ✅ GNU sed compatible (Ubuntu)
          sed -i "s/$version/$versionfinal/" "$file"
      
          echo "version=$versionfinal" >> "$GITHUB_OUTPUT"

      - name: Check disk space and clean if needed
        shell: bash
        run: |
          echo "💽 Espacio en disco antes de limpiar:"
          df -h /

          THRESHOLD_GB=25
          FREE_GB=$(df -BG / | tail -1 | awk '{print $4}' | sed 's/G//')

          if (( FREE_GB < THRESHOLD_GB )); then
            echo "⚠️ Espacio libre menor de ${THRESHOLD_GB}GB. Limpiando..."
            sudo rm -rf /usr/share/dotnet/sdk/NuGetFallbackFolder || true
            sudo rm -rf /opt/hostedtoolcache/dotnet || true
            sudo rm -rf "$HOME/.nuget/packages" || true
            sudo apt-get clean
            docker system prune -af || true
          else
            echo "✅ Espacio suficiente: ${FREE_GB}GB libres."
          fi

          echo "💽 Espacio en disco después de limpiar:"
          df -h /

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.301

      

      - name: Build Core (all frameworks)
        shell: bash
        run: |
          frameworks=(
            net5.0 net6.0 net7.0 net8.0 net9.0
            netstandard2.0 netstandard2.1
            net461 net471 net472 net48 net481
            netcoreapp2.0 netcoreapp2.1 netcoreapp2.2 netcoreapp3.0 netcoreapp3.1
          )
  
          echo "Buscando proyectos core..."
  
          for proj in $(find . -name "*.csproj" | grep -viE "sample|generator|benchmark|template|Alis.App|extension|test"); do
            echo "🧱 Compilando $proj (base Release)"
            dotnet build "$proj" -c Release -m:4 --verbosity quiet  || exit 1
  
            for fw in "${frameworks[@]}"; do
              echo "➡️  Framework: $fw"
  
              # Seleccionar runtimes según framework
              if [[ "$fw" == netcoreapp* ]]; then
                runtimes=("win-x64" "linux-x64" "osx-x64")
              else
                runtimes=("win-x64" "win-x86" "win-arm64" "linux-x64" "linux-arm64" "osx-x64" "osx-arm64")
              fi
  
              for rt in "${runtimes[@]}"; do
                echo "⚙️  Compilando $proj -> fw=$fw, rt=$rt"
                dotnet build "$proj" -c Release -m:4 --verbosity quiet  -f "$fw" -r "$rt" || exit 1
              done
            done
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-core-output
          path: |
            **/2_Application/**/src/**/bin/**/Release/**/*
            **/3_Structuration/**/src/**/bin/**/Release/**/*
            **/4_Operation/**/src/**/bin/**/Release/**/*
            **/5_Declaration/**/src/**/bin/**/Release/**/*
            **/6_Ideation/**/src/**/bin/**/Release/**/*
            
  build_apps:
    needs: [ prepare ]
    runs-on: macos-15-intel
    strategy:
      matrix:
        framework: [ net8.0 ]
    steps:

      - name: Limpiar entorno
        run: |
          echo "Limpiando entorno..."
          rm -rf /Users/runner/.dotnet
          rm -rf /Users/runner/.nuget
          
          echo "Entorno limpio."

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Get current version
        id: get-version
        run: |
          file=Directory.Build.props
          version=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "$file" | head -n1)
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          if [[ "$patch" -gt 9 ]]; then
            patch=0
            minor=$((minor + 1))
          fi
          if [[ "$minor" -gt 9 ]]; then
            minor=0
            major=$((major + 1))
          fi
          versionfinal="$major.$minor.$patch"
          sed -i "" "s/$version/$versionfinal/" "$file"
          echo "version=$versionfinal"


      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.301

      - name: Restore dependencies
        run: dotnet restore alis.sln

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -m:4 --verbosity quiet -r win-x64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -m:4 --verbosity quiet -r win-x64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -m:4 --verbosity quiet -r win-x64 -f ${{ matrix.framework }}

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -m:4 --verbosity quiet -r win-x86 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -m:4 --verbosity quiet -r win-x86 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -m:4 --verbosity quiet -r win-x86 -f ${{ matrix.framework }}

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -m:4 --verbosity quiet -r win-arm64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -m:4 --verbosity quiet -r win-arm64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -m:4 --verbosity quiet -r win-arm64 -f ${{ matrix.framework }}


      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -m:4 --verbosity quiet -r linux-x64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -m:4 --verbosity quiet -r linux-x64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -m:4 --verbosity quiet -r linux-x64 -f ${{ matrix.framework }}

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -m:4 --verbosity quiet -r linux-arm64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -m:4 --verbosity quiet -r linux-arm64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -m:4 --verbosity quiet -r linux-arm64 -f ${{ matrix.framework }}
        

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -m:4 --verbosity quiet -r osx-x64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -m:4 --verbosity quiet -r osx-x64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -m:4 --verbosity quiet -r osx-x64 -f ${{ matrix.framework }}

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -m:4 --verbosity quiet -r osx-arm64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -m:4 --verbosity quiet -r osx-arm64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -m:4 --verbosity quiet -r osx-arm64 -f ${{ matrix.framework }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-apps-output-${{ matrix.framework }}
          path: |
            **/1_Presentation/Hub/src/**/bin/**/Release/**/*.dmg
            **/1_Presentation/Hub/src/**/bin/**/Release/**/*.zip
  
  publish_packages:
    name: Publish NuGet Packages
    needs: [ prepare, build_extensions, build_core, build_apps ]
    runs-on: macos-15-intel
    steps:

      - name: Limpiar entorno
        run: |
          echo "Limpiando entorno..."
          rm -rf /Users/runner/.dotnet
          rm -rf /Users/runner/.nuget
          
          echo "Entorno limpio."

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.301

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./restored-artifacts

      - name: Restore artifacts to original locations
        run: |
          echo "📂 Restaurando artefactos a sus ubicaciones originales..."
          cd restored-artifacts

          find . -type f | while read file; do
            # Elimina sólo el prefijo "./build-*" pero mantiene el resto
            cleaned_path=$(echo "$file" | sed -E 's|^\./[^/]+/||')
            target_path="/Users/runner/work/Alis/Alis/$(dirname "$cleaned_path")"

            echo "📄 Copiando: $file -> $target_path/"
            mkdir -p "$target_path"
            cp "$file" "$target_path/"
          done

          echo "✅ Restauración completada."

      - name: Get current version
        id: get-version
        run: |
          file=Directory.Build.props
          version=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "$file" | head -n1)
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          if [[ "$patch" -gt 9 ]]; then
            patch=0
            minor=$((minor + 1))
          fi
          if [[ "$minor" -gt 9 ]]; then
            minor=0
            major=$((major + 1))
          fi
          versionfinal="$major.$minor.$patch"
          sed -i "" "s/$version/$versionfinal/" "$file"
          echo "version=$versionfinal" >> $GITHUB_OUTPUT

      - name: Create packages
        run: |
          mkdir -p ./.publish/${{ needs.prepare.outputs.version }}
          for project in $(find . -name "*.csproj" -type f); do
            if [[ $project != *".Template."* && $project != *".App."* && $project != *".Test."* && $project != *".Benchmark"* && $project != *".Benchmark."* && $project != *".Sample."* && $project != *".Generator"* && $project != *".Generator."* ]]; then
              echo "Packing $project"
              dotnet pack --include-symbols --include-source "$project" -c Release -o "./.publish/${{ needs.prepare.outputs.version }}/"
            fi
          done

      - name: Publish to NuGet
        run: dotnet nuget push ./.publish/${{ needs.prepare.outputs.version }}/*.nupkg -s https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET }} --skip-duplicate

      - name: Publish to NuGet
        run: dotnet nuget push ./.publish/${{ needs.prepare.outputs.version }}/*.snupkg -s https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET }} --skip-duplicate

      - name: Publish to GitHub NuGet Feed
        run: dotnet nuget push ./.publish/${{ needs.prepare.outputs.version }}/*.nupkg --source "https://nuget.pkg.github.com/pabllopf/index.json" -k ${{ secrets.GITHUB_TOKEN }} --skip-duplicate

      - name: git config --global user.name github-actions
        run: git config --global user.name "${{ secrets.USER_NAME }}"

      - name: git config --global user.email github-actions@github.com
        run: git config --global user.email "${{ secrets.USER_EMAIL }}"

      - name: git config user.name
        run: git config user.name

      - name: git config user.email
        run: git config user.email

      - name: Find common ancestor
        run: git merge-base --fork-point origin/master

      - name: Import bot's GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: git tag
        run: git tag -s "v${{ needs.prepare.outputs.version }}" -m "v${{ needs.prepare.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: git push --tags
        run: git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: Update CHANGELOG
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: "v${{ needs.prepare.outputs.version }}"
          writeToFile: true
          excludeTypes: chore, perf

      - uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.changes }}
          token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          name: "v${{ needs.prepare.outputs.version }} has arrived !!!"
          tag_name: "v${{ needs.prepare.outputs.version }}"
          generate_release_notes: true
          append_body: true
          files: |
            licence.md
            ./.publish/**/*.nupkg
            ./1_Presentation/Hub/src/bin/Release/**/osx-arm64/**/*.dmg
            ./1_Presentation/Hub/src/bin/Release/**/osx-x64/**/*.dmg
            ./1_Presentation/Hub/src/bin/Release/**/win-x64/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/win-arm64/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/win-x86/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/linux-x64/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/linux-arm64/**/*.zip

      - name: git fetch
        run: git fetch

      - name: git checkout master
        run: git checkout master

      - name: git pull
        run: git pull

      - name: git add .
        run: git add .

      - name: git commit -S -m "Create the packages of version '$VERSIONFINAL'."
        run: git commit -S -m "Create the packages of version '$VERSIONFINAL'."
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: git push
        run: git push
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}
