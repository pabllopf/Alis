name: "[PRO][PUBLISH]"

on:
  push:
    branches: [ master ]

jobs:
  prepare:
    if: contains(github.event.head_commit.message, 'release:')
    runs-on: macos-13
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Get current version
        id: get-version
        run: |
          file=Directory.Build.props
          version=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "$file" | head -n1)
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          if [[ "$patch" -gt 9 ]]; then
            patch=0
            minor=$((minor + 1))
          fi
          if [[ "$minor" -gt 9 ]]; then
            minor=0
            major=$((major + 1))
          fi
          versionfinal="$major.$minor.$patch"
          sed -i "" "s/$version/$versionfinal/" "$file"
          echo "version=$versionfinal" >> $GITHUB_OUTPUT

  build_extensions:
    needs: prepare
    runs-on: macos-13
    strategy:
      matrix:
        framework: [ net5.0, netstandard2.0, net471 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.301

      - name: Build Alis.Extension.Graphic.Sdl2 - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/Sdl2/src/Alis.Extension.Graphic.Sdl2.csproj -r win-x64 -f "${{ matrix.framework }}" -c Release
          
      - name: Build Alis.Extension.Graphic.ImGui - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/ImGui/src/Alis.Extension.Graphic.ImGui.csproj -r win-x64 -f "${{ matrix.framework }}" -c Release
        
      - name: Build Alis.Extension.Graphic.Sdl2 - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/Sdl2/src/Alis.Extension.Graphic.Sdl2.csproj -r win-x86 -f "${{ matrix.framework }}" -c Release

      - name: Build Alis.Extension.Graphic.ImGui - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/ImGui/src/Alis.Extension.Graphic.ImGui.csproj -r win-x86 -f "${{ matrix.framework }}" -c Release
        
      - name: Build Alis.Extension.Graphic.Sdl2 - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/Sdl2/src/Alis.Extension.Graphic.Sdl2.csproj -r win-arm64 -f "${{ matrix.framework }}" -c Release

      - name: Build Alis.Extension.Graphic.ImGui - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/ImGui/src/Alis.Extension.Graphic.ImGui.csproj -r win-arm64 -f "${{ matrix.framework }}" -c Release
        
      - name: Build Alis.Extension.Graphic.Sdl2 - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/Sdl2/src/Alis.Extension.Graphic.Sdl2.csproj -r linux-x64 -f "${{ matrix.framework }}" -c Release

      - name: Build Alis.Extension.Graphic.ImGui - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/ImGui/src/Alis.Extension.Graphic.ImGui.csproj -r linux-x64 -f "${{ matrix.framework }}" -c Release
        
      - name: Build Alis.Extension.Graphic.Sdl2 - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/Sdl2/src/Alis.Extension.Graphic.Sdl2.csproj -r linux-arm -f "${{ matrix.framework }}" -c Release

      - name: Build Alis.Extension.Graphic.ImGui - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/ImGui/src/Alis.Extension.Graphic.ImGui.csproj -r linux-arm -f "${{ matrix.framework }}" -c Release
        
      - name: Build Alis.Extension.Graphic.Sdl2 - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/Sdl2/src/Alis.Extension.Graphic.Sdl2.csproj -r linux-arm64 -f "${{ matrix.framework }}" -c Release

      - name: Build Alis.Extension.Graphic.ImGui - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/ImGui/src/Alis.Extension.Graphic.ImGui.csproj -r linux-arm64 -f "${{ matrix.framework }}" -c Release
        
      - name: Build Alis.Extension.Graphic.Sdl2 - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/Sdl2/src/Alis.Extension.Graphic.Sdl2.csproj -r osx-x64 -f "${{ matrix.framework }}" -c Release

      - name: Build Alis.Extension.Graphic.ImGui - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/ImGui/src/Alis.Extension.Graphic.ImGui.csproj -r osx-x64 -f "${{ matrix.framework }}" -c Release

      - name: Build Alis.Extension.Graphic.Sdl2 - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/Sdl2/src/Alis.Extension.Graphic.Sdl2.csproj -r osx-arm64 -f "${{ matrix.framework }}" -c Release

      - name: Build Alis.Extension.Graphic.ImGui - ${{ matrix.framework }}
        run: dotnet build ./1_Presentation/Extension/Graphic/ImGui/src/Alis.Extension.Graphic.ImGui.csproj -r osx-arm64 -f "${{ matrix.framework }}" -c Release
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-extensions-${{ matrix.framework }}
          path: |
            **/bin/Release/**/*.dll
            **/bin/Release/**/*.pdb
            **/bin/Release/**/*.xml
            **/bin/Release/**/*.deps.json
            **/bin/Release/**/*.runtimeconfig.json
                
                
  build_core:
    needs: prepare
    runs-on: macos-13
    strategy:
      matrix:
        framework: [
          net5.0, net6.0, net7.0, net8.0, net9.0,
          netstandard2.0, netstandard2.1,
          net471, net472, net48, net481
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref : master
          fetch-depth: 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.301
          

      - name: Build ALIS.CORE.GRAPHIC - ${{ matrix.framework }}
        run: dotnet build ./4_Operation/Graphic/src/Alis.Core.Graphic.csproj -r win-x64 -f "${{ matrix.framework }}" -c Release 

      - name: Build ALIS.CORE - ${{ matrix.framework }} 
        run: dotnet build ./3_Structuration/Core/src/Alis.Core.csproj -r win-x64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS - ${{ matrix.framework }} 
        run: dotnet build ./2_Application/Alis/src/Alis.csproj -r win-x64 -f "${{ matrix.framework }}" -c Release
        
      - name: Build ALIS.CORE.GRAPHIC - ${{ matrix.framework }}
        run: dotnet build ./4_Operation/Graphic/src/Alis.Core.Graphic.csproj -r win-x86 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS.CORE - ${{ matrix.framework }}
        run: dotnet build ./3_Structuration/Core/src/Alis.Core.csproj -r win-x86 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS - ${{ matrix.framework }}
        run: dotnet build ./2_Application/Alis/src/Alis.csproj -r win-x86 -f "${{ matrix.framework }}" -c Release
        
      - name: Build ALIS.CORE.GRAPHIC - ${{ matrix.framework }}
        run: dotnet build ./4_Operation/Graphic/src/Alis.Core.Graphic.csproj -r win-arm64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS.CORE - ${{ matrix.framework }}
        run: dotnet build ./3_Structuration/Core/src/Alis.Core.csproj -r win-arm64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS - ${{ matrix.framework }}
        run: dotnet build ./2_Application/Alis/src/Alis.csproj -r win-arm64 -f "${{ matrix.framework }}" -c Release
        

      - name: Build ALIS.CORE.GRAPHIC - ${{ matrix.framework }}
        run: dotnet build ./4_Operation/Graphic/src/Alis.Core.Graphic.csproj -r linux-x64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS.CORE - ${{ matrix.framework }}
        run: dotnet build ./3_Structuration/Core/src/Alis.Core.csproj -r linux-x64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS - ${{ matrix.framework }}
        run: dotnet build ./2_Application/Alis/src/Alis.csproj -r linux-x64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS.CORE.GRAPHIC - ${{ matrix.framework }}
        run: dotnet build ./4_Operation/Graphic/src/Alis.Core.Graphic.csproj -r linux-arm64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS.CORE - ${{ matrix.framework }}
        run: dotnet build ./3_Structuration/Core/src/Alis.Core.csproj -r linux-arm64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS - ${{ matrix.framework }}
        run: dotnet build ./2_Application/Alis/src/Alis.csproj -r linux-arm64 -f "${{ matrix.framework }}" -c Release
        
      - name: Build ALIS.CORE.GRAPHIC - ${{ matrix.framework }}
        run: dotnet build ./4_Operation/Graphic/src/Alis.Core.Graphic.csproj -r linux-arm -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS.CORE - ${{ matrix.framework }}
        run: dotnet build ./3_Structuration/Core/src/Alis.Core.csproj -r linux-arm -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS - ${{ matrix.framework }}
        run: dotnet build ./2_Application/Alis/src/Alis.csproj -r linux-arm -f "${{ matrix.framework }}" -c Release
        


      - name: Build ALIS.CORE.GRAPHIC - ${{ matrix.framework }}
        run: dotnet build ./4_Operation/Graphic/src/Alis.Core.Graphic.csproj -r osx-x64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS.CORE - ${{ matrix.framework }}
        run: dotnet build ./3_Structuration/Core/src/Alis.Core.csproj -r osx-x64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS - ${{ matrix.framework }}
        run: dotnet build ./2_Application/Alis/src/Alis.csproj -r osx-x64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS.CORE.GRAPHIC - ${{ matrix.framework }}
        run: dotnet build ./4_Operation/Graphic/src/Alis.Core.Graphic.csproj -r osx-arm64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS.CORE - ${{ matrix.framework }}
        run: dotnet build ./3_Structuration/Core/src/Alis.Core.csproj -r osx-arm64 -f "${{ matrix.framework }}" -c Release

      - name: Build ALIS - ${{ matrix.framework }}
        run: dotnet build ./2_Application/Alis/src/Alis.csproj -r osx-arm64 -f "${{ matrix.framework }}" -c Release



      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-core-output-${{ matrix.framework }}
          path: |
            **/bin/Release/**/*.dll
            **/bin/Release/**/*.pdb
            **/bin/Release/**/*.xml
            **/bin/Release/**/*.deps.json
            **/bin/Release/**/*.runtimeconfig.json

  build_apps:
    needs: [prepare]
    runs-on: macos-13
    strategy:
      matrix:
        framework: [ net8.0 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.301

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -r win-x64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -r win-x64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -r win-x64 -f ${{ matrix.framework }}

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -r win-x86 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -r win-x86 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -r win-x86 -f ${{ matrix.framework }}
        
      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -r win-arm64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -r win-arm64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -r win-arm64 -f ${{ matrix.framework }}
        

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -r linux-x64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -r linux-x64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -r linux-x64 -f ${{ matrix.framework }}

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -r linux-arm64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -r linux-arm64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -r linux-arm64 -f ${{ matrix.framework }}
        
      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -r linux-arm -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -r linux-arm -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -r linux-arm -f ${{ matrix.framework }}
        
        
      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -r osx-x64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -r osx-x64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -r osx-x64 -f ${{ matrix.framework }}

      - name: Publish INTALLER - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Installer/src/Alis.App.Installer.csproj -c Release -r osx-arm64 -f ${{ matrix.framework }}

      - name: Publish ENGINE - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Engine/src/Alis.App.Engine.csproj -c Release -r osx-arm64 -f ${{ matrix.framework }}

      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -r osx-arm64 -f ${{ matrix.framework }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-apps-output-${{ matrix.framework }}
          path: |
            **/bin/Release/**/*.dll
            **/bin/Release/**/*.exe
            **/bin/Release/**/*.app
            **/bin/Release/**/*.dmg
            **/bin/Release/**/*.zip
            **/bin/Release/**/*.msi
            **/bin/Release/**/*.pdb
            **/bin/Release/**/*.xml
            **/bin/Release/**/*.deps.json
            **/bin/Release/**/*.runtimeconfig.json
          
  
  publish_packages:
    name: Publish NuGet Packages
    needs: [prepare, build_extensions, build_core, build_apps]
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.301
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./restored-artifacts
          
      - name: Restore artifacts to original locations
        run: |
          echo "📂 Restaurando artefactos a sus ubicaciones originales..."
          cd restored-artifacts

          find . -type f | while read file; do
            # Elimina sólo el prefijo "./build-*" pero mantiene el resto
            cleaned_path=$(echo "$file" | sed -E 's|^\./[^/]+/||')
            target_path="/Users/runner/work/Alis/Alis/$(dirname "$cleaned_path")"

            echo "📄 Copiando: $file -> $target_path/"
            mkdir -p "$target_path"
            cp "$file" "$target_path/"
          done

          echo "✅ Restauración completada."
      
      - name: Get current version
        id: get-version
        run: |
          file=Directory.Build.props
          version=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "$file" | head -n1)
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          if [[ "$patch" -gt 9 ]]; then
            patch=0
            minor=$((minor + 1))
          fi
          if [[ "$minor" -gt 9 ]]; then
            minor=0
            major=$((major + 1))
          fi
          versionfinal="$major.$minor.$patch"
          sed -i "" "s/$version/$versionfinal/" "$file"
          echo "version=$versionfinal" >> $GITHUB_OUTPUT

      - name: Create packages
        run: |
          mkdir -p ./.publish/${{ needs.prepare.outputs.version }}
          for project in $(find . -name "*.csproj" -type f); do
            if [[ $project != *".Template."* && $project != *".App."* && $project != *".Test."* && $project != *".Benchmark"* && $project != *".Benchmark."* && $project != *".Sample."* && $project != *".Generator"* && $project != *".Generator."* ]]; then
              echo "Packing $project"
              dotnet pack "$project" -c Release -o "./.publish/${{ needs.prepare.outputs.version }}/"
            fi
          done
          
        
      - name: Publish to NuGet
        run: dotnet nuget push ./.publish/${{ needs.prepare.outputs.version }}/*.nupkg -s https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET }} --skip-duplicate

      - name: Publish to GitHub NuGet Feed
        run: dotnet nuget push ./.publish/${{ needs.prepare.outputs.version }}/*.nupkg --source "https://nuget.pkg.github.com/pabllopf/index.json" -k ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
        
      - name: git config --global user.name github-actions
        run: git config --global user.name "${{ secrets.USER_NAME }}"

      - name: git config --global user.email github-actions@github.com
        run: git config --global user.email "${{ secrets.USER_EMAIL }}"

      - name: git config user.name
        run: git config user.name

      - name: git config user.email
        run: git config user.email

      - name: Find common ancestor
        run: git merge-base --fork-point origin/master

      - name: Import bot's GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: git tag
        run: git tag -s "v${{ needs.prepare.outputs.version }}" -m "v${{ needs.prepare.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: git push --tags
        run: git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: Update CHANGELOG
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: "v${{ needs.prepare.outputs.version }}"
          writeToFile: true
          excludeTypes: chore, perf

      - uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.changes }}
          token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          name: "v${{ needs.prepare.outputs.version }} has arrived !!!"
          tag_name: "v${{ needs.prepare.outputs.version }}"
          generate_release_notes: true
          append_body: true
          files: |
            licence.md
            ./.publish/**/*.nupkg
            ./1_Presentation/Hub/src/bin/Release/**/osx-arm64/**/*.dmg
            ./1_Presentation/Hub/src/bin/Release/**/osx-x64/**/*.dmg
            ./1_Presentation/Hub/src/bin/Release/**/win-x64/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/win-arm64/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/win-x86/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/linux-x64/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/linux-arm/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/linux-arm64/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/linux-musl-x64/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/linux-musl-arm/**/*.zip
            ./1_Presentation/Hub/src/bin/Release/**/linux-musl-arm64/**/*.zip


      - name: git fetch
        run: git fetch

      - name: git checkout master
        run: git checkout master

      - name: git pull
        run: git pull

      - name: git add .
        run: git add .

      - name: git commit -S -m "Create the packages of version '$VERSIONFINAL'."
        run: git commit -S -m "Create the packages of version '$VERSIONFINAL'."
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: git push
        run: git push
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}
