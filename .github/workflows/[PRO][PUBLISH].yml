name: "[PRO][PUBLISH]"

on:
  push:
    branches: [ master ]

jobs:
  prepare:
    if: "contains(github.event.head_commit.message, 'release:')"
    runs-on: macos-13
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            3.0.103
            3.1.426
            5.0.408
            6.0.420
            7.0.408
            8.0.202
            9.x.x

      - name: Get current version
        id: get-version
        run: |
          file=Directory.Build.props
          version=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "$file")
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch + 1))
          if [[ "$patch" -gt 9 ]]; then
            patch=0
            minor=$((minor + 1))
          fi
          if [[ "$minor" -gt 9 ]]; then
            minor=0
            major=$((major + 1))
          fi
          versionfinal="$major.$minor.$patch"
          sed -i "" "s/$version/$versionfinal/" "$file"
          echo "version=$versionfinal" >> $GITHUB_OUTPUT

  build_extensions:
    needs: prepare
    runs-on: macos-13
    strategy:
      matrix:
        runtime: [
          win-x64, win-x86, win-arm64,
          linux-x64, linux-musl-x64,
          linux-arm, linux-arm64,
          linux-musl-arm, linux-musl-arm64,
          osx-x64, osx-arm64
        ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.202
      - name: Build EXTENSIONS - ${{ matrix.runtime }}
        run: |
          for project in $(find . -name "*.csproj" -type f); do
            if [[ $project == *".Extension."* && $project != *".Test."* && $project != *".Benchmark."* && $project != *".Sample."* ]]; then
              echo "Compiling $project for netstandard2.0, ${{ matrix.runtime }}"
              dotnet build "$project" -r "${{ matrix.runtime }}" -f netstandard2.0 -c Release
            fi
          done

  build_standard:
    needs: prepare
    runs-on: macos-13
    strategy:
      matrix:
        runtime: [
          win-x64, win-x86, win-arm64,
          linux-x64, linux-musl-x64,
          linux-arm, linux-arm64,
          linux-musl-arm, linux-musl-arm64,
          osx-x64, osx-arm64
        ]
        framework: [
          net6.0, net7.0, net8.0, net9.0,
          netstandard2.0, netstandard2.1,
          net471, net472, net48, net481
        ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.202
      - name: Build STANDARD - ${{ matrix.framework }} / ${{ matrix.runtime }}
        run: |
          for project in $(find . -name "*.csproj" -type f); do
            if [[ $project != *".Template."* && $project != *".App."* && $project != *".Extension."* && $project != *".Test."* && $project != *".Benchmark."* && $project != *".Sample."* ]]; then
              echo "Compiling $project for ${{ matrix.framework }}, ${{ matrix.runtime }}"
              dotnet build "$project" -r "${{ matrix.runtime }}" -f "${{ matrix.framework }}" -c Release
            fi
          done

  build_especials:
    needs: prepare
    runs-on: macos-13
    strategy:
      matrix:
        runtime: [ win-x64, win-x86, linux-x64, linux-musl-x64, osx-x64 ]
        framework: [ netcoreapp2.0, netcoreapp2.1, netcoreapp2.2, netcoreapp3.0, netcoreapp3.1, net5.0 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 5.0.408
      - name: Build ESPECIALS - ${{ matrix.framework }} / ${{ matrix.runtime }}
        run: |
          for project in $(find . -name "*.csproj" -type f); do
            if [[ $project != *".Template."* && $project != *".App."* && $project != *".Extension."* && $project != *".Test."* && $project != *".Benchmark."* && $project != *".Sample."* ]]; then
              echo "Compiling $project for ${{ matrix.framework }}, ${{ matrix.runtime }}"
              dotnet build "$project" -r "${{ matrix.runtime }}" -f "${{ matrix.framework }}" -c Release
            fi
          done

  build_apps:
    needs: prepare
    runs-on: macos-13
    strategy:
      matrix:
        project:
          - ./1_Presentation/Installer/src/Alis.App.Installer.csproj
          - ./1_Presentation/Engine/src/Alis.App.Engine.csproj
        framework: [ net8.0 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.202
      - name: Build APP - ${{ matrix.project }}
        run: dotnet build "${{ matrix.project }}" -c Release -f ${{ matrix.framework }}

  publish_hub:
    needs: prepare
    runs-on: macos-13
    strategy:
      matrix:
        runtime: [
          osx-arm64, osx-x64,
          win-x64, win-arm64, win-x86,
          linux-x64, linux-arm64, linux-arm,
          linux-musl-x64, linux-musl-arm
        ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.202
      - name: Publish HUB - ${{ matrix.runtime }}
        run: dotnet build ./1_Presentation/Hub/src/Alis.App.Hub.csproj -c Release -r ${{ matrix.runtime }} -f net8.0
