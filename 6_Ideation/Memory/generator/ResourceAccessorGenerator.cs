using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Alis.Core.Aspect.Memory.Generator
{
    [Generator]
    public class ResourceAccessorGenerator : ISourceGenerator
    {
        private const string ResourceNamespace = "Alis.Core.Aspect.Memory.Generator";
        private const string ResourceFileName = "assets.pak"; // Nombre base del archivo

        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            // 1. Inferir el nombre completo del recurso embebido (Namespace.FileName.Extension)
            string assemblyName = context.Compilation.AssemblyName ?? "DefaultAssembly";
            string fullResourceName = $"{assemblyName}.{ResourceFileName}";
            // NOTA: No se puede acceder a los recursos embebidos desde Roslyn directamente.
            // El nombre debe seguir la convención: [RootNamespace].[Path].[FileName].[Extension]
            // Si el usuario cambia el namespace raíz o la ubicación, debe ajustar ResourceFileName.

            // 2. Generar el código C#
            string sourceCode = GenerateResourceAccessor(fullResourceName);

            // 3. Añadir el código generado a la compilación
            context.AddSource("ResourceAccessor.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
        }

        private string GenerateResourceAccessor(string fullResourceName)
        {
            // Genera la clase estática ResourceAccessor y el método GetAssetStream
            string code = $@"
// <auto-generated/>
using System;
using System.IO;
using System.Reflection;

namespace {ResourceNamespace}
{{
    /// <summary>
    /// Acceso estático y compatible con AOT para el recurso embebido ""{ResourceFileName}"".
    /// </summary>
    public static class ResourceAccessor
    {{
        private static readonly Assembly CurrentAssembly = typeof(ResourceAccessor).Assembly;
        private const string ResourceName = ""{fullResourceName}"";

        /// <summary>
        /// Obtiene un Stream del recurso embebido ""{ResourceFileName}"".
        /// </summary>
        /// <returns>Stream del recurso.</returns>
        /// <exception cref=""InvalidOperationException"">Si el recurso no se encuentra.</exception>
        public static Stream GetAssetStream()
        {{
            // Esta llamada a GetManifestResourceStream es AOT-safe
            // porque la asamblea se obtiene estáticamente a través de typeof(T).Assembly.
            Stream stream = CurrentAssembly.GetManifestResourceStream(ResourceName);
            
            return stream 
                   ?? throw new InvalidOperationException($""El recurso embebido {{ResourceName}} no se encontró en la asamblea."");
        }}
    }}
}}
";
            return code;
        }
    }
}