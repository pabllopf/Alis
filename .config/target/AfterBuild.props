
<Project>
    
        <!-- Solo si hay configuración de obfuscación -->
        <PropertyGroup Condition="'$(Configuration)' == 'Release' 
                            And Exists('$(ProjectDir).config/obfuscar-$(TargetFramework).xml')">
            <ObfuscarConfig>$(ProjectDir).config/obfuscar-$(TargetFramework).xml</ObfuscarConfig>
            <ObfuscatedDir>$(ProjectDir)bin\$(Configuration)\$(RuntimeIdentifier)\lib\$(TargetFramework)\obfuscated\</ObfuscatedDir>
            <OutputDir>$(ProjectDir)bin\$(Configuration)\$(RuntimeIdentifier)\lib\$(TargetFramework)\</OutputDir>
            <DllName>$(AssemblyName).dll</DllName>
        </PropertyGroup>

        <!-- Garantizar instalación de Obfuscar (solo si no existe ya) -->
        <Target Name="EnsureObfuscarTool" BeforeTargets="RunObfuscation"
                Condition="'$(ObfuscarConfig)' != ''">
            <Exec Command="dotnet tool update --global Obfuscar.GlobalTool --version 2.2.49" />
        </Target>

        <!-- Ejecutar Obfuscación -->
        <Target Name="RunObfuscation" AfterTargets="Build;Publish"
                Condition="'$(ObfuscarConfig)' != ''">
            <Message Importance="high" Text="Running Obfuscar with $(ObfuscarConfig)..." />
            <Exec Command="obfuscar.console &quot;$(ObfuscarConfig)&quot;" />
        </Target>

        <!-- Sustituir DLL con la versión ofuscada -->
        <Target Name="ReplaceWithObfuscatedDll" AfterTargets="RunObfuscation"
                Condition="Exists('$(ObfuscatedDir)$(DllName)')">
            <Message Importance="high" Text="Replacing $(DllName) with obfuscated version..." />
            <Copy SourceFiles="$(ObfuscatedDir)$(DllName)"
                  DestinationFiles="$(OutputDir)$(DllName)"
                  OverwriteReadOnlyFiles="true" />
        </Target>

        <!-- Limpiar carpeta de obfuscación -->
        <Target Name="CleanObfuscatedFolder" AfterTargets="ReplaceWithObfuscatedDll"
                Condition="Exists('$(ObfuscatedDir)')">
            <RemoveDir Directories="$(ObfuscatedDir)" />
        </Target>
   
    
    <Target Name="BuildAndCopyInstallerOutput" AfterTargets="Publish" Condition="$(AssemblyName.Equals('Alis.App.Hub'))">
        <MSBuild Projects="$(SolutionDir)1_Presentation/Installer/src/Alis.App.Installer.csproj" Targets="Build" Properties="Configuration=$(Configuration)"/>
        <PropertyGroup>
            <InstallerOutputDir>$(SolutionDir)1_Presentation/Installer/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/</InstallerOutputDir>
            <DestinationDir>$(SolutionDir)1_Presentation/Hub/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/Installer/</DestinationDir>
        </PropertyGroup>
        <ItemGroup>
            <InstallerOutputFiles Include="$(InstallerOutputDir)**/*"/>
        </ItemGroup>
        <RemoveDir Directories="$(DestinationDir)"/>
        <MakeDir Directories="$(DestinationDir)"/>
        <Copy SourceFiles="@(InstallerOutputFiles)" DestinationFiles="@(InstallerOutputFiles->'$(DestinationDir)%(RecursiveDir)%(Filename)%(Extension)')"/>
    </Target>

    <Target Name="CreateMacOsBundle" AfterTargets="Publish" Condition="$(AssemblyName.Equals('Alis.App.Hub')) And '$(IsOSX)' == 'true' AND $(Configuration) == 'Release'">
        <PropertyGroup>
            <AppBundleDir>$(SolutionDir)1_Presentation/Hub/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/publish/Alis.app/</AppBundleDir>
            <ContentsDir>$(AppBundleDir)Contents/</ContentsDir>
            <MacOSDir>$(ContentsDir)MacOS/</MacOSDir>
            <ResourcesDir>$(ContentsDir)Resources/</ResourcesDir>
            <HubOutputDir>$(SolutionDir)1_Presentation/Hub/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/</HubOutputDir>
            <DmgFileName>$(SolutionDir)1_Presentation/Hub/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/publish/Alis_$(RuntimeIdentifier).dmg</DmgFileName>
        </PropertyGroup>
        <ItemGroup>
            <HubOutputFiles Include="$(HubOutputDir)**/*" Exclude="$(AppBundleDir)**/*"/>
        </ItemGroup>
        <RemoveDir Directories="$(AppBundleDir)"/>
        <MakeDir Directories="$(MacOSDir)"/>
        <MakeDir Directories="$(ResourcesDir)"/>
        <CreateItem Include="@(EngineOutputFiles)" AdditionalMetadata="MyRecursiveDir=%(RecursiveDir)">
            <Output TaskParameter="Include" ItemName="EngineOutputFilesWithMyRecursiveDir"/>
        </CreateItem>
        <CreateItem Include="@(InstallerOutputFiles)" AdditionalMetadata="MyRecursiveDir=%(RecursiveDir)">
            <Output TaskParameter="Include" ItemName="InstallerOutputFilesWithMyRecursiveDir"/>
        </CreateItem>
        <CreateItem Include="@(HubOutputFiles)" AdditionalMetadata="MyRecursiveDir=%(RecursiveDir)">
            <Output TaskParameter="Include" ItemName="HubOutputFilesWithMyRecursiveDir"/>
        </CreateItem>
        <Copy SourceFiles="$(SolutionDir)1_Presentation/Hub/src/Properties/Info.plist" DestinationFolder="$(ContentsDir)"/>
        <Copy SourceFiles="$(SolutionDir)1_Presentation/Hub/src/Properties/logo.png" DestinationFolder="$(ResourcesDir)"/>
        <Copy SourceFiles="@(HubOutputFilesWithMyRecursiveDir)" DestinationFiles="@(HubOutputFilesWithMyRecursiveDir->'$(MacOSDir)%(MyRecursiveDir)%(Filename)%(Extension)')"/>
        <ItemGroup>
            <EditorFiles Include="$(HubOutputDir)Editor/**/*"/>
        </ItemGroup>
        <Copy SourceFiles="@(EditorFiles)" DestinationFiles="@(EditorFiles->'$(MacOSDir)Editor/%(RecursiveDir)%(Filename)%(Extension)')" Condition="Exists('$(HubOutputDir)Editor')"/>
        <Delete Files="$(DmgFileName)"/>
        <Exec Command="hdiutil create -volname Alis -srcfolder $(AppBundleDir) -ov -format UDZO $(DmgFileName)"/>
    </Target>

    
    <Target Name="CreateLinuxBundle" AfterTargets="Publish" Condition="$(AssemblyName.Equals('Alis.App.Hub')) And '$(IsLinux)' == 'true' AND $(Configuration) == 'Release'">
        <PropertyGroup>
            <PublishDir>$(SolutionDir)1_Presentation/Hub/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/publish/</PublishDir>
            <HubOutputDir>$(SolutionDir)1_Presentation/Hub/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/</HubOutputDir>
            <ZipFileName>$(SolutionDir)1_Presentation/Hub/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/Alis_$(RuntimeIdentifier).zip</ZipFileName>
        </PropertyGroup>
        <ItemGroup>
            <HubOutputFiles Include="$(HubOutputDir)**/*" Exclude="$(PublishDir)**/*;$(HubOutputDir)**/*.zip"/>
        </ItemGroup>
        <RemoveDir Directories="$(PublishDir)"/>
        <MakeDir Directories="$(PublishDir)"/>
        <CreateItem Include="@(EngineOutputFiles)" AdditionalMetadata="MyRecursiveDir=%(RecursiveDir)">
            <Output TaskParameter="Include" ItemName="EngineOutputFilesWithMyRecursiveDir"/>
        </CreateItem>
        <CreateItem Include="@(InstallerOutputFiles)" AdditionalMetadata="MyRecursiveDir=%(RecursiveDir)">
            <Output TaskParameter="Include" ItemName="InstallerOutputFilesWithMyRecursiveDir"/>
        </CreateItem>
        <CreateItem Include="@(HubOutputFiles)" AdditionalMetadata="MyRecursiveDir=%(RecursiveDir)">
            <Output TaskParameter="Include" ItemName="HubOutputFilesWithMyRecursiveDir"/>
        </CreateItem>
        <Copy SourceFiles="@(HubOutputFilesWithMyRecursiveDir)" DestinationFiles="@(HubOutputFilesWithMyRecursiveDir->'$(PublishDir)%(MyRecursiveDir)%(Filename)%(Extension)')"/>
        <ItemGroup>
            <EditorFiles Include="$(HubOutputDir)Editor/**/*"/>
        </ItemGroup>
        <Copy SourceFiles="@(EditorFiles)" DestinationFiles="@(EditorFiles->'$(PublishDir)Editor/%(RecursiveDir)%(Filename)%(Extension)')" Condition="Exists('$(HubOutputDir)Editor')"/>
        <Delete Files="$(ZipFileName)"/>
        <ZipDirectory SourceDirectory="$(PublishDir)" DestinationFile="$(ZipFileName)"/>
    </Target>

    <Target Name="CreateWindowsBundle" AfterTargets="Publish" Condition="$(AssemblyName.Equals('Alis.App.Hub')) And '$(IsWindows)' == 'true' AND $(Configuration) == 'Release'">
        <PropertyGroup>
            <PublishDir>$(SolutionDir)1_Presentation/Hub/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/publish/</PublishDir>
            <HubOutputDir>$(SolutionDir)1_Presentation/Hub/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/</HubOutputDir>
            <ZipFileName>$(SolutionDir)1_Presentation/Hub/src/bin/$(Configuration)/$(RuntimeIdentifier)/lib/Alis_$(RuntimeIdentifier).zip</ZipFileName>
        </PropertyGroup>
        <ItemGroup>
            <HubOutputFiles Include="$(HubOutputDir)**/*" Exclude="$(PublishDir)**/*;$(HubOutputDir)**/*.zip"/>
        </ItemGroup>
        <RemoveDir Directories="$(PublishDir)"/>
        <MakeDir Directories="$(PublishDir)"/>
        <CreateItem Include="@(EngineOutputFiles)" AdditionalMetadata="MyRecursiveDir=%(RecursiveDir)">
            <Output TaskParameter="Include" ItemName="EngineOutputFilesWithMyRecursiveDir"/>
        </CreateItem>
        <CreateItem Include="@(InstallerOutputFiles)" AdditionalMetadata="MyRecursiveDir=%(RecursiveDir)">
            <Output TaskParameter="Include" ItemName="InstallerOutputFilesWithMyRecursiveDir"/>
        </CreateItem>
        <CreateItem Include="@(HubOutputFiles)" AdditionalMetadata="MyRecursiveDir=%(RecursiveDir)">
            <Output TaskParameter="Include" ItemName="HubOutputFilesWithMyRecursiveDir"/>
        </CreateItem>
        <Copy SourceFiles="@(HubOutputFilesWithMyRecursiveDir)" DestinationFiles="@(HubOutputFilesWithMyRecursiveDir->'$(PublishDir)%(MyRecursiveDir)%(Filename)%(Extension)')"/>
        <ItemGroup>
            <EditorFiles Include="$(HubOutputDir)Editor/**/*"/>
        </ItemGroup>
        <Copy SourceFiles="@(EditorFiles)" DestinationFiles="@(EditorFiles->'$(PublishDir)Editor/%(RecursiveDir)%(Filename)%(Extension)')" Condition="Exists('$(HubOutputDir)Editor')"/>
        <Delete Files="$(ZipFileName)"/>
        <ZipDirectory SourceDirectory="$(PublishDir)" DestinationFile="$(ZipFileName)"/>
    </Target>
</Project>
