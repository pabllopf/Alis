<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<# 
{
	var relativePath = @"hid-usage-tables\pages";
	// Maximum number of static properties to output for a range.
	var maxRange = 16;
	// Indent
	var ind = new string(' ', 4);

	var output = new StringBuilder();
	try
	{
		var directoryPath = Host.ResolvePath(relativePath);

		/*
		 * Parse all files
		 */
		var errors = new List<string>();
		var pages = new List<Page>();
		foreach (var filePath in Directory.GetFiles(directoryPath))
		{
			try
			{
				pages.Add(new Page(filePath, maxRange));
			}
			catch (Exception ex)
			{
				errors.Add(ex.Message);
			}
		}

		//pages.SelectMany(p => p).Where(g => g.Any(u=>u==null)).Select(g=> (g.Page.Name, g.StartId, g.Description, g)).Dump();

		output.AppendLine($@"// Licensed under the Apache License, Version 2.0 (the ""License"").
// See the LICENSE file in the project root for more information.
//
// Auto Generated {pages.Sum(p => p.Count)} usages in {pages.Count} pages on {DateTime.Now}.

#pragma warning disable CS0108 // Member hides inherited member; missing new keyword

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;");

		if (errors.Count > 0)
		{
			output.AppendLine()
				.AppendLine("/* The following errors occurred during generation");
			foreach (var error in errors)
			{
				output.AppendLine(error);
			}
			output.AppendLine("*/");
		}

		if (Template.ComplexExpressions.Count > 0)
		{
			output.AppendLine()
				.AppendLine("/* The following templates are not currently supported, consider adding an expander to the Template class.");
			foreach (var complexExpression in Template.ComplexExpressions)
			{
				output.AppendLine(complexExpression);
			}
			output.AppendLine("*/");
		}

		output.AppendLine();
		output.AppendLine($@"namespace DevDecoder.HIDDevices.Usages
{{
{ind}using DevDecoder.HIDDevices.Pages;
");

		/*
		 * Output enums
		 */

		var firstPage = true;
		foreach (var page in pages)
		{
			if (firstPage) firstPage = false;
			else output.AppendLine();

			output.Append($@"{ind}/// <summary>
{ind}///     {page.Description} Usage Page.
{ind}/// </summary>
{ind}[Description(");
			Page.AppendQuoted(output, page.Description + " Usage Page");
			output.AppendLine($@")]
{ind}public enum {page.EnumName} : uint
{ind}{{");

			var firstUsage = true;
			foreach (var usage in page.Usages)
			{
				if (firstUsage) firstUsage = false;
				else output.AppendLine(@",
");

				if (usage.Id == usage.Group.StartId &&
					usage.Id < usage.Group.EndId)
				{
					// Write out group header
					output.AppendLine($@"{ind}{ind}/*
{ind}{ind} * Range: 0x{usage.Group.StartId:x4} -> 0x{usage.Group.EndId:x4}
{ind}{ind} * {usage.Group.Description}
{ind}{ind} */
");
				}

				usage.AppendEnumValue(output, ind);
			}

			output.AppendLine($@"
{ind}}}");
		}

		output.AppendLine($@"}}

/*
 * END OF ENUM DEFINITIONS
 */

namespace DevDecoder.HIDDevices
{{
{ind}using DevDecoder.HIDDevices.Pages;");

		/*
		 * Create dictionary of usage pages
		 */
		output.Append($@"
{ind}/// <summary>
{ind}///     Base class for all usage pages.
{ind}/// </summary>
{ind}public partial class UsagePage
{ind}{{
{ind}{ind}/// <summary>
{ind}{ind}///     Dictionary of all defined usage pages.
{ind}{ind}/// </summary>
{ind}{ind}private static ConcurrentDictionary<ushort, UsagePage> s_pages =
{ind}{ind}{ind}{ind}new ConcurrentDictionary<ushort, UsagePage>
{ind}{ind}{ind}{ind}{{
");

		firstPage = true;
		foreach (var page in pages)
		{
			if (firstPage) firstPage = false;
			else output.AppendLine(@",");
			output.Append($@"{ind}{ind}{ind}{ind}{ind}[0x{page.Id:x4}] = {page.Name}UsagePage.Instance");
		}

		output.Append($@"
{ind}{ind}{ind}{ind}}};
");

		foreach (var page in pages)
		{
			output.AppendLine($@"
{ind}{ind}/// <summary>
{ind}{ind}///     {page.Description} Usage Page.
{ind}{ind}/// </summary>
{ind}{ind}public static readonly {page.Name}UsagePage {page.Name} = {page.Name}UsagePage.Instance;");
		}

		output.AppendLine($@"
{ind}}}
}}

namespace DevDecoder.HIDDevices.Pages
{{
{ind}using DevDecoder.HIDDevices.Usages;");


		/*
		 * Output Usage Page classes
		 */

		foreach (var page in pages)
		{
			output.AppendLine($@"
{ind}/// <summary>
{ind}///     Base class for all usage pages.
{ind}/// </summary>
{ind}public sealed class {page.Name}UsagePage : UsagePage
{ind}{{
{ind}{ind}/// <summary>
{ind}{ind}///     Singleton instance of {page.Name} Usage Page.
{ind}{ind}/// </summary>
{ind}{ind}public static readonly {page.Name}UsagePage Instance = new {page.Name}UsagePage();
");

			if (page.Usages.Any() || page.Dynamic.Any())
			{
				output.Append($"{ind}{ind}private {page.Name}UsagePage() : base(0x{page.Id:x4}, ");
				Page.AppendQuoted(output, page.Name);
				output.AppendLine($@")
{ind}{ind}{{
{ind}{ind}}}");

				output.AppendLine($@"
{ind}{ind}/// <inheritdoc />
{ind}{ind}protected override Usage CreateUsage(ushort id) 
{ind}{ind}{{");

				if (page.Usages.Any())
				{
					output.AppendLine($@"{ind}{ind}{ind}switch (id)
{ind}{ind}{ind}{{");
					var seenIds = new HashSet<ushort>();
					foreach (var usage in page.Usages)
					{
						if (!seenIds.Add(usage.Id)) continue;
						output.Append($@"{ind}{ind}{ind}{ind}case 0x{usage.Id:x4}: return new Usage(this, id, ");
						Page.AppendQuoted(output, usage.Description);
						output.AppendLine($", {usage.Types});");
					}
					output.AppendLine($@"{ind}{ind}{ind}}}");
				}

				if (page.Dynamic.Any())
				{
					output.AppendLine($@"
{ind}{ind}{ind}// Create dynamic usages from ranges");
					var nVar = false;
					foreach (var group in page.Dynamic)
					{
						if (group.Template?.UsesN == true)
						{
							// Create the n variable.
							output.Append($"{ind}{ind}{ind}");
							if (!nVar)
							{
								output.Append("var ");
								nVar = true;
							}
							output.AppendLine($"n = (ushort)(id-0x{group.StartId:x4});");
						}

						output.Append($"{ind}{ind}{ind}if (id >= 0x{group.StartId:x4} || id < 0x{group.EndId:x4}) return new Usage(this, id, $");
						Page.AppendQuoted(output, group.Description);
						output.AppendLine($", {group.Types});");

					}
				}

				output.AppendLine($@"
{ind}{ind}{ind}return base.CreateUsage(id);
{ind}{ind}}}");
			}

			output.AppendLine($"{ind}}}");
		}

		output.AppendLine("}");
	}
	catch (Exception ex)
	{
		output.Clear();
		output.AppendLine(ex.Message);
	}

	Write(output.ToString());
}
//#><#+
public class Page : IReadOnlyList<UsageGroup>
{
	private static Regex _pageRegex = new Regex(@"^(?<id>[0-9a-f]{1,4})\s""(?<description>[^""]+)""", RegexOptions.Compiled | RegexOptions.IgnoreCase);
	private readonly IReadOnlyList<UsageGroup> _groups;
	public readonly ushort Id;
	public readonly string EnumName;
	public readonly string Name;
	public readonly string Description;
	public readonly IReadOnlyList<string> UsageErrors;
	private readonly HashSet<string> _usageNames = new HashSet<string>();
	public IEnumerable<Usage> Usages => _groups.SelectMany(g => g);

	public IEnumerable<UsageGroup> Dynamic => _groups.Where(g => g.IsDynamic);

	public int Count => _groups.Count;

	public UsageGroup this[int index] => _groups[index];

	public Page(string filePath, int maxRange)
	{
		var lineNum = 0;
		using (var stream = File.OpenText(filePath))
		{
			var line = stream.ReadLine();
			lineNum++;
			var match = _pageRegex.Match(line);
			if (!match.Success)
			{
				throw new FormatException($"Could not parse page header for \"{filePath}\" at line number {lineNum}: {line}.");
			}
			var idStr = match.Groups["id"].Value;
			if (!ushort.TryParse(idStr, NumberStyles.HexNumber, null, out var id))
			{
				throw new FormatException($"Could not parse page id \"{idStr}\" for \"{filePath}\" at line number {lineNum}.");
			}

			Id = id;
			Description = match.Groups["description"].Value;
			Name = Page.GetName(Description);
			if (Name.EndsWith("Controls", StringComparison.InvariantCultureIgnoreCase)) Name = Name.Substring(0, Name.Length - 8);
			EnumName = Name + "Page";

			var zeroDefined = false;
			var groups = new List<UsageGroup>();
			var usageErrors = new List<string>();
			while ((line = stream.ReadLine()) != null)
			{
				lineNum++;
				if (string.IsNullOrWhiteSpace(line)) continue;

				try
				{
					var group = new UsageGroup(this, filePath, lineNum, line, maxRange);
					groups.Add(group);
					if (group.StartId == 0) zeroDefined = true;
				}
				catch (Exception ex)
				{
					usageErrors.Add(ex.Message);
				}
			}
			if (!zeroDefined)
				groups.Add(new UsageGroup(this, 0, "Undefined"));
			_groups = groups.OrderBy(u => u.StartId).ToArray();

			UsageErrors = usageErrors.ToArray();
		}
	}

	public string GetProperty(string description, ushort? id = null)
	{
		var propertyName = Page.GetName(description);
		if (string.IsNullOrWhiteSpace(propertyName))
		{
			propertyName = Page.GetName($"{Name}_{description}");
		}
		var pn = propertyName;
		var num = 1;
		while (_usageNames.Contains(pn))
			pn = propertyName + (++num);

		_usageNames.Add(pn);
		return pn;
	}

	public IEnumerator<UsageGroup> GetEnumerator()
	{
		return _groups.GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return _groups.GetEnumerator();
	}
	public static string GetName(string description)
	{
		if (string.IsNullOrWhiteSpace(description)) return string.Empty;

		var builder = new StringBuilder(description.Length);
		bool afterSpace = true;
		foreach (var ch in description)
		{
			switch (char.GetUnicodeCategory(ch))
			{
				case UnicodeCategory.UppercaseLetter:
				case UnicodeCategory.LowercaseLetter:
				case UnicodeCategory.TitlecaseLetter:
				case UnicodeCategory.ModifierLetter:
				case UnicodeCategory.OtherLetter:
					// Always allowed in C# class names
					break;

				case UnicodeCategory.ConnectorPunctuation:
					// Language specification allows '_' as first character.
					if (builder.Length < 1 && ch != '_') continue;
					break;

				case UnicodeCategory.LetterNumber:
				case UnicodeCategory.NonSpacingMark:
				case UnicodeCategory.SpacingCombiningMark:
				case UnicodeCategory.DecimalDigitNumber:
				case UnicodeCategory.Format:
					// Only valid after first character
					if (builder.Length < 1) continue;
					break;

				case UnicodeCategory.SpaceSeparator:
					afterSpace = true;
					continue;
				default:
					// Skip characters
					continue;

			}

			char c;
			if (afterSpace)
			{
				afterSpace = false;
				c = char.ToUpperInvariant(ch);
			}
			else c = ch;
			builder.Append(c);
		}

		return builder.ToString();
	}

	public static StringBuilder AppendQuoted(StringBuilder output, string description)
	{
		output.Append('"');
		foreach (var c in description)
		{
			switch (c)
			{
				case '\\':
					output.Append("\\\\");
					break;
				case '"':
					output.Append("\\\"");
					break;
				default:
					output.Append(c);
					break;
			}
		}
		output.Append('"');

		return output;
	}
}

public class UsageGroup : IReadOnlyList<Usage>
{
	private static Regex _usageRegex = new Regex(@"^(?<startId>[0-9a-f*]{2,4})(:(?<endId>[0-9a-f]{2,4}))?(\s*(?<flags>[^""]*?)\s*""(?<description>.+)"")?$", RegexOptions.Compiled | RegexOptions.IgnoreCase);
	public readonly Page Page;
	public readonly ushort StartId;
	public readonly ushort EndId;
	public readonly string Types;
	public readonly string Description;
	public readonly Template Template;
	public readonly bool IsDynamic;
	private readonly IReadOnlyList<Usage> _usages;


	public UsageGroup(Page page, ushort id, string description)
	{
		Page = page;
		StartId = EndId = id;
		Description = description;
		Types = "UsageTypes.None";
		_usages = new[] { new Usage(this, id) };
	}

	public UsageGroup(Page page, string filePath, int lineNum, string line, int maxRange)
	{
		Page = page;
		var match = _usageRegex.Match(line);
		if (!match.Success)
		{
			throw new FormatException($"Could not parse usage for \"{filePath}\" at line number {lineNum}: {line}.");
		}
		var idStr = match.Groups["startId"]?.Value;
		if (idStr.Contains('*'))
		{
			// We have a wildcard range in the form of '0***'
			if (!ushort.TryParse(idStr.Substring(0, 1), NumberStyles.HexNumber, null, out var start))
			{
				throw new FormatException($"Could not parse wildcard usage id \"{idStr}\" for \"{filePath}\" at line number {lineNum}.");
			}
			StartId = (ushort)(start << 12);
			EndId = (ushort)(StartId + 0xfff);
		}
		else
		{
			if (!ushort.TryParse(idStr, NumberStyles.HexNumber, null, out var id))
			{
				throw new FormatException($"Could not parse usage id \"{idStr}\" for \"{filePath}\" at line number {lineNum}.");
			}
			StartId = id;

			var endIdStr = match.Groups["endId"]?.Value;
			if (!string.IsNullOrWhiteSpace(endIdStr))
			{
				if (!ushort.TryParse(endIdStr, NumberStyles.HexNumber, null, out var endId))
				{
					throw new FormatException($"Could not parse usage end - id \"{endIdStr}\" for \"{filePath}\" at line number {lineNum}.");
				}
				EndId = endId;
				if (EndId < StartId)
					EndId = StartId;
			}
			else
			{
				EndId = StartId;
			}
		}

		var flagsStr = match.Groups["flags"]?.Value;
		if (!string.IsNullOrWhiteSpace(flagsStr))
		{
			var types = UsageTypes.Create(filePath, lineNum, flagsStr).Select(t => $"UsageTypes.{t.Type}").ToArray();
			Types = types.Length > 0 ? string.Join("|", types) : "UsageTypes.None";
		}
		else
		{
			Types = "UsageTypes.None";
		}

		Description = match.Groups["description"]?.Value;
		Template = Template.Create(this, Description);

		// Create usages
		var end = StartId + maxRange - 1;
		if (end > EndId) end = EndId;
		else IsDynamic = true;

		var usages = new Usage[1 + end - StartId];
		for (var id = StartId; id <= end; id++)
		{
			usages[id - StartId] = new Usage(this, id);
		}
		_usages = usages;
	}

	public string GetDescription(ushort? id = null) => Template?.Expand(StartId, (id ?? StartId)) ?? Description;

	public Usage this[int index] => _usages[index];

	public int Count => _usages.Count;

	public IEnumerator<Usage> GetEnumerator()
	{
		return _usages.GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return _usages.GetEnumerator();
	}
}

public class Usage
{
	public readonly UsageGroup Group;
	public readonly uint FullId;
	public readonly ushort Id;
	public readonly string Name;
	public readonly string Description;
	public string Types => Group.Types;

	public Usage(UsageGroup group, ushort id)
	{
		Group = group;
		Id = id;
		var page = group.Page;
		FullId = (uint)(page.Id << 16) + id;
		Description = group.GetDescription(id);
		Name = page.GetProperty(Description, id);
	}

	public void AppendEnumValue(StringBuilder output, string ind, ushort? id = null)
	{
		output.Append($@"{ind}{ind}/// <summary>
{ind}{ind}///     {Description} Usage.
{ind}{ind}/// </summary>
{ind}{ind}[Description(");
		Page.AppendQuoted(output, Description);
		output.Append($@")]
{ind}{ind}{Name} = 0x{FullId:x8}");
	}
}

public class UsageTypes
{
	// TODO Missing BB usage type, but not in specs, so ignoring
	private static Regex s_usageTypeRegex = new Regex(@"(?<flag>LC|OOC|MC|OSC|RTC|Sel|SV|SF|DV|DF|CA|CL|CP|US|UM)|(?<nary>NAry)([^)]*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);

	public readonly string Type;

	private UsageTypes(string type)
	{
		Type = type;
	}

	internal static IReadOnlyList<UsageTypes> Create(string filePath, int lineNum, string flagsStr)
	{
		var matches = s_usageTypeRegex.Matches(flagsStr);
		if (matches.Count < 1) return Array.Empty<UsageTypes>();

		var types = new List<UsageTypes>(matches.Count);
		foreach (Match match in matches)
		{
			var flag = match.Groups["flag"]?.Value;
			if (!string.IsNullOrWhiteSpace(flag))
			{
				types.Add(new UsageTypes(flag));
				continue;
			}
			if (match.Groups["nary"]?.Success == true)
			{
				types.Add(new UsageTypes("NAry"));
			}
		}

		return types.ToArray();
	}
}

public class Template
{
	private static HashSet<string> _complexExpressions = new HashSet<string>();
	public static IReadOnlyCollection<string> ComplexExpressions => _complexExpressions;

	// Auto-Expandable 'Simple'/non-Complex templates
	private readonly IReadOnlyDictionary<string, Func<ushort, ushort, string>> s_expanders = new Dictionary<string, Func<ushort, ushort, string>>
	{
		["{n}"] = (s, i) => (i - s).ToString(),
		["{id}"] = (_, i) => i.ToString(),
		["{n+1}"] = (s, i) => (i - s + 1).ToString(),
		["{id+1}"] = (_, i) => (i + 1).ToString(),
		["{2*n+1}"] = (s, i) => ((2 * (i - s)) + 1).ToString(),
		["{2*id+1}"] = (s, i) => ((2 * i) + 1).ToString()
	};

	private static Regex _templateRegex = new Regex("((?<template>{((?<id>(id|(?<usesn>n)))|[+/\\-*0-9])*})|([^{]*))", RegexOptions.Compiled);

	public readonly UsageGroup Group;
	public readonly string Description;
	public readonly IReadOnlyList<string> Expressions;
	public readonly IReadOnlyList<Func<ushort, ushort, string>> Expanders;
	public readonly bool IsComplex;
	public readonly bool UsesN;

	private Template(UsageGroup group, string description, string[] expressions, bool usesn)
	{
		Group = group;
		Description = description;
		Expressions = expressions;
		Expanders = expressions.Select(e => s_expanders.TryGetValue(e, out var expander) ? expander : null).ToArray();
		foreach (var complexExpression in Expanders.Select((e, i) => e is null ? expressions[i] : null).Where(e => e != null))
		{
			IsComplex = true;
			_complexExpressions.Add(complexExpression);
		}
		UsesN = true;
	}

	public string Expand(ushort block, ushort id)
	{
		var description = Description;
		for (var e = 0; e < Expressions.Count; e++)
		{
			var expander = Expanders[e];
			if (expander is null) continue;
			description = description.Replace(Expressions[e], expander(block, id));
		}
		return description;
	}

	public static Template Create(UsageGroup group, string description)
	{
		var matches = _templateRegex.Matches(description)
			.Cast<Match>()
			.Where(m => m.Groups["id"].Success)
			.ToArray();
		var expressions = matches
			.Select(m => m.Groups["template"]?.Value)
			.Where(t => !string.IsNullOrWhiteSpace(t))
			.Distinct()
			.ToArray();
		var usesn = matches.Any(m => m.Groups["usesn"].Success);
		if (usesn)
		{
		}
		return expressions.Length > 0 ? new Template(group, description, expressions, usesn) : null;
	}
}
//#>