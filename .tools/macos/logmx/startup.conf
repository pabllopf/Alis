
###########################  LogMX startup configuration file  #####################################
#
# This file is used to configure LogMX startup parameters, for Windows, Linux, and Mac, whether 
# you start it with "LogMX.bat", "LogMX.exe", "LogMX-64.exe", "logmx.sh", "logmx.command", or
# using the macOS native app "LogMX.app" (yet, at this time, only the following parameters are
# supported by the macOS native app: MAX_MEMORY, CONFIG_FILE, SPLASH_SCREEN, INTERNAL_LOGGING).
#
# If you do not have the right to modify this file (e.g. read-only file owned by 'root' or an 
# administrator), you can start LogMX with "--conf=" option to use a custom "startup.conf" file.
# When using "--conf" option, do not forget the quotes around configuration file path if this 
# path contains space(s) character(s). Examples:
#   --conf="C:\Users\John\My Personal Folder\my startup file.conf" 
#   --conf="/home/john/My Personal Folder/my startup file.conf"
#
# Note: this file will not be overridden during the update of LogMX using the LogMX installer
# for Windows.
#
####################################################################################################

# If you want to use a specific Java path (JDK/JRE), add its "bin" absolute path here.
# If left empty, the default Java version will be used: "LogMX.exe" and "LogMX-64.exe" will search
# for Java paths in "jre" LogMX directory (private JRE embedded with some LogMX distributions), 
# then in Windows Registry, then in your "JAVA_HOME" and "PATH" environment variables, 
# whereas "LogMX.bat" and "logmx.sh" will use only your "PATH" environment variable.
# NOTE: On Windows, always use "LogMX-64.exe" when you want to use a 64-bits JDK/JRE, and
# "LogMX.exe" to use a 32-bits JDK/JRE. This parameter "JAVA_PATH" may be ignored if the right 
# ".exe" LogMX launcher is not used (e.g. 32 for 64, or 64 for 32).
JAVA_PATH=

# If you want to increase the maximum amount of memory that LogMX can use, you can set it here, 
# using the suffix 'M' for MegaBytes, and 'G' for GigaBytes (e.g. 800M or 4G).
# Note that if you are using a 32-bits Java version, you may not be allowed to use more than 2GB
# (using a 64-bits Java version will always allow you to use more than 2GB).
# If left empty, this setting is set to 1G (i.e. 1 gigabytes).
# Note: values displayed in LogMX memory status bar may be slightly lower than the one set here 
MAX_MEMORY=

# If you want to use a configuration file (containing all LogMX user preferences) that is not 
# located in LogMX "config/" directory, add its absolute path here.
# If left empty, the default configuration file ("config/logmx.properties") is used.
CONFIG_FILE=

# If you don't want to display a splash screen, set this variable to 0 (or 1 to display it).
SPLASH_SCREEN=1

# If you want to display a console for LogMX internal warnings/errors, set this variable to 1 
# (or 0 to hide it). Not to be confused with LogMX "Console mode" which does not display any 
# graphical element (batch, window-less mode) and is enabled with "--console" command line option.
# Note: this parameter is currently ignored and forced to 1 if LogMX is started in Console mode 
# (--console), or started on Linux/Mac. 
CONSOLE=0

# If your Parser or Manager needs additional JARs or classes, add their path here (absolute or 
# relative to LogMX directory):
ADDITIONAL_CLASSPATH=

# If an issue occurs with LogMX, you can enable internal logs, and send them to "support@logmx.com"
# (1 to enable logs, 0 to disable). Logs are located in "<UserHomeDir>/LogMX.log" by default and 
# are configured in file "config/logging.properties"
INTERNAL_LOGGING=1

# If you want to use some extra JVM options, you can add them here, separated with whitespace.
# Note that these options are often VM-dependent, so be careful of invalid options (that may
# silently fail or prevent the VM to start).
# A common usage is to force the JVM to release memory back to the OS when it is not used by LogMX
# anymore (may help with some 64-bits JVM). To do so, you can add the following options:
# (for Oracle VM:) -XX:+UseSerialGC -XX:MinHeapFreeRatio=50 -XX:MaxHeapFreeRatio=50
# (for IBM VM, more standard:) -Xminf0.5 -Xmaxf0.5
# Xminf (or equivalent MinHeapFreeRatio) must be <= than Xmaxf (or equivalent MaxHeapFreeRatio).
# The smaller Xmaxf (or equivalent MaxHeapFreeRatio), the more the VM may release memory.
# minf/maxf are percents in [0.0;1.0], and MaxHeapFreeRatio/MaxHeapFreeRatio percents in [0;100].
JVM_EXTRA_OPTIONS=-Xms90m
