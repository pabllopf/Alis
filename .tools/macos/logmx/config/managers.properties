#  Additional properties file to configure some Log Managers (including your own user-defined Log Managers). 
#  Feel free to add properties here. 
#  Each line defines a key/value pair.
#  Examples:
#
#my.manager.my.prop = my string value
#other.manager.int.prop = 42
#
#  These properties are stored in Java System Properties, 
#  which can be accessed from your manager code this way :
#
#  String myValue = System.getProperty("my.manager.my.prop", "default_value");
#
#  This code stores "my string value" in variable 'myValue'.
#  If property 'my.manager.my.prop' was not found, 'myValue' would
#  be equal to "default_value".


#  ==================================================
#  ==== Settings for HTTP[S] Server Log Managers ====
#  ==================================================
#  The built-in Log Managers "HTTPServerManager" and "HTTPSServerManager" use this config file to know the
#  HTTP headers to include in the returned HTTP responses.
#  Use one line of this file for each header to return, using the syntax:
#http.server.header.<Name_Of_Your_Header> = <Value_Of_Your_Header>
#  Here is an example of common HTTP headers you may want to use with this Manager:
#http.server.header.Access-Control-Allow-Origin = *
#http.server.header.Access-Control-Allow-Headers = *
#  HTTPSServerManager uses by default a self-signed SSL certificate that may not work with some HTTP
#  clients: if you want to use your own signed SSL certificate, you can import it in a Java keystore
#  file, and specify the path of this keystore file here like this:
#https.server.keystore.path = /my/path/to/my/keystore
#  Note 1: do not use "\" in the path above (even on Windows), please use "\\" or "/" instead.
#  Note 2: to import an existing certificate in a KeyStore, use "keytool -importcert".
#  When you create/update your keystore, please use the same password for the keystore itself and 
#  its entries, and specify this password here:
#https.server.keystore.password = MyKeystorePassword

