using Microsoft.CodeAnalysis;
using System;
using System.Text;

namespace Frent.Variadic.Generator
{
    internal static class Helpers
    {
        public const int Arity = 4;
        public const string AttributeMetadataString = "Frent.Variadic.Generator.VariadicAttribute";
        public const string AutoGenerated = "// <auto-generated />\n#nullable enable\n";
        public const string AttributeString = @"// <auto-generated />
using System;

namespace Frent.Variadic.Generator;

[AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
internal class VariadicAttribute : Attribute
{
    private readonly string _from;
    private readonly string _pattern;
    private readonly int _count;

    public VariadicAttribute(string from, string pattern, int count = 16)
    {
        _from = from;
        _pattern = pattern;
        _count = count;
    }
}";

        public static string ToFriendlyString(this TypeKind typeKind)
        {
            return typeKind switch
            {
                TypeKind.Class => "class",
                TypeKind.Delegate => "delegate",
                TypeKind.Dynamic => "dynamic",
                TypeKind.Enum => "enum",
                TypeKind.Interface => "interface",
                TypeKind.Pointer => "*",
                TypeKind.Struct => "struct",
                _ => throw new NotImplementedException(typeKind.ToString()),
            };
        }

        public static string ToFriendlyString(this Accessibility accessibility)
        {
            return accessibility switch
            {
                Accessibility.Public => "public",
                Accessibility.Private => "private",
                Accessibility.Protected => "protected",
                Accessibility.Internal => "internal",
                _ => throw new NotImplementedException(),
            };
        }

        public static unsafe StringBuilder Append(this StringBuilder sb, ReadOnlySpan<char> str)
        {
            fixed (char* cptr = str)
            {
                sb.Append(cptr, str.Length);
            }

            return sb;
        }
    }
}