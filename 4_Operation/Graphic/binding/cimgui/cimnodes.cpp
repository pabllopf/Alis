//This file is automatically generated by generator.lua from https://github.com/cimgui/ImNodes
//based on ImNodes.h file version XXX from https://github.com/Nelarius/ImNodes
#include "imgui.h"
#include "imgui_internal.h"
#include "./imnodes/imnodes.h"
#include "cimnodes.h"



CIMGUI_API EmulateThreeButtonMouse* EmulateThreeButtonMouse_EmulateThreeButtonMouse(void)
{
    return IM_NEW(EmulateThreeButtonMouse)();
}
CIMGUI_API void EmulateThreeButtonMouse_destroy(EmulateThreeButtonMouse* self)
{
    IM_DELETE(self);
}
CIMGUI_API LinkDetachWithModifierClick* LinkDetachWithModifierClick_LinkDetachWithModifierClick(void)
{
    return IM_NEW(LinkDetachWithModifierClick)();
}
CIMGUI_API void LinkDetachWithModifierClick_destroy(LinkDetachWithModifierClick* self)
{
    IM_DELETE(self);
}
CIMGUI_API MultipleSelectModifier* MultipleSelectModifier_MultipleSelectModifier(void)
{
    return IM_NEW(MultipleSelectModifier)();
}
CIMGUI_API void MultipleSelectModifier_destroy(MultipleSelectModifier* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImNodesIO* ImNodesIO_ImNodesIO(void)
{
    return IM_NEW(ImNodesIO)();
}
CIMGUI_API void ImNodesIO_destroy(ImNodesIO* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImNodesStyle* ImNodesStyle_ImNodesStyle(void)
{
    return IM_NEW(ImNodesStyle)();
}
CIMGUI_API void ImNodesStyle_destroy(ImNodesStyle* self)
{
    IM_DELETE(self);
}
CIMGUI_API void ImNodes_SetImGuiContext(ImGuiContext* ctx)
{
    return ImNodes::SetImGuiContext(ctx);
}
CIMGUI_API ImNodesContext* ImNodes_CreateContext()
{
    return ImNodes::CreateContext();
}
CIMGUI_API void ImNodes_DestroyContext(ImNodesContext* ctx)
{
    return ImNodes::DestroyContext(ctx);
}
CIMGUI_API ImNodesContext* ImNodes_GetCurrentContext()
{
    return ImNodes::GetCurrentContext();
}
CIMGUI_API void ImNodes_SetCurrentContext(ImNodesContext* ctx)
{
    return ImNodes::SetCurrentContext(ctx);
}
CIMGUI_API ImNodesEditorContext* ImNodes_EditorContextCreate()
{
    return ImNodes::EditorContextCreate();
}
CIMGUI_API void ImNodes_EditorContextFree(ImNodesEditorContext* noname1)
{
    return ImNodes::EditorContextFree(noname1);
}
CIMGUI_API void ImNodes_EditorContextSet(ImNodesEditorContext* noname1)
{
    return ImNodes::EditorContextSet(noname1);
}
CIMGUI_API void ImNodes_EditorContextGetPanning(ImVec2 *pOut)
{
    *pOut = ImNodes::EditorContextGetPanning();
}
CIMGUI_API void ImNodes_EditorContextResetPanning(const ImVec2 pos)
{
    return ImNodes::EditorContextResetPanning(pos);
}
CIMGUI_API void ImNodes_EditorContextMoveToNode(const int node_id)
{
    return ImNodes::EditorContextMoveToNode(node_id);
}
CIMGUI_API ImNodesIO* ImNodes_GetIO()
{
    return &ImNodes::GetIO();
}
CIMGUI_API ImNodesStyle* ImNodes_GetStyle()
{
    return &ImNodes::GetStyle();
}
CIMGUI_API void ImNodes_StyleColorsDark(ImNodesStyle* dest)
{
    return ImNodes::StyleColorsDark(dest);
}
CIMGUI_API void ImNodes_StyleColorsClassic(ImNodesStyle* dest)
{
    return ImNodes::StyleColorsClassic(dest);
}
CIMGUI_API void ImNodes_StyleColorsLight(ImNodesStyle* dest)
{
    return ImNodes::StyleColorsLight(dest);
}
CIMGUI_API void ImNodes_BeginNodeEditor()
{
    return ImNodes::BeginNodeEditor();
}
CIMGUI_API void ImNodes_EndNodeEditor()
{
    return ImNodes::EndNodeEditor();
}
CIMGUI_API void ImNodes_MiniMap(const float minimap_size_fraction,const ImNodesMiniMapLocation location,const ImNodesMiniMapNodeHoveringCallback node_hovering_callback,const ImNodesMiniMapNodeHoveringCallbackUserData node_hovering_callback_data)
{
    return ImNodes::MiniMap(minimap_size_fraction,location,node_hovering_callback,node_hovering_callback_data);
}
CIMGUI_API void ImNodes_PushColorStyle(ImNodesCol item,unsigned int color)
{
    return ImNodes::PushColorStyle(item,color);
}
CIMGUI_API void ImNodes_PopColorStyle()
{
    return ImNodes::PopColorStyle();
}
CIMGUI_API void ImNodes_PushStyleVar_Float(ImNodesStyleVar style_item,float value)
{
    return ImNodes::PushStyleVar(style_item,value);
}
CIMGUI_API void ImNodes_PushStyleVar_Vec2(ImNodesStyleVar style_item,const ImVec2 value)
{
    return ImNodes::PushStyleVar(style_item,value);
}
CIMGUI_API void ImNodes_PopStyleVar(int count)
{
    return ImNodes::PopStyleVar(count);
}
CIMGUI_API void ImNodes_BeginNode(int id)
{
    return ImNodes::BeginNode(id);
}
CIMGUI_API void ImNodes_EndNode()
{
    return ImNodes::EndNode();
}
CIMGUI_API void ImNodes_GetNodeDimensions(ImVec2 *pOut,int id)
{
    *pOut = ImNodes::GetNodeDimensions(id);
}
CIMGUI_API void ImNodes_BeginNodeTitleBar()
{
    return ImNodes::BeginNodeTitleBar();
}
CIMGUI_API void ImNodes_EndNodeTitleBar()
{
    return ImNodes::EndNodeTitleBar();
}
CIMGUI_API void ImNodes_BeginInputAttribute(int id,ImNodesPinShape shape)
{
    return ImNodes::BeginInputAttribute(id,shape);
}
CIMGUI_API void ImNodes_EndInputAttribute()
{
    return ImNodes::EndInputAttribute();
}
CIMGUI_API void ImNodes_BeginOutputAttribute(int id,ImNodesPinShape shape)
{
    return ImNodes::BeginOutputAttribute(id,shape);
}
CIMGUI_API void ImNodes_EndOutputAttribute()
{
    return ImNodes::EndOutputAttribute();
}
CIMGUI_API void ImNodes_BeginStaticAttribute(int id)
{
    return ImNodes::BeginStaticAttribute(id);
}
CIMGUI_API void ImNodes_EndStaticAttribute()
{
    return ImNodes::EndStaticAttribute();
}
CIMGUI_API void ImNodes_PushAttributeFlag(ImNodesAttributeFlags flag)
{
    return ImNodes::PushAttributeFlag(flag);
}
CIMGUI_API void ImNodes_PopAttributeFlag()
{
    return ImNodes::PopAttributeFlag();
}
CIMGUI_API void ImNodes_Link(int id,int start_attribute_id,int end_attribute_id)
{
    return ImNodes::Link(id,start_attribute_id,end_attribute_id);
}
CIMGUI_API void ImNodes_SetNodeDraggable(int node_id,const bool draggable)
{
    return ImNodes::SetNodeDraggable(node_id,draggable);
}
CIMGUI_API void ImNodes_SetNodeScreenSpacePos(int node_id,const ImVec2 screen_space_pos)
{
    return ImNodes::SetNodeScreenSpacePos(node_id,screen_space_pos);
}
CIMGUI_API void ImNodes_SetNodeEditorSpacePos(int node_id,const ImVec2 editor_space_pos)
{
    return ImNodes::SetNodeEditorSpacePos(node_id,editor_space_pos);
}
CIMGUI_API void ImNodes_SetNodeGridSpacePos(int node_id,const ImVec2 grid_pos)
{
    return ImNodes::SetNodeGridSpacePos(node_id,grid_pos);
}
CIMGUI_API void ImNodes_GetNodeScreenSpacePos(ImVec2 *pOut,const int node_id)
{
    *pOut = ImNodes::GetNodeScreenSpacePos(node_id);
}
CIMGUI_API void ImNodes_GetNodeEditorSpacePos(ImVec2 *pOut,const int node_id)
{
    *pOut = ImNodes::GetNodeEditorSpacePos(node_id);
}
CIMGUI_API void ImNodes_GetNodeGridSpacePos(ImVec2 *pOut,const int node_id)
{
    *pOut = ImNodes::GetNodeGridSpacePos(node_id);
}
CIMGUI_API void ImNodes_SnapNodeToGrid(int node_id)
{
    return ImNodes::SnapNodeToGrid(node_id);
}
CIMGUI_API bool ImNodes_IsEditorHovered()
{
    return ImNodes::IsEditorHovered();
}
CIMGUI_API bool ImNodes_IsNodeHovered(int* node_id)
{
    return ImNodes::IsNodeHovered(node_id);
}
CIMGUI_API bool ImNodes_IsLinkHovered(int* link_id)
{
    return ImNodes::IsLinkHovered(link_id);
}
CIMGUI_API bool ImNodes_IsPinHovered(int* attribute_id)
{
    return ImNodes::IsPinHovered(attribute_id);
}
CIMGUI_API int ImNodes_NumSelectedNodes()
{
    return ImNodes::NumSelectedNodes();
}
CIMGUI_API int ImNodes_NumSelectedLinks()
{
    return ImNodes::NumSelectedLinks();
}
CIMGUI_API void ImNodes_GetSelectedNodes(int* node_ids)
{
    return ImNodes::GetSelectedNodes(node_ids);
}
CIMGUI_API void ImNodes_GetSelectedLinks(int* link_ids)
{
    return ImNodes::GetSelectedLinks(link_ids);
}
CIMGUI_API void ImNodes_ClearNodeSelection_Nil()
{
    return ImNodes::ClearNodeSelection();
}
CIMGUI_API void ImNodes_ClearLinkSelection_Nil()
{
    return ImNodes::ClearLinkSelection();
}
CIMGUI_API void ImNodes_SelectNode(int node_id)
{
    return ImNodes::SelectNode(node_id);
}
CIMGUI_API void ImNodes_ClearNodeSelection_Int(int node_id)
{
    return ImNodes::ClearNodeSelection(node_id);
}
CIMGUI_API bool ImNodes_IsNodeSelected(int node_id)
{
    return ImNodes::IsNodeSelected(node_id);
}
CIMGUI_API void ImNodes_SelectLink(int link_id)
{
    return ImNodes::SelectLink(link_id);
}
CIMGUI_API void ImNodes_ClearLinkSelection_Int(int link_id)
{
    return ImNodes::ClearLinkSelection(link_id);
}
CIMGUI_API bool ImNodes_IsLinkSelected(int link_id)
{
    return ImNodes::IsLinkSelected(link_id);
}
CIMGUI_API bool ImNodes_IsAttributeActive()
{
    return ImNodes::IsAttributeActive();
}
CIMGUI_API bool ImNodes_IsAnyAttributeActive(int* attribute_id)
{
    return ImNodes::IsAnyAttributeActive(attribute_id);
}
CIMGUI_API bool ImNodes_IsLinkStarted(int* started_at_attribute_id)
{
    return ImNodes::IsLinkStarted(started_at_attribute_id);
}
CIMGUI_API bool ImNodes_IsLinkDropped(int* started_at_attribute_id,bool including_detached_links)
{
    return ImNodes::IsLinkDropped(started_at_attribute_id,including_detached_links);
}
CIMGUI_API bool ImNodes_IsLinkCreated_BoolPtr(int* started_at_attribute_id,int* ended_at_attribute_id,bool* created_from_snap)
{
    return ImNodes::IsLinkCreated(started_at_attribute_id,ended_at_attribute_id,created_from_snap);
}
CIMGUI_API bool ImNodes_IsLinkCreated_IntPtr(int* started_at_node_id,int* started_at_attribute_id,int* ended_at_node_id,int* ended_at_attribute_id,bool* created_from_snap)
{
    return ImNodes::IsLinkCreated(started_at_node_id,started_at_attribute_id,ended_at_node_id,ended_at_attribute_id,created_from_snap);
}
CIMGUI_API bool ImNodes_IsLinkDestroyed(int* link_id)
{
    return ImNodes::IsLinkDestroyed(link_id);
}
CIMGUI_API const char* ImNodes_SaveCurrentEditorStateToIniString(size_t* data_size)
{
    return ImNodes::SaveCurrentEditorStateToIniString(data_size);
}
CIMGUI_API const char* ImNodes_SaveEditorStateToIniString(const ImNodesEditorContext* editor,size_t* data_size)
{
    return ImNodes::SaveEditorStateToIniString(editor,data_size);
}
CIMGUI_API void ImNodes_LoadCurrentEditorStateFromIniString(const char* data,size_t data_size)
{
    return ImNodes::LoadCurrentEditorStateFromIniString(data,data_size);
}
CIMGUI_API void ImNodes_LoadEditorStateFromIniString(ImNodesEditorContext* editor,const char* data,size_t data_size)
{
    return ImNodes::LoadEditorStateFromIniString(editor,data,data_size);
}
CIMGUI_API void ImNodes_SaveCurrentEditorStateToIniFile(const char* file_name)
{
    return ImNodes::SaveCurrentEditorStateToIniFile(file_name);
}
CIMGUI_API void ImNodes_SaveEditorStateToIniFile(const ImNodesEditorContext* editor,const char* file_name)
{
    return ImNodes::SaveEditorStateToIniFile(editor,file_name);
}
CIMGUI_API void ImNodes_LoadCurrentEditorStateFromIniFile(const char* file_name)
{
    return ImNodes::LoadCurrentEditorStateFromIniFile(file_name);
}
CIMGUI_API void ImNodes_LoadEditorStateFromIniFile(ImNodesEditorContext* editor,const char* file_name)
{
    return ImNodes::LoadEditorStateFromIniFile(editor,file_name);
}


//needed for io.link_detach_with_modifier_click.modifier = &ImGui::GetIO().KeyCtrl
CIMGUI_API bool* getIOKeyCtrlPtr()
{
    return &ImGui::GetIO().KeyCtrl;
}
